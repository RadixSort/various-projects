package org.jpacman.undo;

<<<<<<< HEAD
import org.jpacman.framework.ui.ButtonPanel;
import org.jpacman.framework.ui.MainUI;
import org.jpacman.framework.ui.PacmanInteraction;
import org.jpacman.framework.factory.DefaultGameFactory;
import org.jpacman.framework.factory.FactoryException;
import org.jpacman.framework.factory.IGameFactory;
import org.jpacman.framework.model.Direction;
import org.jpacman.framework.model.Game;
import org.jpacman.framework.model.Ghost;
=======
import org.jpacman.framework.factory.FactoryException;
>>>>>>> 9c3712dd865f42ce11dbd166cdf15a05547bbea4
import org.jpacman.framework.model.IGameInteractor;
import org.jpacman.framework.ui.MainUI;

@SuppressWarnings("serial")
public class UndoablePacman extends MainUI {
<<<<<<< HEAD
	
	private UndoButtonPanel buttonPanel;
	
	public static void undo() {
		
		
=======

	public static void undo() {

>>>>>>> 9c3712dd865f42ce11dbd166cdf15a05547bbea4
	}

	public UndoablePacman() {

		super();
		UndoableDefaultGameFactory fact = new UndoableDefaultGameFactory();
		setupFactory();		
	}

	private void setupFactory() {
		UndoableDefaultGameFactory fact = new UndoableDefaultGameFactory();
		super.withFactory(fact);
	}

	@Override
	public IGameInteractor getGame() {
		return super.getGame();
	}
<<<<<<< HEAD
	
	@Override
	protected ButtonPanel createButtonPanel(PacmanInteraction pi) {
    	assert pi != null;
    	if (buttonPanel == null) {
    		buttonPanel = new UndoButtonPanel();
    		super.withButtonPanel(buttonPanel);
    	}
    	return buttonPanel
     		.withParent(this)
    		.withInteractor(pi);
    }
	
	public static void main(String[] args) throws FactoryException {		
		new UndoablePacman().main();
	}
	
	
=======

	/**
	 * Main starting point of the JPacman game.
	 * 
	 * @param arg
	 *            Ignored
	 * @throws FactoryException
	 *             If reading game map fails.
	 */
	public static void main(String[] args) throws FactoryException {
		new UndoablePacman().main();
	}

>>>>>>> 9c3712dd865f42ce11dbd166cdf15a05547bbea4
}
