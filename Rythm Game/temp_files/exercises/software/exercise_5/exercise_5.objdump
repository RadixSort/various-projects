
exercise_5.elf:     file format elf32-littlenios2
exercise_5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000086c8 memsz 0x000086c8 flags r-x
    LOAD off    0x000096e8 vaddr 0x010086e8 paddr 0x0100a1f8 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x0000bd08 vaddr 0x0100bd08 paddr 0x0100bd08 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008314  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000220  010084c8  010084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  010086e8  0100a1f8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0100bd08  0100bd08  0000bd08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a58  00000000  00000000  0000b220  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000131c  00000000  00000000  0000bc78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001e984  00000000  00000000  0000cf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005d55  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f237  00000000  00000000  0003166d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000155c  00000000  00000000  000408a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c16  00000000  00000000  00041e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000053af  00000000  00000000  00043a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00048dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000540  00000000  00000000  00048dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004c02a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004c02d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004c039  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004c03a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004c03b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004c046  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004c051  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0004c05c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000031  00000000  00000000  0004c067  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0008e304  00000000  00000000  0004c098  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
010084c8 l    d  .rodata	00000000 .rodata
010086e8 l    d  .rwdata	00000000 .rwdata
0100bd08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01000364 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
010086e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001f4c l     F .text	00000058 std
01002058 l     F .text	00000008 __fp_lock
01002060 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
010031b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01003214 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01003318 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01003658 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01003738 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01003898 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003ac8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100a1e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
01003f24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01009098 l     O .rwdata	00001060 jtag_uart_0
0100a0f8 l     O .rwdata	0000002c character_lcd_0
0100a124 l     O .rwdata	00000048 char_drawer
0100a16c l     O .rwdata	00000054 pixel_buffer_dma
010042dc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100451c l     F .text	00000228 altera_avalon_jtag_uart_irq
01004744 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01004dc0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01006eb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100735c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010074ac l     F .text	000000f8 alt_file_locked
01007730 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01007c50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01008464 l     F .text	00000040 alt_sim_halt
01002df8 g     F .text	00000070 _isatty_r
010038f8 g     F .text	0000006c alt_main
01006384 g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
010004b0 g     F .text	000000a0 _puts_r
0100bd68 g     O .bss	00000100 alt_irq
01002e68 g     F .text	00000078 _lseek_r
0100a1f8 g       *ABS*	00000000 __flash_rwdata_start
01004f3c g     F .text	00000034 alt_up_character_lcd_send_cmd
01000b64 g     F .text	00000074 _gettimeofday_r
0100bff8 g       *ABS*	00000000 __alt_heap_start
01002a34 g     F .text	00000068 __sseek
01001fb4 g     F .text	000000a4 __sinit
01005584 g     F .text	00000114 alt_up_char_buffer_string
010020b4 g     F .text	0000009c __sfmoreglue
01003984 g     F .text	00000020 __malloc_unlock
010054b4 g     F .text	000000d0 alt_up_char_buffer_draw
0100149c g     F .text	000000e0 memmove
010020a4 g     F .text	00000010 _cleanup
01005734 g     F .text	000001ac alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
01004ec0 g     F .text	0000007c get_DDRAM_addr
010056f4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002d84 g     F .text	00000074 _fstat_r
0100bd08 g     O .bss	00000004 errno
0100bd2c g     O .bss	00000004 alt_argv
010121c0 g       *ABS*	00000000 _gp
010058e0 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
01008f18 g     O .rwdata	00000180 alt_fd_list
01006fe0 g     F .text	00000094 alt_find_dev
010013fc g     F .text	000000a0 memcpy
010050d4 g     F .text	0000004c alt_up_character_lcd_write_fd
01005698 g     F .text	0000005c alt_up_char_buffer_clear
01002098 g     F .text	0000000c _cleanup_r
01007434 g     F .text	00000078 alt_io_redirect
010084c8 g       *ABS*	00000000 __DTOR_END__
01000550 g     F .text	00000014 puts
01005990 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0100495c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010004a0 g     F .text	00000008 __udivsi3
01003594 g     F .text	000000c4 isatty
0100602c g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
0100bd18 g     O .bss	00000008 alt_timezone
0100bd0c g     O .bss	00000004 __malloc_top_pad
010006c8 g     F .text	0000049c __sfvwrite_r
01001b70 g     F .text	00000070 _sbrk_r
01006820 g     F .text	000000d8 helper_plot_pixel
01002ee0 g     F .text	00000078 _read_r
0100a1e0 g     O .rwdata	00000004 alt_max_fd
01002c60 g     F .text	00000110 _fclose_r
01001f18 g     F .text	00000034 fflush
0100bd10 g     O .bss	00000004 __malloc_max_sbrked_mem
010059c4 g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
01007e04 g     F .text	00000660 __umoddi3
010037a4 g     F .text	000000f4 lseek
0100a1c4 g     O .rwdata	00000004 _global_impure_ptr
0100157c g     F .text	000005f4 _realloc_r
0100bff8 g       *ABS*	00000000 __bss_end
01007264 g     F .text	000000f8 alt_iic_isr_register
01005b30 g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
01003cf4 g     F .text	0000010c alt_tick
01002080 g     F .text	00000018 __fp_lock_all
0100721c g     F .text	00000048 alt_ic_irq_enabled
01003c5c g     F .text	00000098 alt_alarm_stop
0100bd3c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01008ef0 g     O .rwdata	00000028 alt_dev_null
010053bc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01006de8 g     F .text	0000001c alt_dcache_flush_all
0100675c g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0100a1f8 g       *ABS*	00000000 __ram_rwdata_end
0100a1d8 g     O .rwdata	00000008 alt_dev_list
01003e00 g     F .text	00000124 write
010068f8 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
010086e8 g       *ABS*	00000000 __ram_rodata_end
01003240 g     F .text	000000d8 fstat
010004a8 g     F .text	00000008 __umodsi3
0100bff8 g       *ABS*	00000000 end
010053f0 g     F .text	00000084 alt_up_char_buffer_init
0100445c g     F .text	000000c0 altera_avalon_jtag_uart_init
010084c4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01004e30 g     F .text	00000090 alt_avalon_timer_sc_init
01004b80 g     F .text	00000240 altera_avalon_jtag_uart_write
01001fa4 g     F .text	00000004 __sfp_lock_acquire
01001318 g     F .text	000000e4 memchr
01004fe4 g     F .text	00000078 alt_up_character_lcd_write
0100236c g     F .text	00000314 _free_r
01007c54 g     F .text	000001b0 __call_exitprocs
0100a1cc g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
0100bd34 g     O .bss	00000004 _alt_tick_rate
01000580 g     F .text	00000078 rand
0100bd38 g     O .bss	00000004 _alt_nticks
010039a4 g     F .text	00000124 read
01003fb8 g     F .text	00000324 alt_sys_init
01005248 g     F .text	000000b0 alt_up_character_lcd_shift_display
01007b1c g     F .text	00000134 __register_exitproc
010052f8 g     F .text	00000090 alt_up_character_lcd_erase_pos
010047f4 g     F .text	00000074 altera_avalon_jtag_uart_close
0100307c g     F .text	00000038 __mulsi3
010086e8 g       *ABS*	00000000 __ram_rwdata_start
010084c8 g       *ABS*	00000000 __ram_rodata_start
0100bd40 g     O .bss	00000028 __malloc_current_mallinfo
01004314 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
010078d0 g     F .text	000000d0 alt_get_fd
01002bf0 g     F .text	00000070 _close_r
010079ec g     F .text	00000074 memcmp
010043c4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100bff8 g       *ABS*	00000000 __alt_stack_base
0100440c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01001be0 g     F .text	0000013c __swsetup_r
01002150 g     F .text	000000f0 __sfp
01008ae8 g     O .rwdata	00000408 __malloc_av_
01001fb0 g     F .text	00000004 __sinit_lock_release
01002b18 g     F .text	00000060 __sread
010077b0 g     F .text	00000120 alt_find_file
01006e04 g     F .text	000000b4 alt_dev_llist_insert
01003964 g     F .text	00000020 __malloc_lock
01003ba0 g     F .text	000000bc sbrk
01001d1c g     F .text	000001fc _fflush_r
01003378 g     F .text	0000021c gettimeofday
0100bd08 g       *ABS*	00000000 __bss_start
01002994 g     F .text	00000098 memset
010001f0 g     F .text	00000174 main
0100bd30 g     O .bss	00000004 alt_envp
0100bd14 g     O .bss	00000004 __malloc_max_total_mem
01005938 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
01005474 g     F .text	00000040 alt_up_char_buffer_open_dev
0100436c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01000564 g     F .text	0000001c srand
01005198 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01002a2c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002d70 g     F .text	00000014 fclose
0100be68 g     O .bss	00000190 _atexit0
01000bd8 g     F .text	00000740 _malloc_r
0100066c g     F .text	0000005c time
0100a1e4 g     O .rwdata	00000004 alt_errno
01002748 g     F .text	000000b8 _fwalk
010003e0 g     F .text	00000060 __divsi3
01004fa4 g     F .text	00000040 alt_up_character_lcd_open_dev
01002240 g     F .text	0000012c _malloc_trim_r
010084c8 g       *ABS*	00000000 __CTOR_END__
01004f70 g     F .text	00000034 alt_up_character_lcd_init
01007a60 g     F .text	000000bc strcmp
010084c8 g       *ABS*	00000000 __flash_rodata_start
010084c8 g       *ABS*	00000000 __DTOR_LIST__
01003f84 g     F .text	00000034 alt_irq_init
01003b28 g     F .text	00000078 alt_release_fd
01005388 g     F .text	00000034 alt_up_character_lcd_cursor_off
010085e8 g     O .rodata	00000100 __clz_tab
010079a0 g     F .text	00000014 atexit
01002b78 g     F .text	00000078 _write_r
0100a1c0 g     O .rwdata	00000004 _impure_ptr
0100bd28 g     O .bss	00000004 alt_argc
01006f7c g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01002068 g     F .text	00000018 __fp_unlock_all
0100a1d0 g     O .rwdata	00000008 alt_fs_list
0100bd20 g     O .bss	00000008 alt_resettime
01000020 g       *ABS*	00000000 __ram_exceptions_start
01007090 g     F .text	00000050 alt_ic_isr_register
0100a1f8 g       *ABS*	00000000 _edata
0100bff8 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01004868 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100717c g     F .text	000000a0 alt_ic_irq_disable
01002a9c g     F .text	0000007c __swrite
0100a1c8 g     O .rwdata	00000004 __malloc_trim_threshold
01007790 g     F .text	00000020 altera_nios2_qsys_irq_init
010079b4 g     F .text	00000038 exit
01002680 g     F .text	000000c8 _fwalk_reent
01000440 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001fa8 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100505c g     F .text	00000078 alt_up_character_lcd_string
010084a4 g     F .text	00000020 _exit
01006c94 g     F .text	00000154 alt_alarm_start
01002f58 g     F .text	00000124 __muldi3
01002800 g     F .text	00000194 __smakebuf_r
010005f8 g     F .text	00000074 strlen
010075a4 g     F .text	0000018c open
01007074 g     F .text	0000001c alt_icache_flush_all
01005120 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100a1f4 g     O .rwdata	00000004 alt_priority_mask
010070e0 g     F .text	0000009c alt_ic_irq_enable
0100a1ec g     O .rwdata	00000008 alt_alarm_list
01006f18 g     F .text	00000064 _do_ctors
010030b4 g     F .text	00000100 close
010036b8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001fac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18ef5a04 	addi	r3,r3,-17048
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18ef5a04 	addi	r3,r3,-17048
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6887014 	ori	gp,gp,8640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001c8:	10af4214 	ori	r2,r2,48392

    movhi r3, %hi(__bss_end)
 10001cc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001d0:	18effe14 	ori	r3,r3,49144

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	10036b80 	call	10036b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	10038f80 	call	10038f8 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include <time.h>
#define drawer_base (volatile int *) 0x00002100

int main()
{
 10001f0:	defff504 	addi	sp,sp,-44
 10001f4:	dfc00a15 	stw	ra,40(sp)
 10001f8:	df000915 	stw	fp,36(sp)
 10001fc:	df000904 	addi	fp,sp,36
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
 1000200:	01004074 	movhi	r4,257
 1000204:	21213204 	addi	r4,r4,-31544
 1000208:	10056f40 	call	10056f4 <alt_up_pixel_buffer_dma_open_dev>
 100020c:	e0bfff15 	stw	r2,-4(fp)
	if (pixel_buffer == 0) {
 1000210:	e0bfff17 	ldw	r2,-4(fp)
 1000214:	1004c03a 	cmpne	r2,r2,zero
 1000218:	1000031e 	bne	r2,zero,1000228 <main+0x38>
		printf("error initializing pixel buffer (check name in alt_up_pixel_buffer_dma_open_dev)\n");
 100021c:	01004074 	movhi	r4,257
 1000220:	21213804 	addi	r4,r4,-31520
 1000224:	10005500 	call	1000550 <puts>
	}
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
 1000228:	e13fff17 	ldw	r4,-4(fp)
 100022c:	01400234 	movhi	r5,8
 1000230:	10058e00 	call	10058e0 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000234:	e13fff17 	ldw	r4,-4(fp)
 1000238:	10059380 	call	1005938 <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 100023c:	e13fff17 	ldw	r4,-4(fp)
 1000240:	10059900 	call	1005990 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000244:	1004c03a 	cmpne	r2,r2,zero
 1000248:	103ffc1e 	bne	r2,zero,100023c <main+0x4c>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 100024c:	e13fff17 	ldw	r4,-4(fp)
 1000250:	000b883a 	mov	r5,zero
 1000254:	10059c40 	call	10059c4 <alt_up_pixel_buffer_dma_clear_screen>
	srand(time(NULL));
 1000258:	0009883a 	mov	r4,zero
 100025c:	100066c0 	call	100066c <time>
 1000260:	1009883a 	mov	r4,r2
 1000264:	10005640 	call	1000564 <srand>
 1000268:	00000006 	br	100026c <main+0x7c>
 	}
 	*/

	while (1) {

		int x_one = rand()%320;
 100026c:	10005800 	call	1000580 <rand>
 1000270:	1009883a 	mov	r4,r2
 1000274:	01405004 	movi	r5,320
 1000278:	10004400 	call	1000440 <__modsi3>
 100027c:	e0bffe15 	stw	r2,-8(fp)
		int x_two = x_one + 10;
 1000280:	e0bffe17 	ldw	r2,-8(fp)
 1000284:	10800284 	addi	r2,r2,10
 1000288:	e0bffd15 	stw	r2,-12(fp)
		int y_one = rand()%240;
 100028c:	10005800 	call	1000580 <rand>
 1000290:	1009883a 	mov	r4,r2
 1000294:	01403c04 	movi	r5,240
 1000298:	10004400 	call	1000440 <__modsi3>
 100029c:	e0bffc15 	stw	r2,-16(fp)
		int y_two = y_one + 10;
 10002a0:	e0bffc17 	ldw	r2,-16(fp)
 10002a4:	10800284 	addi	r2,r2,10
 10002a8:	e0bffb15 	stw	r2,-20(fp)

		int hw = 0;
 10002ac:	e03ffa15 	stw	zero,-24(fp)

		if (hw == 0) {
 10002b0:	e0bffa17 	ldw	r2,-24(fp)
 10002b4:	1004c03a 	cmpne	r2,r2,zero
 10002b8:	10000f1e 	bne	r2,zero,10002f8 <main+0x108>
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x_one,y_one,x_two, y_two,rand()%65535,0);
 10002bc:	10005800 	call	1000580 <rand>
 10002c0:	1009883a 	mov	r4,r2
 10002c4:	017fffd4 	movui	r5,65535
 10002c8:	10004400 	call	1000440 <__modsi3>
 10002cc:	1007883a 	mov	r3,r2
 10002d0:	e0bffb17 	ldw	r2,-20(fp)
 10002d4:	d8800015 	stw	r2,0(sp)
 10002d8:	d8c00115 	stw	r3,4(sp)
 10002dc:	d8000215 	stw	zero,8(sp)
 10002e0:	e13fff17 	ldw	r4,-4(fp)
 10002e4:	e17ffe17 	ldw	r5,-8(fp)
 10002e8:	e1bffc17 	ldw	r6,-16(fp)
 10002ec:	e1fffd17 	ldw	r7,-12(fp)
 10002f0:	1005b300 	call	1005b30 <alt_up_pixel_buffer_dma_draw_box>
 10002f4:	003fdd06 	br	100026c <main+0x7c>
		} else {
			IOWR_32DIRECT(drawer_base,0,x_one); // Set x1
 10002f8:	00c84004 	movi	r3,8448
 10002fc:	e0bffe17 	ldw	r2,-8(fp)
 1000300:	18800035 	stwio	r2,0(r3)
			IOWR_32DIRECT(drawer_base,4,y_one); // Set y1
 1000304:	00c84104 	movi	r3,8452
 1000308:	e0bffc17 	ldw	r2,-16(fp)
 100030c:	18800035 	stwio	r2,0(r3)
			IOWR_32DIRECT(drawer_base,8,x_two); // Set x2
 1000310:	00c84204 	movi	r3,8456
 1000314:	e0bffd17 	ldw	r2,-12(fp)
 1000318:	18800035 	stwio	r2,0(r3)
			IOWR_32DIRECT(drawer_base,12,y_two); // Set y2
 100031c:	00c84304 	movi	r3,8460
 1000320:	e0bffb17 	ldw	r2,-20(fp)
 1000324:	18800035 	stwio	r2,0(r3)
			IOWR_32DIRECT(drawer_base,16,rand()%65535);  // Set colour
 1000328:	10005800 	call	1000580 <rand>
 100032c:	1009883a 	mov	r4,r2
 1000330:	017fffd4 	movui	r5,65535
 1000334:	10004400 	call	1000440 <__modsi3>
 1000338:	1007883a 	mov	r3,r2
 100033c:	00884404 	movi	r2,8464
 1000340:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(drawer_base,20,1);  // Start drawing
 1000344:	00c84504 	movi	r3,8468
 1000348:	00800044 	movi	r2,1
 100034c:	18800035 	stwio	r2,0(r3)
			while(IORD_32DIRECT(drawer_base,20)==0); // wait until done
 1000350:	00884504 	movi	r2,8468
 1000354:	10800037 	ldwio	r2,0(r2)
 1000358:	1005003a 	cmpeq	r2,r2,zero
 100035c:	103ffc1e 	bne	r2,zero,1000350 <main+0x160>
		}
	}
 1000360:	003fc206 	br	100026c <main+0x7c>

01000364 <udivmodsi4>:
 1000364:	29001b2e 	bgeu	r5,r4,10003d4 <udivmodsi4+0x70>
 1000368:	28001a16 	blt	r5,zero,10003d4 <udivmodsi4+0x70>
 100036c:	00800044 	movi	r2,1
 1000370:	0007883a 	mov	r3,zero
 1000374:	01c007c4 	movi	r7,31
 1000378:	00000306 	br	1000388 <udivmodsi4+0x24>
 100037c:	19c01326 	beq	r3,r7,10003cc <udivmodsi4+0x68>
 1000380:	18c00044 	addi	r3,r3,1
 1000384:	28000416 	blt	r5,zero,1000398 <udivmodsi4+0x34>
 1000388:	294b883a 	add	r5,r5,r5
 100038c:	1085883a 	add	r2,r2,r2
 1000390:	293ffa36 	bltu	r5,r4,100037c <udivmodsi4+0x18>
 1000394:	10000d26 	beq	r2,zero,10003cc <udivmodsi4+0x68>
 1000398:	0007883a 	mov	r3,zero
 100039c:	21400236 	bltu	r4,r5,10003a8 <udivmodsi4+0x44>
 10003a0:	2149c83a 	sub	r4,r4,r5
 10003a4:	1886b03a 	or	r3,r3,r2
 10003a8:	1004d07a 	srli	r2,r2,1
 10003ac:	280ad07a 	srli	r5,r5,1
 10003b0:	103ffa1e 	bne	r2,zero,100039c <udivmodsi4+0x38>
 10003b4:	30000226 	beq	r6,zero,10003c0 <udivmodsi4+0x5c>
 10003b8:	2005883a 	mov	r2,r4
 10003bc:	f800283a 	ret
 10003c0:	1809883a 	mov	r4,r3
 10003c4:	2005883a 	mov	r2,r4
 10003c8:	f800283a 	ret
 10003cc:	0007883a 	mov	r3,zero
 10003d0:	003ff806 	br	10003b4 <udivmodsi4+0x50>
 10003d4:	00800044 	movi	r2,1
 10003d8:	0007883a 	mov	r3,zero
 10003dc:	003fef06 	br	100039c <udivmodsi4+0x38>

010003e0 <__divsi3>:
 10003e0:	defffe04 	addi	sp,sp,-8
 10003e4:	dc000015 	stw	r16,0(sp)
 10003e8:	dfc00115 	stw	ra,4(sp)
 10003ec:	0021883a 	mov	r16,zero
 10003f0:	20000c16 	blt	r4,zero,1000424 <__divsi3+0x44>
 10003f4:	000d883a 	mov	r6,zero
 10003f8:	28000e16 	blt	r5,zero,1000434 <__divsi3+0x54>
 10003fc:	10003640 	call	1000364 <udivmodsi4>
 1000400:	1007883a 	mov	r3,r2
 1000404:	8005003a 	cmpeq	r2,r16,zero
 1000408:	1000011e 	bne	r2,zero,1000410 <__divsi3+0x30>
 100040c:	00c7c83a 	sub	r3,zero,r3
 1000410:	1805883a 	mov	r2,r3
 1000414:	dfc00117 	ldw	ra,4(sp)
 1000418:	dc000017 	ldw	r16,0(sp)
 100041c:	dec00204 	addi	sp,sp,8
 1000420:	f800283a 	ret
 1000424:	0109c83a 	sub	r4,zero,r4
 1000428:	04000044 	movi	r16,1
 100042c:	000d883a 	mov	r6,zero
 1000430:	283ff20e 	bge	r5,zero,10003fc <__divsi3+0x1c>
 1000434:	014bc83a 	sub	r5,zero,r5
 1000438:	8021003a 	cmpeq	r16,r16,zero
 100043c:	003fef06 	br	10003fc <__divsi3+0x1c>

01000440 <__modsi3>:
 1000440:	deffff04 	addi	sp,sp,-4
 1000444:	dfc00015 	stw	ra,0(sp)
 1000448:	01800044 	movi	r6,1
 100044c:	2807883a 	mov	r3,r5
 1000450:	20000416 	blt	r4,zero,1000464 <__modsi3+0x24>
 1000454:	28000c16 	blt	r5,zero,1000488 <__modsi3+0x48>
 1000458:	dfc00017 	ldw	ra,0(sp)
 100045c:	dec00104 	addi	sp,sp,4
 1000460:	10003641 	jmpi	1000364 <udivmodsi4>
 1000464:	0109c83a 	sub	r4,zero,r4
 1000468:	28000b16 	blt	r5,zero,1000498 <__modsi3+0x58>
 100046c:	180b883a 	mov	r5,r3
 1000470:	01800044 	movi	r6,1
 1000474:	10003640 	call	1000364 <udivmodsi4>
 1000478:	0085c83a 	sub	r2,zero,r2
 100047c:	dfc00017 	ldw	ra,0(sp)
 1000480:	dec00104 	addi	sp,sp,4
 1000484:	f800283a 	ret
 1000488:	014bc83a 	sub	r5,zero,r5
 100048c:	dfc00017 	ldw	ra,0(sp)
 1000490:	dec00104 	addi	sp,sp,4
 1000494:	10003641 	jmpi	1000364 <udivmodsi4>
 1000498:	0147c83a 	sub	r3,zero,r5
 100049c:	003ff306 	br	100046c <__modsi3+0x2c>

010004a0 <__udivsi3>:
 10004a0:	000d883a 	mov	r6,zero
 10004a4:	10003641 	jmpi	1000364 <udivmodsi4>

010004a8 <__umodsi3>:
 10004a8:	01800044 	movi	r6,1
 10004ac:	10003641 	jmpi	1000364 <udivmodsi4>

010004b0 <_puts_r>:
 10004b0:	defff604 	addi	sp,sp,-40
 10004b4:	dc400715 	stw	r17,28(sp)
 10004b8:	2023883a 	mov	r17,r4
 10004bc:	2809883a 	mov	r4,r5
 10004c0:	dfc00915 	stw	ra,36(sp)
 10004c4:	dcc00815 	stw	r19,32(sp)
 10004c8:	2827883a 	mov	r19,r5
 10004cc:	10005f80 	call	10005f8 <strlen>
 10004d0:	89400217 	ldw	r5,8(r17)
 10004d4:	00c04074 	movhi	r3,257
 10004d8:	18e14d04 	addi	r3,r3,-31436
 10004dc:	01c00044 	movi	r7,1
 10004e0:	12000044 	addi	r8,r2,1
 10004e4:	d8c00515 	stw	r3,20(sp)
 10004e8:	d9c00615 	stw	r7,24(sp)
 10004ec:	d8c00304 	addi	r3,sp,12
 10004f0:	01c00084 	movi	r7,2
 10004f4:	8809883a 	mov	r4,r17
 10004f8:	d80d883a 	mov	r6,sp
 10004fc:	d8c00015 	stw	r3,0(sp)
 1000500:	dcc00315 	stw	r19,12(sp)
 1000504:	da000215 	stw	r8,8(sp)
 1000508:	d9c00115 	stw	r7,4(sp)
 100050c:	d8800415 	stw	r2,16(sp)
 1000510:	10006c80 	call	10006c8 <__sfvwrite_r>
 1000514:	00ffffc4 	movi	r3,-1
 1000518:	10000626 	beq	r2,zero,1000534 <_puts_r+0x84>
 100051c:	1805883a 	mov	r2,r3
 1000520:	dfc00917 	ldw	ra,36(sp)
 1000524:	dcc00817 	ldw	r19,32(sp)
 1000528:	dc400717 	ldw	r17,28(sp)
 100052c:	dec00a04 	addi	sp,sp,40
 1000530:	f800283a 	ret
 1000534:	00c00284 	movi	r3,10
 1000538:	1805883a 	mov	r2,r3
 100053c:	dfc00917 	ldw	ra,36(sp)
 1000540:	dcc00817 	ldw	r19,32(sp)
 1000544:	dc400717 	ldw	r17,28(sp)
 1000548:	dec00a04 	addi	sp,sp,40
 100054c:	f800283a 	ret

01000550 <puts>:
 1000550:	00804074 	movhi	r2,257
 1000554:	10a87004 	addi	r2,r2,-24128
 1000558:	200b883a 	mov	r5,r4
 100055c:	11000017 	ldw	r4,0(r2)
 1000560:	10004b01 	jmpi	10004b0 <_puts_r>

01000564 <srand>:
 1000564:	00804074 	movhi	r2,257
 1000568:	10a87004 	addi	r2,r2,-24128
 100056c:	11400017 	ldw	r5,0(r2)
 1000570:	0007883a 	mov	r3,zero
 1000574:	28c02a15 	stw	r3,168(r5)
 1000578:	29002915 	stw	r4,164(r5)
 100057c:	f800283a 	ret

01000580 <rand>:
 1000580:	defffe04 	addi	sp,sp,-8
 1000584:	00804074 	movhi	r2,257
 1000588:	10a87004 	addi	r2,r2,-24128
 100058c:	dc000015 	stw	r16,0(sp)
 1000590:	14000017 	ldw	r16,0(r2)
 1000594:	dfc00115 	stw	ra,4(sp)
 1000598:	00932574 	movhi	r2,19605
 100059c:	109fcb44 	addi	r2,r2,32557
 10005a0:	82002917 	ldw	r8,164(r16)
 10005a4:	82402a17 	ldw	r9,168(r16)
 10005a8:	00d614b4 	movhi	r3,22610
 10005ac:	18fd0b44 	addi	r3,r3,-3027
 10005b0:	4009883a 	mov	r4,r8
 10005b4:	180f883a 	mov	r7,r3
 10005b8:	100d883a 	mov	r6,r2
 10005bc:	480b883a 	mov	r5,r9
 10005c0:	1002f580 	call	1002f58 <__muldi3>
 10005c4:	02000044 	movi	r8,1
 10005c8:	1209883a 	add	r4,r2,r8
 10005cc:	2095803a 	cmpltu	r10,r4,r2
 10005d0:	50d5883a 	add	r10,r10,r3
 10005d4:	81002915 	stw	r4,164(r16)
 10005d8:	01200034 	movhi	r4,32768
 10005dc:	213fffc4 	addi	r4,r4,-1
 10005e0:	2284703a 	and	r2,r4,r10
 10005e4:	82802a15 	stw	r10,168(r16)
 10005e8:	dfc00117 	ldw	ra,4(sp)
 10005ec:	dc000017 	ldw	r16,0(sp)
 10005f0:	dec00204 	addi	sp,sp,8
 10005f4:	f800283a 	ret

010005f8 <strlen>:
 10005f8:	208000cc 	andi	r2,r4,3
 10005fc:	2011883a 	mov	r8,r4
 1000600:	1000161e 	bne	r2,zero,100065c <strlen+0x64>
 1000604:	20c00017 	ldw	r3,0(r4)
 1000608:	017fbff4 	movhi	r5,65279
 100060c:	297fbfc4 	addi	r5,r5,-257
 1000610:	01e02074 	movhi	r7,32897
 1000614:	39e02004 	addi	r7,r7,-32640
 1000618:	1945883a 	add	r2,r3,r5
 100061c:	11c4703a 	and	r2,r2,r7
 1000620:	00c6303a 	nor	r3,zero,r3
 1000624:	1886703a 	and	r3,r3,r2
 1000628:	18000c1e 	bne	r3,zero,100065c <strlen+0x64>
 100062c:	280d883a 	mov	r6,r5
 1000630:	380b883a 	mov	r5,r7
 1000634:	21000104 	addi	r4,r4,4
 1000638:	20800017 	ldw	r2,0(r4)
 100063c:	1187883a 	add	r3,r2,r6
 1000640:	1946703a 	and	r3,r3,r5
 1000644:	0084303a 	nor	r2,zero,r2
 1000648:	10c4703a 	and	r2,r2,r3
 100064c:	103ff926 	beq	r2,zero,1000634 <strlen+0x3c>
 1000650:	20800007 	ldb	r2,0(r4)
 1000654:	10000326 	beq	r2,zero,1000664 <strlen+0x6c>
 1000658:	21000044 	addi	r4,r4,1
 100065c:	20800007 	ldb	r2,0(r4)
 1000660:	103ffd1e 	bne	r2,zero,1000658 <strlen+0x60>
 1000664:	2205c83a 	sub	r2,r4,r8
 1000668:	f800283a 	ret

0100066c <time>:
 100066c:	defffc04 	addi	sp,sp,-16
 1000670:	00804074 	movhi	r2,257
 1000674:	10a87004 	addi	r2,r2,-24128
 1000678:	dc000215 	stw	r16,8(sp)
 100067c:	2021883a 	mov	r16,r4
 1000680:	11000017 	ldw	r4,0(r2)
 1000684:	d80b883a 	mov	r5,sp
 1000688:	000d883a 	mov	r6,zero
 100068c:	dfc00315 	stw	ra,12(sp)
 1000690:	1000b640 	call	1000b64 <_gettimeofday_r>
 1000694:	00ffffc4 	movi	r3,-1
 1000698:	10000416 	blt	r2,zero,10006ac <time+0x40>
 100069c:	80000826 	beq	r16,zero,10006c0 <time+0x54>
 10006a0:	d8800017 	ldw	r2,0(sp)
 10006a4:	80800015 	stw	r2,0(r16)
 10006a8:	1007883a 	mov	r3,r2
 10006ac:	1805883a 	mov	r2,r3
 10006b0:	dfc00317 	ldw	ra,12(sp)
 10006b4:	dc000217 	ldw	r16,8(sp)
 10006b8:	dec00404 	addi	sp,sp,16
 10006bc:	f800283a 	ret
 10006c0:	d8800017 	ldw	r2,0(sp)
 10006c4:	003ff806 	br	10006a8 <time+0x3c>

010006c8 <__sfvwrite_r>:
 10006c8:	30800217 	ldw	r2,8(r6)
 10006cc:	defff504 	addi	sp,sp,-44
 10006d0:	df000915 	stw	fp,36(sp)
 10006d4:	dd800715 	stw	r22,28(sp)
 10006d8:	dc800315 	stw	r18,12(sp)
 10006dc:	dfc00a15 	stw	ra,40(sp)
 10006e0:	ddc00815 	stw	r23,32(sp)
 10006e4:	dd400615 	stw	r21,24(sp)
 10006e8:	dd000515 	stw	r20,20(sp)
 10006ec:	dcc00415 	stw	r19,16(sp)
 10006f0:	dc400215 	stw	r17,8(sp)
 10006f4:	dc000115 	stw	r16,4(sp)
 10006f8:	302d883a 	mov	r22,r6
 10006fc:	2039883a 	mov	fp,r4
 1000700:	2825883a 	mov	r18,r5
 1000704:	10001c26 	beq	r2,zero,1000778 <__sfvwrite_r+0xb0>
 1000708:	29c0030b 	ldhu	r7,12(r5)
 100070c:	3880020c 	andi	r2,r7,8
 1000710:	10002726 	beq	r2,zero,10007b0 <__sfvwrite_r+0xe8>
 1000714:	28800417 	ldw	r2,16(r5)
 1000718:	10002526 	beq	r2,zero,10007b0 <__sfvwrite_r+0xe8>
 100071c:	3880008c 	andi	r2,r7,2
 1000720:	b5400017 	ldw	r21,0(r22)
 1000724:	10002826 	beq	r2,zero,10007c8 <__sfvwrite_r+0x100>
 1000728:	0021883a 	mov	r16,zero
 100072c:	0023883a 	mov	r17,zero
 1000730:	880d883a 	mov	r6,r17
 1000734:	e009883a 	mov	r4,fp
 1000738:	00810004 	movi	r2,1024
 100073c:	80006e26 	beq	r16,zero,10008f8 <__sfvwrite_r+0x230>
 1000740:	800f883a 	mov	r7,r16
 1000744:	91400717 	ldw	r5,28(r18)
 1000748:	1400012e 	bgeu	r2,r16,1000750 <__sfvwrite_r+0x88>
 100074c:	100f883a 	mov	r7,r2
 1000750:	90c00917 	ldw	r3,36(r18)
 1000754:	183ee83a 	callr	r3
 1000758:	1007883a 	mov	r3,r2
 100075c:	80a1c83a 	sub	r16,r16,r2
 1000760:	88a3883a 	add	r17,r17,r2
 1000764:	00806d0e 	bge	zero,r2,100091c <__sfvwrite_r+0x254>
 1000768:	b0800217 	ldw	r2,8(r22)
 100076c:	10c5c83a 	sub	r2,r2,r3
 1000770:	b0800215 	stw	r2,8(r22)
 1000774:	103fee1e 	bne	r2,zero,1000730 <__sfvwrite_r+0x68>
 1000778:	0009883a 	mov	r4,zero
 100077c:	2005883a 	mov	r2,r4
 1000780:	dfc00a17 	ldw	ra,40(sp)
 1000784:	df000917 	ldw	fp,36(sp)
 1000788:	ddc00817 	ldw	r23,32(sp)
 100078c:	dd800717 	ldw	r22,28(sp)
 1000790:	dd400617 	ldw	r21,24(sp)
 1000794:	dd000517 	ldw	r20,20(sp)
 1000798:	dcc00417 	ldw	r19,16(sp)
 100079c:	dc800317 	ldw	r18,12(sp)
 10007a0:	dc400217 	ldw	r17,8(sp)
 10007a4:	dc000117 	ldw	r16,4(sp)
 10007a8:	dec00b04 	addi	sp,sp,44
 10007ac:	f800283a 	ret
 10007b0:	1001be00 	call	1001be0 <__swsetup_r>
 10007b4:	1000e41e 	bne	r2,zero,1000b48 <__sfvwrite_r+0x480>
 10007b8:	91c0030b 	ldhu	r7,12(r18)
 10007bc:	b5400017 	ldw	r21,0(r22)
 10007c0:	3880008c 	andi	r2,r7,2
 10007c4:	103fd81e 	bne	r2,zero,1000728 <__sfvwrite_r+0x60>
 10007c8:	3880004c 	andi	r2,r7,1
 10007cc:	1005003a 	cmpeq	r2,r2,zero
 10007d0:	10005726 	beq	r2,zero,1000930 <__sfvwrite_r+0x268>
 10007d4:	0029883a 	mov	r20,zero
 10007d8:	002f883a 	mov	r23,zero
 10007dc:	a0004226 	beq	r20,zero,10008e8 <__sfvwrite_r+0x220>
 10007e0:	3880800c 	andi	r2,r7,512
 10007e4:	94000217 	ldw	r16,8(r18)
 10007e8:	10008b26 	beq	r2,zero,1000a18 <__sfvwrite_r+0x350>
 10007ec:	800d883a 	mov	r6,r16
 10007f0:	a400a536 	bltu	r20,r16,1000a88 <__sfvwrite_r+0x3c0>
 10007f4:	3881200c 	andi	r2,r7,1152
 10007f8:	10002726 	beq	r2,zero,1000898 <__sfvwrite_r+0x1d0>
 10007fc:	90800517 	ldw	r2,20(r18)
 1000800:	92000417 	ldw	r8,16(r18)
 1000804:	91400017 	ldw	r5,0(r18)
 1000808:	1087883a 	add	r3,r2,r2
 100080c:	1887883a 	add	r3,r3,r2
 1000810:	1808d7fa 	srli	r4,r3,31
 1000814:	2a21c83a 	sub	r16,r5,r8
 1000818:	80800044 	addi	r2,r16,1
 100081c:	20c9883a 	add	r4,r4,r3
 1000820:	2027d07a 	srai	r19,r4,1
 1000824:	a085883a 	add	r2,r20,r2
 1000828:	980d883a 	mov	r6,r19
 100082c:	9880022e 	bgeu	r19,r2,1000838 <__sfvwrite_r+0x170>
 1000830:	1027883a 	mov	r19,r2
 1000834:	100d883a 	mov	r6,r2
 1000838:	3881000c 	andi	r2,r7,1024
 100083c:	1000b826 	beq	r2,zero,1000b20 <__sfvwrite_r+0x458>
 1000840:	300b883a 	mov	r5,r6
 1000844:	e009883a 	mov	r4,fp
 1000848:	1000bd80 	call	1000bd8 <_malloc_r>
 100084c:	10003126 	beq	r2,zero,1000914 <__sfvwrite_r+0x24c>
 1000850:	91400417 	ldw	r5,16(r18)
 1000854:	1009883a 	mov	r4,r2
 1000858:	800d883a 	mov	r6,r16
 100085c:	1023883a 	mov	r17,r2
 1000860:	10013fc0 	call	10013fc <memcpy>
 1000864:	90c0030b 	ldhu	r3,12(r18)
 1000868:	00beffc4 	movi	r2,-1025
 100086c:	1886703a 	and	r3,r3,r2
 1000870:	18c02014 	ori	r3,r3,128
 1000874:	90c0030d 	sth	r3,12(r18)
 1000878:	9c07c83a 	sub	r3,r19,r16
 100087c:	8c05883a 	add	r2,r17,r16
 1000880:	a00d883a 	mov	r6,r20
 1000884:	a021883a 	mov	r16,r20
 1000888:	90800015 	stw	r2,0(r18)
 100088c:	90c00215 	stw	r3,8(r18)
 1000890:	94400415 	stw	r17,16(r18)
 1000894:	94c00515 	stw	r19,20(r18)
 1000898:	91000017 	ldw	r4,0(r18)
 100089c:	b80b883a 	mov	r5,r23
 10008a0:	a023883a 	mov	r17,r20
 10008a4:	100149c0 	call	100149c <memmove>
 10008a8:	90c00217 	ldw	r3,8(r18)
 10008ac:	90800017 	ldw	r2,0(r18)
 10008b0:	a027883a 	mov	r19,r20
 10008b4:	1c07c83a 	sub	r3,r3,r16
 10008b8:	1405883a 	add	r2,r2,r16
 10008bc:	90c00215 	stw	r3,8(r18)
 10008c0:	a021883a 	mov	r16,r20
 10008c4:	90800015 	stw	r2,0(r18)
 10008c8:	b0800217 	ldw	r2,8(r22)
 10008cc:	1405c83a 	sub	r2,r2,r16
 10008d0:	b0800215 	stw	r2,8(r22)
 10008d4:	103fa826 	beq	r2,zero,1000778 <__sfvwrite_r+0xb0>
 10008d8:	a469c83a 	sub	r20,r20,r17
 10008dc:	91c0030b 	ldhu	r7,12(r18)
 10008e0:	bcef883a 	add	r23,r23,r19
 10008e4:	a03fbe1e 	bne	r20,zero,10007e0 <__sfvwrite_r+0x118>
 10008e8:	adc00017 	ldw	r23,0(r21)
 10008ec:	ad000117 	ldw	r20,4(r21)
 10008f0:	ad400204 	addi	r21,r21,8
 10008f4:	003fb906 	br	10007dc <__sfvwrite_r+0x114>
 10008f8:	ac400017 	ldw	r17,0(r21)
 10008fc:	ac000117 	ldw	r16,4(r21)
 1000900:	ad400204 	addi	r21,r21,8
 1000904:	003f8a06 	br	1000730 <__sfvwrite_r+0x68>
 1000908:	91400417 	ldw	r5,16(r18)
 100090c:	e009883a 	mov	r4,fp
 1000910:	100236c0 	call	100236c <_free_r>
 1000914:	00800304 	movi	r2,12
 1000918:	e0800015 	stw	r2,0(fp)
 100091c:	9080030b 	ldhu	r2,12(r18)
 1000920:	013fffc4 	movi	r4,-1
 1000924:	10801014 	ori	r2,r2,64
 1000928:	9080030d 	sth	r2,12(r18)
 100092c:	003f9306 	br	100077c <__sfvwrite_r+0xb4>
 1000930:	0027883a 	mov	r19,zero
 1000934:	002f883a 	mov	r23,zero
 1000938:	d8000015 	stw	zero,0(sp)
 100093c:	0029883a 	mov	r20,zero
 1000940:	98001e26 	beq	r19,zero,10009bc <__sfvwrite_r+0x2f4>
 1000944:	d8c00017 	ldw	r3,0(sp)
 1000948:	1804c03a 	cmpne	r2,r3,zero
 100094c:	10005e26 	beq	r2,zero,1000ac8 <__sfvwrite_r+0x400>
 1000950:	9821883a 	mov	r16,r19
 1000954:	a4c0012e 	bgeu	r20,r19,100095c <__sfvwrite_r+0x294>
 1000958:	a021883a 	mov	r16,r20
 100095c:	91000017 	ldw	r4,0(r18)
 1000960:	90800417 	ldw	r2,16(r18)
 1000964:	91800217 	ldw	r6,8(r18)
 1000968:	91c00517 	ldw	r7,20(r18)
 100096c:	1100022e 	bgeu	r2,r4,1000978 <__sfvwrite_r+0x2b0>
 1000970:	31e3883a 	add	r17,r6,r7
 1000974:	8c001616 	blt	r17,r16,10009d0 <__sfvwrite_r+0x308>
 1000978:	81c03816 	blt	r16,r7,1000a5c <__sfvwrite_r+0x394>
 100097c:	90c00917 	ldw	r3,36(r18)
 1000980:	91400717 	ldw	r5,28(r18)
 1000984:	e009883a 	mov	r4,fp
 1000988:	b80d883a 	mov	r6,r23
 100098c:	183ee83a 	callr	r3
 1000990:	1023883a 	mov	r17,r2
 1000994:	00bfe10e 	bge	zero,r2,100091c <__sfvwrite_r+0x254>
 1000998:	a469c83a 	sub	r20,r20,r17
 100099c:	a0001826 	beq	r20,zero,1000a00 <__sfvwrite_r+0x338>
 10009a0:	b0800217 	ldw	r2,8(r22)
 10009a4:	1445c83a 	sub	r2,r2,r17
 10009a8:	b0800215 	stw	r2,8(r22)
 10009ac:	103f7226 	beq	r2,zero,1000778 <__sfvwrite_r+0xb0>
 10009b0:	9c67c83a 	sub	r19,r19,r17
 10009b4:	bc6f883a 	add	r23,r23,r17
 10009b8:	983fe21e 	bne	r19,zero,1000944 <__sfvwrite_r+0x27c>
 10009bc:	adc00017 	ldw	r23,0(r21)
 10009c0:	acc00117 	ldw	r19,4(r21)
 10009c4:	ad400204 	addi	r21,r21,8
 10009c8:	d8000015 	stw	zero,0(sp)
 10009cc:	003fdc06 	br	1000940 <__sfvwrite_r+0x278>
 10009d0:	b80b883a 	mov	r5,r23
 10009d4:	880d883a 	mov	r6,r17
 10009d8:	100149c0 	call	100149c <memmove>
 10009dc:	90c00017 	ldw	r3,0(r18)
 10009e0:	e009883a 	mov	r4,fp
 10009e4:	900b883a 	mov	r5,r18
 10009e8:	1c47883a 	add	r3,r3,r17
 10009ec:	90c00015 	stw	r3,0(r18)
 10009f0:	1001d1c0 	call	1001d1c <_fflush_r>
 10009f4:	103fc91e 	bne	r2,zero,100091c <__sfvwrite_r+0x254>
 10009f8:	a469c83a 	sub	r20,r20,r17
 10009fc:	a03fe81e 	bne	r20,zero,10009a0 <__sfvwrite_r+0x2d8>
 1000a00:	e009883a 	mov	r4,fp
 1000a04:	900b883a 	mov	r5,r18
 1000a08:	1001d1c0 	call	1001d1c <_fflush_r>
 1000a0c:	103fc31e 	bne	r2,zero,100091c <__sfvwrite_r+0x254>
 1000a10:	d8000015 	stw	zero,0(sp)
 1000a14:	003fe206 	br	10009a0 <__sfvwrite_r+0x2d8>
 1000a18:	91000017 	ldw	r4,0(r18)
 1000a1c:	90800417 	ldw	r2,16(r18)
 1000a20:	1100022e 	bgeu	r2,r4,1000a2c <__sfvwrite_r+0x364>
 1000a24:	8023883a 	mov	r17,r16
 1000a28:	85003136 	bltu	r16,r20,1000af0 <__sfvwrite_r+0x428>
 1000a2c:	91c00517 	ldw	r7,20(r18)
 1000a30:	a1c01836 	bltu	r20,r7,1000a94 <__sfvwrite_r+0x3cc>
 1000a34:	90c00917 	ldw	r3,36(r18)
 1000a38:	91400717 	ldw	r5,28(r18)
 1000a3c:	e009883a 	mov	r4,fp
 1000a40:	b80d883a 	mov	r6,r23
 1000a44:	183ee83a 	callr	r3
 1000a48:	1021883a 	mov	r16,r2
 1000a4c:	00bfb30e 	bge	zero,r2,100091c <__sfvwrite_r+0x254>
 1000a50:	1023883a 	mov	r17,r2
 1000a54:	1027883a 	mov	r19,r2
 1000a58:	003f9b06 	br	10008c8 <__sfvwrite_r+0x200>
 1000a5c:	b80b883a 	mov	r5,r23
 1000a60:	800d883a 	mov	r6,r16
 1000a64:	100149c0 	call	100149c <memmove>
 1000a68:	90c00217 	ldw	r3,8(r18)
 1000a6c:	90800017 	ldw	r2,0(r18)
 1000a70:	8023883a 	mov	r17,r16
 1000a74:	1c07c83a 	sub	r3,r3,r16
 1000a78:	1405883a 	add	r2,r2,r16
 1000a7c:	90c00215 	stw	r3,8(r18)
 1000a80:	90800015 	stw	r2,0(r18)
 1000a84:	003fc406 	br	1000998 <__sfvwrite_r+0x2d0>
 1000a88:	a00d883a 	mov	r6,r20
 1000a8c:	a021883a 	mov	r16,r20
 1000a90:	003f8106 	br	1000898 <__sfvwrite_r+0x1d0>
 1000a94:	b80b883a 	mov	r5,r23
 1000a98:	a00d883a 	mov	r6,r20
 1000a9c:	100149c0 	call	100149c <memmove>
 1000aa0:	90c00217 	ldw	r3,8(r18)
 1000aa4:	90800017 	ldw	r2,0(r18)
 1000aa8:	a021883a 	mov	r16,r20
 1000aac:	1d07c83a 	sub	r3,r3,r20
 1000ab0:	1505883a 	add	r2,r2,r20
 1000ab4:	a023883a 	mov	r17,r20
 1000ab8:	a027883a 	mov	r19,r20
 1000abc:	90c00215 	stw	r3,8(r18)
 1000ac0:	90800015 	stw	r2,0(r18)
 1000ac4:	003f8006 	br	10008c8 <__sfvwrite_r+0x200>
 1000ac8:	b809883a 	mov	r4,r23
 1000acc:	01400284 	movi	r5,10
 1000ad0:	980d883a 	mov	r6,r19
 1000ad4:	10013180 	call	1001318 <memchr>
 1000ad8:	10001726 	beq	r2,zero,1000b38 <__sfvwrite_r+0x470>
 1000adc:	15c5c83a 	sub	r2,r2,r23
 1000ae0:	15000044 	addi	r20,r2,1
 1000ae4:	00800044 	movi	r2,1
 1000ae8:	d8800015 	stw	r2,0(sp)
 1000aec:	003f9806 	br	1000950 <__sfvwrite_r+0x288>
 1000af0:	b80b883a 	mov	r5,r23
 1000af4:	800d883a 	mov	r6,r16
 1000af8:	100149c0 	call	100149c <memmove>
 1000afc:	90c00017 	ldw	r3,0(r18)
 1000b00:	e009883a 	mov	r4,fp
 1000b04:	900b883a 	mov	r5,r18
 1000b08:	1c07883a 	add	r3,r3,r16
 1000b0c:	90c00015 	stw	r3,0(r18)
 1000b10:	8027883a 	mov	r19,r16
 1000b14:	1001d1c0 	call	1001d1c <_fflush_r>
 1000b18:	103f6b26 	beq	r2,zero,10008c8 <__sfvwrite_r+0x200>
 1000b1c:	003f7f06 	br	100091c <__sfvwrite_r+0x254>
 1000b20:	400b883a 	mov	r5,r8
 1000b24:	e009883a 	mov	r4,fp
 1000b28:	100157c0 	call	100157c <_realloc_r>
 1000b2c:	103f7626 	beq	r2,zero,1000908 <__sfvwrite_r+0x240>
 1000b30:	1023883a 	mov	r17,r2
 1000b34:	003f5006 	br	1000878 <__sfvwrite_r+0x1b0>
 1000b38:	00c00044 	movi	r3,1
 1000b3c:	9d000044 	addi	r20,r19,1
 1000b40:	d8c00015 	stw	r3,0(sp)
 1000b44:	003f8206 	br	1000950 <__sfvwrite_r+0x288>
 1000b48:	9080030b 	ldhu	r2,12(r18)
 1000b4c:	00c00244 	movi	r3,9
 1000b50:	013fffc4 	movi	r4,-1
 1000b54:	10801014 	ori	r2,r2,64
 1000b58:	9080030d 	sth	r2,12(r18)
 1000b5c:	e0c00015 	stw	r3,0(fp)
 1000b60:	003f0606 	br	100077c <__sfvwrite_r+0xb4>

01000b64 <_gettimeofday_r>:
 1000b64:	defffd04 	addi	sp,sp,-12
 1000b68:	dc000015 	stw	r16,0(sp)
 1000b6c:	04004074 	movhi	r16,257
 1000b70:	842f4204 	addi	r16,r16,-17144
 1000b74:	dc400115 	stw	r17,4(sp)
 1000b78:	80000015 	stw	zero,0(r16)
 1000b7c:	2023883a 	mov	r17,r4
 1000b80:	2809883a 	mov	r4,r5
 1000b84:	300b883a 	mov	r5,r6
 1000b88:	dfc00215 	stw	ra,8(sp)
 1000b8c:	10033780 	call	1003378 <gettimeofday>
 1000b90:	1007883a 	mov	r3,r2
 1000b94:	00bfffc4 	movi	r2,-1
 1000b98:	18800626 	beq	r3,r2,1000bb4 <_gettimeofday_r+0x50>
 1000b9c:	1805883a 	mov	r2,r3
 1000ba0:	dfc00217 	ldw	ra,8(sp)
 1000ba4:	dc400117 	ldw	r17,4(sp)
 1000ba8:	dc000017 	ldw	r16,0(sp)
 1000bac:	dec00304 	addi	sp,sp,12
 1000bb0:	f800283a 	ret
 1000bb4:	80800017 	ldw	r2,0(r16)
 1000bb8:	103ff826 	beq	r2,zero,1000b9c <_gettimeofday_r+0x38>
 1000bbc:	88800015 	stw	r2,0(r17)
 1000bc0:	1805883a 	mov	r2,r3
 1000bc4:	dfc00217 	ldw	ra,8(sp)
 1000bc8:	dc400117 	ldw	r17,4(sp)
 1000bcc:	dc000017 	ldw	r16,0(sp)
 1000bd0:	dec00304 	addi	sp,sp,12
 1000bd4:	f800283a 	ret

01000bd8 <_malloc_r>:
 1000bd8:	defff604 	addi	sp,sp,-40
 1000bdc:	28c002c4 	addi	r3,r5,11
 1000be0:	00800584 	movi	r2,22
 1000be4:	dc800215 	stw	r18,8(sp)
 1000be8:	dfc00915 	stw	ra,36(sp)
 1000bec:	df000815 	stw	fp,32(sp)
 1000bf0:	ddc00715 	stw	r23,28(sp)
 1000bf4:	dd800615 	stw	r22,24(sp)
 1000bf8:	dd400515 	stw	r21,20(sp)
 1000bfc:	dd000415 	stw	r20,16(sp)
 1000c00:	dcc00315 	stw	r19,12(sp)
 1000c04:	dc400115 	stw	r17,4(sp)
 1000c08:	dc000015 	stw	r16,0(sp)
 1000c0c:	2025883a 	mov	r18,r4
 1000c10:	10c01236 	bltu	r2,r3,1000c5c <_malloc_r+0x84>
 1000c14:	04400404 	movi	r17,16
 1000c18:	8940142e 	bgeu	r17,r5,1000c6c <_malloc_r+0x94>
 1000c1c:	00800304 	movi	r2,12
 1000c20:	0007883a 	mov	r3,zero
 1000c24:	90800015 	stw	r2,0(r18)
 1000c28:	1805883a 	mov	r2,r3
 1000c2c:	dfc00917 	ldw	ra,36(sp)
 1000c30:	df000817 	ldw	fp,32(sp)
 1000c34:	ddc00717 	ldw	r23,28(sp)
 1000c38:	dd800617 	ldw	r22,24(sp)
 1000c3c:	dd400517 	ldw	r21,20(sp)
 1000c40:	dd000417 	ldw	r20,16(sp)
 1000c44:	dcc00317 	ldw	r19,12(sp)
 1000c48:	dc800217 	ldw	r18,8(sp)
 1000c4c:	dc400117 	ldw	r17,4(sp)
 1000c50:	dc000017 	ldw	r16,0(sp)
 1000c54:	dec00a04 	addi	sp,sp,40
 1000c58:	f800283a 	ret
 1000c5c:	00bffe04 	movi	r2,-8
 1000c60:	18a2703a 	and	r17,r3,r2
 1000c64:	883fed16 	blt	r17,zero,1000c1c <_malloc_r+0x44>
 1000c68:	897fec36 	bltu	r17,r5,1000c1c <_malloc_r+0x44>
 1000c6c:	9009883a 	mov	r4,r18
 1000c70:	10039640 	call	1003964 <__malloc_lock>
 1000c74:	00807dc4 	movi	r2,503
 1000c78:	14402b2e 	bgeu	r2,r17,1000d28 <_malloc_r+0x150>
 1000c7c:	8806d27a 	srli	r3,r17,9
 1000c80:	18003f1e 	bne	r3,zero,1000d80 <_malloc_r+0x1a8>
 1000c84:	880cd0fa 	srli	r6,r17,3
 1000c88:	300490fa 	slli	r2,r6,3
 1000c8c:	02c04074 	movhi	r11,257
 1000c90:	5ae2ba04 	addi	r11,r11,-29976
 1000c94:	12cb883a 	add	r5,r2,r11
 1000c98:	2c000317 	ldw	r16,12(r5)
 1000c9c:	580f883a 	mov	r7,r11
 1000ca0:	2c00041e 	bne	r5,r16,1000cb4 <_malloc_r+0xdc>
 1000ca4:	00000a06 	br	1000cd0 <_malloc_r+0xf8>
 1000ca8:	1800860e 	bge	r3,zero,1000ec4 <_malloc_r+0x2ec>
 1000cac:	84000317 	ldw	r16,12(r16)
 1000cb0:	2c000726 	beq	r5,r16,1000cd0 <_malloc_r+0xf8>
 1000cb4:	80800117 	ldw	r2,4(r16)
 1000cb8:	00ffff04 	movi	r3,-4
 1000cbc:	10c8703a 	and	r4,r2,r3
 1000cc0:	2447c83a 	sub	r3,r4,r17
 1000cc4:	008003c4 	movi	r2,15
 1000cc8:	10fff70e 	bge	r2,r3,1000ca8 <_malloc_r+0xd0>
 1000ccc:	31bfffc4 	addi	r6,r6,-1
 1000cd0:	32400044 	addi	r9,r6,1
 1000cd4:	02804074 	movhi	r10,257
 1000cd8:	52a2bc04 	addi	r10,r10,-29968
 1000cdc:	54000217 	ldw	r16,8(r10)
 1000ce0:	8280a026 	beq	r16,r10,1000f64 <_malloc_r+0x38c>
 1000ce4:	80800117 	ldw	r2,4(r16)
 1000ce8:	00ffff04 	movi	r3,-4
 1000cec:	10ca703a 	and	r5,r2,r3
 1000cf0:	2c4dc83a 	sub	r6,r5,r17
 1000cf4:	008003c4 	movi	r2,15
 1000cf8:	11808316 	blt	r2,r6,1000f08 <_malloc_r+0x330>
 1000cfc:	52800315 	stw	r10,12(r10)
 1000d00:	52800215 	stw	r10,8(r10)
 1000d04:	30002916 	blt	r6,zero,1000dac <_malloc_r+0x1d4>
 1000d08:	8147883a 	add	r3,r16,r5
 1000d0c:	18800117 	ldw	r2,4(r3)
 1000d10:	9009883a 	mov	r4,r18
 1000d14:	10800054 	ori	r2,r2,1
 1000d18:	18800115 	stw	r2,4(r3)
 1000d1c:	10039840 	call	1003984 <__malloc_unlock>
 1000d20:	80c00204 	addi	r3,r16,8
 1000d24:	003fc006 	br	1000c28 <_malloc_r+0x50>
 1000d28:	02c04074 	movhi	r11,257
 1000d2c:	5ae2ba04 	addi	r11,r11,-29976
 1000d30:	8ac5883a 	add	r2,r17,r11
 1000d34:	14000317 	ldw	r16,12(r2)
 1000d38:	580f883a 	mov	r7,r11
 1000d3c:	8806d0fa 	srli	r3,r17,3
 1000d40:	14006c26 	beq	r2,r16,1000ef4 <_malloc_r+0x31c>
 1000d44:	80c00117 	ldw	r3,4(r16)
 1000d48:	00bfff04 	movi	r2,-4
 1000d4c:	81800317 	ldw	r6,12(r16)
 1000d50:	1886703a 	and	r3,r3,r2
 1000d54:	80c7883a 	add	r3,r16,r3
 1000d58:	18800117 	ldw	r2,4(r3)
 1000d5c:	81400217 	ldw	r5,8(r16)
 1000d60:	9009883a 	mov	r4,r18
 1000d64:	10800054 	ori	r2,r2,1
 1000d68:	18800115 	stw	r2,4(r3)
 1000d6c:	31400215 	stw	r5,8(r6)
 1000d70:	29800315 	stw	r6,12(r5)
 1000d74:	10039840 	call	1003984 <__malloc_unlock>
 1000d78:	80c00204 	addi	r3,r16,8
 1000d7c:	003faa06 	br	1000c28 <_malloc_r+0x50>
 1000d80:	00800104 	movi	r2,4
 1000d84:	10c0052e 	bgeu	r2,r3,1000d9c <_malloc_r+0x1c4>
 1000d88:	00800504 	movi	r2,20
 1000d8c:	10c07836 	bltu	r2,r3,1000f70 <_malloc_r+0x398>
 1000d90:	198016c4 	addi	r6,r3,91
 1000d94:	300490fa 	slli	r2,r6,3
 1000d98:	003fbc06 	br	1000c8c <_malloc_r+0xb4>
 1000d9c:	8804d1ba 	srli	r2,r17,6
 1000da0:	11800e04 	addi	r6,r2,56
 1000da4:	300490fa 	slli	r2,r6,3
 1000da8:	003fb806 	br	1000c8c <_malloc_r+0xb4>
 1000dac:	00807fc4 	movi	r2,511
 1000db0:	1140bb36 	bltu	r2,r5,10010a0 <_malloc_r+0x4c8>
 1000db4:	2806d0fa 	srli	r3,r5,3
 1000db8:	573ffe04 	addi	fp,r10,-8
 1000dbc:	00800044 	movi	r2,1
 1000dc0:	180890fa 	slli	r4,r3,3
 1000dc4:	1807d0ba 	srai	r3,r3,2
 1000dc8:	e1c00117 	ldw	r7,4(fp)
 1000dcc:	5909883a 	add	r4,r11,r4
 1000dd0:	21400217 	ldw	r5,8(r4)
 1000dd4:	10c4983a 	sll	r2,r2,r3
 1000dd8:	81000315 	stw	r4,12(r16)
 1000ddc:	81400215 	stw	r5,8(r16)
 1000de0:	388eb03a 	or	r7,r7,r2
 1000de4:	2c000315 	stw	r16,12(r5)
 1000de8:	24000215 	stw	r16,8(r4)
 1000dec:	e1c00115 	stw	r7,4(fp)
 1000df0:	4807883a 	mov	r3,r9
 1000df4:	4800cd16 	blt	r9,zero,100112c <_malloc_r+0x554>
 1000df8:	1807d0ba 	srai	r3,r3,2
 1000dfc:	00800044 	movi	r2,1
 1000e00:	10c8983a 	sll	r4,r2,r3
 1000e04:	39004436 	bltu	r7,r4,1000f18 <_malloc_r+0x340>
 1000e08:	21c4703a 	and	r2,r4,r7
 1000e0c:	10000a1e 	bne	r2,zero,1000e38 <_malloc_r+0x260>
 1000e10:	2109883a 	add	r4,r4,r4
 1000e14:	00bfff04 	movi	r2,-4
 1000e18:	4884703a 	and	r2,r9,r2
 1000e1c:	3906703a 	and	r3,r7,r4
 1000e20:	12400104 	addi	r9,r2,4
 1000e24:	1800041e 	bne	r3,zero,1000e38 <_malloc_r+0x260>
 1000e28:	2109883a 	add	r4,r4,r4
 1000e2c:	3904703a 	and	r2,r7,r4
 1000e30:	4a400104 	addi	r9,r9,4
 1000e34:	103ffc26 	beq	r2,zero,1000e28 <_malloc_r+0x250>
 1000e38:	480490fa 	slli	r2,r9,3
 1000e3c:	4819883a 	mov	r12,r9
 1000e40:	023fff04 	movi	r8,-4
 1000e44:	589b883a 	add	r13,r11,r2
 1000e48:	6807883a 	mov	r3,r13
 1000e4c:	014003c4 	movi	r5,15
 1000e50:	1c000317 	ldw	r16,12(r3)
 1000e54:	1c00041e 	bne	r3,r16,1000e68 <_malloc_r+0x290>
 1000e58:	0000a706 	br	10010f8 <_malloc_r+0x520>
 1000e5c:	3000ab0e 	bge	r6,zero,100110c <_malloc_r+0x534>
 1000e60:	84000317 	ldw	r16,12(r16)
 1000e64:	1c00a426 	beq	r3,r16,10010f8 <_malloc_r+0x520>
 1000e68:	80800117 	ldw	r2,4(r16)
 1000e6c:	1204703a 	and	r2,r2,r8
 1000e70:	144dc83a 	sub	r6,r2,r17
 1000e74:	29bff90e 	bge	r5,r6,1000e5c <_malloc_r+0x284>
 1000e78:	81000317 	ldw	r4,12(r16)
 1000e7c:	80c00217 	ldw	r3,8(r16)
 1000e80:	89400054 	ori	r5,r17,1
 1000e84:	8445883a 	add	r2,r16,r17
 1000e88:	20c00215 	stw	r3,8(r4)
 1000e8c:	19000315 	stw	r4,12(r3)
 1000e90:	81400115 	stw	r5,4(r16)
 1000e94:	1187883a 	add	r3,r2,r6
 1000e98:	31000054 	ori	r4,r6,1
 1000e9c:	50800315 	stw	r2,12(r10)
 1000ea0:	50800215 	stw	r2,8(r10)
 1000ea4:	19800015 	stw	r6,0(r3)
 1000ea8:	11000115 	stw	r4,4(r2)
 1000eac:	12800215 	stw	r10,8(r2)
 1000eb0:	12800315 	stw	r10,12(r2)
 1000eb4:	9009883a 	mov	r4,r18
 1000eb8:	10039840 	call	1003984 <__malloc_unlock>
 1000ebc:	80c00204 	addi	r3,r16,8
 1000ec0:	003f5906 	br	1000c28 <_malloc_r+0x50>
 1000ec4:	8109883a 	add	r4,r16,r4
 1000ec8:	20800117 	ldw	r2,4(r4)
 1000ecc:	80c00217 	ldw	r3,8(r16)
 1000ed0:	81400317 	ldw	r5,12(r16)
 1000ed4:	10800054 	ori	r2,r2,1
 1000ed8:	20800115 	stw	r2,4(r4)
 1000edc:	28c00215 	stw	r3,8(r5)
 1000ee0:	19400315 	stw	r5,12(r3)
 1000ee4:	9009883a 	mov	r4,r18
 1000ee8:	10039840 	call	1003984 <__malloc_unlock>
 1000eec:	80c00204 	addi	r3,r16,8
 1000ef0:	003f4d06 	br	1000c28 <_malloc_r+0x50>
 1000ef4:	80800204 	addi	r2,r16,8
 1000ef8:	14000317 	ldw	r16,12(r2)
 1000efc:	143f911e 	bne	r2,r16,1000d44 <_malloc_r+0x16c>
 1000f00:	1a400084 	addi	r9,r3,2
 1000f04:	003f7306 	br	1000cd4 <_malloc_r+0xfc>
 1000f08:	88c00054 	ori	r3,r17,1
 1000f0c:	8445883a 	add	r2,r16,r17
 1000f10:	80c00115 	stw	r3,4(r16)
 1000f14:	003fdf06 	br	1000e94 <_malloc_r+0x2bc>
 1000f18:	e4000217 	ldw	r16,8(fp)
 1000f1c:	00bfff04 	movi	r2,-4
 1000f20:	80c00117 	ldw	r3,4(r16)
 1000f24:	802d883a 	mov	r22,r16
 1000f28:	18aa703a 	and	r21,r3,r2
 1000f2c:	ac401636 	bltu	r21,r17,1000f88 <_malloc_r+0x3b0>
 1000f30:	ac49c83a 	sub	r4,r21,r17
 1000f34:	008003c4 	movi	r2,15
 1000f38:	1100130e 	bge	r2,r4,1000f88 <_malloc_r+0x3b0>
 1000f3c:	88800054 	ori	r2,r17,1
 1000f40:	8447883a 	add	r3,r16,r17
 1000f44:	80800115 	stw	r2,4(r16)
 1000f48:	20800054 	ori	r2,r4,1
 1000f4c:	18800115 	stw	r2,4(r3)
 1000f50:	e0c00215 	stw	r3,8(fp)
 1000f54:	9009883a 	mov	r4,r18
 1000f58:	10039840 	call	1003984 <__malloc_unlock>
 1000f5c:	80c00204 	addi	r3,r16,8
 1000f60:	003f3106 	br	1000c28 <_malloc_r+0x50>
 1000f64:	39c00117 	ldw	r7,4(r7)
 1000f68:	573ffe04 	addi	fp,r10,-8
 1000f6c:	003fa006 	br	1000df0 <_malloc_r+0x218>
 1000f70:	00801504 	movi	r2,84
 1000f74:	10c06736 	bltu	r2,r3,1001114 <_malloc_r+0x53c>
 1000f78:	8804d33a 	srli	r2,r17,12
 1000f7c:	11801b84 	addi	r6,r2,110
 1000f80:	300490fa 	slli	r2,r6,3
 1000f84:	003f4106 	br	1000c8c <_malloc_r+0xb4>
 1000f88:	d0a6d317 	ldw	r2,-25780(gp)
 1000f8c:	d0e00317 	ldw	r3,-32756(gp)
 1000f90:	053fffc4 	movi	r20,-1
 1000f94:	10800404 	addi	r2,r2,16
 1000f98:	88a7883a 	add	r19,r17,r2
 1000f9c:	1d000326 	beq	r3,r20,1000fac <_malloc_r+0x3d4>
 1000fa0:	98c3ffc4 	addi	r3,r19,4095
 1000fa4:	00bc0004 	movi	r2,-4096
 1000fa8:	18a6703a 	and	r19,r3,r2
 1000fac:	9009883a 	mov	r4,r18
 1000fb0:	980b883a 	mov	r5,r19
 1000fb4:	1001b700 	call	1001b70 <_sbrk_r>
 1000fb8:	1009883a 	mov	r4,r2
 1000fbc:	15000426 	beq	r2,r20,1000fd0 <_malloc_r+0x3f8>
 1000fc0:	854b883a 	add	r5,r16,r21
 1000fc4:	1029883a 	mov	r20,r2
 1000fc8:	11405a2e 	bgeu	r2,r5,1001134 <_malloc_r+0x55c>
 1000fcc:	87000c26 	beq	r16,fp,1001000 <_malloc_r+0x428>
 1000fd0:	e4000217 	ldw	r16,8(fp)
 1000fd4:	80c00117 	ldw	r3,4(r16)
 1000fd8:	00bfff04 	movi	r2,-4
 1000fdc:	1884703a 	and	r2,r3,r2
 1000fe0:	14400336 	bltu	r2,r17,1000ff0 <_malloc_r+0x418>
 1000fe4:	1449c83a 	sub	r4,r2,r17
 1000fe8:	008003c4 	movi	r2,15
 1000fec:	113fd316 	blt	r2,r4,1000f3c <_malloc_r+0x364>
 1000ff0:	9009883a 	mov	r4,r18
 1000ff4:	10039840 	call	1003984 <__malloc_unlock>
 1000ff8:	0007883a 	mov	r3,zero
 1000ffc:	003f0a06 	br	1000c28 <_malloc_r+0x50>
 1001000:	05c04074 	movhi	r23,257
 1001004:	bdef5004 	addi	r23,r23,-17088
 1001008:	b8800017 	ldw	r2,0(r23)
 100100c:	988d883a 	add	r6,r19,r2
 1001010:	b9800015 	stw	r6,0(r23)
 1001014:	d0e00317 	ldw	r3,-32756(gp)
 1001018:	00bfffc4 	movi	r2,-1
 100101c:	18808e26 	beq	r3,r2,1001258 <_malloc_r+0x680>
 1001020:	2145c83a 	sub	r2,r4,r5
 1001024:	3085883a 	add	r2,r6,r2
 1001028:	b8800015 	stw	r2,0(r23)
 100102c:	20c001cc 	andi	r3,r4,7
 1001030:	18005f1e 	bne	r3,zero,10011b0 <_malloc_r+0x5d8>
 1001034:	000b883a 	mov	r5,zero
 1001038:	a4c5883a 	add	r2,r20,r19
 100103c:	1083ffcc 	andi	r2,r2,4095
 1001040:	00c40004 	movi	r3,4096
 1001044:	1887c83a 	sub	r3,r3,r2
 1001048:	28e7883a 	add	r19,r5,r3
 100104c:	9009883a 	mov	r4,r18
 1001050:	980b883a 	mov	r5,r19
 1001054:	1001b700 	call	1001b70 <_sbrk_r>
 1001058:	1007883a 	mov	r3,r2
 100105c:	00bfffc4 	movi	r2,-1
 1001060:	18807a26 	beq	r3,r2,100124c <_malloc_r+0x674>
 1001064:	1d05c83a 	sub	r2,r3,r20
 1001068:	9885883a 	add	r2,r19,r2
 100106c:	10c00054 	ori	r3,r2,1
 1001070:	b8800017 	ldw	r2,0(r23)
 1001074:	a021883a 	mov	r16,r20
 1001078:	a0c00115 	stw	r3,4(r20)
 100107c:	9885883a 	add	r2,r19,r2
 1001080:	b8800015 	stw	r2,0(r23)
 1001084:	e5000215 	stw	r20,8(fp)
 1001088:	b7003626 	beq	r22,fp,1001164 <_malloc_r+0x58c>
 100108c:	018003c4 	movi	r6,15
 1001090:	35404b36 	bltu	r6,r21,10011c0 <_malloc_r+0x5e8>
 1001094:	00800044 	movi	r2,1
 1001098:	a0800115 	stw	r2,4(r20)
 100109c:	003fcd06 	br	1000fd4 <_malloc_r+0x3fc>
 10010a0:	2808d27a 	srli	r4,r5,9
 10010a4:	2000371e 	bne	r4,zero,1001184 <_malloc_r+0x5ac>
 10010a8:	2808d0fa 	srli	r4,r5,3
 10010ac:	200690fa 	slli	r3,r4,3
 10010b0:	1ad1883a 	add	r8,r3,r11
 10010b4:	41800217 	ldw	r6,8(r8)
 10010b8:	41805b26 	beq	r8,r6,1001228 <_malloc_r+0x650>
 10010bc:	30800117 	ldw	r2,4(r6)
 10010c0:	00ffff04 	movi	r3,-4
 10010c4:	10c4703a 	and	r2,r2,r3
 10010c8:	2880022e 	bgeu	r5,r2,10010d4 <_malloc_r+0x4fc>
 10010cc:	31800217 	ldw	r6,8(r6)
 10010d0:	41bffa1e 	bne	r8,r6,10010bc <_malloc_r+0x4e4>
 10010d4:	32000317 	ldw	r8,12(r6)
 10010d8:	39c00117 	ldw	r7,4(r7)
 10010dc:	82000315 	stw	r8,12(r16)
 10010e0:	81800215 	stw	r6,8(r16)
 10010e4:	07004074 	movhi	fp,257
 10010e8:	e722ba04 	addi	fp,fp,-29976
 10010ec:	34000315 	stw	r16,12(r6)
 10010f0:	44000215 	stw	r16,8(r8)
 10010f4:	003f3e06 	br	1000df0 <_malloc_r+0x218>
 10010f8:	63000044 	addi	r12,r12,1
 10010fc:	608000cc 	andi	r2,r12,3
 1001100:	10005d26 	beq	r2,zero,1001278 <_malloc_r+0x6a0>
 1001104:	18c00204 	addi	r3,r3,8
 1001108:	003f5106 	br	1000e50 <_malloc_r+0x278>
 100110c:	8089883a 	add	r4,r16,r2
 1001110:	003f6d06 	br	1000ec8 <_malloc_r+0x2f0>
 1001114:	00805504 	movi	r2,340
 1001118:	10c02036 	bltu	r2,r3,100119c <_malloc_r+0x5c4>
 100111c:	8804d3fa 	srli	r2,r17,15
 1001120:	11801dc4 	addi	r6,r2,119
 1001124:	300490fa 	slli	r2,r6,3
 1001128:	003ed806 	br	1000c8c <_malloc_r+0xb4>
 100112c:	48c000c4 	addi	r3,r9,3
 1001130:	003f3106 	br	1000df8 <_malloc_r+0x220>
 1001134:	05c04074 	movhi	r23,257
 1001138:	bdef5004 	addi	r23,r23,-17088
 100113c:	b8800017 	ldw	r2,0(r23)
 1001140:	988d883a 	add	r6,r19,r2
 1001144:	b9800015 	stw	r6,0(r23)
 1001148:	293fb21e 	bne	r5,r4,1001014 <_malloc_r+0x43c>
 100114c:	2083ffcc 	andi	r2,r4,4095
 1001150:	103fb01e 	bne	r2,zero,1001014 <_malloc_r+0x43c>
 1001154:	e4000217 	ldw	r16,8(fp)
 1001158:	9d45883a 	add	r2,r19,r21
 100115c:	10800054 	ori	r2,r2,1
 1001160:	80800115 	stw	r2,4(r16)
 1001164:	b8c00017 	ldw	r3,0(r23)
 1001168:	d0a6d417 	ldw	r2,-25776(gp)
 100116c:	10c0012e 	bgeu	r2,r3,1001174 <_malloc_r+0x59c>
 1001170:	d0e6d415 	stw	r3,-25776(gp)
 1001174:	d0a6d517 	ldw	r2,-25772(gp)
 1001178:	10ff962e 	bgeu	r2,r3,1000fd4 <_malloc_r+0x3fc>
 100117c:	d0e6d515 	stw	r3,-25772(gp)
 1001180:	003f9406 	br	1000fd4 <_malloc_r+0x3fc>
 1001184:	00800104 	movi	r2,4
 1001188:	11001e36 	bltu	r2,r4,1001204 <_malloc_r+0x62c>
 100118c:	2804d1ba 	srli	r2,r5,6
 1001190:	11000e04 	addi	r4,r2,56
 1001194:	200690fa 	slli	r3,r4,3
 1001198:	003fc506 	br	10010b0 <_malloc_r+0x4d8>
 100119c:	00815504 	movi	r2,1364
 10011a0:	10c01d2e 	bgeu	r2,r3,1001218 <_malloc_r+0x640>
 10011a4:	01801f84 	movi	r6,126
 10011a8:	0080fc04 	movi	r2,1008
 10011ac:	003eb706 	br	1000c8c <_malloc_r+0xb4>
 10011b0:	00800204 	movi	r2,8
 10011b4:	10cbc83a 	sub	r5,r2,r3
 10011b8:	2169883a 	add	r20,r4,r5
 10011bc:	003f9e06 	br	1001038 <_malloc_r+0x460>
 10011c0:	00bffe04 	movi	r2,-8
 10011c4:	a93ffd04 	addi	r4,r21,-12
 10011c8:	2088703a 	and	r4,r4,r2
 10011cc:	b10b883a 	add	r5,r22,r4
 10011d0:	00c00144 	movi	r3,5
 10011d4:	28c00215 	stw	r3,8(r5)
 10011d8:	28c00115 	stw	r3,4(r5)
 10011dc:	b0800117 	ldw	r2,4(r22)
 10011e0:	1080004c 	andi	r2,r2,1
 10011e4:	2084b03a 	or	r2,r4,r2
 10011e8:	b0800115 	stw	r2,4(r22)
 10011ec:	313fdd2e 	bgeu	r6,r4,1001164 <_malloc_r+0x58c>
 10011f0:	b1400204 	addi	r5,r22,8
 10011f4:	9009883a 	mov	r4,r18
 10011f8:	100236c0 	call	100236c <_free_r>
 10011fc:	e4000217 	ldw	r16,8(fp)
 1001200:	003fd806 	br	1001164 <_malloc_r+0x58c>
 1001204:	00800504 	movi	r2,20
 1001208:	11001536 	bltu	r2,r4,1001260 <_malloc_r+0x688>
 100120c:	210016c4 	addi	r4,r4,91
 1001210:	200690fa 	slli	r3,r4,3
 1001214:	003fa606 	br	10010b0 <_malloc_r+0x4d8>
 1001218:	8804d4ba 	srli	r2,r17,18
 100121c:	11801f04 	addi	r6,r2,124
 1001220:	300490fa 	slli	r2,r6,3
 1001224:	003e9906 	br	1000c8c <_malloc_r+0xb4>
 1001228:	2009d0ba 	srai	r4,r4,2
 100122c:	01404074 	movhi	r5,257
 1001230:	2962ba04 	addi	r5,r5,-29976
 1001234:	00c00044 	movi	r3,1
 1001238:	28800117 	ldw	r2,4(r5)
 100123c:	1906983a 	sll	r3,r3,r4
 1001240:	10c4b03a 	or	r2,r2,r3
 1001244:	28800115 	stw	r2,4(r5)
 1001248:	003fa306 	br	10010d8 <_malloc_r+0x500>
 100124c:	0027883a 	mov	r19,zero
 1001250:	00c00044 	movi	r3,1
 1001254:	003f8606 	br	1001070 <_malloc_r+0x498>
 1001258:	d1200315 	stw	r4,-32756(gp)
 100125c:	003f7306 	br	100102c <_malloc_r+0x454>
 1001260:	00801504 	movi	r2,84
 1001264:	11001936 	bltu	r2,r4,10012cc <_malloc_r+0x6f4>
 1001268:	2804d33a 	srli	r2,r5,12
 100126c:	11001b84 	addi	r4,r2,110
 1001270:	200690fa 	slli	r3,r4,3
 1001274:	003f8e06 	br	10010b0 <_malloc_r+0x4d8>
 1001278:	480b883a 	mov	r5,r9
 100127c:	6807883a 	mov	r3,r13
 1001280:	288000cc 	andi	r2,r5,3
 1001284:	18fffe04 	addi	r3,r3,-8
 1001288:	297fffc4 	addi	r5,r5,-1
 100128c:	10001526 	beq	r2,zero,10012e4 <_malloc_r+0x70c>
 1001290:	18800217 	ldw	r2,8(r3)
 1001294:	10fffa26 	beq	r2,r3,1001280 <_malloc_r+0x6a8>
 1001298:	2109883a 	add	r4,r4,r4
 100129c:	393f1e36 	bltu	r7,r4,1000f18 <_malloc_r+0x340>
 10012a0:	203f1d26 	beq	r4,zero,1000f18 <_malloc_r+0x340>
 10012a4:	21c4703a 	and	r2,r4,r7
 10012a8:	10000226 	beq	r2,zero,10012b4 <_malloc_r+0x6dc>
 10012ac:	6013883a 	mov	r9,r12
 10012b0:	003ee106 	br	1000e38 <_malloc_r+0x260>
 10012b4:	2109883a 	add	r4,r4,r4
 10012b8:	3904703a 	and	r2,r7,r4
 10012bc:	63000104 	addi	r12,r12,4
 10012c0:	103ffc26 	beq	r2,zero,10012b4 <_malloc_r+0x6dc>
 10012c4:	6013883a 	mov	r9,r12
 10012c8:	003edb06 	br	1000e38 <_malloc_r+0x260>
 10012cc:	00805504 	movi	r2,340
 10012d0:	11000836 	bltu	r2,r4,10012f4 <_malloc_r+0x71c>
 10012d4:	2804d3fa 	srli	r2,r5,15
 10012d8:	11001dc4 	addi	r4,r2,119
 10012dc:	200690fa 	slli	r3,r4,3
 10012e0:	003f7306 	br	10010b0 <_malloc_r+0x4d8>
 10012e4:	0104303a 	nor	r2,zero,r4
 10012e8:	388e703a 	and	r7,r7,r2
 10012ec:	e1c00115 	stw	r7,4(fp)
 10012f0:	003fe906 	br	1001298 <_malloc_r+0x6c0>
 10012f4:	00815504 	movi	r2,1364
 10012f8:	1100032e 	bgeu	r2,r4,1001308 <_malloc_r+0x730>
 10012fc:	01001f84 	movi	r4,126
 1001300:	00c0fc04 	movi	r3,1008
 1001304:	003f6a06 	br	10010b0 <_malloc_r+0x4d8>
 1001308:	2804d4ba 	srli	r2,r5,18
 100130c:	11001f04 	addi	r4,r2,124
 1001310:	200690fa 	slli	r3,r4,3
 1001314:	003f6606 	br	10010b0 <_malloc_r+0x4d8>

01001318 <memchr>:
 1001318:	008000c4 	movi	r2,3
 100131c:	29403fcc 	andi	r5,r5,255
 1001320:	2007883a 	mov	r3,r4
 1001324:	1180022e 	bgeu	r2,r6,1001330 <memchr+0x18>
 1001328:	2084703a 	and	r2,r4,r2
 100132c:	10000b26 	beq	r2,zero,100135c <memchr+0x44>
 1001330:	313fffc4 	addi	r4,r6,-1
 1001334:	3000051e 	bne	r6,zero,100134c <memchr+0x34>
 1001338:	00002c06 	br	10013ec <memchr+0xd4>
 100133c:	213fffc4 	addi	r4,r4,-1
 1001340:	00bfffc4 	movi	r2,-1
 1001344:	18c00044 	addi	r3,r3,1
 1001348:	20802826 	beq	r4,r2,10013ec <memchr+0xd4>
 100134c:	18800003 	ldbu	r2,0(r3)
 1001350:	28bffa1e 	bne	r5,r2,100133c <memchr+0x24>
 1001354:	1805883a 	mov	r2,r3
 1001358:	f800283a 	ret
 100135c:	0011883a 	mov	r8,zero
 1001360:	0007883a 	mov	r3,zero
 1001364:	01c00104 	movi	r7,4
 1001368:	4004923a 	slli	r2,r8,8
 100136c:	18c00044 	addi	r3,r3,1
 1001370:	1151883a 	add	r8,r2,r5
 1001374:	19fffc1e 	bne	r3,r7,1001368 <memchr+0x50>
 1001378:	02bfbff4 	movhi	r10,65279
 100137c:	52bfbfc4 	addi	r10,r10,-257
 1001380:	02602074 	movhi	r9,32897
 1001384:	4a602004 	addi	r9,r9,-32640
 1001388:	02c000c4 	movi	r11,3
 100138c:	20800017 	ldw	r2,0(r4)
 1001390:	31bfff04 	addi	r6,r6,-4
 1001394:	200f883a 	mov	r7,r4
 1001398:	1204f03a 	xor	r2,r2,r8
 100139c:	1287883a 	add	r3,r2,r10
 10013a0:	1a46703a 	and	r3,r3,r9
 10013a4:	0084303a 	nor	r2,zero,r2
 10013a8:	10c4703a 	and	r2,r2,r3
 10013ac:	10000b26 	beq	r2,zero,10013dc <memchr+0xc4>
 10013b0:	20800003 	ldbu	r2,0(r4)
 10013b4:	28800f26 	beq	r5,r2,10013f4 <memchr+0xdc>
 10013b8:	20800043 	ldbu	r2,1(r4)
 10013bc:	21c00044 	addi	r7,r4,1
 10013c0:	28800c26 	beq	r5,r2,10013f4 <memchr+0xdc>
 10013c4:	20800083 	ldbu	r2,2(r4)
 10013c8:	21c00084 	addi	r7,r4,2
 10013cc:	28800926 	beq	r5,r2,10013f4 <memchr+0xdc>
 10013d0:	208000c3 	ldbu	r2,3(r4)
 10013d4:	21c000c4 	addi	r7,r4,3
 10013d8:	28800626 	beq	r5,r2,10013f4 <memchr+0xdc>
 10013dc:	21000104 	addi	r4,r4,4
 10013e0:	59bfea36 	bltu	r11,r6,100138c <memchr+0x74>
 10013e4:	2007883a 	mov	r3,r4
 10013e8:	003fd106 	br	1001330 <memchr+0x18>
 10013ec:	0005883a 	mov	r2,zero
 10013f0:	f800283a 	ret
 10013f4:	3805883a 	mov	r2,r7
 10013f8:	f800283a 	ret

010013fc <memcpy>:
 10013fc:	01c003c4 	movi	r7,15
 1001400:	2007883a 	mov	r3,r4
 1001404:	3980032e 	bgeu	r7,r6,1001414 <memcpy+0x18>
 1001408:	2904b03a 	or	r2,r5,r4
 100140c:	108000cc 	andi	r2,r2,3
 1001410:	10000926 	beq	r2,zero,1001438 <memcpy+0x3c>
 1001414:	30000626 	beq	r6,zero,1001430 <memcpy+0x34>
 1001418:	30cd883a 	add	r6,r6,r3
 100141c:	28800003 	ldbu	r2,0(r5)
 1001420:	29400044 	addi	r5,r5,1
 1001424:	18800005 	stb	r2,0(r3)
 1001428:	18c00044 	addi	r3,r3,1
 100142c:	30fffb1e 	bne	r6,r3,100141c <memcpy+0x20>
 1001430:	2005883a 	mov	r2,r4
 1001434:	f800283a 	ret
 1001438:	3811883a 	mov	r8,r7
 100143c:	200f883a 	mov	r7,r4
 1001440:	28c00017 	ldw	r3,0(r5)
 1001444:	31bffc04 	addi	r6,r6,-16
 1001448:	38c00015 	stw	r3,0(r7)
 100144c:	28800117 	ldw	r2,4(r5)
 1001450:	38800115 	stw	r2,4(r7)
 1001454:	28c00217 	ldw	r3,8(r5)
 1001458:	38c00215 	stw	r3,8(r7)
 100145c:	28800317 	ldw	r2,12(r5)
 1001460:	29400404 	addi	r5,r5,16
 1001464:	38800315 	stw	r2,12(r7)
 1001468:	39c00404 	addi	r7,r7,16
 100146c:	41bff436 	bltu	r8,r6,1001440 <memcpy+0x44>
 1001470:	008000c4 	movi	r2,3
 1001474:	1180072e 	bgeu	r2,r6,1001494 <memcpy+0x98>
 1001478:	1007883a 	mov	r3,r2
 100147c:	28800017 	ldw	r2,0(r5)
 1001480:	31bfff04 	addi	r6,r6,-4
 1001484:	29400104 	addi	r5,r5,4
 1001488:	38800015 	stw	r2,0(r7)
 100148c:	39c00104 	addi	r7,r7,4
 1001490:	19bffa36 	bltu	r3,r6,100147c <memcpy+0x80>
 1001494:	3807883a 	mov	r3,r7
 1001498:	003fde06 	br	1001414 <memcpy+0x18>

0100149c <memmove>:
 100149c:	2807883a 	mov	r3,r5
 10014a0:	2011883a 	mov	r8,r4
 10014a4:	29000c2e 	bgeu	r5,r4,10014d8 <memmove+0x3c>
 10014a8:	298f883a 	add	r7,r5,r6
 10014ac:	21c00a2e 	bgeu	r4,r7,10014d8 <memmove+0x3c>
 10014b0:	30000726 	beq	r6,zero,10014d0 <memmove+0x34>
 10014b4:	2187883a 	add	r3,r4,r6
 10014b8:	198dc83a 	sub	r6,r3,r6
 10014bc:	39ffffc4 	addi	r7,r7,-1
 10014c0:	38800003 	ldbu	r2,0(r7)
 10014c4:	18ffffc4 	addi	r3,r3,-1
 10014c8:	18800005 	stb	r2,0(r3)
 10014cc:	19bffb1e 	bne	r3,r6,10014bc <memmove+0x20>
 10014d0:	2005883a 	mov	r2,r4
 10014d4:	f800283a 	ret
 10014d8:	01c003c4 	movi	r7,15
 10014dc:	39800a36 	bltu	r7,r6,1001508 <memmove+0x6c>
 10014e0:	303ffb26 	beq	r6,zero,10014d0 <memmove+0x34>
 10014e4:	400f883a 	mov	r7,r8
 10014e8:	320d883a 	add	r6,r6,r8
 10014ec:	28800003 	ldbu	r2,0(r5)
 10014f0:	29400044 	addi	r5,r5,1
 10014f4:	38800005 	stb	r2,0(r7)
 10014f8:	39c00044 	addi	r7,r7,1
 10014fc:	39bffb1e 	bne	r7,r6,10014ec <memmove+0x50>
 1001500:	2005883a 	mov	r2,r4
 1001504:	f800283a 	ret
 1001508:	1904b03a 	or	r2,r3,r4
 100150c:	108000cc 	andi	r2,r2,3
 1001510:	103ff31e 	bne	r2,zero,10014e0 <memmove+0x44>
 1001514:	3811883a 	mov	r8,r7
 1001518:	180b883a 	mov	r5,r3
 100151c:	200f883a 	mov	r7,r4
 1001520:	28c00017 	ldw	r3,0(r5)
 1001524:	31bffc04 	addi	r6,r6,-16
 1001528:	38c00015 	stw	r3,0(r7)
 100152c:	28800117 	ldw	r2,4(r5)
 1001530:	38800115 	stw	r2,4(r7)
 1001534:	28c00217 	ldw	r3,8(r5)
 1001538:	38c00215 	stw	r3,8(r7)
 100153c:	28800317 	ldw	r2,12(r5)
 1001540:	29400404 	addi	r5,r5,16
 1001544:	38800315 	stw	r2,12(r7)
 1001548:	39c00404 	addi	r7,r7,16
 100154c:	41bff436 	bltu	r8,r6,1001520 <memmove+0x84>
 1001550:	008000c4 	movi	r2,3
 1001554:	1180072e 	bgeu	r2,r6,1001574 <memmove+0xd8>
 1001558:	1007883a 	mov	r3,r2
 100155c:	28800017 	ldw	r2,0(r5)
 1001560:	31bfff04 	addi	r6,r6,-4
 1001564:	29400104 	addi	r5,r5,4
 1001568:	38800015 	stw	r2,0(r7)
 100156c:	39c00104 	addi	r7,r7,4
 1001570:	19bffa36 	bltu	r3,r6,100155c <memmove+0xc0>
 1001574:	3811883a 	mov	r8,r7
 1001578:	003fd906 	br	10014e0 <memmove+0x44>

0100157c <_realloc_r>:
 100157c:	defff404 	addi	sp,sp,-48
 1001580:	dd800815 	stw	r22,32(sp)
 1001584:	dc800415 	stw	r18,16(sp)
 1001588:	dc400315 	stw	r17,12(sp)
 100158c:	dfc00b15 	stw	ra,44(sp)
 1001590:	df000a15 	stw	fp,40(sp)
 1001594:	ddc00915 	stw	r23,36(sp)
 1001598:	dd400715 	stw	r21,28(sp)
 100159c:	dd000615 	stw	r20,24(sp)
 10015a0:	dcc00515 	stw	r19,20(sp)
 10015a4:	dc000215 	stw	r16,8(sp)
 10015a8:	2825883a 	mov	r18,r5
 10015ac:	3023883a 	mov	r17,r6
 10015b0:	202d883a 	mov	r22,r4
 10015b4:	2800c926 	beq	r5,zero,10018dc <_realloc_r+0x360>
 10015b8:	10039640 	call	1003964 <__malloc_lock>
 10015bc:	943ffe04 	addi	r16,r18,-8
 10015c0:	88c002c4 	addi	r3,r17,11
 10015c4:	00800584 	movi	r2,22
 10015c8:	82000117 	ldw	r8,4(r16)
 10015cc:	10c01b2e 	bgeu	r2,r3,100163c <_realloc_r+0xc0>
 10015d0:	00bffe04 	movi	r2,-8
 10015d4:	188e703a 	and	r7,r3,r2
 10015d8:	3839883a 	mov	fp,r7
 10015dc:	38001a16 	blt	r7,zero,1001648 <_realloc_r+0xcc>
 10015e0:	e4401936 	bltu	fp,r17,1001648 <_realloc_r+0xcc>
 10015e4:	013fff04 	movi	r4,-4
 10015e8:	4126703a 	and	r19,r8,r4
 10015ec:	99c02616 	blt	r19,r7,1001688 <_realloc_r+0x10c>
 10015f0:	802b883a 	mov	r21,r16
 10015f4:	9829883a 	mov	r20,r19
 10015f8:	84000204 	addi	r16,r16,8
 10015fc:	a80f883a 	mov	r7,r21
 1001600:	a70dc83a 	sub	r6,r20,fp
 1001604:	008003c4 	movi	r2,15
 1001608:	1180c136 	bltu	r2,r6,1001910 <_realloc_r+0x394>
 100160c:	38800117 	ldw	r2,4(r7)
 1001610:	a549883a 	add	r4,r20,r21
 1001614:	1080004c 	andi	r2,r2,1
 1001618:	a084b03a 	or	r2,r20,r2
 100161c:	38800115 	stw	r2,4(r7)
 1001620:	20c00117 	ldw	r3,4(r4)
 1001624:	18c00054 	ori	r3,r3,1
 1001628:	20c00115 	stw	r3,4(r4)
 100162c:	b009883a 	mov	r4,r22
 1001630:	10039840 	call	1003984 <__malloc_unlock>
 1001634:	8023883a 	mov	r17,r16
 1001638:	00000606 	br	1001654 <_realloc_r+0xd8>
 100163c:	01c00404 	movi	r7,16
 1001640:	3839883a 	mov	fp,r7
 1001644:	e47fe72e 	bgeu	fp,r17,10015e4 <_realloc_r+0x68>
 1001648:	00800304 	movi	r2,12
 100164c:	0023883a 	mov	r17,zero
 1001650:	b0800015 	stw	r2,0(r22)
 1001654:	8805883a 	mov	r2,r17
 1001658:	dfc00b17 	ldw	ra,44(sp)
 100165c:	df000a17 	ldw	fp,40(sp)
 1001660:	ddc00917 	ldw	r23,36(sp)
 1001664:	dd800817 	ldw	r22,32(sp)
 1001668:	dd400717 	ldw	r21,28(sp)
 100166c:	dd000617 	ldw	r20,24(sp)
 1001670:	dcc00517 	ldw	r19,20(sp)
 1001674:	dc800417 	ldw	r18,16(sp)
 1001678:	dc400317 	ldw	r17,12(sp)
 100167c:	dc000217 	ldw	r16,8(sp)
 1001680:	dec00c04 	addi	sp,sp,48
 1001684:	f800283a 	ret
 1001688:	00804074 	movhi	r2,257
 100168c:	10a2ba04 	addi	r2,r2,-29976
 1001690:	12400217 	ldw	r9,8(r2)
 1001694:	84cd883a 	add	r6,r16,r19
 1001698:	802b883a 	mov	r21,r16
 100169c:	3240b926 	beq	r6,r9,1001984 <_realloc_r+0x408>
 10016a0:	31400117 	ldw	r5,4(r6)
 10016a4:	00bfff84 	movi	r2,-2
 10016a8:	2884703a 	and	r2,r5,r2
 10016ac:	1185883a 	add	r2,r2,r6
 10016b0:	10c00117 	ldw	r3,4(r2)
 10016b4:	18c0004c 	andi	r3,r3,1
 10016b8:	1807003a 	cmpeq	r3,r3,zero
 10016bc:	1800a326 	beq	r3,zero,100194c <_realloc_r+0x3d0>
 10016c0:	2908703a 	and	r4,r5,r4
 10016c4:	9929883a 	add	r20,r19,r4
 10016c8:	a1c0a30e 	bge	r20,r7,1001958 <_realloc_r+0x3dc>
 10016cc:	4080004c 	andi	r2,r8,1
 10016d0:	1000551e 	bne	r2,zero,1001828 <_realloc_r+0x2ac>
 10016d4:	80800017 	ldw	r2,0(r16)
 10016d8:	80afc83a 	sub	r23,r16,r2
 10016dc:	b8c00117 	ldw	r3,4(r23)
 10016e0:	00bfff04 	movi	r2,-4
 10016e4:	1884703a 	and	r2,r3,r2
 10016e8:	30002e26 	beq	r6,zero,10017a4 <_realloc_r+0x228>
 10016ec:	3240b926 	beq	r6,r9,10019d4 <_realloc_r+0x458>
 10016f0:	98a9883a 	add	r20,r19,r2
 10016f4:	2509883a 	add	r4,r4,r20
 10016f8:	d9000015 	stw	r4,0(sp)
 10016fc:	21c02a16 	blt	r4,r7,10017a8 <_realloc_r+0x22c>
 1001700:	30800317 	ldw	r2,12(r6)
 1001704:	30c00217 	ldw	r3,8(r6)
 1001708:	01400904 	movi	r5,36
 100170c:	99bfff04 	addi	r6,r19,-4
 1001710:	18800315 	stw	r2,12(r3)
 1001714:	10c00215 	stw	r3,8(r2)
 1001718:	b9000317 	ldw	r4,12(r23)
 100171c:	b8800217 	ldw	r2,8(r23)
 1001720:	b82b883a 	mov	r21,r23
 1001724:	bc000204 	addi	r16,r23,8
 1001728:	20800215 	stw	r2,8(r4)
 100172c:	11000315 	stw	r4,12(r2)
 1001730:	2980e436 	bltu	r5,r6,1001ac4 <_realloc_r+0x548>
 1001734:	008004c4 	movi	r2,19
 1001738:	9009883a 	mov	r4,r18
 100173c:	8011883a 	mov	r8,r16
 1001740:	11800f2e 	bgeu	r2,r6,1001780 <_realloc_r+0x204>
 1001744:	90800017 	ldw	r2,0(r18)
 1001748:	ba000404 	addi	r8,r23,16
 100174c:	91000204 	addi	r4,r18,8
 1001750:	b8800215 	stw	r2,8(r23)
 1001754:	90c00117 	ldw	r3,4(r18)
 1001758:	008006c4 	movi	r2,27
 100175c:	b8c00315 	stw	r3,12(r23)
 1001760:	1180072e 	bgeu	r2,r6,1001780 <_realloc_r+0x204>
 1001764:	90c00217 	ldw	r3,8(r18)
 1001768:	ba000604 	addi	r8,r23,24
 100176c:	91000404 	addi	r4,r18,16
 1001770:	b8c00415 	stw	r3,16(r23)
 1001774:	90800317 	ldw	r2,12(r18)
 1001778:	b8800515 	stw	r2,20(r23)
 100177c:	3140e726 	beq	r6,r5,1001b1c <_realloc_r+0x5a0>
 1001780:	20800017 	ldw	r2,0(r4)
 1001784:	dd000017 	ldw	r20,0(sp)
 1001788:	b80f883a 	mov	r7,r23
 100178c:	40800015 	stw	r2,0(r8)
 1001790:	20c00117 	ldw	r3,4(r4)
 1001794:	40c00115 	stw	r3,4(r8)
 1001798:	20800217 	ldw	r2,8(r4)
 100179c:	40800215 	stw	r2,8(r8)
 10017a0:	003f9706 	br	1001600 <_realloc_r+0x84>
 10017a4:	98a9883a 	add	r20,r19,r2
 10017a8:	a1c01f16 	blt	r20,r7,1001828 <_realloc_r+0x2ac>
 10017ac:	b8c00317 	ldw	r3,12(r23)
 10017b0:	b8800217 	ldw	r2,8(r23)
 10017b4:	99bfff04 	addi	r6,r19,-4
 10017b8:	01400904 	movi	r5,36
 10017bc:	b82b883a 	mov	r21,r23
 10017c0:	18800215 	stw	r2,8(r3)
 10017c4:	10c00315 	stw	r3,12(r2)
 10017c8:	bc000204 	addi	r16,r23,8
 10017cc:	2980c336 	bltu	r5,r6,1001adc <_realloc_r+0x560>
 10017d0:	008004c4 	movi	r2,19
 10017d4:	9009883a 	mov	r4,r18
 10017d8:	8011883a 	mov	r8,r16
 10017dc:	11800f2e 	bgeu	r2,r6,100181c <_realloc_r+0x2a0>
 10017e0:	90800017 	ldw	r2,0(r18)
 10017e4:	ba000404 	addi	r8,r23,16
 10017e8:	91000204 	addi	r4,r18,8
 10017ec:	b8800215 	stw	r2,8(r23)
 10017f0:	90c00117 	ldw	r3,4(r18)
 10017f4:	008006c4 	movi	r2,27
 10017f8:	b8c00315 	stw	r3,12(r23)
 10017fc:	1180072e 	bgeu	r2,r6,100181c <_realloc_r+0x2a0>
 1001800:	90c00217 	ldw	r3,8(r18)
 1001804:	ba000604 	addi	r8,r23,24
 1001808:	91000404 	addi	r4,r18,16
 100180c:	b8c00415 	stw	r3,16(r23)
 1001810:	90800317 	ldw	r2,12(r18)
 1001814:	b8800515 	stw	r2,20(r23)
 1001818:	3140c726 	beq	r6,r5,1001b38 <_realloc_r+0x5bc>
 100181c:	20800017 	ldw	r2,0(r4)
 1001820:	b80f883a 	mov	r7,r23
 1001824:	003fd906 	br	100178c <_realloc_r+0x210>
 1001828:	880b883a 	mov	r5,r17
 100182c:	b009883a 	mov	r4,r22
 1001830:	1000bd80 	call	1000bd8 <_malloc_r>
 1001834:	1023883a 	mov	r17,r2
 1001838:	10002526 	beq	r2,zero,10018d0 <_realloc_r+0x354>
 100183c:	80800117 	ldw	r2,4(r16)
 1001840:	00ffff84 	movi	r3,-2
 1001844:	893ffe04 	addi	r4,r17,-8
 1001848:	10c4703a 	and	r2,r2,r3
 100184c:	8085883a 	add	r2,r16,r2
 1001850:	20809526 	beq	r4,r2,1001aa8 <_realloc_r+0x52c>
 1001854:	99bfff04 	addi	r6,r19,-4
 1001858:	01c00904 	movi	r7,36
 100185c:	39804536 	bltu	r7,r6,1001974 <_realloc_r+0x3f8>
 1001860:	008004c4 	movi	r2,19
 1001864:	9009883a 	mov	r4,r18
 1001868:	880b883a 	mov	r5,r17
 100186c:	11800f2e 	bgeu	r2,r6,10018ac <_realloc_r+0x330>
 1001870:	90800017 	ldw	r2,0(r18)
 1001874:	89400204 	addi	r5,r17,8
 1001878:	91000204 	addi	r4,r18,8
 100187c:	88800015 	stw	r2,0(r17)
 1001880:	90c00117 	ldw	r3,4(r18)
 1001884:	008006c4 	movi	r2,27
 1001888:	88c00115 	stw	r3,4(r17)
 100188c:	1180072e 	bgeu	r2,r6,10018ac <_realloc_r+0x330>
 1001890:	90c00217 	ldw	r3,8(r18)
 1001894:	89400404 	addi	r5,r17,16
 1001898:	91000404 	addi	r4,r18,16
 100189c:	88c00215 	stw	r3,8(r17)
 10018a0:	90800317 	ldw	r2,12(r18)
 10018a4:	88800315 	stw	r2,12(r17)
 10018a8:	31c09126 	beq	r6,r7,1001af0 <_realloc_r+0x574>
 10018ac:	20800017 	ldw	r2,0(r4)
 10018b0:	28800015 	stw	r2,0(r5)
 10018b4:	20c00117 	ldw	r3,4(r4)
 10018b8:	28c00115 	stw	r3,4(r5)
 10018bc:	20800217 	ldw	r2,8(r4)
 10018c0:	28800215 	stw	r2,8(r5)
 10018c4:	900b883a 	mov	r5,r18
 10018c8:	b009883a 	mov	r4,r22
 10018cc:	100236c0 	call	100236c <_free_r>
 10018d0:	b009883a 	mov	r4,r22
 10018d4:	10039840 	call	1003984 <__malloc_unlock>
 10018d8:	003f5e06 	br	1001654 <_realloc_r+0xd8>
 10018dc:	300b883a 	mov	r5,r6
 10018e0:	dfc00b17 	ldw	ra,44(sp)
 10018e4:	df000a17 	ldw	fp,40(sp)
 10018e8:	ddc00917 	ldw	r23,36(sp)
 10018ec:	dd800817 	ldw	r22,32(sp)
 10018f0:	dd400717 	ldw	r21,28(sp)
 10018f4:	dd000617 	ldw	r20,24(sp)
 10018f8:	dcc00517 	ldw	r19,20(sp)
 10018fc:	dc800417 	ldw	r18,16(sp)
 1001900:	dc400317 	ldw	r17,12(sp)
 1001904:	dc000217 	ldw	r16,8(sp)
 1001908:	dec00c04 	addi	sp,sp,48
 100190c:	1000bd81 	jmpi	1000bd8 <_malloc_r>
 1001910:	38800117 	ldw	r2,4(r7)
 1001914:	e54b883a 	add	r5,fp,r21
 1001918:	31000054 	ori	r4,r6,1
 100191c:	1080004c 	andi	r2,r2,1
 1001920:	1704b03a 	or	r2,r2,fp
 1001924:	38800115 	stw	r2,4(r7)
 1001928:	29000115 	stw	r4,4(r5)
 100192c:	2987883a 	add	r3,r5,r6
 1001930:	18800117 	ldw	r2,4(r3)
 1001934:	29400204 	addi	r5,r5,8
 1001938:	b009883a 	mov	r4,r22
 100193c:	10800054 	ori	r2,r2,1
 1001940:	18800115 	stw	r2,4(r3)
 1001944:	100236c0 	call	100236c <_free_r>
 1001948:	003f3806 	br	100162c <_realloc_r+0xb0>
 100194c:	000d883a 	mov	r6,zero
 1001950:	0009883a 	mov	r4,zero
 1001954:	003f5d06 	br	10016cc <_realloc_r+0x150>
 1001958:	30c00217 	ldw	r3,8(r6)
 100195c:	30800317 	ldw	r2,12(r6)
 1001960:	800f883a 	mov	r7,r16
 1001964:	84000204 	addi	r16,r16,8
 1001968:	10c00215 	stw	r3,8(r2)
 100196c:	18800315 	stw	r2,12(r3)
 1001970:	003f2306 	br	1001600 <_realloc_r+0x84>
 1001974:	8809883a 	mov	r4,r17
 1001978:	900b883a 	mov	r5,r18
 100197c:	100149c0 	call	100149c <memmove>
 1001980:	003fd006 	br	10018c4 <_realloc_r+0x348>
 1001984:	30800117 	ldw	r2,4(r6)
 1001988:	e0c00404 	addi	r3,fp,16
 100198c:	1108703a 	and	r4,r2,r4
 1001990:	9905883a 	add	r2,r19,r4
 1001994:	10ff4d16 	blt	r2,r3,10016cc <_realloc_r+0x150>
 1001998:	1705c83a 	sub	r2,r2,fp
 100199c:	870b883a 	add	r5,r16,fp
 10019a0:	10800054 	ori	r2,r2,1
 10019a4:	28800115 	stw	r2,4(r5)
 10019a8:	80c00117 	ldw	r3,4(r16)
 10019ac:	00804074 	movhi	r2,257
 10019b0:	10a2ba04 	addi	r2,r2,-29976
 10019b4:	b009883a 	mov	r4,r22
 10019b8:	18c0004c 	andi	r3,r3,1
 10019bc:	e0c6b03a 	or	r3,fp,r3
 10019c0:	11400215 	stw	r5,8(r2)
 10019c4:	80c00115 	stw	r3,4(r16)
 10019c8:	10039840 	call	1003984 <__malloc_unlock>
 10019cc:	84400204 	addi	r17,r16,8
 10019d0:	003f2006 	br	1001654 <_realloc_r+0xd8>
 10019d4:	98a9883a 	add	r20,r19,r2
 10019d8:	2509883a 	add	r4,r4,r20
 10019dc:	e0800404 	addi	r2,fp,16
 10019e0:	d9000115 	stw	r4,4(sp)
 10019e4:	20bf7016 	blt	r4,r2,10017a8 <_realloc_r+0x22c>
 10019e8:	b8c00317 	ldw	r3,12(r23)
 10019ec:	b8800217 	ldw	r2,8(r23)
 10019f0:	99bfff04 	addi	r6,r19,-4
 10019f4:	01400904 	movi	r5,36
 10019f8:	18800215 	stw	r2,8(r3)
 10019fc:	10c00315 	stw	r3,12(r2)
 1001a00:	bc400204 	addi	r17,r23,8
 1001a04:	29804136 	bltu	r5,r6,1001b0c <_realloc_r+0x590>
 1001a08:	008004c4 	movi	r2,19
 1001a0c:	9009883a 	mov	r4,r18
 1001a10:	880f883a 	mov	r7,r17
 1001a14:	11800f2e 	bgeu	r2,r6,1001a54 <_realloc_r+0x4d8>
 1001a18:	90800017 	ldw	r2,0(r18)
 1001a1c:	b9c00404 	addi	r7,r23,16
 1001a20:	91000204 	addi	r4,r18,8
 1001a24:	b8800215 	stw	r2,8(r23)
 1001a28:	90c00117 	ldw	r3,4(r18)
 1001a2c:	008006c4 	movi	r2,27
 1001a30:	b8c00315 	stw	r3,12(r23)
 1001a34:	1180072e 	bgeu	r2,r6,1001a54 <_realloc_r+0x4d8>
 1001a38:	90c00217 	ldw	r3,8(r18)
 1001a3c:	b9c00604 	addi	r7,r23,24
 1001a40:	91000404 	addi	r4,r18,16
 1001a44:	b8c00415 	stw	r3,16(r23)
 1001a48:	90800317 	ldw	r2,12(r18)
 1001a4c:	b8800515 	stw	r2,20(r23)
 1001a50:	31404026 	beq	r6,r5,1001b54 <_realloc_r+0x5d8>
 1001a54:	20800017 	ldw	r2,0(r4)
 1001a58:	38800015 	stw	r2,0(r7)
 1001a5c:	20c00117 	ldw	r3,4(r4)
 1001a60:	38c00115 	stw	r3,4(r7)
 1001a64:	20800217 	ldw	r2,8(r4)
 1001a68:	38800215 	stw	r2,8(r7)
 1001a6c:	d8c00117 	ldw	r3,4(sp)
 1001a70:	bf0b883a 	add	r5,r23,fp
 1001a74:	b009883a 	mov	r4,r22
 1001a78:	1f05c83a 	sub	r2,r3,fp
 1001a7c:	10800054 	ori	r2,r2,1
 1001a80:	28800115 	stw	r2,4(r5)
 1001a84:	b8c00117 	ldw	r3,4(r23)
 1001a88:	00804074 	movhi	r2,257
 1001a8c:	10a2ba04 	addi	r2,r2,-29976
 1001a90:	11400215 	stw	r5,8(r2)
 1001a94:	18c0004c 	andi	r3,r3,1
 1001a98:	e0c6b03a 	or	r3,fp,r3
 1001a9c:	b8c00115 	stw	r3,4(r23)
 1001aa0:	10039840 	call	1003984 <__malloc_unlock>
 1001aa4:	003eeb06 	br	1001654 <_realloc_r+0xd8>
 1001aa8:	20800117 	ldw	r2,4(r4)
 1001aac:	00ffff04 	movi	r3,-4
 1001ab0:	800f883a 	mov	r7,r16
 1001ab4:	10c4703a 	and	r2,r2,r3
 1001ab8:	98a9883a 	add	r20,r19,r2
 1001abc:	84000204 	addi	r16,r16,8
 1001ac0:	003ecf06 	br	1001600 <_realloc_r+0x84>
 1001ac4:	900b883a 	mov	r5,r18
 1001ac8:	8009883a 	mov	r4,r16
 1001acc:	100149c0 	call	100149c <memmove>
 1001ad0:	dd000017 	ldw	r20,0(sp)
 1001ad4:	b80f883a 	mov	r7,r23
 1001ad8:	003ec906 	br	1001600 <_realloc_r+0x84>
 1001adc:	900b883a 	mov	r5,r18
 1001ae0:	8009883a 	mov	r4,r16
 1001ae4:	100149c0 	call	100149c <memmove>
 1001ae8:	b80f883a 	mov	r7,r23
 1001aec:	003ec406 	br	1001600 <_realloc_r+0x84>
 1001af0:	90c00417 	ldw	r3,16(r18)
 1001af4:	89400604 	addi	r5,r17,24
 1001af8:	91000604 	addi	r4,r18,24
 1001afc:	88c00415 	stw	r3,16(r17)
 1001b00:	90800517 	ldw	r2,20(r18)
 1001b04:	88800515 	stw	r2,20(r17)
 1001b08:	003f6806 	br	10018ac <_realloc_r+0x330>
 1001b0c:	900b883a 	mov	r5,r18
 1001b10:	8809883a 	mov	r4,r17
 1001b14:	100149c0 	call	100149c <memmove>
 1001b18:	003fd406 	br	1001a6c <_realloc_r+0x4f0>
 1001b1c:	90c00417 	ldw	r3,16(r18)
 1001b20:	91000604 	addi	r4,r18,24
 1001b24:	ba000804 	addi	r8,r23,32
 1001b28:	b8c00615 	stw	r3,24(r23)
 1001b2c:	90800517 	ldw	r2,20(r18)
 1001b30:	b8800715 	stw	r2,28(r23)
 1001b34:	003f1206 	br	1001780 <_realloc_r+0x204>
 1001b38:	90c00417 	ldw	r3,16(r18)
 1001b3c:	91000604 	addi	r4,r18,24
 1001b40:	ba000804 	addi	r8,r23,32
 1001b44:	b8c00615 	stw	r3,24(r23)
 1001b48:	90800517 	ldw	r2,20(r18)
 1001b4c:	b8800715 	stw	r2,28(r23)
 1001b50:	003f3206 	br	100181c <_realloc_r+0x2a0>
 1001b54:	90c00417 	ldw	r3,16(r18)
 1001b58:	91000604 	addi	r4,r18,24
 1001b5c:	b9c00804 	addi	r7,r23,32
 1001b60:	b8c00615 	stw	r3,24(r23)
 1001b64:	90800517 	ldw	r2,20(r18)
 1001b68:	b8800715 	stw	r2,28(r23)
 1001b6c:	003fb906 	br	1001a54 <_realloc_r+0x4d8>

01001b70 <_sbrk_r>:
 1001b70:	defffd04 	addi	sp,sp,-12
 1001b74:	dc000015 	stw	r16,0(sp)
 1001b78:	04004074 	movhi	r16,257
 1001b7c:	842f4204 	addi	r16,r16,-17144
 1001b80:	dc400115 	stw	r17,4(sp)
 1001b84:	80000015 	stw	zero,0(r16)
 1001b88:	2023883a 	mov	r17,r4
 1001b8c:	2809883a 	mov	r4,r5
 1001b90:	dfc00215 	stw	ra,8(sp)
 1001b94:	1003ba00 	call	1003ba0 <sbrk>
 1001b98:	1007883a 	mov	r3,r2
 1001b9c:	00bfffc4 	movi	r2,-1
 1001ba0:	18800626 	beq	r3,r2,1001bbc <_sbrk_r+0x4c>
 1001ba4:	1805883a 	mov	r2,r3
 1001ba8:	dfc00217 	ldw	ra,8(sp)
 1001bac:	dc400117 	ldw	r17,4(sp)
 1001bb0:	dc000017 	ldw	r16,0(sp)
 1001bb4:	dec00304 	addi	sp,sp,12
 1001bb8:	f800283a 	ret
 1001bbc:	80800017 	ldw	r2,0(r16)
 1001bc0:	103ff826 	beq	r2,zero,1001ba4 <_sbrk_r+0x34>
 1001bc4:	88800015 	stw	r2,0(r17)
 1001bc8:	1805883a 	mov	r2,r3
 1001bcc:	dfc00217 	ldw	ra,8(sp)
 1001bd0:	dc400117 	ldw	r17,4(sp)
 1001bd4:	dc000017 	ldw	r16,0(sp)
 1001bd8:	dec00304 	addi	sp,sp,12
 1001bdc:	f800283a 	ret

01001be0 <__swsetup_r>:
 1001be0:	00804074 	movhi	r2,257
 1001be4:	10a87004 	addi	r2,r2,-24128
 1001be8:	10c00017 	ldw	r3,0(r2)
 1001bec:	defffd04 	addi	sp,sp,-12
 1001bf0:	dc400115 	stw	r17,4(sp)
 1001bf4:	dc000015 	stw	r16,0(sp)
 1001bf8:	dfc00215 	stw	ra,8(sp)
 1001bfc:	2023883a 	mov	r17,r4
 1001c00:	2821883a 	mov	r16,r5
 1001c04:	18000226 	beq	r3,zero,1001c10 <__swsetup_r+0x30>
 1001c08:	18800e17 	ldw	r2,56(r3)
 1001c0c:	10001f26 	beq	r2,zero,1001c8c <__swsetup_r+0xac>
 1001c10:	8100030b 	ldhu	r4,12(r16)
 1001c14:	2080020c 	andi	r2,r4,8
 1001c18:	10002826 	beq	r2,zero,1001cbc <__swsetup_r+0xdc>
 1001c1c:	81400417 	ldw	r5,16(r16)
 1001c20:	28001d26 	beq	r5,zero,1001c98 <__swsetup_r+0xb8>
 1001c24:	2080004c 	andi	r2,r4,1
 1001c28:	1005003a 	cmpeq	r2,r2,zero
 1001c2c:	10000b26 	beq	r2,zero,1001c5c <__swsetup_r+0x7c>
 1001c30:	2080008c 	andi	r2,r4,2
 1001c34:	10001226 	beq	r2,zero,1001c80 <__swsetup_r+0xa0>
 1001c38:	0005883a 	mov	r2,zero
 1001c3c:	80800215 	stw	r2,8(r16)
 1001c40:	28000b26 	beq	r5,zero,1001c70 <__swsetup_r+0x90>
 1001c44:	0005883a 	mov	r2,zero
 1001c48:	dfc00217 	ldw	ra,8(sp)
 1001c4c:	dc400117 	ldw	r17,4(sp)
 1001c50:	dc000017 	ldw	r16,0(sp)
 1001c54:	dec00304 	addi	sp,sp,12
 1001c58:	f800283a 	ret
 1001c5c:	80800517 	ldw	r2,20(r16)
 1001c60:	80000215 	stw	zero,8(r16)
 1001c64:	0085c83a 	sub	r2,zero,r2
 1001c68:	80800615 	stw	r2,24(r16)
 1001c6c:	283ff51e 	bne	r5,zero,1001c44 <__swsetup_r+0x64>
 1001c70:	2080200c 	andi	r2,r4,128
 1001c74:	103ff326 	beq	r2,zero,1001c44 <__swsetup_r+0x64>
 1001c78:	00bfffc4 	movi	r2,-1
 1001c7c:	003ff206 	br	1001c48 <__swsetup_r+0x68>
 1001c80:	80800517 	ldw	r2,20(r16)
 1001c84:	80800215 	stw	r2,8(r16)
 1001c88:	003fed06 	br	1001c40 <__swsetup_r+0x60>
 1001c8c:	1809883a 	mov	r4,r3
 1001c90:	1001fb40 	call	1001fb4 <__sinit>
 1001c94:	003fde06 	br	1001c10 <__swsetup_r+0x30>
 1001c98:	20c0a00c 	andi	r3,r4,640
 1001c9c:	00808004 	movi	r2,512
 1001ca0:	18bfe026 	beq	r3,r2,1001c24 <__swsetup_r+0x44>
 1001ca4:	8809883a 	mov	r4,r17
 1001ca8:	800b883a 	mov	r5,r16
 1001cac:	10028000 	call	1002800 <__smakebuf_r>
 1001cb0:	8100030b 	ldhu	r4,12(r16)
 1001cb4:	81400417 	ldw	r5,16(r16)
 1001cb8:	003fda06 	br	1001c24 <__swsetup_r+0x44>
 1001cbc:	2080040c 	andi	r2,r4,16
 1001cc0:	103fed26 	beq	r2,zero,1001c78 <__swsetup_r+0x98>
 1001cc4:	2080010c 	andi	r2,r4,4
 1001cc8:	10001226 	beq	r2,zero,1001d14 <__swsetup_r+0x134>
 1001ccc:	81400c17 	ldw	r5,48(r16)
 1001cd0:	28000526 	beq	r5,zero,1001ce8 <__swsetup_r+0x108>
 1001cd4:	80801004 	addi	r2,r16,64
 1001cd8:	28800226 	beq	r5,r2,1001ce4 <__swsetup_r+0x104>
 1001cdc:	8809883a 	mov	r4,r17
 1001ce0:	100236c0 	call	100236c <_free_r>
 1001ce4:	80000c15 	stw	zero,48(r16)
 1001ce8:	8080030b 	ldhu	r2,12(r16)
 1001cec:	81400417 	ldw	r5,16(r16)
 1001cf0:	80000115 	stw	zero,4(r16)
 1001cf4:	10bff6cc 	andi	r2,r2,65499
 1001cf8:	8080030d 	sth	r2,12(r16)
 1001cfc:	81400015 	stw	r5,0(r16)
 1001d00:	8080030b 	ldhu	r2,12(r16)
 1001d04:	10800214 	ori	r2,r2,8
 1001d08:	113fffcc 	andi	r4,r2,65535
 1001d0c:	8080030d 	sth	r2,12(r16)
 1001d10:	003fc306 	br	1001c20 <__swsetup_r+0x40>
 1001d14:	81400417 	ldw	r5,16(r16)
 1001d18:	003ff906 	br	1001d00 <__swsetup_r+0x120>

01001d1c <_fflush_r>:
 1001d1c:	defffb04 	addi	sp,sp,-20
 1001d20:	dcc00315 	stw	r19,12(sp)
 1001d24:	dc800215 	stw	r18,8(sp)
 1001d28:	dfc00415 	stw	ra,16(sp)
 1001d2c:	dc400115 	stw	r17,4(sp)
 1001d30:	dc000015 	stw	r16,0(sp)
 1001d34:	2027883a 	mov	r19,r4
 1001d38:	2825883a 	mov	r18,r5
 1001d3c:	20000226 	beq	r4,zero,1001d48 <_fflush_r+0x2c>
 1001d40:	20800e17 	ldw	r2,56(r4)
 1001d44:	10005626 	beq	r2,zero,1001ea0 <_fflush_r+0x184>
 1001d48:	9100030b 	ldhu	r4,12(r18)
 1001d4c:	20ffffcc 	andi	r3,r4,65535
 1001d50:	18e0001c 	xori	r3,r3,32768
 1001d54:	18e00004 	addi	r3,r3,-32768
 1001d58:	1880020c 	andi	r2,r3,8
 1001d5c:	1000261e 	bne	r2,zero,1001df8 <_fflush_r+0xdc>
 1001d60:	90c00117 	ldw	r3,4(r18)
 1001d64:	20820014 	ori	r2,r4,2048
 1001d68:	9080030d 	sth	r2,12(r18)
 1001d6c:	1009883a 	mov	r4,r2
 1001d70:	00c0400e 	bge	zero,r3,1001e74 <_fflush_r+0x158>
 1001d74:	92000a17 	ldw	r8,40(r18)
 1001d78:	40004026 	beq	r8,zero,1001e7c <_fflush_r+0x160>
 1001d7c:	2084000c 	andi	r2,r4,4096
 1001d80:	10005326 	beq	r2,zero,1001ed0 <_fflush_r+0x1b4>
 1001d84:	94001417 	ldw	r16,80(r18)
 1001d88:	9080030b 	ldhu	r2,12(r18)
 1001d8c:	1080010c 	andi	r2,r2,4
 1001d90:	1000481e 	bne	r2,zero,1001eb4 <_fflush_r+0x198>
 1001d94:	91400717 	ldw	r5,28(r18)
 1001d98:	9809883a 	mov	r4,r19
 1001d9c:	800d883a 	mov	r6,r16
 1001da0:	000f883a 	mov	r7,zero
 1001da4:	403ee83a 	callr	r8
 1001da8:	8080261e 	bne	r16,r2,1001e44 <_fflush_r+0x128>
 1001dac:	9080030b 	ldhu	r2,12(r18)
 1001db0:	91000417 	ldw	r4,16(r18)
 1001db4:	90000115 	stw	zero,4(r18)
 1001db8:	10bdffcc 	andi	r2,r2,63487
 1001dbc:	10ffffcc 	andi	r3,r2,65535
 1001dc0:	18c4000c 	andi	r3,r3,4096
 1001dc4:	9080030d 	sth	r2,12(r18)
 1001dc8:	91000015 	stw	r4,0(r18)
 1001dcc:	18002b26 	beq	r3,zero,1001e7c <_fflush_r+0x160>
 1001dd0:	0007883a 	mov	r3,zero
 1001dd4:	1805883a 	mov	r2,r3
 1001dd8:	94001415 	stw	r16,80(r18)
 1001ddc:	dfc00417 	ldw	ra,16(sp)
 1001de0:	dcc00317 	ldw	r19,12(sp)
 1001de4:	dc800217 	ldw	r18,8(sp)
 1001de8:	dc400117 	ldw	r17,4(sp)
 1001dec:	dc000017 	ldw	r16,0(sp)
 1001df0:	dec00504 	addi	sp,sp,20
 1001df4:	f800283a 	ret
 1001df8:	94400417 	ldw	r17,16(r18)
 1001dfc:	88001f26 	beq	r17,zero,1001e7c <_fflush_r+0x160>
 1001e00:	90800017 	ldw	r2,0(r18)
 1001e04:	18c000cc 	andi	r3,r3,3
 1001e08:	94400015 	stw	r17,0(r18)
 1001e0c:	1461c83a 	sub	r16,r2,r17
 1001e10:	18002526 	beq	r3,zero,1001ea8 <_fflush_r+0x18c>
 1001e14:	0005883a 	mov	r2,zero
 1001e18:	90800215 	stw	r2,8(r18)
 1001e1c:	0400170e 	bge	zero,r16,1001e7c <_fflush_r+0x160>
 1001e20:	90c00917 	ldw	r3,36(r18)
 1001e24:	91400717 	ldw	r5,28(r18)
 1001e28:	880d883a 	mov	r6,r17
 1001e2c:	800f883a 	mov	r7,r16
 1001e30:	9809883a 	mov	r4,r19
 1001e34:	183ee83a 	callr	r3
 1001e38:	88a3883a 	add	r17,r17,r2
 1001e3c:	80a1c83a 	sub	r16,r16,r2
 1001e40:	00bff616 	blt	zero,r2,1001e1c <_fflush_r+0x100>
 1001e44:	9080030b 	ldhu	r2,12(r18)
 1001e48:	00ffffc4 	movi	r3,-1
 1001e4c:	10801014 	ori	r2,r2,64
 1001e50:	9080030d 	sth	r2,12(r18)
 1001e54:	1805883a 	mov	r2,r3
 1001e58:	dfc00417 	ldw	ra,16(sp)
 1001e5c:	dcc00317 	ldw	r19,12(sp)
 1001e60:	dc800217 	ldw	r18,8(sp)
 1001e64:	dc400117 	ldw	r17,4(sp)
 1001e68:	dc000017 	ldw	r16,0(sp)
 1001e6c:	dec00504 	addi	sp,sp,20
 1001e70:	f800283a 	ret
 1001e74:	90800f17 	ldw	r2,60(r18)
 1001e78:	00bfbe16 	blt	zero,r2,1001d74 <_fflush_r+0x58>
 1001e7c:	0007883a 	mov	r3,zero
 1001e80:	1805883a 	mov	r2,r3
 1001e84:	dfc00417 	ldw	ra,16(sp)
 1001e88:	dcc00317 	ldw	r19,12(sp)
 1001e8c:	dc800217 	ldw	r18,8(sp)
 1001e90:	dc400117 	ldw	r17,4(sp)
 1001e94:	dc000017 	ldw	r16,0(sp)
 1001e98:	dec00504 	addi	sp,sp,20
 1001e9c:	f800283a 	ret
 1001ea0:	1001fb40 	call	1001fb4 <__sinit>
 1001ea4:	003fa806 	br	1001d48 <_fflush_r+0x2c>
 1001ea8:	90800517 	ldw	r2,20(r18)
 1001eac:	90800215 	stw	r2,8(r18)
 1001eb0:	003fda06 	br	1001e1c <_fflush_r+0x100>
 1001eb4:	90800117 	ldw	r2,4(r18)
 1001eb8:	90c00c17 	ldw	r3,48(r18)
 1001ebc:	80a1c83a 	sub	r16,r16,r2
 1001ec0:	183fb426 	beq	r3,zero,1001d94 <_fflush_r+0x78>
 1001ec4:	90800f17 	ldw	r2,60(r18)
 1001ec8:	80a1c83a 	sub	r16,r16,r2
 1001ecc:	003fb106 	br	1001d94 <_fflush_r+0x78>
 1001ed0:	91400717 	ldw	r5,28(r18)
 1001ed4:	9809883a 	mov	r4,r19
 1001ed8:	000d883a 	mov	r6,zero
 1001edc:	01c00044 	movi	r7,1
 1001ee0:	403ee83a 	callr	r8
 1001ee4:	1021883a 	mov	r16,r2
 1001ee8:	00bfffc4 	movi	r2,-1
 1001eec:	80800226 	beq	r16,r2,1001ef8 <_fflush_r+0x1dc>
 1001ef0:	92000a17 	ldw	r8,40(r18)
 1001ef4:	003fa406 	br	1001d88 <_fflush_r+0x6c>
 1001ef8:	98c00017 	ldw	r3,0(r19)
 1001efc:	00800744 	movi	r2,29
 1001f00:	18bfde26 	beq	r3,r2,1001e7c <_fflush_r+0x160>
 1001f04:	9080030b 	ldhu	r2,12(r18)
 1001f08:	8007883a 	mov	r3,r16
 1001f0c:	10801014 	ori	r2,r2,64
 1001f10:	9080030d 	sth	r2,12(r18)
 1001f14:	003fcf06 	br	1001e54 <_fflush_r+0x138>

01001f18 <fflush>:
 1001f18:	01404034 	movhi	r5,256
 1001f1c:	29474704 	addi	r5,r5,7452
 1001f20:	2007883a 	mov	r3,r4
 1001f24:	20000526 	beq	r4,zero,1001f3c <fflush+0x24>
 1001f28:	00804074 	movhi	r2,257
 1001f2c:	10a87004 	addi	r2,r2,-24128
 1001f30:	11000017 	ldw	r4,0(r2)
 1001f34:	180b883a 	mov	r5,r3
 1001f38:	1001d1c1 	jmpi	1001d1c <_fflush_r>
 1001f3c:	00804074 	movhi	r2,257
 1001f40:	10a87104 	addi	r2,r2,-24124
 1001f44:	11000017 	ldw	r4,0(r2)
 1001f48:	10026801 	jmpi	1002680 <_fwalk_reent>

01001f4c <std>:
 1001f4c:	00804034 	movhi	r2,256
 1001f50:	108a8b04 	addi	r2,r2,10796
 1001f54:	20800b15 	stw	r2,44(r4)
 1001f58:	00804034 	movhi	r2,256
 1001f5c:	108ac604 	addi	r2,r2,11032
 1001f60:	20800815 	stw	r2,32(r4)
 1001f64:	00c04034 	movhi	r3,256
 1001f68:	18caa704 	addi	r3,r3,10908
 1001f6c:	00804034 	movhi	r2,256
 1001f70:	108a8d04 	addi	r2,r2,10804
 1001f74:	2140030d 	sth	r5,12(r4)
 1001f78:	2180038d 	sth	r6,14(r4)
 1001f7c:	20c00915 	stw	r3,36(r4)
 1001f80:	20800a15 	stw	r2,40(r4)
 1001f84:	20000015 	stw	zero,0(r4)
 1001f88:	20000115 	stw	zero,4(r4)
 1001f8c:	20000215 	stw	zero,8(r4)
 1001f90:	20000415 	stw	zero,16(r4)
 1001f94:	20000515 	stw	zero,20(r4)
 1001f98:	20000615 	stw	zero,24(r4)
 1001f9c:	21000715 	stw	r4,28(r4)
 1001fa0:	f800283a 	ret

01001fa4 <__sfp_lock_acquire>:
 1001fa4:	f800283a 	ret

01001fa8 <__sfp_lock_release>:
 1001fa8:	f800283a 	ret

01001fac <__sinit_lock_acquire>:
 1001fac:	f800283a 	ret

01001fb0 <__sinit_lock_release>:
 1001fb0:	f800283a 	ret

01001fb4 <__sinit>:
 1001fb4:	20800e17 	ldw	r2,56(r4)
 1001fb8:	defffd04 	addi	sp,sp,-12
 1001fbc:	dc400115 	stw	r17,4(sp)
 1001fc0:	dc000015 	stw	r16,0(sp)
 1001fc4:	dfc00215 	stw	ra,8(sp)
 1001fc8:	04400044 	movi	r17,1
 1001fcc:	01400104 	movi	r5,4
 1001fd0:	000d883a 	mov	r6,zero
 1001fd4:	2021883a 	mov	r16,r4
 1001fd8:	2200bb04 	addi	r8,r4,748
 1001fdc:	200f883a 	mov	r7,r4
 1001fe0:	10000526 	beq	r2,zero,1001ff8 <__sinit+0x44>
 1001fe4:	dfc00217 	ldw	ra,8(sp)
 1001fe8:	dc400117 	ldw	r17,4(sp)
 1001fec:	dc000017 	ldw	r16,0(sp)
 1001ff0:	dec00304 	addi	sp,sp,12
 1001ff4:	f800283a 	ret
 1001ff8:	21000117 	ldw	r4,4(r4)
 1001ffc:	00804034 	movhi	r2,256
 1002000:	10882604 	addi	r2,r2,8344
 1002004:	00c000c4 	movi	r3,3
 1002008:	80800f15 	stw	r2,60(r16)
 100200c:	80c0b915 	stw	r3,740(r16)
 1002010:	8200ba15 	stw	r8,744(r16)
 1002014:	84400e15 	stw	r17,56(r16)
 1002018:	8000b815 	stw	zero,736(r16)
 100201c:	1001f4c0 	call	1001f4c <std>
 1002020:	81000217 	ldw	r4,8(r16)
 1002024:	880d883a 	mov	r6,r17
 1002028:	800f883a 	mov	r7,r16
 100202c:	01400284 	movi	r5,10
 1002030:	1001f4c0 	call	1001f4c <std>
 1002034:	81000317 	ldw	r4,12(r16)
 1002038:	800f883a 	mov	r7,r16
 100203c:	01400484 	movi	r5,18
 1002040:	01800084 	movi	r6,2
 1002044:	dfc00217 	ldw	ra,8(sp)
 1002048:	dc400117 	ldw	r17,4(sp)
 100204c:	dc000017 	ldw	r16,0(sp)
 1002050:	dec00304 	addi	sp,sp,12
 1002054:	1001f4c1 	jmpi	1001f4c <std>

01002058 <__fp_lock>:
 1002058:	0005883a 	mov	r2,zero
 100205c:	f800283a 	ret

01002060 <__fp_unlock>:
 1002060:	0005883a 	mov	r2,zero
 1002064:	f800283a 	ret

01002068 <__fp_unlock_all>:
 1002068:	00804074 	movhi	r2,257
 100206c:	10a87004 	addi	r2,r2,-24128
 1002070:	11000017 	ldw	r4,0(r2)
 1002074:	01404034 	movhi	r5,256
 1002078:	29481804 	addi	r5,r5,8288
 100207c:	10027481 	jmpi	1002748 <_fwalk>

01002080 <__fp_lock_all>:
 1002080:	00804074 	movhi	r2,257
 1002084:	10a87004 	addi	r2,r2,-24128
 1002088:	11000017 	ldw	r4,0(r2)
 100208c:	01404034 	movhi	r5,256
 1002090:	29481604 	addi	r5,r5,8280
 1002094:	10027481 	jmpi	1002748 <_fwalk>

01002098 <_cleanup_r>:
 1002098:	01404034 	movhi	r5,256
 100209c:	294b5c04 	addi	r5,r5,11632
 10020a0:	10027481 	jmpi	1002748 <_fwalk>

010020a4 <_cleanup>:
 10020a4:	00804074 	movhi	r2,257
 10020a8:	10a87104 	addi	r2,r2,-24124
 10020ac:	11000017 	ldw	r4,0(r2)
 10020b0:	10020981 	jmpi	1002098 <_cleanup_r>

010020b4 <__sfmoreglue>:
 10020b4:	defffc04 	addi	sp,sp,-16
 10020b8:	dc000015 	stw	r16,0(sp)
 10020bc:	2821883a 	mov	r16,r5
 10020c0:	dc400115 	stw	r17,4(sp)
 10020c4:	01401704 	movi	r5,92
 10020c8:	2023883a 	mov	r17,r4
 10020cc:	8009883a 	mov	r4,r16
 10020d0:	dfc00315 	stw	ra,12(sp)
 10020d4:	dcc00215 	stw	r19,8(sp)
 10020d8:	100307c0 	call	100307c <__mulsi3>
 10020dc:	11400304 	addi	r5,r2,12
 10020e0:	8809883a 	mov	r4,r17
 10020e4:	1027883a 	mov	r19,r2
 10020e8:	1000bd80 	call	1000bd8 <_malloc_r>
 10020ec:	10c00304 	addi	r3,r2,12
 10020f0:	1023883a 	mov	r17,r2
 10020f4:	1809883a 	mov	r4,r3
 10020f8:	980d883a 	mov	r6,r19
 10020fc:	000b883a 	mov	r5,zero
 1002100:	10000b26 	beq	r2,zero,1002130 <__sfmoreglue+0x7c>
 1002104:	14000115 	stw	r16,4(r2)
 1002108:	10c00215 	stw	r3,8(r2)
 100210c:	10000015 	stw	zero,0(r2)
 1002110:	10029940 	call	1002994 <memset>
 1002114:	8805883a 	mov	r2,r17
 1002118:	dfc00317 	ldw	ra,12(sp)
 100211c:	dcc00217 	ldw	r19,8(sp)
 1002120:	dc400117 	ldw	r17,4(sp)
 1002124:	dc000017 	ldw	r16,0(sp)
 1002128:	dec00404 	addi	sp,sp,16
 100212c:	f800283a 	ret
 1002130:	0023883a 	mov	r17,zero
 1002134:	8805883a 	mov	r2,r17
 1002138:	dfc00317 	ldw	ra,12(sp)
 100213c:	dcc00217 	ldw	r19,8(sp)
 1002140:	dc400117 	ldw	r17,4(sp)
 1002144:	dc000017 	ldw	r16,0(sp)
 1002148:	dec00404 	addi	sp,sp,16
 100214c:	f800283a 	ret

01002150 <__sfp>:
 1002150:	defffd04 	addi	sp,sp,-12
 1002154:	00804074 	movhi	r2,257
 1002158:	10a87104 	addi	r2,r2,-24124
 100215c:	dc000015 	stw	r16,0(sp)
 1002160:	14000017 	ldw	r16,0(r2)
 1002164:	dc400115 	stw	r17,4(sp)
 1002168:	dfc00215 	stw	ra,8(sp)
 100216c:	80800e17 	ldw	r2,56(r16)
 1002170:	2023883a 	mov	r17,r4
 1002174:	10002626 	beq	r2,zero,1002210 <__sfp+0xc0>
 1002178:	8400b804 	addi	r16,r16,736
 100217c:	80800117 	ldw	r2,4(r16)
 1002180:	81000217 	ldw	r4,8(r16)
 1002184:	10ffffc4 	addi	r3,r2,-1
 1002188:	18000916 	blt	r3,zero,10021b0 <__sfp+0x60>
 100218c:	2080030f 	ldh	r2,12(r4)
 1002190:	10000b26 	beq	r2,zero,10021c0 <__sfp+0x70>
 1002194:	017fffc4 	movi	r5,-1
 1002198:	00000206 	br	10021a4 <__sfp+0x54>
 100219c:	2080030f 	ldh	r2,12(r4)
 10021a0:	10000726 	beq	r2,zero,10021c0 <__sfp+0x70>
 10021a4:	18ffffc4 	addi	r3,r3,-1
 10021a8:	21001704 	addi	r4,r4,92
 10021ac:	197ffb1e 	bne	r3,r5,100219c <__sfp+0x4c>
 10021b0:	80800017 	ldw	r2,0(r16)
 10021b4:	10001926 	beq	r2,zero,100221c <__sfp+0xcc>
 10021b8:	1021883a 	mov	r16,r2
 10021bc:	003fef06 	br	100217c <__sfp+0x2c>
 10021c0:	00bfffc4 	movi	r2,-1
 10021c4:	00c00044 	movi	r3,1
 10021c8:	2080038d 	sth	r2,14(r4)
 10021cc:	20c0030d 	sth	r3,12(r4)
 10021d0:	20000015 	stw	zero,0(r4)
 10021d4:	20000215 	stw	zero,8(r4)
 10021d8:	20000115 	stw	zero,4(r4)
 10021dc:	20000415 	stw	zero,16(r4)
 10021e0:	20000515 	stw	zero,20(r4)
 10021e4:	20000615 	stw	zero,24(r4)
 10021e8:	20000c15 	stw	zero,48(r4)
 10021ec:	20000d15 	stw	zero,52(r4)
 10021f0:	20001115 	stw	zero,68(r4)
 10021f4:	20001215 	stw	zero,72(r4)
 10021f8:	2005883a 	mov	r2,r4
 10021fc:	dfc00217 	ldw	ra,8(sp)
 1002200:	dc400117 	ldw	r17,4(sp)
 1002204:	dc000017 	ldw	r16,0(sp)
 1002208:	dec00304 	addi	sp,sp,12
 100220c:	f800283a 	ret
 1002210:	8009883a 	mov	r4,r16
 1002214:	1001fb40 	call	1001fb4 <__sinit>
 1002218:	003fd706 	br	1002178 <__sfp+0x28>
 100221c:	8809883a 	mov	r4,r17
 1002220:	01400104 	movi	r5,4
 1002224:	10020b40 	call	10020b4 <__sfmoreglue>
 1002228:	80800015 	stw	r2,0(r16)
 100222c:	103fe21e 	bne	r2,zero,10021b8 <__sfp+0x68>
 1002230:	00800304 	movi	r2,12
 1002234:	0009883a 	mov	r4,zero
 1002238:	88800015 	stw	r2,0(r17)
 100223c:	003fee06 	br	10021f8 <__sfp+0xa8>

01002240 <_malloc_trim_r>:
 1002240:	defffb04 	addi	sp,sp,-20
 1002244:	dcc00315 	stw	r19,12(sp)
 1002248:	04c04074 	movhi	r19,257
 100224c:	9ce2ba04 	addi	r19,r19,-29976
 1002250:	dc800215 	stw	r18,8(sp)
 1002254:	dc400115 	stw	r17,4(sp)
 1002258:	dc000015 	stw	r16,0(sp)
 100225c:	2823883a 	mov	r17,r5
 1002260:	2025883a 	mov	r18,r4
 1002264:	dfc00415 	stw	ra,16(sp)
 1002268:	10039640 	call	1003964 <__malloc_lock>
 100226c:	98800217 	ldw	r2,8(r19)
 1002270:	9009883a 	mov	r4,r18
 1002274:	000b883a 	mov	r5,zero
 1002278:	10c00117 	ldw	r3,4(r2)
 100227c:	00bfff04 	movi	r2,-4
 1002280:	18a0703a 	and	r16,r3,r2
 1002284:	8463c83a 	sub	r17,r16,r17
 1002288:	8c43fbc4 	addi	r17,r17,4079
 100228c:	8822d33a 	srli	r17,r17,12
 1002290:	0083ffc4 	movi	r2,4095
 1002294:	8c7fffc4 	addi	r17,r17,-1
 1002298:	8822933a 	slli	r17,r17,12
 100229c:	1440060e 	bge	r2,r17,10022b8 <_malloc_trim_r+0x78>
 10022a0:	1001b700 	call	1001b70 <_sbrk_r>
 10022a4:	98c00217 	ldw	r3,8(r19)
 10022a8:	9009883a 	mov	r4,r18
 10022ac:	044bc83a 	sub	r5,zero,r17
 10022b0:	80c7883a 	add	r3,r16,r3
 10022b4:	10c00926 	beq	r2,r3,10022dc <_malloc_trim_r+0x9c>
 10022b8:	10039840 	call	1003984 <__malloc_unlock>
 10022bc:	0005883a 	mov	r2,zero
 10022c0:	dfc00417 	ldw	ra,16(sp)
 10022c4:	dcc00317 	ldw	r19,12(sp)
 10022c8:	dc800217 	ldw	r18,8(sp)
 10022cc:	dc400117 	ldw	r17,4(sp)
 10022d0:	dc000017 	ldw	r16,0(sp)
 10022d4:	dec00504 	addi	sp,sp,20
 10022d8:	f800283a 	ret
 10022dc:	9009883a 	mov	r4,r18
 10022e0:	1001b700 	call	1001b70 <_sbrk_r>
 10022e4:	844dc83a 	sub	r6,r16,r17
 10022e8:	00ffffc4 	movi	r3,-1
 10022ec:	9009883a 	mov	r4,r18
 10022f0:	000b883a 	mov	r5,zero
 10022f4:	01c04074 	movhi	r7,257
 10022f8:	39ef5004 	addi	r7,r7,-17088
 10022fc:	31800054 	ori	r6,r6,1
 1002300:	10c00926 	beq	r2,r3,1002328 <_malloc_trim_r+0xe8>
 1002304:	38800017 	ldw	r2,0(r7)
 1002308:	98c00217 	ldw	r3,8(r19)
 100230c:	9009883a 	mov	r4,r18
 1002310:	1445c83a 	sub	r2,r2,r17
 1002314:	38800015 	stw	r2,0(r7)
 1002318:	19800115 	stw	r6,4(r3)
 100231c:	10039840 	call	1003984 <__malloc_unlock>
 1002320:	00800044 	movi	r2,1
 1002324:	003fe606 	br	10022c0 <_malloc_trim_r+0x80>
 1002328:	1001b700 	call	1001b70 <_sbrk_r>
 100232c:	99800217 	ldw	r6,8(r19)
 1002330:	100f883a 	mov	r7,r2
 1002334:	9009883a 	mov	r4,r18
 1002338:	1187c83a 	sub	r3,r2,r6
 100233c:	008003c4 	movi	r2,15
 1002340:	19400054 	ori	r5,r3,1
 1002344:	10ffdc0e 	bge	r2,r3,10022b8 <_malloc_trim_r+0x78>
 1002348:	00804074 	movhi	r2,257
 100234c:	10a87304 	addi	r2,r2,-24116
 1002350:	10c00017 	ldw	r3,0(r2)
 1002354:	00804074 	movhi	r2,257
 1002358:	10af5004 	addi	r2,r2,-17088
 100235c:	31400115 	stw	r5,4(r6)
 1002360:	38c7c83a 	sub	r3,r7,r3
 1002364:	10c00015 	stw	r3,0(r2)
 1002368:	003fd306 	br	10022b8 <_malloc_trim_r+0x78>

0100236c <_free_r>:
 100236c:	defffd04 	addi	sp,sp,-12
 1002370:	dc400115 	stw	r17,4(sp)
 1002374:	dc000015 	stw	r16,0(sp)
 1002378:	dfc00215 	stw	ra,8(sp)
 100237c:	2821883a 	mov	r16,r5
 1002380:	2023883a 	mov	r17,r4
 1002384:	28005a26 	beq	r5,zero,10024f0 <_free_r+0x184>
 1002388:	10039640 	call	1003964 <__malloc_lock>
 100238c:	823ffe04 	addi	r8,r16,-8
 1002390:	41400117 	ldw	r5,4(r8)
 1002394:	00bfff84 	movi	r2,-2
 1002398:	02804074 	movhi	r10,257
 100239c:	52a2ba04 	addi	r10,r10,-29976
 10023a0:	288e703a 	and	r7,r5,r2
 10023a4:	41cd883a 	add	r6,r8,r7
 10023a8:	30c00117 	ldw	r3,4(r6)
 10023ac:	51000217 	ldw	r4,8(r10)
 10023b0:	00bfff04 	movi	r2,-4
 10023b4:	1892703a 	and	r9,r3,r2
 10023b8:	5017883a 	mov	r11,r10
 10023bc:	31006726 	beq	r6,r4,100255c <_free_r+0x1f0>
 10023c0:	2880004c 	andi	r2,r5,1
 10023c4:	1005003a 	cmpeq	r2,r2,zero
 10023c8:	32400115 	stw	r9,4(r6)
 10023cc:	10001a1e 	bne	r2,zero,1002438 <_free_r+0xcc>
 10023d0:	000b883a 	mov	r5,zero
 10023d4:	3247883a 	add	r3,r6,r9
 10023d8:	18800117 	ldw	r2,4(r3)
 10023dc:	1080004c 	andi	r2,r2,1
 10023e0:	1000231e 	bne	r2,zero,1002470 <_free_r+0x104>
 10023e4:	280ac03a 	cmpne	r5,r5,zero
 10023e8:	3a4f883a 	add	r7,r7,r9
 10023ec:	2800451e 	bne	r5,zero,1002504 <_free_r+0x198>
 10023f0:	31000217 	ldw	r4,8(r6)
 10023f4:	00804074 	movhi	r2,257
 10023f8:	10a2bc04 	addi	r2,r2,-29968
 10023fc:	20807b26 	beq	r4,r2,10025ec <_free_r+0x280>
 1002400:	30800317 	ldw	r2,12(r6)
 1002404:	3a07883a 	add	r3,r7,r8
 1002408:	19c00015 	stw	r7,0(r3)
 100240c:	11000215 	stw	r4,8(r2)
 1002410:	20800315 	stw	r2,12(r4)
 1002414:	38800054 	ori	r2,r7,1
 1002418:	40800115 	stw	r2,4(r8)
 100241c:	28001a26 	beq	r5,zero,1002488 <_free_r+0x11c>
 1002420:	8809883a 	mov	r4,r17
 1002424:	dfc00217 	ldw	ra,8(sp)
 1002428:	dc400117 	ldw	r17,4(sp)
 100242c:	dc000017 	ldw	r16,0(sp)
 1002430:	dec00304 	addi	sp,sp,12
 1002434:	10039841 	jmpi	1003984 <__malloc_unlock>
 1002438:	80bffe17 	ldw	r2,-8(r16)
 100243c:	50c00204 	addi	r3,r10,8
 1002440:	4091c83a 	sub	r8,r8,r2
 1002444:	41000217 	ldw	r4,8(r8)
 1002448:	388f883a 	add	r7,r7,r2
 100244c:	20c06126 	beq	r4,r3,10025d4 <_free_r+0x268>
 1002450:	40800317 	ldw	r2,12(r8)
 1002454:	3247883a 	add	r3,r6,r9
 1002458:	000b883a 	mov	r5,zero
 100245c:	11000215 	stw	r4,8(r2)
 1002460:	20800315 	stw	r2,12(r4)
 1002464:	18800117 	ldw	r2,4(r3)
 1002468:	1080004c 	andi	r2,r2,1
 100246c:	103fdd26 	beq	r2,zero,10023e4 <_free_r+0x78>
 1002470:	38800054 	ori	r2,r7,1
 1002474:	3a07883a 	add	r3,r7,r8
 1002478:	280ac03a 	cmpne	r5,r5,zero
 100247c:	40800115 	stw	r2,4(r8)
 1002480:	19c00015 	stw	r7,0(r3)
 1002484:	283fe61e 	bne	r5,zero,1002420 <_free_r+0xb4>
 1002488:	00807fc4 	movi	r2,511
 100248c:	11c01f2e 	bgeu	r2,r7,100250c <_free_r+0x1a0>
 1002490:	3806d27a 	srli	r3,r7,9
 1002494:	1800481e 	bne	r3,zero,10025b8 <_free_r+0x24c>
 1002498:	3804d0fa 	srli	r2,r7,3
 100249c:	100690fa 	slli	r3,r2,3
 10024a0:	1acd883a 	add	r6,r3,r11
 10024a4:	31400217 	ldw	r5,8(r6)
 10024a8:	31405926 	beq	r6,r5,1002610 <_free_r+0x2a4>
 10024ac:	28800117 	ldw	r2,4(r5)
 10024b0:	00ffff04 	movi	r3,-4
 10024b4:	10c4703a 	and	r2,r2,r3
 10024b8:	3880022e 	bgeu	r7,r2,10024c4 <_free_r+0x158>
 10024bc:	29400217 	ldw	r5,8(r5)
 10024c0:	317ffa1e 	bne	r6,r5,10024ac <_free_r+0x140>
 10024c4:	29800317 	ldw	r6,12(r5)
 10024c8:	41800315 	stw	r6,12(r8)
 10024cc:	41400215 	stw	r5,8(r8)
 10024d0:	8809883a 	mov	r4,r17
 10024d4:	2a000315 	stw	r8,12(r5)
 10024d8:	32000215 	stw	r8,8(r6)
 10024dc:	dfc00217 	ldw	ra,8(sp)
 10024e0:	dc400117 	ldw	r17,4(sp)
 10024e4:	dc000017 	ldw	r16,0(sp)
 10024e8:	dec00304 	addi	sp,sp,12
 10024ec:	10039841 	jmpi	1003984 <__malloc_unlock>
 10024f0:	dfc00217 	ldw	ra,8(sp)
 10024f4:	dc400117 	ldw	r17,4(sp)
 10024f8:	dc000017 	ldw	r16,0(sp)
 10024fc:	dec00304 	addi	sp,sp,12
 1002500:	f800283a 	ret
 1002504:	31000217 	ldw	r4,8(r6)
 1002508:	003fbd06 	br	1002400 <_free_r+0x94>
 100250c:	3806d0fa 	srli	r3,r7,3
 1002510:	00800044 	movi	r2,1
 1002514:	51400117 	ldw	r5,4(r10)
 1002518:	180890fa 	slli	r4,r3,3
 100251c:	1807d0ba 	srai	r3,r3,2
 1002520:	22c9883a 	add	r4,r4,r11
 1002524:	21800217 	ldw	r6,8(r4)
 1002528:	10c4983a 	sll	r2,r2,r3
 100252c:	41000315 	stw	r4,12(r8)
 1002530:	41800215 	stw	r6,8(r8)
 1002534:	288ab03a 	or	r5,r5,r2
 1002538:	22000215 	stw	r8,8(r4)
 100253c:	8809883a 	mov	r4,r17
 1002540:	51400115 	stw	r5,4(r10)
 1002544:	32000315 	stw	r8,12(r6)
 1002548:	dfc00217 	ldw	ra,8(sp)
 100254c:	dc400117 	ldw	r17,4(sp)
 1002550:	dc000017 	ldw	r16,0(sp)
 1002554:	dec00304 	addi	sp,sp,12
 1002558:	10039841 	jmpi	1003984 <__malloc_unlock>
 100255c:	2880004c 	andi	r2,r5,1
 1002560:	3a4d883a 	add	r6,r7,r9
 1002564:	1000071e 	bne	r2,zero,1002584 <_free_r+0x218>
 1002568:	80bffe17 	ldw	r2,-8(r16)
 100256c:	4091c83a 	sub	r8,r8,r2
 1002570:	41000317 	ldw	r4,12(r8)
 1002574:	40c00217 	ldw	r3,8(r8)
 1002578:	308d883a 	add	r6,r6,r2
 100257c:	20c00215 	stw	r3,8(r4)
 1002580:	19000315 	stw	r4,12(r3)
 1002584:	00804074 	movhi	r2,257
 1002588:	10a87204 	addi	r2,r2,-24120
 100258c:	11000017 	ldw	r4,0(r2)
 1002590:	30c00054 	ori	r3,r6,1
 1002594:	52000215 	stw	r8,8(r10)
 1002598:	40c00115 	stw	r3,4(r8)
 100259c:	313fa036 	bltu	r6,r4,1002420 <_free_r+0xb4>
 10025a0:	00804074 	movhi	r2,257
 10025a4:	10af4304 	addi	r2,r2,-17140
 10025a8:	11400017 	ldw	r5,0(r2)
 10025ac:	8809883a 	mov	r4,r17
 10025b0:	10022400 	call	1002240 <_malloc_trim_r>
 10025b4:	003f9a06 	br	1002420 <_free_r+0xb4>
 10025b8:	00800104 	movi	r2,4
 10025bc:	10c0072e 	bgeu	r2,r3,10025dc <_free_r+0x270>
 10025c0:	00800504 	movi	r2,20
 10025c4:	10c01936 	bltu	r2,r3,100262c <_free_r+0x2c0>
 10025c8:	188016c4 	addi	r2,r3,91
 10025cc:	100690fa 	slli	r3,r2,3
 10025d0:	003fb306 	br	10024a0 <_free_r+0x134>
 10025d4:	01400044 	movi	r5,1
 10025d8:	003f7e06 	br	10023d4 <_free_r+0x68>
 10025dc:	3804d1ba 	srli	r2,r7,6
 10025e0:	10800e04 	addi	r2,r2,56
 10025e4:	100690fa 	slli	r3,r2,3
 10025e8:	003fad06 	br	10024a0 <_free_r+0x134>
 10025ec:	22000315 	stw	r8,12(r4)
 10025f0:	22000215 	stw	r8,8(r4)
 10025f4:	3a05883a 	add	r2,r7,r8
 10025f8:	38c00054 	ori	r3,r7,1
 10025fc:	11c00015 	stw	r7,0(r2)
 1002600:	41000215 	stw	r4,8(r8)
 1002604:	40c00115 	stw	r3,4(r8)
 1002608:	41000315 	stw	r4,12(r8)
 100260c:	003f8406 	br	1002420 <_free_r+0xb4>
 1002610:	1005d0ba 	srai	r2,r2,2
 1002614:	00c00044 	movi	r3,1
 1002618:	51000117 	ldw	r4,4(r10)
 100261c:	1886983a 	sll	r3,r3,r2
 1002620:	20c8b03a 	or	r4,r4,r3
 1002624:	51000115 	stw	r4,4(r10)
 1002628:	003fa706 	br	10024c8 <_free_r+0x15c>
 100262c:	00801504 	movi	r2,84
 1002630:	10c00436 	bltu	r2,r3,1002644 <_free_r+0x2d8>
 1002634:	3804d33a 	srli	r2,r7,12
 1002638:	10801b84 	addi	r2,r2,110
 100263c:	100690fa 	slli	r3,r2,3
 1002640:	003f9706 	br	10024a0 <_free_r+0x134>
 1002644:	00805504 	movi	r2,340
 1002648:	10c00436 	bltu	r2,r3,100265c <_free_r+0x2f0>
 100264c:	3804d3fa 	srli	r2,r7,15
 1002650:	10801dc4 	addi	r2,r2,119
 1002654:	100690fa 	slli	r3,r2,3
 1002658:	003f9106 	br	10024a0 <_free_r+0x134>
 100265c:	00815504 	movi	r2,1364
 1002660:	10c0032e 	bgeu	r2,r3,1002670 <_free_r+0x304>
 1002664:	00801f84 	movi	r2,126
 1002668:	00c0fc04 	movi	r3,1008
 100266c:	003f8c06 	br	10024a0 <_free_r+0x134>
 1002670:	3804d4ba 	srli	r2,r7,18
 1002674:	10801f04 	addi	r2,r2,124
 1002678:	100690fa 	slli	r3,r2,3
 100267c:	003f8806 	br	10024a0 <_free_r+0x134>

01002680 <_fwalk_reent>:
 1002680:	defff704 	addi	sp,sp,-36
 1002684:	dcc00315 	stw	r19,12(sp)
 1002688:	24c0b804 	addi	r19,r4,736
 100268c:	dd800615 	stw	r22,24(sp)
 1002690:	dd400515 	stw	r21,20(sp)
 1002694:	dfc00815 	stw	ra,32(sp)
 1002698:	ddc00715 	stw	r23,28(sp)
 100269c:	dd000415 	stw	r20,16(sp)
 10026a0:	dc800215 	stw	r18,8(sp)
 10026a4:	dc400115 	stw	r17,4(sp)
 10026a8:	dc000015 	stw	r16,0(sp)
 10026ac:	202b883a 	mov	r21,r4
 10026b0:	282d883a 	mov	r22,r5
 10026b4:	1001fa40 	call	1001fa4 <__sfp_lock_acquire>
 10026b8:	98002126 	beq	r19,zero,1002740 <_fwalk_reent+0xc0>
 10026bc:	002f883a 	mov	r23,zero
 10026c0:	9c800117 	ldw	r18,4(r19)
 10026c4:	9c000217 	ldw	r16,8(r19)
 10026c8:	90bfffc4 	addi	r2,r18,-1
 10026cc:	10000d16 	blt	r2,zero,1002704 <_fwalk_reent+0x84>
 10026d0:	0023883a 	mov	r17,zero
 10026d4:	053fffc4 	movi	r20,-1
 10026d8:	8080030f 	ldh	r2,12(r16)
 10026dc:	8c400044 	addi	r17,r17,1
 10026e0:	10000626 	beq	r2,zero,10026fc <_fwalk_reent+0x7c>
 10026e4:	8080038f 	ldh	r2,14(r16)
 10026e8:	800b883a 	mov	r5,r16
 10026ec:	a809883a 	mov	r4,r21
 10026f0:	15000226 	beq	r2,r20,10026fc <_fwalk_reent+0x7c>
 10026f4:	b03ee83a 	callr	r22
 10026f8:	b8aeb03a 	or	r23,r23,r2
 10026fc:	84001704 	addi	r16,r16,92
 1002700:	947ff51e 	bne	r18,r17,10026d8 <_fwalk_reent+0x58>
 1002704:	9cc00017 	ldw	r19,0(r19)
 1002708:	983fed1e 	bne	r19,zero,10026c0 <_fwalk_reent+0x40>
 100270c:	1001fa80 	call	1001fa8 <__sfp_lock_release>
 1002710:	b805883a 	mov	r2,r23
 1002714:	dfc00817 	ldw	ra,32(sp)
 1002718:	ddc00717 	ldw	r23,28(sp)
 100271c:	dd800617 	ldw	r22,24(sp)
 1002720:	dd400517 	ldw	r21,20(sp)
 1002724:	dd000417 	ldw	r20,16(sp)
 1002728:	dcc00317 	ldw	r19,12(sp)
 100272c:	dc800217 	ldw	r18,8(sp)
 1002730:	dc400117 	ldw	r17,4(sp)
 1002734:	dc000017 	ldw	r16,0(sp)
 1002738:	dec00904 	addi	sp,sp,36
 100273c:	f800283a 	ret
 1002740:	002f883a 	mov	r23,zero
 1002744:	003ff106 	br	100270c <_fwalk_reent+0x8c>

01002748 <_fwalk>:
 1002748:	defff804 	addi	sp,sp,-32
 100274c:	dcc00315 	stw	r19,12(sp)
 1002750:	24c0b804 	addi	r19,r4,736
 1002754:	dd400515 	stw	r21,20(sp)
 1002758:	dfc00715 	stw	ra,28(sp)
 100275c:	dd800615 	stw	r22,24(sp)
 1002760:	dd000415 	stw	r20,16(sp)
 1002764:	dc800215 	stw	r18,8(sp)
 1002768:	dc400115 	stw	r17,4(sp)
 100276c:	dc000015 	stw	r16,0(sp)
 1002770:	282b883a 	mov	r21,r5
 1002774:	1001fa40 	call	1001fa4 <__sfp_lock_acquire>
 1002778:	98001f26 	beq	r19,zero,10027f8 <_fwalk+0xb0>
 100277c:	002d883a 	mov	r22,zero
 1002780:	9c800117 	ldw	r18,4(r19)
 1002784:	9c000217 	ldw	r16,8(r19)
 1002788:	90bfffc4 	addi	r2,r18,-1
 100278c:	10000c16 	blt	r2,zero,10027c0 <_fwalk+0x78>
 1002790:	0023883a 	mov	r17,zero
 1002794:	053fffc4 	movi	r20,-1
 1002798:	8080030f 	ldh	r2,12(r16)
 100279c:	8c400044 	addi	r17,r17,1
 10027a0:	10000526 	beq	r2,zero,10027b8 <_fwalk+0x70>
 10027a4:	8080038f 	ldh	r2,14(r16)
 10027a8:	8009883a 	mov	r4,r16
 10027ac:	15000226 	beq	r2,r20,10027b8 <_fwalk+0x70>
 10027b0:	a83ee83a 	callr	r21
 10027b4:	b0acb03a 	or	r22,r22,r2
 10027b8:	84001704 	addi	r16,r16,92
 10027bc:	947ff61e 	bne	r18,r17,1002798 <_fwalk+0x50>
 10027c0:	9cc00017 	ldw	r19,0(r19)
 10027c4:	983fee1e 	bne	r19,zero,1002780 <_fwalk+0x38>
 10027c8:	1001fa80 	call	1001fa8 <__sfp_lock_release>
 10027cc:	b005883a 	mov	r2,r22
 10027d0:	dfc00717 	ldw	ra,28(sp)
 10027d4:	dd800617 	ldw	r22,24(sp)
 10027d8:	dd400517 	ldw	r21,20(sp)
 10027dc:	dd000417 	ldw	r20,16(sp)
 10027e0:	dcc00317 	ldw	r19,12(sp)
 10027e4:	dc800217 	ldw	r18,8(sp)
 10027e8:	dc400117 	ldw	r17,4(sp)
 10027ec:	dc000017 	ldw	r16,0(sp)
 10027f0:	dec00804 	addi	sp,sp,32
 10027f4:	f800283a 	ret
 10027f8:	002d883a 	mov	r22,zero
 10027fc:	003ff206 	br	10027c8 <_fwalk+0x80>

01002800 <__smakebuf_r>:
 1002800:	2880030b 	ldhu	r2,12(r5)
 1002804:	deffed04 	addi	sp,sp,-76
 1002808:	dc401015 	stw	r17,64(sp)
 100280c:	1080008c 	andi	r2,r2,2
 1002810:	dc000f15 	stw	r16,60(sp)
 1002814:	dfc01215 	stw	ra,72(sp)
 1002818:	dc801115 	stw	r18,68(sp)
 100281c:	2821883a 	mov	r16,r5
 1002820:	2023883a 	mov	r17,r4
 1002824:	10000b26 	beq	r2,zero,1002854 <__smakebuf_r+0x54>
 1002828:	28c010c4 	addi	r3,r5,67
 100282c:	00800044 	movi	r2,1
 1002830:	28800515 	stw	r2,20(r5)
 1002834:	28c00415 	stw	r3,16(r5)
 1002838:	28c00015 	stw	r3,0(r5)
 100283c:	dfc01217 	ldw	ra,72(sp)
 1002840:	dc801117 	ldw	r18,68(sp)
 1002844:	dc401017 	ldw	r17,64(sp)
 1002848:	dc000f17 	ldw	r16,60(sp)
 100284c:	dec01304 	addi	sp,sp,76
 1002850:	f800283a 	ret
 1002854:	2940038f 	ldh	r5,14(r5)
 1002858:	28002116 	blt	r5,zero,10028e0 <__smakebuf_r+0xe0>
 100285c:	d80d883a 	mov	r6,sp
 1002860:	1002d840 	call	1002d84 <_fstat_r>
 1002864:	10001e16 	blt	r2,zero,10028e0 <__smakebuf_r+0xe0>
 1002868:	d8800117 	ldw	r2,4(sp)
 100286c:	00e00014 	movui	r3,32768
 1002870:	113c000c 	andi	r4,r2,61440
 1002874:	20c03126 	beq	r4,r3,100293c <__smakebuf_r+0x13c>
 1002878:	8080030b 	ldhu	r2,12(r16)
 100287c:	00c80004 	movi	r3,8192
 1002880:	10820014 	ori	r2,r2,2048
 1002884:	8080030d 	sth	r2,12(r16)
 1002888:	20c01e26 	beq	r4,r3,1002904 <__smakebuf_r+0x104>
 100288c:	04810004 	movi	r18,1024
 1002890:	8809883a 	mov	r4,r17
 1002894:	900b883a 	mov	r5,r18
 1002898:	1000bd80 	call	1000bd8 <_malloc_r>
 100289c:	1009883a 	mov	r4,r2
 10028a0:	10003126 	beq	r2,zero,1002968 <__smakebuf_r+0x168>
 10028a4:	80c0030b 	ldhu	r3,12(r16)
 10028a8:	00804034 	movhi	r2,256
 10028ac:	10882604 	addi	r2,r2,8344
 10028b0:	88800f15 	stw	r2,60(r17)
 10028b4:	18c02014 	ori	r3,r3,128
 10028b8:	84800515 	stw	r18,20(r16)
 10028bc:	80c0030d 	sth	r3,12(r16)
 10028c0:	81000415 	stw	r4,16(r16)
 10028c4:	81000015 	stw	r4,0(r16)
 10028c8:	dfc01217 	ldw	ra,72(sp)
 10028cc:	dc801117 	ldw	r18,68(sp)
 10028d0:	dc401017 	ldw	r17,64(sp)
 10028d4:	dc000f17 	ldw	r16,60(sp)
 10028d8:	dec01304 	addi	sp,sp,76
 10028dc:	f800283a 	ret
 10028e0:	80c0030b 	ldhu	r3,12(r16)
 10028e4:	1880200c 	andi	r2,r3,128
 10028e8:	10000426 	beq	r2,zero,10028fc <__smakebuf_r+0xfc>
 10028ec:	04801004 	movi	r18,64
 10028f0:	18820014 	ori	r2,r3,2048
 10028f4:	8080030d 	sth	r2,12(r16)
 10028f8:	003fe506 	br	1002890 <__smakebuf_r+0x90>
 10028fc:	04810004 	movi	r18,1024
 1002900:	003ffb06 	br	10028f0 <__smakebuf_r+0xf0>
 1002904:	8140038f 	ldh	r5,14(r16)
 1002908:	8809883a 	mov	r4,r17
 100290c:	1002df80 	call	1002df8 <_isatty_r>
 1002910:	103fde26 	beq	r2,zero,100288c <__smakebuf_r+0x8c>
 1002914:	8080030b 	ldhu	r2,12(r16)
 1002918:	80c010c4 	addi	r3,r16,67
 100291c:	04810004 	movi	r18,1024
 1002920:	10800054 	ori	r2,r2,1
 1002924:	8080030d 	sth	r2,12(r16)
 1002928:	00800044 	movi	r2,1
 100292c:	80c00415 	stw	r3,16(r16)
 1002930:	80800515 	stw	r2,20(r16)
 1002934:	80c00015 	stw	r3,0(r16)
 1002938:	003fd506 	br	1002890 <__smakebuf_r+0x90>
 100293c:	80c00a17 	ldw	r3,40(r16)
 1002940:	00804034 	movhi	r2,256
 1002944:	108a8d04 	addi	r2,r2,10804
 1002948:	18bfcb1e 	bne	r3,r2,1002878 <__smakebuf_r+0x78>
 100294c:	8080030b 	ldhu	r2,12(r16)
 1002950:	00c10004 	movi	r3,1024
 1002954:	1825883a 	mov	r18,r3
 1002958:	10c4b03a 	or	r2,r2,r3
 100295c:	8080030d 	sth	r2,12(r16)
 1002960:	80c01315 	stw	r3,76(r16)
 1002964:	003fca06 	br	1002890 <__smakebuf_r+0x90>
 1002968:	8100030b 	ldhu	r4,12(r16)
 100296c:	2080800c 	andi	r2,r4,512
 1002970:	103fb21e 	bne	r2,zero,100283c <__smakebuf_r+0x3c>
 1002974:	80c010c4 	addi	r3,r16,67
 1002978:	21000094 	ori	r4,r4,2
 100297c:	00800044 	movi	r2,1
 1002980:	80800515 	stw	r2,20(r16)
 1002984:	8100030d 	sth	r4,12(r16)
 1002988:	80c00415 	stw	r3,16(r16)
 100298c:	80c00015 	stw	r3,0(r16)
 1002990:	003faa06 	br	100283c <__smakebuf_r+0x3c>

01002994 <memset>:
 1002994:	008000c4 	movi	r2,3
 1002998:	29403fcc 	andi	r5,r5,255
 100299c:	2007883a 	mov	r3,r4
 10029a0:	1180022e 	bgeu	r2,r6,10029ac <memset+0x18>
 10029a4:	2084703a 	and	r2,r4,r2
 10029a8:	10000826 	beq	r2,zero,10029cc <memset+0x38>
 10029ac:	30000526 	beq	r6,zero,10029c4 <memset+0x30>
 10029b0:	2805883a 	mov	r2,r5
 10029b4:	30cd883a 	add	r6,r6,r3
 10029b8:	18800005 	stb	r2,0(r3)
 10029bc:	18c00044 	addi	r3,r3,1
 10029c0:	19bffd1e 	bne	r3,r6,10029b8 <memset+0x24>
 10029c4:	2005883a 	mov	r2,r4
 10029c8:	f800283a 	ret
 10029cc:	2804923a 	slli	r2,r5,8
 10029d0:	020003c4 	movi	r8,15
 10029d4:	200f883a 	mov	r7,r4
 10029d8:	2884b03a 	or	r2,r5,r2
 10029dc:	1006943a 	slli	r3,r2,16
 10029e0:	10c6b03a 	or	r3,r2,r3
 10029e4:	41800a2e 	bgeu	r8,r6,1002a10 <memset+0x7c>
 10029e8:	4005883a 	mov	r2,r8
 10029ec:	31bffc04 	addi	r6,r6,-16
 10029f0:	38c00015 	stw	r3,0(r7)
 10029f4:	38c00115 	stw	r3,4(r7)
 10029f8:	38c00215 	stw	r3,8(r7)
 10029fc:	38c00315 	stw	r3,12(r7)
 1002a00:	39c00404 	addi	r7,r7,16
 1002a04:	11bff936 	bltu	r2,r6,10029ec <memset+0x58>
 1002a08:	008000c4 	movi	r2,3
 1002a0c:	1180052e 	bgeu	r2,r6,1002a24 <memset+0x90>
 1002a10:	31bfff04 	addi	r6,r6,-4
 1002a14:	008000c4 	movi	r2,3
 1002a18:	38c00015 	stw	r3,0(r7)
 1002a1c:	39c00104 	addi	r7,r7,4
 1002a20:	11bffb36 	bltu	r2,r6,1002a10 <memset+0x7c>
 1002a24:	3807883a 	mov	r3,r7
 1002a28:	003fe006 	br	10029ac <memset+0x18>

01002a2c <__sclose>:
 1002a2c:	2940038f 	ldh	r5,14(r5)
 1002a30:	1002bf01 	jmpi	1002bf0 <_close_r>

01002a34 <__sseek>:
 1002a34:	defffe04 	addi	sp,sp,-8
 1002a38:	dc000015 	stw	r16,0(sp)
 1002a3c:	2821883a 	mov	r16,r5
 1002a40:	2940038f 	ldh	r5,14(r5)
 1002a44:	dfc00115 	stw	ra,4(sp)
 1002a48:	1002e680 	call	1002e68 <_lseek_r>
 1002a4c:	1007883a 	mov	r3,r2
 1002a50:	00bfffc4 	movi	r2,-1
 1002a54:	18800926 	beq	r3,r2,1002a7c <__sseek+0x48>
 1002a58:	8080030b 	ldhu	r2,12(r16)
 1002a5c:	80c01415 	stw	r3,80(r16)
 1002a60:	10840014 	ori	r2,r2,4096
 1002a64:	8080030d 	sth	r2,12(r16)
 1002a68:	1805883a 	mov	r2,r3
 1002a6c:	dfc00117 	ldw	ra,4(sp)
 1002a70:	dc000017 	ldw	r16,0(sp)
 1002a74:	dec00204 	addi	sp,sp,8
 1002a78:	f800283a 	ret
 1002a7c:	8080030b 	ldhu	r2,12(r16)
 1002a80:	10bbffcc 	andi	r2,r2,61439
 1002a84:	8080030d 	sth	r2,12(r16)
 1002a88:	1805883a 	mov	r2,r3
 1002a8c:	dfc00117 	ldw	ra,4(sp)
 1002a90:	dc000017 	ldw	r16,0(sp)
 1002a94:	dec00204 	addi	sp,sp,8
 1002a98:	f800283a 	ret

01002a9c <__swrite>:
 1002a9c:	2880030b 	ldhu	r2,12(r5)
 1002aa0:	defffb04 	addi	sp,sp,-20
 1002aa4:	dcc00315 	stw	r19,12(sp)
 1002aa8:	1080400c 	andi	r2,r2,256
 1002aac:	dc800215 	stw	r18,8(sp)
 1002ab0:	dc400115 	stw	r17,4(sp)
 1002ab4:	dc000015 	stw	r16,0(sp)
 1002ab8:	3027883a 	mov	r19,r6
 1002abc:	3825883a 	mov	r18,r7
 1002ac0:	dfc00415 	stw	ra,16(sp)
 1002ac4:	2821883a 	mov	r16,r5
 1002ac8:	000d883a 	mov	r6,zero
 1002acc:	01c00084 	movi	r7,2
 1002ad0:	2023883a 	mov	r17,r4
 1002ad4:	10000226 	beq	r2,zero,1002ae0 <__swrite+0x44>
 1002ad8:	2940038f 	ldh	r5,14(r5)
 1002adc:	1002e680 	call	1002e68 <_lseek_r>
 1002ae0:	8080030b 	ldhu	r2,12(r16)
 1002ae4:	8140038f 	ldh	r5,14(r16)
 1002ae8:	8809883a 	mov	r4,r17
 1002aec:	10bbffcc 	andi	r2,r2,61439
 1002af0:	980d883a 	mov	r6,r19
 1002af4:	900f883a 	mov	r7,r18
 1002af8:	8080030d 	sth	r2,12(r16)
 1002afc:	dfc00417 	ldw	ra,16(sp)
 1002b00:	dcc00317 	ldw	r19,12(sp)
 1002b04:	dc800217 	ldw	r18,8(sp)
 1002b08:	dc400117 	ldw	r17,4(sp)
 1002b0c:	dc000017 	ldw	r16,0(sp)
 1002b10:	dec00504 	addi	sp,sp,20
 1002b14:	1002b781 	jmpi	1002b78 <_write_r>

01002b18 <__sread>:
 1002b18:	defffe04 	addi	sp,sp,-8
 1002b1c:	dc000015 	stw	r16,0(sp)
 1002b20:	2821883a 	mov	r16,r5
 1002b24:	2940038f 	ldh	r5,14(r5)
 1002b28:	dfc00115 	stw	ra,4(sp)
 1002b2c:	1002ee00 	call	1002ee0 <_read_r>
 1002b30:	1007883a 	mov	r3,r2
 1002b34:	10000816 	blt	r2,zero,1002b58 <__sread+0x40>
 1002b38:	80801417 	ldw	r2,80(r16)
 1002b3c:	10c5883a 	add	r2,r2,r3
 1002b40:	80801415 	stw	r2,80(r16)
 1002b44:	1805883a 	mov	r2,r3
 1002b48:	dfc00117 	ldw	ra,4(sp)
 1002b4c:	dc000017 	ldw	r16,0(sp)
 1002b50:	dec00204 	addi	sp,sp,8
 1002b54:	f800283a 	ret
 1002b58:	8080030b 	ldhu	r2,12(r16)
 1002b5c:	10bbffcc 	andi	r2,r2,61439
 1002b60:	8080030d 	sth	r2,12(r16)
 1002b64:	1805883a 	mov	r2,r3
 1002b68:	dfc00117 	ldw	ra,4(sp)
 1002b6c:	dc000017 	ldw	r16,0(sp)
 1002b70:	dec00204 	addi	sp,sp,8
 1002b74:	f800283a 	ret

01002b78 <_write_r>:
 1002b78:	defffd04 	addi	sp,sp,-12
 1002b7c:	dc000015 	stw	r16,0(sp)
 1002b80:	04004074 	movhi	r16,257
 1002b84:	842f4204 	addi	r16,r16,-17144
 1002b88:	dc400115 	stw	r17,4(sp)
 1002b8c:	80000015 	stw	zero,0(r16)
 1002b90:	2023883a 	mov	r17,r4
 1002b94:	2809883a 	mov	r4,r5
 1002b98:	300b883a 	mov	r5,r6
 1002b9c:	380d883a 	mov	r6,r7
 1002ba0:	dfc00215 	stw	ra,8(sp)
 1002ba4:	1003e000 	call	1003e00 <write>
 1002ba8:	1007883a 	mov	r3,r2
 1002bac:	00bfffc4 	movi	r2,-1
 1002bb0:	18800626 	beq	r3,r2,1002bcc <_write_r+0x54>
 1002bb4:	1805883a 	mov	r2,r3
 1002bb8:	dfc00217 	ldw	ra,8(sp)
 1002bbc:	dc400117 	ldw	r17,4(sp)
 1002bc0:	dc000017 	ldw	r16,0(sp)
 1002bc4:	dec00304 	addi	sp,sp,12
 1002bc8:	f800283a 	ret
 1002bcc:	80800017 	ldw	r2,0(r16)
 1002bd0:	103ff826 	beq	r2,zero,1002bb4 <_write_r+0x3c>
 1002bd4:	88800015 	stw	r2,0(r17)
 1002bd8:	1805883a 	mov	r2,r3
 1002bdc:	dfc00217 	ldw	ra,8(sp)
 1002be0:	dc400117 	ldw	r17,4(sp)
 1002be4:	dc000017 	ldw	r16,0(sp)
 1002be8:	dec00304 	addi	sp,sp,12
 1002bec:	f800283a 	ret

01002bf0 <_close_r>:
 1002bf0:	defffd04 	addi	sp,sp,-12
 1002bf4:	dc000015 	stw	r16,0(sp)
 1002bf8:	04004074 	movhi	r16,257
 1002bfc:	842f4204 	addi	r16,r16,-17144
 1002c00:	dc400115 	stw	r17,4(sp)
 1002c04:	80000015 	stw	zero,0(r16)
 1002c08:	2023883a 	mov	r17,r4
 1002c0c:	2809883a 	mov	r4,r5
 1002c10:	dfc00215 	stw	ra,8(sp)
 1002c14:	10030b40 	call	10030b4 <close>
 1002c18:	1007883a 	mov	r3,r2
 1002c1c:	00bfffc4 	movi	r2,-1
 1002c20:	18800626 	beq	r3,r2,1002c3c <_close_r+0x4c>
 1002c24:	1805883a 	mov	r2,r3
 1002c28:	dfc00217 	ldw	ra,8(sp)
 1002c2c:	dc400117 	ldw	r17,4(sp)
 1002c30:	dc000017 	ldw	r16,0(sp)
 1002c34:	dec00304 	addi	sp,sp,12
 1002c38:	f800283a 	ret
 1002c3c:	80800017 	ldw	r2,0(r16)
 1002c40:	103ff826 	beq	r2,zero,1002c24 <_close_r+0x34>
 1002c44:	88800015 	stw	r2,0(r17)
 1002c48:	1805883a 	mov	r2,r3
 1002c4c:	dfc00217 	ldw	ra,8(sp)
 1002c50:	dc400117 	ldw	r17,4(sp)
 1002c54:	dc000017 	ldw	r16,0(sp)
 1002c58:	dec00304 	addi	sp,sp,12
 1002c5c:	f800283a 	ret

01002c60 <_fclose_r>:
 1002c60:	defffc04 	addi	sp,sp,-16
 1002c64:	dc400115 	stw	r17,4(sp)
 1002c68:	dc000015 	stw	r16,0(sp)
 1002c6c:	dfc00315 	stw	ra,12(sp)
 1002c70:	dc800215 	stw	r18,8(sp)
 1002c74:	2821883a 	mov	r16,r5
 1002c78:	2023883a 	mov	r17,r4
 1002c7c:	28002926 	beq	r5,zero,1002d24 <_fclose_r+0xc4>
 1002c80:	1001fa40 	call	1001fa4 <__sfp_lock_acquire>
 1002c84:	88000226 	beq	r17,zero,1002c90 <_fclose_r+0x30>
 1002c88:	88800e17 	ldw	r2,56(r17)
 1002c8c:	10002d26 	beq	r2,zero,1002d44 <_fclose_r+0xe4>
 1002c90:	8080030f 	ldh	r2,12(r16)
 1002c94:	10002226 	beq	r2,zero,1002d20 <_fclose_r+0xc0>
 1002c98:	8809883a 	mov	r4,r17
 1002c9c:	800b883a 	mov	r5,r16
 1002ca0:	1001d1c0 	call	1001d1c <_fflush_r>
 1002ca4:	1025883a 	mov	r18,r2
 1002ca8:	80800b17 	ldw	r2,44(r16)
 1002cac:	10000426 	beq	r2,zero,1002cc0 <_fclose_r+0x60>
 1002cb0:	81400717 	ldw	r5,28(r16)
 1002cb4:	8809883a 	mov	r4,r17
 1002cb8:	103ee83a 	callr	r2
 1002cbc:	10002a16 	blt	r2,zero,1002d68 <_fclose_r+0x108>
 1002cc0:	8080030b 	ldhu	r2,12(r16)
 1002cc4:	1080200c 	andi	r2,r2,128
 1002cc8:	1000231e 	bne	r2,zero,1002d58 <_fclose_r+0xf8>
 1002ccc:	81400c17 	ldw	r5,48(r16)
 1002cd0:	28000526 	beq	r5,zero,1002ce8 <_fclose_r+0x88>
 1002cd4:	80801004 	addi	r2,r16,64
 1002cd8:	28800226 	beq	r5,r2,1002ce4 <_fclose_r+0x84>
 1002cdc:	8809883a 	mov	r4,r17
 1002ce0:	100236c0 	call	100236c <_free_r>
 1002ce4:	80000c15 	stw	zero,48(r16)
 1002ce8:	81401117 	ldw	r5,68(r16)
 1002cec:	28000326 	beq	r5,zero,1002cfc <_fclose_r+0x9c>
 1002cf0:	8809883a 	mov	r4,r17
 1002cf4:	100236c0 	call	100236c <_free_r>
 1002cf8:	80001115 	stw	zero,68(r16)
 1002cfc:	8000030d 	sth	zero,12(r16)
 1002d00:	1001fa80 	call	1001fa8 <__sfp_lock_release>
 1002d04:	9005883a 	mov	r2,r18
 1002d08:	dfc00317 	ldw	ra,12(sp)
 1002d0c:	dc800217 	ldw	r18,8(sp)
 1002d10:	dc400117 	ldw	r17,4(sp)
 1002d14:	dc000017 	ldw	r16,0(sp)
 1002d18:	dec00404 	addi	sp,sp,16
 1002d1c:	f800283a 	ret
 1002d20:	1001fa80 	call	1001fa8 <__sfp_lock_release>
 1002d24:	0025883a 	mov	r18,zero
 1002d28:	9005883a 	mov	r2,r18
 1002d2c:	dfc00317 	ldw	ra,12(sp)
 1002d30:	dc800217 	ldw	r18,8(sp)
 1002d34:	dc400117 	ldw	r17,4(sp)
 1002d38:	dc000017 	ldw	r16,0(sp)
 1002d3c:	dec00404 	addi	sp,sp,16
 1002d40:	f800283a 	ret
 1002d44:	8809883a 	mov	r4,r17
 1002d48:	1001fb40 	call	1001fb4 <__sinit>
 1002d4c:	8080030f 	ldh	r2,12(r16)
 1002d50:	103fd11e 	bne	r2,zero,1002c98 <_fclose_r+0x38>
 1002d54:	003ff206 	br	1002d20 <_fclose_r+0xc0>
 1002d58:	81400417 	ldw	r5,16(r16)
 1002d5c:	8809883a 	mov	r4,r17
 1002d60:	100236c0 	call	100236c <_free_r>
 1002d64:	003fd906 	br	1002ccc <_fclose_r+0x6c>
 1002d68:	04bfffc4 	movi	r18,-1
 1002d6c:	003fd406 	br	1002cc0 <_fclose_r+0x60>

01002d70 <fclose>:
 1002d70:	00804074 	movhi	r2,257
 1002d74:	10a87004 	addi	r2,r2,-24128
 1002d78:	200b883a 	mov	r5,r4
 1002d7c:	11000017 	ldw	r4,0(r2)
 1002d80:	1002c601 	jmpi	1002c60 <_fclose_r>

01002d84 <_fstat_r>:
 1002d84:	defffd04 	addi	sp,sp,-12
 1002d88:	dc000015 	stw	r16,0(sp)
 1002d8c:	04004074 	movhi	r16,257
 1002d90:	842f4204 	addi	r16,r16,-17144
 1002d94:	dc400115 	stw	r17,4(sp)
 1002d98:	80000015 	stw	zero,0(r16)
 1002d9c:	2023883a 	mov	r17,r4
 1002da0:	2809883a 	mov	r4,r5
 1002da4:	300b883a 	mov	r5,r6
 1002da8:	dfc00215 	stw	ra,8(sp)
 1002dac:	10032400 	call	1003240 <fstat>
 1002db0:	1007883a 	mov	r3,r2
 1002db4:	00bfffc4 	movi	r2,-1
 1002db8:	18800626 	beq	r3,r2,1002dd4 <_fstat_r+0x50>
 1002dbc:	1805883a 	mov	r2,r3
 1002dc0:	dfc00217 	ldw	ra,8(sp)
 1002dc4:	dc400117 	ldw	r17,4(sp)
 1002dc8:	dc000017 	ldw	r16,0(sp)
 1002dcc:	dec00304 	addi	sp,sp,12
 1002dd0:	f800283a 	ret
 1002dd4:	80800017 	ldw	r2,0(r16)
 1002dd8:	103ff826 	beq	r2,zero,1002dbc <_fstat_r+0x38>
 1002ddc:	88800015 	stw	r2,0(r17)
 1002de0:	1805883a 	mov	r2,r3
 1002de4:	dfc00217 	ldw	ra,8(sp)
 1002de8:	dc400117 	ldw	r17,4(sp)
 1002dec:	dc000017 	ldw	r16,0(sp)
 1002df0:	dec00304 	addi	sp,sp,12
 1002df4:	f800283a 	ret

01002df8 <_isatty_r>:
 1002df8:	defffd04 	addi	sp,sp,-12
 1002dfc:	dc000015 	stw	r16,0(sp)
 1002e00:	04004074 	movhi	r16,257
 1002e04:	842f4204 	addi	r16,r16,-17144
 1002e08:	dc400115 	stw	r17,4(sp)
 1002e0c:	80000015 	stw	zero,0(r16)
 1002e10:	2023883a 	mov	r17,r4
 1002e14:	2809883a 	mov	r4,r5
 1002e18:	dfc00215 	stw	ra,8(sp)
 1002e1c:	10035940 	call	1003594 <isatty>
 1002e20:	1007883a 	mov	r3,r2
 1002e24:	00bfffc4 	movi	r2,-1
 1002e28:	18800626 	beq	r3,r2,1002e44 <_isatty_r+0x4c>
 1002e2c:	1805883a 	mov	r2,r3
 1002e30:	dfc00217 	ldw	ra,8(sp)
 1002e34:	dc400117 	ldw	r17,4(sp)
 1002e38:	dc000017 	ldw	r16,0(sp)
 1002e3c:	dec00304 	addi	sp,sp,12
 1002e40:	f800283a 	ret
 1002e44:	80800017 	ldw	r2,0(r16)
 1002e48:	103ff826 	beq	r2,zero,1002e2c <_isatty_r+0x34>
 1002e4c:	88800015 	stw	r2,0(r17)
 1002e50:	1805883a 	mov	r2,r3
 1002e54:	dfc00217 	ldw	ra,8(sp)
 1002e58:	dc400117 	ldw	r17,4(sp)
 1002e5c:	dc000017 	ldw	r16,0(sp)
 1002e60:	dec00304 	addi	sp,sp,12
 1002e64:	f800283a 	ret

01002e68 <_lseek_r>:
 1002e68:	defffd04 	addi	sp,sp,-12
 1002e6c:	dc000015 	stw	r16,0(sp)
 1002e70:	04004074 	movhi	r16,257
 1002e74:	842f4204 	addi	r16,r16,-17144
 1002e78:	dc400115 	stw	r17,4(sp)
 1002e7c:	80000015 	stw	zero,0(r16)
 1002e80:	2023883a 	mov	r17,r4
 1002e84:	2809883a 	mov	r4,r5
 1002e88:	300b883a 	mov	r5,r6
 1002e8c:	380d883a 	mov	r6,r7
 1002e90:	dfc00215 	stw	ra,8(sp)
 1002e94:	10037a40 	call	10037a4 <lseek>
 1002e98:	1007883a 	mov	r3,r2
 1002e9c:	00bfffc4 	movi	r2,-1
 1002ea0:	18800626 	beq	r3,r2,1002ebc <_lseek_r+0x54>
 1002ea4:	1805883a 	mov	r2,r3
 1002ea8:	dfc00217 	ldw	ra,8(sp)
 1002eac:	dc400117 	ldw	r17,4(sp)
 1002eb0:	dc000017 	ldw	r16,0(sp)
 1002eb4:	dec00304 	addi	sp,sp,12
 1002eb8:	f800283a 	ret
 1002ebc:	80800017 	ldw	r2,0(r16)
 1002ec0:	103ff826 	beq	r2,zero,1002ea4 <_lseek_r+0x3c>
 1002ec4:	88800015 	stw	r2,0(r17)
 1002ec8:	1805883a 	mov	r2,r3
 1002ecc:	dfc00217 	ldw	ra,8(sp)
 1002ed0:	dc400117 	ldw	r17,4(sp)
 1002ed4:	dc000017 	ldw	r16,0(sp)
 1002ed8:	dec00304 	addi	sp,sp,12
 1002edc:	f800283a 	ret

01002ee0 <_read_r>:
 1002ee0:	defffd04 	addi	sp,sp,-12
 1002ee4:	dc000015 	stw	r16,0(sp)
 1002ee8:	04004074 	movhi	r16,257
 1002eec:	842f4204 	addi	r16,r16,-17144
 1002ef0:	dc400115 	stw	r17,4(sp)
 1002ef4:	80000015 	stw	zero,0(r16)
 1002ef8:	2023883a 	mov	r17,r4
 1002efc:	2809883a 	mov	r4,r5
 1002f00:	300b883a 	mov	r5,r6
 1002f04:	380d883a 	mov	r6,r7
 1002f08:	dfc00215 	stw	ra,8(sp)
 1002f0c:	10039a40 	call	10039a4 <read>
 1002f10:	1007883a 	mov	r3,r2
 1002f14:	00bfffc4 	movi	r2,-1
 1002f18:	18800626 	beq	r3,r2,1002f34 <_read_r+0x54>
 1002f1c:	1805883a 	mov	r2,r3
 1002f20:	dfc00217 	ldw	ra,8(sp)
 1002f24:	dc400117 	ldw	r17,4(sp)
 1002f28:	dc000017 	ldw	r16,0(sp)
 1002f2c:	dec00304 	addi	sp,sp,12
 1002f30:	f800283a 	ret
 1002f34:	80800017 	ldw	r2,0(r16)
 1002f38:	103ff826 	beq	r2,zero,1002f1c <_read_r+0x3c>
 1002f3c:	88800015 	stw	r2,0(r17)
 1002f40:	1805883a 	mov	r2,r3
 1002f44:	dfc00217 	ldw	ra,8(sp)
 1002f48:	dc400117 	ldw	r17,4(sp)
 1002f4c:	dc000017 	ldw	r16,0(sp)
 1002f50:	dec00304 	addi	sp,sp,12
 1002f54:	f800283a 	ret

01002f58 <__muldi3>:
 1002f58:	defff204 	addi	sp,sp,-56
 1002f5c:	df000c15 	stw	fp,48(sp)
 1002f60:	3038d43a 	srli	fp,r6,16
 1002f64:	dd000815 	stw	r20,32(sp)
 1002f68:	dc400515 	stw	r17,20(sp)
 1002f6c:	2028d43a 	srli	r20,r4,16
 1002f70:	247fffcc 	andi	r17,r4,65535
 1002f74:	dc000415 	stw	r16,16(sp)
 1002f78:	343fffcc 	andi	r16,r6,65535
 1002f7c:	dcc00715 	stw	r19,28(sp)
 1002f80:	d9000015 	stw	r4,0(sp)
 1002f84:	2827883a 	mov	r19,r5
 1002f88:	8809883a 	mov	r4,r17
 1002f8c:	d9400115 	stw	r5,4(sp)
 1002f90:	800b883a 	mov	r5,r16
 1002f94:	d9800215 	stw	r6,8(sp)
 1002f98:	dfc00d15 	stw	ra,52(sp)
 1002f9c:	d9c00315 	stw	r7,12(sp)
 1002fa0:	dd800a15 	stw	r22,40(sp)
 1002fa4:	dd400915 	stw	r21,36(sp)
 1002fa8:	302d883a 	mov	r22,r6
 1002fac:	ddc00b15 	stw	r23,44(sp)
 1002fb0:	dc800615 	stw	r18,24(sp)
 1002fb4:	100307c0 	call	100307c <__mulsi3>
 1002fb8:	8809883a 	mov	r4,r17
 1002fbc:	e00b883a 	mov	r5,fp
 1002fc0:	102b883a 	mov	r21,r2
 1002fc4:	100307c0 	call	100307c <__mulsi3>
 1002fc8:	800b883a 	mov	r5,r16
 1002fcc:	a009883a 	mov	r4,r20
 1002fd0:	1023883a 	mov	r17,r2
 1002fd4:	100307c0 	call	100307c <__mulsi3>
 1002fd8:	a009883a 	mov	r4,r20
 1002fdc:	e00b883a 	mov	r5,fp
 1002fe0:	1021883a 	mov	r16,r2
 1002fe4:	100307c0 	call	100307c <__mulsi3>
 1002fe8:	a8ffffcc 	andi	r3,r21,65535
 1002fec:	a82ad43a 	srli	r21,r21,16
 1002ff0:	8c23883a 	add	r17,r17,r16
 1002ff4:	1011883a 	mov	r8,r2
 1002ff8:	ac6b883a 	add	r21,r21,r17
 1002ffc:	a804943a 	slli	r2,r21,16
 1003000:	b009883a 	mov	r4,r22
 1003004:	980b883a 	mov	r5,r19
 1003008:	10c7883a 	add	r3,r2,r3
 100300c:	a812d43a 	srli	r9,r21,16
 1003010:	180d883a 	mov	r6,r3
 1003014:	ac00022e 	bgeu	r21,r16,1003020 <__muldi3+0xc8>
 1003018:	00800074 	movhi	r2,1
 100301c:	4091883a 	add	r8,r8,r2
 1003020:	4267883a 	add	r19,r8,r9
 1003024:	302d883a 	mov	r22,r6
 1003028:	100307c0 	call	100307c <__mulsi3>
 100302c:	d9400317 	ldw	r5,12(sp)
 1003030:	d9000017 	ldw	r4,0(sp)
 1003034:	1023883a 	mov	r17,r2
 1003038:	100307c0 	call	100307c <__mulsi3>
 100303c:	14cb883a 	add	r5,r2,r19
 1003040:	894b883a 	add	r5,r17,r5
 1003044:	b005883a 	mov	r2,r22
 1003048:	2807883a 	mov	r3,r5
 100304c:	dfc00d17 	ldw	ra,52(sp)
 1003050:	df000c17 	ldw	fp,48(sp)
 1003054:	ddc00b17 	ldw	r23,44(sp)
 1003058:	dd800a17 	ldw	r22,40(sp)
 100305c:	dd400917 	ldw	r21,36(sp)
 1003060:	dd000817 	ldw	r20,32(sp)
 1003064:	dcc00717 	ldw	r19,28(sp)
 1003068:	dc800617 	ldw	r18,24(sp)
 100306c:	dc400517 	ldw	r17,20(sp)
 1003070:	dc000417 	ldw	r16,16(sp)
 1003074:	dec00e04 	addi	sp,sp,56
 1003078:	f800283a 	ret

0100307c <__mulsi3>:
 100307c:	20000a26 	beq	r4,zero,10030a8 <__mulsi3+0x2c>
 1003080:	0007883a 	mov	r3,zero
 1003084:	2080004c 	andi	r2,r4,1
 1003088:	1005003a 	cmpeq	r2,r2,zero
 100308c:	2008d07a 	srli	r4,r4,1
 1003090:	1000011e 	bne	r2,zero,1003098 <__mulsi3+0x1c>
 1003094:	1947883a 	add	r3,r3,r5
 1003098:	294b883a 	add	r5,r5,r5
 100309c:	203ff91e 	bne	r4,zero,1003084 <__mulsi3+0x8>
 10030a0:	1805883a 	mov	r2,r3
 10030a4:	f800283a 	ret
 10030a8:	0007883a 	mov	r3,zero
 10030ac:	1805883a 	mov	r2,r3
 10030b0:	f800283a 	ret

010030b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10030b4:	defff804 	addi	sp,sp,-32
 10030b8:	dfc00715 	stw	ra,28(sp)
 10030bc:	df000615 	stw	fp,24(sp)
 10030c0:	df000604 	addi	fp,sp,24
 10030c4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10030c8:	e0bffc17 	ldw	r2,-16(fp)
 10030cc:	1004803a 	cmplt	r2,r2,zero
 10030d0:	1000091e 	bne	r2,zero,10030f8 <close+0x44>
 10030d4:	e13ffc17 	ldw	r4,-16(fp)
 10030d8:	01400304 	movi	r5,12
 10030dc:	100307c0 	call	100307c <__mulsi3>
 10030e0:	1007883a 	mov	r3,r2
 10030e4:	00804074 	movhi	r2,257
 10030e8:	10a3c604 	addi	r2,r2,-28904
 10030ec:	1887883a 	add	r3,r3,r2
 10030f0:	e0ffff15 	stw	r3,-4(fp)
 10030f4:	00000106 	br	10030fc <close+0x48>
 10030f8:	e03fff15 	stw	zero,-4(fp)
 10030fc:	e0bfff17 	ldw	r2,-4(fp)
 1003100:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1003104:	e0bffb17 	ldw	r2,-20(fp)
 1003108:	1005003a 	cmpeq	r2,r2,zero
 100310c:	10001d1e 	bne	r2,zero,1003184 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1003110:	e0bffb17 	ldw	r2,-20(fp)
 1003114:	10800017 	ldw	r2,0(r2)
 1003118:	10800417 	ldw	r2,16(r2)
 100311c:	1005003a 	cmpeq	r2,r2,zero
 1003120:	1000071e 	bne	r2,zero,1003140 <close+0x8c>
 1003124:	e0bffb17 	ldw	r2,-20(fp)
 1003128:	10800017 	ldw	r2,0(r2)
 100312c:	10800417 	ldw	r2,16(r2)
 1003130:	e13ffb17 	ldw	r4,-20(fp)
 1003134:	103ee83a 	callr	r2
 1003138:	e0bffe15 	stw	r2,-8(fp)
 100313c:	00000106 	br	1003144 <close+0x90>
 1003140:	e03ffe15 	stw	zero,-8(fp)
 1003144:	e0bffe17 	ldw	r2,-8(fp)
 1003148:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100314c:	e13ffc17 	ldw	r4,-16(fp)
 1003150:	1003b280 	call	1003b28 <alt_release_fd>
    if (rval < 0)
 1003154:	e0bffa17 	ldw	r2,-24(fp)
 1003158:	1004403a 	cmpge	r2,r2,zero
 100315c:	1000071e 	bne	r2,zero,100317c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1003160:	10031b40 	call	10031b4 <alt_get_errno>
 1003164:	e0fffa17 	ldw	r3,-24(fp)
 1003168:	00c7c83a 	sub	r3,zero,r3
 100316c:	10c00015 	stw	r3,0(r2)
      return -1;
 1003170:	00bfffc4 	movi	r2,-1
 1003174:	e0bffd15 	stw	r2,-12(fp)
 1003178:	00000806 	br	100319c <close+0xe8>
    }
    return 0;
 100317c:	e03ffd15 	stw	zero,-12(fp)
 1003180:	00000606 	br	100319c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003184:	10031b40 	call	10031b4 <alt_get_errno>
 1003188:	1007883a 	mov	r3,r2
 100318c:	00801444 	movi	r2,81
 1003190:	18800015 	stw	r2,0(r3)
    return -1;
 1003194:	00bfffc4 	movi	r2,-1
 1003198:	e0bffd15 	stw	r2,-12(fp)
 100319c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 10031a0:	e037883a 	mov	sp,fp
 10031a4:	dfc00117 	ldw	ra,4(sp)
 10031a8:	df000017 	ldw	fp,0(sp)
 10031ac:	dec00204 	addi	sp,sp,8
 10031b0:	f800283a 	ret

010031b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10031b4:	defffd04 	addi	sp,sp,-12
 10031b8:	dfc00215 	stw	ra,8(sp)
 10031bc:	df000115 	stw	fp,4(sp)
 10031c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10031c4:	00804074 	movhi	r2,257
 10031c8:	10a87904 	addi	r2,r2,-24092
 10031cc:	10800017 	ldw	r2,0(r2)
 10031d0:	1005003a 	cmpeq	r2,r2,zero
 10031d4:	1000061e 	bne	r2,zero,10031f0 <alt_get_errno+0x3c>
 10031d8:	00804074 	movhi	r2,257
 10031dc:	10a87904 	addi	r2,r2,-24092
 10031e0:	10800017 	ldw	r2,0(r2)
 10031e4:	103ee83a 	callr	r2
 10031e8:	e0bfff15 	stw	r2,-4(fp)
 10031ec:	00000306 	br	10031fc <alt_get_errno+0x48>
 10031f0:	00804074 	movhi	r2,257
 10031f4:	10af4204 	addi	r2,r2,-17144
 10031f8:	e0bfff15 	stw	r2,-4(fp)
 10031fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003200:	e037883a 	mov	sp,fp
 1003204:	dfc00117 	ldw	ra,4(sp)
 1003208:	df000017 	ldw	fp,0(sp)
 100320c:	dec00204 	addi	sp,sp,8
 1003210:	f800283a 	ret

01003214 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1003214:	defffc04 	addi	sp,sp,-16
 1003218:	df000315 	stw	fp,12(sp)
 100321c:	df000304 	addi	fp,sp,12
 1003220:	e13ffd15 	stw	r4,-12(fp)
 1003224:	e17ffe15 	stw	r5,-8(fp)
 1003228:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100322c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003230:	e037883a 	mov	sp,fp
 1003234:	df000017 	ldw	fp,0(sp)
 1003238:	dec00104 	addi	sp,sp,4
 100323c:	f800283a 	ret

01003240 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1003240:	defff904 	addi	sp,sp,-28
 1003244:	dfc00615 	stw	ra,24(sp)
 1003248:	df000515 	stw	fp,20(sp)
 100324c:	df000504 	addi	fp,sp,20
 1003250:	e13ffc15 	stw	r4,-16(fp)
 1003254:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003258:	e0bffc17 	ldw	r2,-16(fp)
 100325c:	1004803a 	cmplt	r2,r2,zero
 1003260:	1000091e 	bne	r2,zero,1003288 <fstat+0x48>
 1003264:	e13ffc17 	ldw	r4,-16(fp)
 1003268:	01400304 	movi	r5,12
 100326c:	100307c0 	call	100307c <__mulsi3>
 1003270:	1007883a 	mov	r3,r2
 1003274:	00804074 	movhi	r2,257
 1003278:	10a3c604 	addi	r2,r2,-28904
 100327c:	1887883a 	add	r3,r3,r2
 1003280:	e0ffff15 	stw	r3,-4(fp)
 1003284:	00000106 	br	100328c <fstat+0x4c>
 1003288:	e03fff15 	stw	zero,-4(fp)
 100328c:	e0bfff17 	ldw	r2,-4(fp)
 1003290:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003294:	e0bffb17 	ldw	r2,-20(fp)
 1003298:	1005003a 	cmpeq	r2,r2,zero
 100329c:	1000121e 	bne	r2,zero,10032e8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10032a0:	e0bffb17 	ldw	r2,-20(fp)
 10032a4:	10800017 	ldw	r2,0(r2)
 10032a8:	10800817 	ldw	r2,32(r2)
 10032ac:	1005003a 	cmpeq	r2,r2,zero
 10032b0:	1000081e 	bne	r2,zero,10032d4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 10032b4:	e0bffb17 	ldw	r2,-20(fp)
 10032b8:	10800017 	ldw	r2,0(r2)
 10032bc:	10800817 	ldw	r2,32(r2)
 10032c0:	e13ffb17 	ldw	r4,-20(fp)
 10032c4:	e17ffd17 	ldw	r5,-12(fp)
 10032c8:	103ee83a 	callr	r2
 10032cc:	e0bffe15 	stw	r2,-8(fp)
 10032d0:	00000b06 	br	1003300 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10032d4:	e0fffd17 	ldw	r3,-12(fp)
 10032d8:	00880004 	movi	r2,8192
 10032dc:	18800115 	stw	r2,4(r3)
      return 0;
 10032e0:	e03ffe15 	stw	zero,-8(fp)
 10032e4:	00000606 	br	1003300 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10032e8:	10033180 	call	1003318 <alt_get_errno>
 10032ec:	1007883a 	mov	r3,r2
 10032f0:	00801444 	movi	r2,81
 10032f4:	18800015 	stw	r2,0(r3)
    return -1;
 10032f8:	00bfffc4 	movi	r2,-1
 10032fc:	e0bffe15 	stw	r2,-8(fp)
 1003300:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1003304:	e037883a 	mov	sp,fp
 1003308:	dfc00117 	ldw	ra,4(sp)
 100330c:	df000017 	ldw	fp,0(sp)
 1003310:	dec00204 	addi	sp,sp,8
 1003314:	f800283a 	ret

01003318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003318:	defffd04 	addi	sp,sp,-12
 100331c:	dfc00215 	stw	ra,8(sp)
 1003320:	df000115 	stw	fp,4(sp)
 1003324:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003328:	00804074 	movhi	r2,257
 100332c:	10a87904 	addi	r2,r2,-24092
 1003330:	10800017 	ldw	r2,0(r2)
 1003334:	1005003a 	cmpeq	r2,r2,zero
 1003338:	1000061e 	bne	r2,zero,1003354 <alt_get_errno+0x3c>
 100333c:	00804074 	movhi	r2,257
 1003340:	10a87904 	addi	r2,r2,-24092
 1003344:	10800017 	ldw	r2,0(r2)
 1003348:	103ee83a 	callr	r2
 100334c:	e0bfff15 	stw	r2,-4(fp)
 1003350:	00000306 	br	1003360 <alt_get_errno+0x48>
 1003354:	00804074 	movhi	r2,257
 1003358:	10af4204 	addi	r2,r2,-17144
 100335c:	e0bfff15 	stw	r2,-4(fp)
 1003360:	e0bfff17 	ldw	r2,-4(fp)
}
 1003364:	e037883a 	mov	sp,fp
 1003368:	dfc00117 	ldw	ra,4(sp)
 100336c:	df000017 	ldw	fp,0(sp)
 1003370:	dec00204 	addi	sp,sp,8
 1003374:	f800283a 	ret

01003378 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 1003378:	defff504 	addi	sp,sp,-44
 100337c:	dfc00a15 	stw	ra,40(sp)
 1003380:	df000915 	stw	fp,36(sp)
 1003384:	dc800815 	stw	r18,32(sp)
 1003388:	dc400715 	stw	r17,28(sp)
 100338c:	dc000615 	stw	r16,24(sp)
 1003390:	df000604 	addi	fp,sp,24
 1003394:	e13ffd15 	stw	r4,-12(fp)
 1003398:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 100339c:	e0bffe17 	ldw	r2,-8(fp)
 10033a0:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10033a4:	00804074 	movhi	r2,257
 10033a8:	10af4e04 	addi	r2,r2,-17096
 10033ac:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 10033b0:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10033b4:	00804074 	movhi	r2,257
 10033b8:	10af4d04 	addi	r2,r2,-17100
 10033bc:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 10033c0:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 10033c4:	e0bffa17 	ldw	r2,-24(fp)
 10033c8:	1005003a 	cmpeq	r2,r2,zero
 10033cc:	1000661e 	bne	r2,zero,1003568 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 10033d0:	d0a6d817 	ldw	r2,-25760(gp)
 10033d4:	1021883a 	mov	r16,r2
 10033d8:	e13ffb17 	ldw	r4,-20(fp)
 10033dc:	e17ffa17 	ldw	r5,-24(fp)
 10033e0:	10004a00 	call	10004a0 <__udivsi3>
 10033e4:	8085883a 	add	r2,r16,r2
 10033e8:	1007883a 	mov	r3,r2
 10033ec:	e0bffd17 	ldw	r2,-12(fp)
 10033f0:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 10033f4:	00804074 	movhi	r2,257
 10033f8:	10af4904 	addi	r2,r2,-17116
 10033fc:	10800017 	ldw	r2,0(r2)
 1003400:	1025883a 	mov	r18,r2
 1003404:	e43ffb17 	ldw	r16,-20(fp)
 1003408:	0023883a 	mov	r17,zero
 100340c:	010003f4 	movhi	r4,15
 1003410:	21109004 	addi	r4,r4,16960
 1003414:	e17ffa17 	ldw	r5,-24(fp)
 1003418:	10004a00 	call	10004a0 <__udivsi3>
 100341c:	1009883a 	mov	r4,r2
 1003420:	2005883a 	mov	r2,r4
 1003424:	0007883a 	mov	r3,zero
 1003428:	8009883a 	mov	r4,r16
 100342c:	880b883a 	mov	r5,r17
 1003430:	100d883a 	mov	r6,r2
 1003434:	180f883a 	mov	r7,r3
 1003438:	1002f580 	call	1002f58 <__muldi3>
 100343c:	1009883a 	mov	r4,r2
 1003440:	180b883a 	mov	r5,r3
 1003444:	2005883a 	mov	r2,r4
 1003448:	2807883a 	mov	r3,r5
 100344c:	1009883a 	mov	r4,r2
 1003450:	180b883a 	mov	r5,r3
 1003454:	018003f4 	movhi	r6,15
 1003458:	31909004 	addi	r6,r6,16960
 100345c:	000f883a 	mov	r7,zero
 1003460:	1007e040 	call	1007e04 <__umoddi3>
 1003464:	1009883a 	mov	r4,r2
 1003468:	180b883a 	mov	r5,r3
 100346c:	2005883a 	mov	r2,r4
 1003470:	2807883a 	mov	r3,r5
 1003474:	9085883a 	add	r2,r18,r2
 1003478:	1007883a 	mov	r3,r2
 100347c:	e0bffd17 	ldw	r2,-12(fp)
 1003480:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 1003484:	00001506 	br	10034dc <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
 1003488:	e0bffd17 	ldw	r2,-12(fp)
 100348c:	10800017 	ldw	r2,0(r2)
 1003490:	10800048 	cmpgei	r2,r2,1
 1003494:	1000051e 	bne	r2,zero,10034ac <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
 1003498:	e0bffd17 	ldw	r2,-12(fp)
 100349c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 10034a0:	e0bffd17 	ldw	r2,-12(fp)
 10034a4:	10000115 	stw	zero,4(r2)
          break;
 10034a8:	00001d06 	br	1003520 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
 10034ac:	e0bffd17 	ldw	r2,-12(fp)
 10034b0:	10800017 	ldw	r2,0(r2)
 10034b4:	10ffffc4 	addi	r3,r2,-1
 10034b8:	e0bffd17 	ldw	r2,-12(fp)
 10034bc:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 10034c0:	e0bffd17 	ldw	r2,-12(fp)
 10034c4:	10c00117 	ldw	r3,4(r2)
 10034c8:	008003f4 	movhi	r2,15
 10034cc:	10909004 	addi	r2,r2,16960
 10034d0:	1887883a 	add	r3,r3,r2
 10034d4:	e0bffd17 	ldw	r2,-12(fp)
 10034d8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 10034dc:	e0bffd17 	ldw	r2,-12(fp)
 10034e0:	10800117 	ldw	r2,4(r2)
 10034e4:	1004803a 	cmplt	r2,r2,zero
 10034e8:	103fe71e 	bne	r2,zero,1003488 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 10034ec:	00000c06 	br	1003520 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
 10034f0:	e0bffd17 	ldw	r2,-12(fp)
 10034f4:	10800017 	ldw	r2,0(r2)
 10034f8:	10c00044 	addi	r3,r2,1
 10034fc:	e0bffd17 	ldw	r2,-12(fp)
 1003500:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 1003504:	e0bffd17 	ldw	r2,-12(fp)
 1003508:	10c00117 	ldw	r3,4(r2)
 100350c:	00bffc74 	movhi	r2,65521
 1003510:	10af7004 	addi	r2,r2,-16960
 1003514:	1887883a 	add	r3,r3,r2
 1003518:	e0bffd17 	ldw	r2,-12(fp)
 100351c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 1003520:	e0bffd17 	ldw	r2,-12(fp)
 1003524:	10c00117 	ldw	r3,4(r2)
 1003528:	008003f4 	movhi	r2,15
 100352c:	10908fc4 	addi	r2,r2,16959
 1003530:	10ffef16 	blt	r2,r3,10034f0 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 1003534:	e0bffc17 	ldw	r2,-16(fp)
 1003538:	1005003a 	cmpeq	r2,r2,zero
 100353c:	1000081e 	bne	r2,zero,1003560 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 1003540:	d0e6d617 	ldw	r3,-25768(gp)
 1003544:	e0bffc17 	ldw	r2,-16(fp)
 1003548:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 100354c:	00804074 	movhi	r2,257
 1003550:	10af4704 	addi	r2,r2,-17124
 1003554:	10c00017 	ldw	r3,0(r2)
 1003558:	e0bffc17 	ldw	r2,-16(fp)
 100355c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 1003560:	e03fff15 	stw	zero,-4(fp)
 1003564:	00000206 	br	1003570 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
 1003568:	00bfde84 	movi	r2,-134
 100356c:	e0bfff15 	stw	r2,-4(fp)
 1003570:	e0bfff17 	ldw	r2,-4(fp)
}
 1003574:	e037883a 	mov	sp,fp
 1003578:	dfc00417 	ldw	ra,16(sp)
 100357c:	df000317 	ldw	fp,12(sp)
 1003580:	dc800217 	ldw	r18,8(sp)
 1003584:	dc400117 	ldw	r17,4(sp)
 1003588:	dc000017 	ldw	r16,0(sp)
 100358c:	dec00504 	addi	sp,sp,20
 1003590:	f800283a 	ret

01003594 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003594:	deffeb04 	addi	sp,sp,-84
 1003598:	dfc01415 	stw	ra,80(sp)
 100359c:	df001315 	stw	fp,76(sp)
 10035a0:	df001304 	addi	fp,sp,76
 10035a4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10035a8:	e0bffd17 	ldw	r2,-12(fp)
 10035ac:	1004803a 	cmplt	r2,r2,zero
 10035b0:	1000091e 	bne	r2,zero,10035d8 <isatty+0x44>
 10035b4:	e13ffd17 	ldw	r4,-12(fp)
 10035b8:	01400304 	movi	r5,12
 10035bc:	100307c0 	call	100307c <__mulsi3>
 10035c0:	1007883a 	mov	r3,r2
 10035c4:	00804074 	movhi	r2,257
 10035c8:	10a3c604 	addi	r2,r2,-28904
 10035cc:	1887883a 	add	r3,r3,r2
 10035d0:	e0ffff15 	stw	r3,-4(fp)
 10035d4:	00000106 	br	10035dc <isatty+0x48>
 10035d8:	e03fff15 	stw	zero,-4(fp)
 10035dc:	e0bfff17 	ldw	r2,-4(fp)
 10035e0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10035e4:	e0bfed17 	ldw	r2,-76(fp)
 10035e8:	1005003a 	cmpeq	r2,r2,zero
 10035ec:	10000f1e 	bne	r2,zero,100362c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10035f0:	e0bfed17 	ldw	r2,-76(fp)
 10035f4:	10800017 	ldw	r2,0(r2)
 10035f8:	10800817 	ldw	r2,32(r2)
 10035fc:	1004c03a 	cmpne	r2,r2,zero
 1003600:	1000031e 	bne	r2,zero,1003610 <isatty+0x7c>
    {
      return 1;
 1003604:	00800044 	movi	r2,1
 1003608:	e0bffe15 	stw	r2,-8(fp)
 100360c:	00000c06 	br	1003640 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1003610:	e17fee04 	addi	r5,fp,-72
 1003614:	e13ffd17 	ldw	r4,-12(fp)
 1003618:	10032400 	call	1003240 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100361c:	e0bfef17 	ldw	r2,-68(fp)
 1003620:	10880020 	cmpeqi	r2,r2,8192
 1003624:	e0bffe15 	stw	r2,-8(fp)
 1003628:	00000506 	br	1003640 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100362c:	10036580 	call	1003658 <alt_get_errno>
 1003630:	1007883a 	mov	r3,r2
 1003634:	00801444 	movi	r2,81
 1003638:	18800015 	stw	r2,0(r3)
    return 0;
 100363c:	e03ffe15 	stw	zero,-8(fp)
 1003640:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1003644:	e037883a 	mov	sp,fp
 1003648:	dfc00117 	ldw	ra,4(sp)
 100364c:	df000017 	ldw	fp,0(sp)
 1003650:	dec00204 	addi	sp,sp,8
 1003654:	f800283a 	ret

01003658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003658:	defffd04 	addi	sp,sp,-12
 100365c:	dfc00215 	stw	ra,8(sp)
 1003660:	df000115 	stw	fp,4(sp)
 1003664:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003668:	00804074 	movhi	r2,257
 100366c:	10a87904 	addi	r2,r2,-24092
 1003670:	10800017 	ldw	r2,0(r2)
 1003674:	1005003a 	cmpeq	r2,r2,zero
 1003678:	1000061e 	bne	r2,zero,1003694 <alt_get_errno+0x3c>
 100367c:	00804074 	movhi	r2,257
 1003680:	10a87904 	addi	r2,r2,-24092
 1003684:	10800017 	ldw	r2,0(r2)
 1003688:	103ee83a 	callr	r2
 100368c:	e0bfff15 	stw	r2,-4(fp)
 1003690:	00000306 	br	10036a0 <alt_get_errno+0x48>
 1003694:	00804074 	movhi	r2,257
 1003698:	10af4204 	addi	r2,r2,-17144
 100369c:	e0bfff15 	stw	r2,-4(fp)
 10036a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10036a4:	e037883a 	mov	sp,fp
 10036a8:	dfc00117 	ldw	ra,4(sp)
 10036ac:	df000017 	ldw	fp,0(sp)
 10036b0:	dec00204 	addi	sp,sp,8
 10036b4:	f800283a 	ret

010036b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10036b8:	defffe04 	addi	sp,sp,-8
 10036bc:	dfc00115 	stw	ra,4(sp)
 10036c0:	df000015 	stw	fp,0(sp)
 10036c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10036c8:	01004074 	movhi	r4,257
 10036cc:	21287e04 	addi	r4,r4,-24072
 10036d0:	01404074 	movhi	r5,257
 10036d4:	2961ba04 	addi	r5,r5,-31000
 10036d8:	01804074 	movhi	r6,257
 10036dc:	31a87e04 	addi	r6,r6,-24072
 10036e0:	10037380 	call	1003738 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10036e4:	01004034 	movhi	r4,256
 10036e8:	21000804 	addi	r4,r4,32
 10036ec:	01404034 	movhi	r5,256
 10036f0:	29400804 	addi	r5,r5,32
 10036f4:	01804034 	movhi	r6,256
 10036f8:	31806d04 	addi	r6,r6,436
 10036fc:	10037380 	call	1003738 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1003700:	01004074 	movhi	r4,257
 1003704:	21213204 	addi	r4,r4,-31544
 1003708:	01404074 	movhi	r5,257
 100370c:	29613204 	addi	r5,r5,-31544
 1003710:	01804074 	movhi	r6,257
 1003714:	31a1ba04 	addi	r6,r6,-31000
 1003718:	10037380 	call	1003738 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100371c:	1006de80 	call	1006de8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1003720:	10070740 	call	1007074 <alt_icache_flush_all>
}
 1003724:	e037883a 	mov	sp,fp
 1003728:	dfc00117 	ldw	ra,4(sp)
 100372c:	df000017 	ldw	fp,0(sp)
 1003730:	dec00204 	addi	sp,sp,8
 1003734:	f800283a 	ret

01003738 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1003738:	defffc04 	addi	sp,sp,-16
 100373c:	df000315 	stw	fp,12(sp)
 1003740:	df000304 	addi	fp,sp,12
 1003744:	e13ffd15 	stw	r4,-12(fp)
 1003748:	e17ffe15 	stw	r5,-8(fp)
 100374c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1003750:	e0fffe17 	ldw	r3,-8(fp)
 1003754:	e0bffd17 	ldw	r2,-12(fp)
 1003758:	18800e26 	beq	r3,r2,1003794 <alt_load_section+0x5c>
  {
    while( to != end )
 100375c:	00000a06 	br	1003788 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1003760:	e0bffd17 	ldw	r2,-12(fp)
 1003764:	10c00017 	ldw	r3,0(r2)
 1003768:	e0bffe17 	ldw	r2,-8(fp)
 100376c:	10c00015 	stw	r3,0(r2)
 1003770:	e0bffe17 	ldw	r2,-8(fp)
 1003774:	10800104 	addi	r2,r2,4
 1003778:	e0bffe15 	stw	r2,-8(fp)
 100377c:	e0bffd17 	ldw	r2,-12(fp)
 1003780:	10800104 	addi	r2,r2,4
 1003784:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1003788:	e0fffe17 	ldw	r3,-8(fp)
 100378c:	e0bfff17 	ldw	r2,-4(fp)
 1003790:	18bff31e 	bne	r3,r2,1003760 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1003794:	e037883a 	mov	sp,fp
 1003798:	df000017 	ldw	fp,0(sp)
 100379c:	dec00104 	addi	sp,sp,4
 10037a0:	f800283a 	ret

010037a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10037a4:	defff804 	addi	sp,sp,-32
 10037a8:	dfc00715 	stw	ra,28(sp)
 10037ac:	df000615 	stw	fp,24(sp)
 10037b0:	df000604 	addi	fp,sp,24
 10037b4:	e13ffc15 	stw	r4,-16(fp)
 10037b8:	e17ffd15 	stw	r5,-12(fp)
 10037bc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10037c0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10037c4:	e0bffc17 	ldw	r2,-16(fp)
 10037c8:	1004803a 	cmplt	r2,r2,zero
 10037cc:	1000091e 	bne	r2,zero,10037f4 <lseek+0x50>
 10037d0:	e13ffc17 	ldw	r4,-16(fp)
 10037d4:	01400304 	movi	r5,12
 10037d8:	100307c0 	call	100307c <__mulsi3>
 10037dc:	1007883a 	mov	r3,r2
 10037e0:	00804074 	movhi	r2,257
 10037e4:	10a3c604 	addi	r2,r2,-28904
 10037e8:	1887883a 	add	r3,r3,r2
 10037ec:	e0ffff15 	stw	r3,-4(fp)
 10037f0:	00000106 	br	10037f8 <lseek+0x54>
 10037f4:	e03fff15 	stw	zero,-4(fp)
 10037f8:	e0bfff17 	ldw	r2,-4(fp)
 10037fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003800:	e0bffb17 	ldw	r2,-20(fp)
 1003804:	1005003a 	cmpeq	r2,r2,zero
 1003808:	1000111e 	bne	r2,zero,1003850 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100380c:	e0bffb17 	ldw	r2,-20(fp)
 1003810:	10800017 	ldw	r2,0(r2)
 1003814:	10800717 	ldw	r2,28(r2)
 1003818:	1005003a 	cmpeq	r2,r2,zero
 100381c:	1000091e 	bne	r2,zero,1003844 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003820:	e0bffb17 	ldw	r2,-20(fp)
 1003824:	10800017 	ldw	r2,0(r2)
 1003828:	10800717 	ldw	r2,28(r2)
 100382c:	e13ffb17 	ldw	r4,-20(fp)
 1003830:	e17ffd17 	ldw	r5,-12(fp)
 1003834:	e1bffe17 	ldw	r6,-8(fp)
 1003838:	103ee83a 	callr	r2
 100383c:	e0bffa15 	stw	r2,-24(fp)
 1003840:	00000506 	br	1003858 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003844:	00bfde84 	movi	r2,-134
 1003848:	e0bffa15 	stw	r2,-24(fp)
 100384c:	00000206 	br	1003858 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1003850:	00bfebc4 	movi	r2,-81
 1003854:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1003858:	e0bffa17 	ldw	r2,-24(fp)
 100385c:	1004403a 	cmpge	r2,r2,zero
 1003860:	1000071e 	bne	r2,zero,1003880 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1003864:	10038980 	call	1003898 <alt_get_errno>
 1003868:	1007883a 	mov	r3,r2
 100386c:	e0bffa17 	ldw	r2,-24(fp)
 1003870:	0085c83a 	sub	r2,zero,r2
 1003874:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003878:	00bfffc4 	movi	r2,-1
 100387c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1003880:	e0bffa17 	ldw	r2,-24(fp)
}
 1003884:	e037883a 	mov	sp,fp
 1003888:	dfc00117 	ldw	ra,4(sp)
 100388c:	df000017 	ldw	fp,0(sp)
 1003890:	dec00204 	addi	sp,sp,8
 1003894:	f800283a 	ret

01003898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003898:	defffd04 	addi	sp,sp,-12
 100389c:	dfc00215 	stw	ra,8(sp)
 10038a0:	df000115 	stw	fp,4(sp)
 10038a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10038a8:	00804074 	movhi	r2,257
 10038ac:	10a87904 	addi	r2,r2,-24092
 10038b0:	10800017 	ldw	r2,0(r2)
 10038b4:	1005003a 	cmpeq	r2,r2,zero
 10038b8:	1000061e 	bne	r2,zero,10038d4 <alt_get_errno+0x3c>
 10038bc:	00804074 	movhi	r2,257
 10038c0:	10a87904 	addi	r2,r2,-24092
 10038c4:	10800017 	ldw	r2,0(r2)
 10038c8:	103ee83a 	callr	r2
 10038cc:	e0bfff15 	stw	r2,-4(fp)
 10038d0:	00000306 	br	10038e0 <alt_get_errno+0x48>
 10038d4:	00804074 	movhi	r2,257
 10038d8:	10af4204 	addi	r2,r2,-17144
 10038dc:	e0bfff15 	stw	r2,-4(fp)
 10038e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10038e4:	e037883a 	mov	sp,fp
 10038e8:	dfc00117 	ldw	ra,4(sp)
 10038ec:	df000017 	ldw	fp,0(sp)
 10038f0:	dec00204 	addi	sp,sp,8
 10038f4:	f800283a 	ret

010038f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10038f8:	defffd04 	addi	sp,sp,-12
 10038fc:	dfc00215 	stw	ra,8(sp)
 1003900:	df000115 	stw	fp,4(sp)
 1003904:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003908:	0009883a 	mov	r4,zero
 100390c:	1003f840 	call	1003f84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003910:	1003fb80 	call	1003fb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003914:	01004074 	movhi	r4,257
 1003918:	21215204 	addi	r4,r4,-31416
 100391c:	01404074 	movhi	r5,257
 1003920:	29615204 	addi	r5,r5,-31416
 1003924:	01804074 	movhi	r6,257
 1003928:	31a15204 	addi	r6,r6,-31416
 100392c:	10074340 	call	1007434 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003930:	1006f180 	call	1006f18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003934:	01004034 	movhi	r4,256
 1003938:	211bdf04 	addi	r4,r4,28540
 100393c:	10079a00 	call	10079a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1003940:	d126da17 	ldw	r4,-25752(gp)
 1003944:	d166db17 	ldw	r5,-25748(gp)
 1003948:	d1a6dc17 	ldw	r6,-25744(gp)
 100394c:	10001f00 	call	10001f0 <main>
 1003950:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003954:	01000044 	movi	r4,1
 1003958:	10030b40 	call	10030b4 <close>
  exit (result);
 100395c:	e13fff17 	ldw	r4,-4(fp)
 1003960:	10079b40 	call	10079b4 <exit>

01003964 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003964:	defffe04 	addi	sp,sp,-8
 1003968:	df000115 	stw	fp,4(sp)
 100396c:	df000104 	addi	fp,sp,4
 1003970:	e13fff15 	stw	r4,-4(fp)
}
 1003974:	e037883a 	mov	sp,fp
 1003978:	df000017 	ldw	fp,0(sp)
 100397c:	dec00104 	addi	sp,sp,4
 1003980:	f800283a 	ret

01003984 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003984:	defffe04 	addi	sp,sp,-8
 1003988:	df000115 	stw	fp,4(sp)
 100398c:	df000104 	addi	fp,sp,4
 1003990:	e13fff15 	stw	r4,-4(fp)
}
 1003994:	e037883a 	mov	sp,fp
 1003998:	df000017 	ldw	fp,0(sp)
 100399c:	dec00104 	addi	sp,sp,4
 10039a0:	f800283a 	ret

010039a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10039a4:	defff704 	addi	sp,sp,-36
 10039a8:	dfc00815 	stw	ra,32(sp)
 10039ac:	df000715 	stw	fp,28(sp)
 10039b0:	df000704 	addi	fp,sp,28
 10039b4:	e13ffb15 	stw	r4,-20(fp)
 10039b8:	e17ffc15 	stw	r5,-16(fp)
 10039bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10039c0:	e0bffb17 	ldw	r2,-20(fp)
 10039c4:	1004803a 	cmplt	r2,r2,zero
 10039c8:	1000091e 	bne	r2,zero,10039f0 <read+0x4c>
 10039cc:	e13ffb17 	ldw	r4,-20(fp)
 10039d0:	01400304 	movi	r5,12
 10039d4:	100307c0 	call	100307c <__mulsi3>
 10039d8:	1007883a 	mov	r3,r2
 10039dc:	00804074 	movhi	r2,257
 10039e0:	10a3c604 	addi	r2,r2,-28904
 10039e4:	1887883a 	add	r3,r3,r2
 10039e8:	e0ffff15 	stw	r3,-4(fp)
 10039ec:	00000106 	br	10039f4 <read+0x50>
 10039f0:	e03fff15 	stw	zero,-4(fp)
 10039f4:	e0bfff17 	ldw	r2,-4(fp)
 10039f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10039fc:	e0bffa17 	ldw	r2,-24(fp)
 1003a00:	1005003a 	cmpeq	r2,r2,zero
 1003a04:	1000241e 	bne	r2,zero,1003a98 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003a08:	e0bffa17 	ldw	r2,-24(fp)
 1003a0c:	10800217 	ldw	r2,8(r2)
 1003a10:	108000cc 	andi	r2,r2,3
 1003a14:	10800060 	cmpeqi	r2,r2,1
 1003a18:	10001a1e 	bne	r2,zero,1003a84 <read+0xe0>
 1003a1c:	e0bffa17 	ldw	r2,-24(fp)
 1003a20:	10800017 	ldw	r2,0(r2)
 1003a24:	10800517 	ldw	r2,20(r2)
 1003a28:	1005003a 	cmpeq	r2,r2,zero
 1003a2c:	1000151e 	bne	r2,zero,1003a84 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003a30:	e0bffa17 	ldw	r2,-24(fp)
 1003a34:	10800017 	ldw	r2,0(r2)
 1003a38:	10800517 	ldw	r2,20(r2)
 1003a3c:	e17ffc17 	ldw	r5,-16(fp)
 1003a40:	e1bffd17 	ldw	r6,-12(fp)
 1003a44:	e13ffa17 	ldw	r4,-24(fp)
 1003a48:	103ee83a 	callr	r2
 1003a4c:	e0bff915 	stw	r2,-28(fp)
 1003a50:	e0bff917 	ldw	r2,-28(fp)
 1003a54:	1004403a 	cmpge	r2,r2,zero
 1003a58:	1000071e 	bne	r2,zero,1003a78 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 1003a5c:	1003ac80 	call	1003ac8 <alt_get_errno>
 1003a60:	e0fff917 	ldw	r3,-28(fp)
 1003a64:	00c7c83a 	sub	r3,zero,r3
 1003a68:	10c00015 	stw	r3,0(r2)
          return -1;
 1003a6c:	00bfffc4 	movi	r2,-1
 1003a70:	e0bffe15 	stw	r2,-8(fp)
 1003a74:	00000e06 	br	1003ab0 <read+0x10c>
        }
        return rval;
 1003a78:	e0bff917 	ldw	r2,-28(fp)
 1003a7c:	e0bffe15 	stw	r2,-8(fp)
 1003a80:	00000b06 	br	1003ab0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003a84:	1003ac80 	call	1003ac8 <alt_get_errno>
 1003a88:	1007883a 	mov	r3,r2
 1003a8c:	00800344 	movi	r2,13
 1003a90:	18800015 	stw	r2,0(r3)
 1003a94:	00000406 	br	1003aa8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003a98:	1003ac80 	call	1003ac8 <alt_get_errno>
 1003a9c:	1007883a 	mov	r3,r2
 1003aa0:	00801444 	movi	r2,81
 1003aa4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003aa8:	00bfffc4 	movi	r2,-1
 1003aac:	e0bffe15 	stw	r2,-8(fp)
 1003ab0:	e0bffe17 	ldw	r2,-8(fp)
}
 1003ab4:	e037883a 	mov	sp,fp
 1003ab8:	dfc00117 	ldw	ra,4(sp)
 1003abc:	df000017 	ldw	fp,0(sp)
 1003ac0:	dec00204 	addi	sp,sp,8
 1003ac4:	f800283a 	ret

01003ac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003ac8:	defffd04 	addi	sp,sp,-12
 1003acc:	dfc00215 	stw	ra,8(sp)
 1003ad0:	df000115 	stw	fp,4(sp)
 1003ad4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003ad8:	00804074 	movhi	r2,257
 1003adc:	10a87904 	addi	r2,r2,-24092
 1003ae0:	10800017 	ldw	r2,0(r2)
 1003ae4:	1005003a 	cmpeq	r2,r2,zero
 1003ae8:	1000061e 	bne	r2,zero,1003b04 <alt_get_errno+0x3c>
 1003aec:	00804074 	movhi	r2,257
 1003af0:	10a87904 	addi	r2,r2,-24092
 1003af4:	10800017 	ldw	r2,0(r2)
 1003af8:	103ee83a 	callr	r2
 1003afc:	e0bfff15 	stw	r2,-4(fp)
 1003b00:	00000306 	br	1003b10 <alt_get_errno+0x48>
 1003b04:	00804074 	movhi	r2,257
 1003b08:	10af4204 	addi	r2,r2,-17144
 1003b0c:	e0bfff15 	stw	r2,-4(fp)
 1003b10:	e0bfff17 	ldw	r2,-4(fp)
}
 1003b14:	e037883a 	mov	sp,fp
 1003b18:	dfc00117 	ldw	ra,4(sp)
 1003b1c:	df000017 	ldw	fp,0(sp)
 1003b20:	dec00204 	addi	sp,sp,8
 1003b24:	f800283a 	ret

01003b28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003b28:	defffc04 	addi	sp,sp,-16
 1003b2c:	dfc00315 	stw	ra,12(sp)
 1003b30:	df000215 	stw	fp,8(sp)
 1003b34:	dc000115 	stw	r16,4(sp)
 1003b38:	df000104 	addi	fp,sp,4
 1003b3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003b40:	e0bfff17 	ldw	r2,-4(fp)
 1003b44:	108000d0 	cmplti	r2,r2,3
 1003b48:	10000f1e 	bne	r2,zero,1003b88 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003b4c:	e13fff17 	ldw	r4,-4(fp)
 1003b50:	04004074 	movhi	r16,257
 1003b54:	8423c604 	addi	r16,r16,-28904
 1003b58:	01400304 	movi	r5,12
 1003b5c:	100307c0 	call	100307c <__mulsi3>
 1003b60:	1405883a 	add	r2,r2,r16
 1003b64:	10800204 	addi	r2,r2,8
 1003b68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003b6c:	e13fff17 	ldw	r4,-4(fp)
 1003b70:	04004074 	movhi	r16,257
 1003b74:	8423c604 	addi	r16,r16,-28904
 1003b78:	01400304 	movi	r5,12
 1003b7c:	100307c0 	call	100307c <__mulsi3>
 1003b80:	1405883a 	add	r2,r2,r16
 1003b84:	10000015 	stw	zero,0(r2)
  }
}
 1003b88:	e037883a 	mov	sp,fp
 1003b8c:	dfc00217 	ldw	ra,8(sp)
 1003b90:	df000117 	ldw	fp,4(sp)
 1003b94:	dc000017 	ldw	r16,0(sp)
 1003b98:	dec00304 	addi	sp,sp,12
 1003b9c:	f800283a 	ret

01003ba0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003ba0:	defff804 	addi	sp,sp,-32
 1003ba4:	df000715 	stw	fp,28(sp)
 1003ba8:	df000704 	addi	fp,sp,28
 1003bac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003bb0:	0005303a 	rdctl	r2,status
 1003bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003bb8:	e0fffb17 	ldw	r3,-20(fp)
 1003bbc:	00bfff84 	movi	r2,-2
 1003bc0:	1884703a 	and	r2,r3,r2
 1003bc4:	1001703a 	wrctl	status,r2
  
  return context;
 1003bc8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003bcc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003bd0:	d0a00a17 	ldw	r2,-32728(gp)
 1003bd4:	10c000c4 	addi	r3,r2,3
 1003bd8:	00bfff04 	movi	r2,-4
 1003bdc:	1884703a 	and	r2,r3,r2
 1003be0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003be4:	d0e00a17 	ldw	r3,-32728(gp)
 1003be8:	e0bffe17 	ldw	r2,-8(fp)
 1003bec:	1887883a 	add	r3,r3,r2
 1003bf0:	00806034 	movhi	r2,384
 1003bf4:	10800004 	addi	r2,r2,0
 1003bf8:	10c0072e 	bgeu	r2,r3,1003c18 <sbrk+0x78>
 1003bfc:	e0bffd17 	ldw	r2,-12(fp)
 1003c00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003c04:	e0bffa17 	ldw	r2,-24(fp)
 1003c08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003c0c:	00bfffc4 	movi	r2,-1
 1003c10:	e0bfff15 	stw	r2,-4(fp)
 1003c14:	00000c06 	br	1003c48 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1003c18:	d0a00a17 	ldw	r2,-32728(gp)
 1003c1c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1003c20:	d0e00a17 	ldw	r3,-32728(gp)
 1003c24:	e0bffe17 	ldw	r2,-8(fp)
 1003c28:	1885883a 	add	r2,r3,r2
 1003c2c:	d0a00a15 	stw	r2,-32728(gp)
 1003c30:	e0bffd17 	ldw	r2,-12(fp)
 1003c34:	e0bff915 	stw	r2,-28(fp)
 1003c38:	e0bff917 	ldw	r2,-28(fp)
 1003c3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003c40:	e0bffc17 	ldw	r2,-16(fp)
 1003c44:	e0bfff15 	stw	r2,-4(fp)
 1003c48:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003c4c:	e037883a 	mov	sp,fp
 1003c50:	df000017 	ldw	fp,0(sp)
 1003c54:	dec00104 	addi	sp,sp,4
 1003c58:	f800283a 	ret

01003c5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1003c5c:	defffa04 	addi	sp,sp,-24
 1003c60:	df000515 	stw	fp,20(sp)
 1003c64:	df000504 	addi	fp,sp,20
 1003c68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003c6c:	0005303a 	rdctl	r2,status
 1003c70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003c74:	e0fffd17 	ldw	r3,-12(fp)
 1003c78:	00bfff84 	movi	r2,-2
 1003c7c:	1884703a 	and	r2,r3,r2
 1003c80:	1001703a 	wrctl	status,r2
  
  return context;
 1003c84:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1003c88:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1003c8c:	e0bfff17 	ldw	r2,-4(fp)
 1003c90:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1003c94:	e0bffc17 	ldw	r2,-16(fp)
 1003c98:	10c00017 	ldw	r3,0(r2)
 1003c9c:	e0bffc17 	ldw	r2,-16(fp)
 1003ca0:	10800117 	ldw	r2,4(r2)
 1003ca4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1003ca8:	e0bffc17 	ldw	r2,-16(fp)
 1003cac:	10c00117 	ldw	r3,4(r2)
 1003cb0:	e0bffc17 	ldw	r2,-16(fp)
 1003cb4:	10800017 	ldw	r2,0(r2)
 1003cb8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1003cbc:	e0fffc17 	ldw	r3,-16(fp)
 1003cc0:	e0bffc17 	ldw	r2,-16(fp)
 1003cc4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1003cc8:	e0fffc17 	ldw	r3,-16(fp)
 1003ccc:	e0bffc17 	ldw	r2,-16(fp)
 1003cd0:	18800015 	stw	r2,0(r3)
 1003cd4:	e0bffe17 	ldw	r2,-8(fp)
 1003cd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003cdc:	e0bffb17 	ldw	r2,-20(fp)
 1003ce0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1003ce4:	e037883a 	mov	sp,fp
 1003ce8:	df000017 	ldw	fp,0(sp)
 1003cec:	dec00104 	addi	sp,sp,4
 1003cf0:	f800283a 	ret

01003cf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1003cf4:	defffb04 	addi	sp,sp,-20
 1003cf8:	dfc00415 	stw	ra,16(sp)
 1003cfc:	df000315 	stw	fp,12(sp)
 1003d00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1003d04:	d0a00b17 	ldw	r2,-32724(gp)
 1003d08:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1003d0c:	d0a6de17 	ldw	r2,-25736(gp)
 1003d10:	10800044 	addi	r2,r2,1
 1003d14:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1003d18:	00003106 	br	1003de0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1003d1c:	e0bffe17 	ldw	r2,-8(fp)
 1003d20:	10800017 	ldw	r2,0(r2)
 1003d24:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1003d28:	e0bffe17 	ldw	r2,-8(fp)
 1003d2c:	10800403 	ldbu	r2,16(r2)
 1003d30:	10803fcc 	andi	r2,r2,255
 1003d34:	1005003a 	cmpeq	r2,r2,zero
 1003d38:	1000051e 	bne	r2,zero,1003d50 <alt_tick+0x5c>
 1003d3c:	d0a6de17 	ldw	r2,-25736(gp)
 1003d40:	1004c03a 	cmpne	r2,r2,zero
 1003d44:	1000021e 	bne	r2,zero,1003d50 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1003d48:	e0bffe17 	ldw	r2,-8(fp)
 1003d4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1003d50:	e0bffe17 	ldw	r2,-8(fp)
 1003d54:	10c00217 	ldw	r3,8(r2)
 1003d58:	d0a6de17 	ldw	r2,-25736(gp)
 1003d5c:	10c01e36 	bltu	r2,r3,1003dd8 <alt_tick+0xe4>
 1003d60:	e0bffe17 	ldw	r2,-8(fp)
 1003d64:	10800403 	ldbu	r2,16(r2)
 1003d68:	10803fcc 	andi	r2,r2,255
 1003d6c:	1004c03a 	cmpne	r2,r2,zero
 1003d70:	1000191e 	bne	r2,zero,1003dd8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1003d74:	e0bffe17 	ldw	r2,-8(fp)
 1003d78:	10c00317 	ldw	r3,12(r2)
 1003d7c:	e0bffe17 	ldw	r2,-8(fp)
 1003d80:	11000517 	ldw	r4,20(r2)
 1003d84:	183ee83a 	callr	r3
 1003d88:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1003d8c:	e0bffd17 	ldw	r2,-12(fp)
 1003d90:	1004c03a 	cmpne	r2,r2,zero
 1003d94:	1000031e 	bne	r2,zero,1003da4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1003d98:	e13ffe17 	ldw	r4,-8(fp)
 1003d9c:	1003c5c0 	call	1003c5c <alt_alarm_stop>
 1003da0:	00000d06 	br	1003dd8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1003da4:	e0bffe17 	ldw	r2,-8(fp)
 1003da8:	10c00217 	ldw	r3,8(r2)
 1003dac:	e0bffd17 	ldw	r2,-12(fp)
 1003db0:	1887883a 	add	r3,r3,r2
 1003db4:	e0bffe17 	ldw	r2,-8(fp)
 1003db8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1003dbc:	e0bffe17 	ldw	r2,-8(fp)
 1003dc0:	10c00217 	ldw	r3,8(r2)
 1003dc4:	d0a6de17 	ldw	r2,-25736(gp)
 1003dc8:	1880032e 	bgeu	r3,r2,1003dd8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1003dcc:	e0fffe17 	ldw	r3,-8(fp)
 1003dd0:	00800044 	movi	r2,1
 1003dd4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1003dd8:	e0bfff17 	ldw	r2,-4(fp)
 1003ddc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1003de0:	d0e00b04 	addi	r3,gp,-32724
 1003de4:	e0bffe17 	ldw	r2,-8(fp)
 1003de8:	10ffcc1e 	bne	r2,r3,1003d1c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1003dec:	e037883a 	mov	sp,fp
 1003df0:	dfc00117 	ldw	ra,4(sp)
 1003df4:	df000017 	ldw	fp,0(sp)
 1003df8:	dec00204 	addi	sp,sp,8
 1003dfc:	f800283a 	ret

01003e00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003e00:	defff704 	addi	sp,sp,-36
 1003e04:	dfc00815 	stw	ra,32(sp)
 1003e08:	df000715 	stw	fp,28(sp)
 1003e0c:	df000704 	addi	fp,sp,28
 1003e10:	e13ffb15 	stw	r4,-20(fp)
 1003e14:	e17ffc15 	stw	r5,-16(fp)
 1003e18:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003e1c:	e0bffb17 	ldw	r2,-20(fp)
 1003e20:	1004803a 	cmplt	r2,r2,zero
 1003e24:	1000091e 	bne	r2,zero,1003e4c <write+0x4c>
 1003e28:	e13ffb17 	ldw	r4,-20(fp)
 1003e2c:	01400304 	movi	r5,12
 1003e30:	100307c0 	call	100307c <__mulsi3>
 1003e34:	1007883a 	mov	r3,r2
 1003e38:	00804074 	movhi	r2,257
 1003e3c:	10a3c604 	addi	r2,r2,-28904
 1003e40:	1887883a 	add	r3,r3,r2
 1003e44:	e0ffff15 	stw	r3,-4(fp)
 1003e48:	00000106 	br	1003e50 <write+0x50>
 1003e4c:	e03fff15 	stw	zero,-4(fp)
 1003e50:	e0bfff17 	ldw	r2,-4(fp)
 1003e54:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003e58:	e0bffa17 	ldw	r2,-24(fp)
 1003e5c:	1005003a 	cmpeq	r2,r2,zero
 1003e60:	1000241e 	bne	r2,zero,1003ef4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003e64:	e0bffa17 	ldw	r2,-24(fp)
 1003e68:	10800217 	ldw	r2,8(r2)
 1003e6c:	108000cc 	andi	r2,r2,3
 1003e70:	1005003a 	cmpeq	r2,r2,zero
 1003e74:	10001a1e 	bne	r2,zero,1003ee0 <write+0xe0>
 1003e78:	e0bffa17 	ldw	r2,-24(fp)
 1003e7c:	10800017 	ldw	r2,0(r2)
 1003e80:	10800617 	ldw	r2,24(r2)
 1003e84:	1005003a 	cmpeq	r2,r2,zero
 1003e88:	1000151e 	bne	r2,zero,1003ee0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003e8c:	e0bffa17 	ldw	r2,-24(fp)
 1003e90:	10800017 	ldw	r2,0(r2)
 1003e94:	10800617 	ldw	r2,24(r2)
 1003e98:	e17ffc17 	ldw	r5,-16(fp)
 1003e9c:	e1bffd17 	ldw	r6,-12(fp)
 1003ea0:	e13ffa17 	ldw	r4,-24(fp)
 1003ea4:	103ee83a 	callr	r2
 1003ea8:	e0bff915 	stw	r2,-28(fp)
 1003eac:	e0bff917 	ldw	r2,-28(fp)
 1003eb0:	1004403a 	cmpge	r2,r2,zero
 1003eb4:	1000071e 	bne	r2,zero,1003ed4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 1003eb8:	1003f240 	call	1003f24 <alt_get_errno>
 1003ebc:	e0fff917 	ldw	r3,-28(fp)
 1003ec0:	00c7c83a 	sub	r3,zero,r3
 1003ec4:	10c00015 	stw	r3,0(r2)
        return -1;
 1003ec8:	00bfffc4 	movi	r2,-1
 1003ecc:	e0bffe15 	stw	r2,-8(fp)
 1003ed0:	00000e06 	br	1003f0c <write+0x10c>
      }
      return rval;
 1003ed4:	e0bff917 	ldw	r2,-28(fp)
 1003ed8:	e0bffe15 	stw	r2,-8(fp)
 1003edc:	00000b06 	br	1003f0c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003ee0:	1003f240 	call	1003f24 <alt_get_errno>
 1003ee4:	1007883a 	mov	r3,r2
 1003ee8:	00800344 	movi	r2,13
 1003eec:	18800015 	stw	r2,0(r3)
 1003ef0:	00000406 	br	1003f04 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003ef4:	1003f240 	call	1003f24 <alt_get_errno>
 1003ef8:	1007883a 	mov	r3,r2
 1003efc:	00801444 	movi	r2,81
 1003f00:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003f04:	00bfffc4 	movi	r2,-1
 1003f08:	e0bffe15 	stw	r2,-8(fp)
 1003f0c:	e0bffe17 	ldw	r2,-8(fp)
}
 1003f10:	e037883a 	mov	sp,fp
 1003f14:	dfc00117 	ldw	ra,4(sp)
 1003f18:	df000017 	ldw	fp,0(sp)
 1003f1c:	dec00204 	addi	sp,sp,8
 1003f20:	f800283a 	ret

01003f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003f24:	defffd04 	addi	sp,sp,-12
 1003f28:	dfc00215 	stw	ra,8(sp)
 1003f2c:	df000115 	stw	fp,4(sp)
 1003f30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003f34:	00804074 	movhi	r2,257
 1003f38:	10a87904 	addi	r2,r2,-24092
 1003f3c:	10800017 	ldw	r2,0(r2)
 1003f40:	1005003a 	cmpeq	r2,r2,zero
 1003f44:	1000061e 	bne	r2,zero,1003f60 <alt_get_errno+0x3c>
 1003f48:	00804074 	movhi	r2,257
 1003f4c:	10a87904 	addi	r2,r2,-24092
 1003f50:	10800017 	ldw	r2,0(r2)
 1003f54:	103ee83a 	callr	r2
 1003f58:	e0bfff15 	stw	r2,-4(fp)
 1003f5c:	00000306 	br	1003f6c <alt_get_errno+0x48>
 1003f60:	00804074 	movhi	r2,257
 1003f64:	10af4204 	addi	r2,r2,-17144
 1003f68:	e0bfff15 	stw	r2,-4(fp)
 1003f6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003f70:	e037883a 	mov	sp,fp
 1003f74:	dfc00117 	ldw	ra,4(sp)
 1003f78:	df000017 	ldw	fp,0(sp)
 1003f7c:	dec00204 	addi	sp,sp,8
 1003f80:	f800283a 	ret

01003f84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003f84:	defffd04 	addi	sp,sp,-12
 1003f88:	dfc00215 	stw	ra,8(sp)
 1003f8c:	df000115 	stw	fp,4(sp)
 1003f90:	df000104 	addi	fp,sp,4
 1003f94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1003f98:	10077900 	call	1007790 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003f9c:	00800044 	movi	r2,1
 1003fa0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003fa4:	e037883a 	mov	sp,fp
 1003fa8:	dfc00117 	ldw	ra,4(sp)
 1003fac:	df000017 	ldw	fp,0(sp)
 1003fb0:	dec00204 	addi	sp,sp,8
 1003fb4:	f800283a 	ret

01003fb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003fb8:	defffd04 	addi	sp,sp,-12
 1003fbc:	dfc00215 	stw	ra,8(sp)
 1003fc0:	df000115 	stw	fp,4(sp)
 1003fc4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003fc8:	01081004 	movi	r4,8256
 1003fcc:	000b883a 	mov	r5,zero
 1003fd0:	01800044 	movi	r6,1
 1003fd4:	01c0fa04 	movi	r7,1000
 1003fd8:	1004e300 	call	1004e30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1003fdc:	01004074 	movhi	r4,257
 1003fe0:	21243004 	addi	r4,r4,-28480
 1003fe4:	000b883a 	mov	r5,zero
 1003fe8:	01800144 	movi	r6,5
 1003fec:	100445c0 	call	100445c <altera_avalon_jtag_uart_init>
 1003ff0:	01004074 	movhi	r4,257
 1003ff4:	21242604 	addi	r4,r4,-28520
 1003ff8:	10042dc0 	call	10042dc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1003ffc:	01004074 	movhi	r4,257
 1004000:	21283e04 	addi	r4,r4,-24328
 1004004:	1004f700 	call	1004f70 <alt_up_character_lcd_init>
 1004008:	01004074 	movhi	r4,257
 100400c:	21283e04 	addi	r4,r4,-24328
 1004010:	10042dc0 	call	10042dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 1004014:	00804074 	movhi	r2,257
 1004018:	10a84904 	addi	r2,r2,-24284
 100401c:	10800a17 	ldw	r2,40(r2)
 1004020:	10800104 	addi	r2,r2,4
 1004024:	10800017 	ldw	r2,0(r2)
 1004028:	10ffffcc 	andi	r3,r2,65535
 100402c:	00804074 	movhi	r2,257
 1004030:	10a84904 	addi	r2,r2,-24284
 1004034:	10c00c15 	stw	r3,48(r2)
 1004038:	00804074 	movhi	r2,257
 100403c:	10a84904 	addi	r2,r2,-24284
 1004040:	10800a17 	ldw	r2,40(r2)
 1004044:	10800104 	addi	r2,r2,4
 1004048:	10800017 	ldw	r2,0(r2)
 100404c:	1005d43a 	srai	r2,r2,16
 1004050:	10ffffcc 	andi	r3,r2,65535
 1004054:	00804074 	movhi	r2,257
 1004058:	10a84904 	addi	r2,r2,-24284
 100405c:	10c00d15 	stw	r3,52(r2)
 1004060:	00804074 	movhi	r2,257
 1004064:	10a84904 	addi	r2,r2,-24284
 1004068:	10800c17 	ldw	r2,48(r2)
 100406c:	10801068 	cmpgeui	r2,r2,65
 1004070:	1000081e 	bne	r2,zero,1004094 <alt_sys_init+0xdc>
 1004074:	00c04074 	movhi	r3,257
 1004078:	18e84904 	addi	r3,r3,-24284
 100407c:	00800fc4 	movi	r2,63
 1004080:	18800f15 	stw	r2,60(r3)
 1004084:	00c04074 	movhi	r3,257
 1004088:	18e84904 	addi	r3,r3,-24284
 100408c:	00800184 	movi	r2,6
 1004090:	18801015 	stw	r2,64(r3)
 1004094:	00804074 	movhi	r2,257
 1004098:	10a84904 	addi	r2,r2,-24284
 100409c:	10800d17 	ldw	r2,52(r2)
 10040a0:	10800868 	cmpgeui	r2,r2,33
 10040a4:	1000041e 	bne	r2,zero,10040b8 <alt_sys_init+0x100>
 10040a8:	00c04074 	movhi	r3,257
 10040ac:	18e84904 	addi	r3,r3,-24284
 10040b0:	008007c4 	movi	r2,31
 10040b4:	18801115 	stw	r2,68(r3)
 10040b8:	01004074 	movhi	r4,257
 10040bc:	21284904 	addi	r4,r4,-24284
 10040c0:	10053f00 	call	10053f0 <alt_up_char_buffer_init>
 10040c4:	01004074 	movhi	r4,257
 10040c8:	21284904 	addi	r4,r4,-24284
 10040cc:	10042dc0 	call	10042dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 10040d0:	00804074 	movhi	r2,257
 10040d4:	10a85b04 	addi	r2,r2,-24212
 10040d8:	10800a17 	ldw	r2,40(r2)
 10040dc:	10800017 	ldw	r2,0(r2)
 10040e0:	1007883a 	mov	r3,r2
 10040e4:	00804074 	movhi	r2,257
 10040e8:	10a85b04 	addi	r2,r2,-24212
 10040ec:	10c00b15 	stw	r3,44(r2)
 10040f0:	00804074 	movhi	r2,257
 10040f4:	10a85b04 	addi	r2,r2,-24212
 10040f8:	10800a17 	ldw	r2,40(r2)
 10040fc:	10800104 	addi	r2,r2,4
 1004100:	10800017 	ldw	r2,0(r2)
 1004104:	1007883a 	mov	r3,r2
 1004108:	00804074 	movhi	r2,257
 100410c:	10a85b04 	addi	r2,r2,-24212
 1004110:	10c00c15 	stw	r3,48(r2)
 1004114:	00804074 	movhi	r2,257
 1004118:	10a85b04 	addi	r2,r2,-24212
 100411c:	10800a17 	ldw	r2,40(r2)
 1004120:	10800204 	addi	r2,r2,8
 1004124:	10800017 	ldw	r2,0(r2)
 1004128:	10ffffcc 	andi	r3,r2,65535
 100412c:	00804074 	movhi	r2,257
 1004130:	10a85b04 	addi	r2,r2,-24212
 1004134:	10c00f15 	stw	r3,60(r2)
 1004138:	00804074 	movhi	r2,257
 100413c:	10a85b04 	addi	r2,r2,-24212
 1004140:	10800a17 	ldw	r2,40(r2)
 1004144:	10800204 	addi	r2,r2,8
 1004148:	10800017 	ldw	r2,0(r2)
 100414c:	1005d43a 	srai	r2,r2,16
 1004150:	10ffffcc 	andi	r3,r2,65535
 1004154:	00804074 	movhi	r2,257
 1004158:	10a85b04 	addi	r2,r2,-24212
 100415c:	10c01015 	stw	r3,64(r2)
 1004160:	00804074 	movhi	r2,257
 1004164:	10a85b04 	addi	r2,r2,-24212
 1004168:	10800a17 	ldw	r2,40(r2)
 100416c:	10800304 	addi	r2,r2,12
 1004170:	10800017 	ldw	r2,0(r2)
 1004174:	1005d07a 	srai	r2,r2,1
 1004178:	10c0004c 	andi	r3,r2,1
 100417c:	00804074 	movhi	r2,257
 1004180:	10a85b04 	addi	r2,r2,-24212
 1004184:	10c00d15 	stw	r3,52(r2)
 1004188:	00804074 	movhi	r2,257
 100418c:	10a85b04 	addi	r2,r2,-24212
 1004190:	10800a17 	ldw	r2,40(r2)
 1004194:	10800304 	addi	r2,r2,12
 1004198:	10800017 	ldw	r2,0(r2)
 100419c:	1005d13a 	srai	r2,r2,4
 10041a0:	10c003cc 	andi	r3,r2,15
 10041a4:	00804074 	movhi	r2,257
 10041a8:	10a85b04 	addi	r2,r2,-24212
 10041ac:	10c00e15 	stw	r3,56(r2)
 10041b0:	00804074 	movhi	r2,257
 10041b4:	10a85b04 	addi	r2,r2,-24212
 10041b8:	10800a17 	ldw	r2,40(r2)
 10041bc:	10800304 	addi	r2,r2,12
 10041c0:	10800017 	ldw	r2,0(r2)
 10041c4:	1005d43a 	srai	r2,r2,16
 10041c8:	1007883a 	mov	r3,r2
 10041cc:	00bfffc4 	movi	r2,-1
 10041d0:	1884703a 	and	r2,r3,r2
 10041d4:	e0bfff45 	stb	r2,-3(fp)
 10041d8:	00804074 	movhi	r2,257
 10041dc:	10a85b04 	addi	r2,r2,-24212
 10041e0:	10800a17 	ldw	r2,40(r2)
 10041e4:	10800304 	addi	r2,r2,12
 10041e8:	10800017 	ldw	r2,0(r2)
 10041ec:	1005d63a 	srai	r2,r2,24
 10041f0:	1007883a 	mov	r3,r2
 10041f4:	00bfffc4 	movi	r2,-1
 10041f8:	1884703a 	and	r2,r3,r2
 10041fc:	e0bfff05 	stb	r2,-4(fp)
 1004200:	00804074 	movhi	r2,257
 1004204:	10a85b04 	addi	r2,r2,-24212
 1004208:	10800e17 	ldw	r2,56(r2)
 100420c:	10800058 	cmpnei	r2,r2,1
 1004210:	1000041e 	bne	r2,zero,1004224 <alt_sys_init+0x26c>
 1004214:	00804074 	movhi	r2,257
 1004218:	10a85b04 	addi	r2,r2,-24212
 100421c:	10001115 	stw	zero,68(r2)
 1004220:	00000e06 	br	100425c <alt_sys_init+0x2a4>
 1004224:	00804074 	movhi	r2,257
 1004228:	10a85b04 	addi	r2,r2,-24212
 100422c:	10800e17 	ldw	r2,56(r2)
 1004230:	10800098 	cmpnei	r2,r2,2
 1004234:	1000051e 	bne	r2,zero,100424c <alt_sys_init+0x294>
 1004238:	00c04074 	movhi	r3,257
 100423c:	18e85b04 	addi	r3,r3,-24212
 1004240:	00800044 	movi	r2,1
 1004244:	18801115 	stw	r2,68(r3)
 1004248:	00000406 	br	100425c <alt_sys_init+0x2a4>
 100424c:	00c04074 	movhi	r3,257
 1004250:	18e85b04 	addi	r3,r3,-24212
 1004254:	00800084 	movi	r2,2
 1004258:	18801115 	stw	r2,68(r3)
 100425c:	e0ffff43 	ldbu	r3,-3(fp)
 1004260:	00800804 	movi	r2,32
 1004264:	10c7c83a 	sub	r3,r2,r3
 1004268:	00bfffc4 	movi	r2,-1
 100426c:	10c6d83a 	srl	r3,r2,r3
 1004270:	00804074 	movhi	r2,257
 1004274:	10a85b04 	addi	r2,r2,-24212
 1004278:	10c01215 	stw	r3,72(r2)
 100427c:	e0ffff43 	ldbu	r3,-3(fp)
 1004280:	00804074 	movhi	r2,257
 1004284:	10a85b04 	addi	r2,r2,-24212
 1004288:	10801117 	ldw	r2,68(r2)
 100428c:	1887883a 	add	r3,r3,r2
 1004290:	00804074 	movhi	r2,257
 1004294:	10a85b04 	addi	r2,r2,-24212
 1004298:	10c01315 	stw	r3,76(r2)
 100429c:	e0ffff03 	ldbu	r3,-4(fp)
 10042a0:	00800804 	movi	r2,32
 10042a4:	10c7c83a 	sub	r3,r2,r3
 10042a8:	00bfffc4 	movi	r2,-1
 10042ac:	10c6d83a 	srl	r3,r2,r3
 10042b0:	00804074 	movhi	r2,257
 10042b4:	10a85b04 	addi	r2,r2,-24212
 10042b8:	10c01415 	stw	r3,80(r2)
 10042bc:	01004074 	movhi	r4,257
 10042c0:	21285b04 	addi	r4,r4,-24212
 10042c4:	10042dc0 	call	10042dc <alt_dev_reg>
}
 10042c8:	e037883a 	mov	sp,fp
 10042cc:	dfc00117 	ldw	ra,4(sp)
 10042d0:	df000017 	ldw	fp,0(sp)
 10042d4:	dec00204 	addi	sp,sp,8
 10042d8:	f800283a 	ret

010042dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10042dc:	defffd04 	addi	sp,sp,-12
 10042e0:	dfc00215 	stw	ra,8(sp)
 10042e4:	df000115 	stw	fp,4(sp)
 10042e8:	df000104 	addi	fp,sp,4
 10042ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10042f0:	e13fff17 	ldw	r4,-4(fp)
 10042f4:	01404074 	movhi	r5,257
 10042f8:	29687604 	addi	r5,r5,-24104
 10042fc:	1006e040 	call	1006e04 <alt_dev_llist_insert>
}
 1004300:	e037883a 	mov	sp,fp
 1004304:	dfc00117 	ldw	ra,4(sp)
 1004308:	df000017 	ldw	fp,0(sp)
 100430c:	dec00204 	addi	sp,sp,8
 1004310:	f800283a 	ret

01004314 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1004314:	defffa04 	addi	sp,sp,-24
 1004318:	dfc00515 	stw	ra,20(sp)
 100431c:	df000415 	stw	fp,16(sp)
 1004320:	df000404 	addi	fp,sp,16
 1004324:	e13ffd15 	stw	r4,-12(fp)
 1004328:	e17ffe15 	stw	r5,-8(fp)
 100432c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004330:	e0bffd17 	ldw	r2,-12(fp)
 1004334:	10800017 	ldw	r2,0(r2)
 1004338:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100433c:	e0bffc17 	ldw	r2,-16(fp)
 1004340:	11000a04 	addi	r4,r2,40
 1004344:	e0bffd17 	ldw	r2,-12(fp)
 1004348:	11c00217 	ldw	r7,8(r2)
 100434c:	e17ffe17 	ldw	r5,-8(fp)
 1004350:	e1bfff17 	ldw	r6,-4(fp)
 1004354:	100495c0 	call	100495c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1004358:	e037883a 	mov	sp,fp
 100435c:	dfc00117 	ldw	ra,4(sp)
 1004360:	df000017 	ldw	fp,0(sp)
 1004364:	dec00204 	addi	sp,sp,8
 1004368:	f800283a 	ret

0100436c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100436c:	defffa04 	addi	sp,sp,-24
 1004370:	dfc00515 	stw	ra,20(sp)
 1004374:	df000415 	stw	fp,16(sp)
 1004378:	df000404 	addi	fp,sp,16
 100437c:	e13ffd15 	stw	r4,-12(fp)
 1004380:	e17ffe15 	stw	r5,-8(fp)
 1004384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004388:	e0bffd17 	ldw	r2,-12(fp)
 100438c:	10800017 	ldw	r2,0(r2)
 1004390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1004394:	e0bffc17 	ldw	r2,-16(fp)
 1004398:	11000a04 	addi	r4,r2,40
 100439c:	e0bffd17 	ldw	r2,-12(fp)
 10043a0:	11c00217 	ldw	r7,8(r2)
 10043a4:	e17ffe17 	ldw	r5,-8(fp)
 10043a8:	e1bfff17 	ldw	r6,-4(fp)
 10043ac:	1004b800 	call	1004b80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10043b0:	e037883a 	mov	sp,fp
 10043b4:	dfc00117 	ldw	ra,4(sp)
 10043b8:	df000017 	ldw	fp,0(sp)
 10043bc:	dec00204 	addi	sp,sp,8
 10043c0:	f800283a 	ret

010043c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10043c4:	defffc04 	addi	sp,sp,-16
 10043c8:	dfc00315 	stw	ra,12(sp)
 10043cc:	df000215 	stw	fp,8(sp)
 10043d0:	df000204 	addi	fp,sp,8
 10043d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10043d8:	e0bfff17 	ldw	r2,-4(fp)
 10043dc:	10800017 	ldw	r2,0(r2)
 10043e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10043e4:	e0bffe17 	ldw	r2,-8(fp)
 10043e8:	11000a04 	addi	r4,r2,40
 10043ec:	e0bfff17 	ldw	r2,-4(fp)
 10043f0:	11400217 	ldw	r5,8(r2)
 10043f4:	10047f40 	call	10047f4 <altera_avalon_jtag_uart_close>
}
 10043f8:	e037883a 	mov	sp,fp
 10043fc:	dfc00117 	ldw	ra,4(sp)
 1004400:	df000017 	ldw	fp,0(sp)
 1004404:	dec00204 	addi	sp,sp,8
 1004408:	f800283a 	ret

0100440c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100440c:	defffa04 	addi	sp,sp,-24
 1004410:	dfc00515 	stw	ra,20(sp)
 1004414:	df000415 	stw	fp,16(sp)
 1004418:	df000404 	addi	fp,sp,16
 100441c:	e13ffd15 	stw	r4,-12(fp)
 1004420:	e17ffe15 	stw	r5,-8(fp)
 1004424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1004428:	e0bffd17 	ldw	r2,-12(fp)
 100442c:	10800017 	ldw	r2,0(r2)
 1004430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1004434:	e0bffc17 	ldw	r2,-16(fp)
 1004438:	11000a04 	addi	r4,r2,40
 100443c:	e17ffe17 	ldw	r5,-8(fp)
 1004440:	e1bfff17 	ldw	r6,-4(fp)
 1004444:	10048680 	call	1004868 <altera_avalon_jtag_uart_ioctl>
}
 1004448:	e037883a 	mov	sp,fp
 100444c:	dfc00117 	ldw	ra,4(sp)
 1004450:	df000017 	ldw	fp,0(sp)
 1004454:	dec00204 	addi	sp,sp,8
 1004458:	f800283a 	ret

0100445c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100445c:	defffa04 	addi	sp,sp,-24
 1004460:	dfc00515 	stw	ra,20(sp)
 1004464:	df000415 	stw	fp,16(sp)
 1004468:	df000404 	addi	fp,sp,16
 100446c:	e13ffd15 	stw	r4,-12(fp)
 1004470:	e17ffe15 	stw	r5,-8(fp)
 1004474:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004478:	e0fffd17 	ldw	r3,-12(fp)
 100447c:	00800044 	movi	r2,1
 1004480:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1004484:	e0bffd17 	ldw	r2,-12(fp)
 1004488:	10800017 	ldw	r2,0(r2)
 100448c:	11000104 	addi	r4,r2,4
 1004490:	e0bffd17 	ldw	r2,-12(fp)
 1004494:	10800817 	ldw	r2,32(r2)
 1004498:	1007883a 	mov	r3,r2
 100449c:	2005883a 	mov	r2,r4
 10044a0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10044a4:	e13ffe17 	ldw	r4,-8(fp)
 10044a8:	e17fff17 	ldw	r5,-4(fp)
 10044ac:	d8000015 	stw	zero,0(sp)
 10044b0:	01804034 	movhi	r6,256
 10044b4:	31914704 	addi	r6,r6,17692
 10044b8:	e1fffd17 	ldw	r7,-12(fp)
 10044bc:	10070900 	call	1007090 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10044c0:	e0bffd17 	ldw	r2,-12(fp)
 10044c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10044c8:	e0bffd17 	ldw	r2,-12(fp)
 10044cc:	11000204 	addi	r4,r2,8
 10044d0:	00804074 	movhi	r2,257
 10044d4:	10af4d04 	addi	r2,r2,-17100
 10044d8:	10800017 	ldw	r2,0(r2)
 10044dc:	100b883a 	mov	r5,r2
 10044e0:	01804034 	movhi	r6,256
 10044e4:	3191d104 	addi	r6,r6,18244
 10044e8:	e1fffd17 	ldw	r7,-12(fp)
 10044ec:	1006c940 	call	1006c94 <alt_alarm_start>
 10044f0:	1004403a 	cmpge	r2,r2,zero
 10044f4:	1000041e 	bne	r2,zero,1004508 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10044f8:	e0fffd17 	ldw	r3,-12(fp)
 10044fc:	00a00034 	movhi	r2,32768
 1004500:	10bfffc4 	addi	r2,r2,-1
 1004504:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1004508:	e037883a 	mov	sp,fp
 100450c:	dfc00117 	ldw	ra,4(sp)
 1004510:	df000017 	ldw	fp,0(sp)
 1004514:	dec00204 	addi	sp,sp,8
 1004518:	f800283a 	ret

0100451c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100451c:	defff804 	addi	sp,sp,-32
 1004520:	df000715 	stw	fp,28(sp)
 1004524:	df000704 	addi	fp,sp,28
 1004528:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100452c:	e0bfff17 	ldw	r2,-4(fp)
 1004530:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 1004534:	e0bffe17 	ldw	r2,-8(fp)
 1004538:	10800017 	ldw	r2,0(r2)
 100453c:	e0bffd15 	stw	r2,-12(fp)
 1004540:	00000006 	br	1004544 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004544:	e0bffd17 	ldw	r2,-12(fp)
 1004548:	10800104 	addi	r2,r2,4
 100454c:	10800037 	ldwio	r2,0(r2)
 1004550:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1004554:	e0bffc17 	ldw	r2,-16(fp)
 1004558:	1080c00c 	andi	r2,r2,768
 100455c:	1005003a 	cmpeq	r2,r2,zero
 1004560:	1000741e 	bne	r2,zero,1004734 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1004564:	e0bffc17 	ldw	r2,-16(fp)
 1004568:	1080400c 	andi	r2,r2,256
 100456c:	1005003a 	cmpeq	r2,r2,zero
 1004570:	1000351e 	bne	r2,zero,1004648 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1004574:	00800074 	movhi	r2,1
 1004578:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100457c:	e0bffe17 	ldw	r2,-8(fp)
 1004580:	10800a17 	ldw	r2,40(r2)
 1004584:	10800044 	addi	r2,r2,1
 1004588:	1081ffcc 	andi	r2,r2,2047
 100458c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1004590:	e0bffe17 	ldw	r2,-8(fp)
 1004594:	10c00b17 	ldw	r3,44(r2)
 1004598:	e0bffa17 	ldw	r2,-24(fp)
 100459c:	18801626 	beq	r3,r2,10045f8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10045a0:	e0bffd17 	ldw	r2,-12(fp)
 10045a4:	10800037 	ldwio	r2,0(r2)
 10045a8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10045ac:	e0bffb17 	ldw	r2,-20(fp)
 10045b0:	10a0000c 	andi	r2,r2,32768
 10045b4:	1005003a 	cmpeq	r2,r2,zero
 10045b8:	10000f1e 	bne	r2,zero,10045f8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10045bc:	e0bffe17 	ldw	r2,-8(fp)
 10045c0:	10c00a17 	ldw	r3,40(r2)
 10045c4:	e0bffb17 	ldw	r2,-20(fp)
 10045c8:	1009883a 	mov	r4,r2
 10045cc:	e0bffe17 	ldw	r2,-8(fp)
 10045d0:	1885883a 	add	r2,r3,r2
 10045d4:	10800e04 	addi	r2,r2,56
 10045d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10045dc:	e0bffe17 	ldw	r2,-8(fp)
 10045e0:	10800a17 	ldw	r2,40(r2)
 10045e4:	10800044 	addi	r2,r2,1
 10045e8:	10c1ffcc 	andi	r3,r2,2047
 10045ec:	e0bffe17 	ldw	r2,-8(fp)
 10045f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10045f4:	003fe106 	br	100457c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10045f8:	e0bffb17 	ldw	r2,-20(fp)
 10045fc:	10bfffec 	andhi	r2,r2,65535
 1004600:	1005003a 	cmpeq	r2,r2,zero
 1004604:	1000101e 	bne	r2,zero,1004648 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004608:	e0bffe17 	ldw	r2,-8(fp)
 100460c:	10c00817 	ldw	r3,32(r2)
 1004610:	00bfff84 	movi	r2,-2
 1004614:	1886703a 	and	r3,r3,r2
 1004618:	e0bffe17 	ldw	r2,-8(fp)
 100461c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1004620:	e0bffd17 	ldw	r2,-12(fp)
 1004624:	11000104 	addi	r4,r2,4
 1004628:	e0bffe17 	ldw	r2,-8(fp)
 100462c:	10800817 	ldw	r2,32(r2)
 1004630:	1007883a 	mov	r3,r2
 1004634:	2005883a 	mov	r2,r4
 1004638:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100463c:	e0bffd17 	ldw	r2,-12(fp)
 1004640:	10800104 	addi	r2,r2,4
 1004644:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1004648:	e0bffc17 	ldw	r2,-16(fp)
 100464c:	1080800c 	andi	r2,r2,512
 1004650:	1005003a 	cmpeq	r2,r2,zero
 1004654:	103fbb1e 	bne	r2,zero,1004544 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1004658:	e0bffc17 	ldw	r2,-16(fp)
 100465c:	10bfffec 	andhi	r2,r2,65535
 1004660:	1004d43a 	srli	r2,r2,16
 1004664:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004668:	00001506 	br	10046c0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100466c:	e13ffd17 	ldw	r4,-12(fp)
 1004670:	e0bffe17 	ldw	r2,-8(fp)
 1004674:	10c00d17 	ldw	r3,52(r2)
 1004678:	e0bffe17 	ldw	r2,-8(fp)
 100467c:	1885883a 	add	r2,r3,r2
 1004680:	10820e04 	addi	r2,r2,2104
 1004684:	10800003 	ldbu	r2,0(r2)
 1004688:	10c03fcc 	andi	r3,r2,255
 100468c:	18c0201c 	xori	r3,r3,128
 1004690:	18ffe004 	addi	r3,r3,-128
 1004694:	2005883a 	mov	r2,r4
 1004698:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100469c:	e0bffe17 	ldw	r2,-8(fp)
 10046a0:	10800d17 	ldw	r2,52(r2)
 10046a4:	10800044 	addi	r2,r2,1
 10046a8:	10c1ffcc 	andi	r3,r2,2047
 10046ac:	e0bffe17 	ldw	r2,-8(fp)
 10046b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10046b4:	e0bff917 	ldw	r2,-28(fp)
 10046b8:	10bfffc4 	addi	r2,r2,-1
 10046bc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10046c0:	e0bff917 	ldw	r2,-28(fp)
 10046c4:	1005003a 	cmpeq	r2,r2,zero
 10046c8:	1000051e 	bne	r2,zero,10046e0 <altera_avalon_jtag_uart_irq+0x1c4>
 10046cc:	e0bffe17 	ldw	r2,-8(fp)
 10046d0:	10c00d17 	ldw	r3,52(r2)
 10046d4:	e0bffe17 	ldw	r2,-8(fp)
 10046d8:	10800c17 	ldw	r2,48(r2)
 10046dc:	18bfe31e 	bne	r3,r2,100466c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10046e0:	e0bff917 	ldw	r2,-28(fp)
 10046e4:	1005003a 	cmpeq	r2,r2,zero
 10046e8:	103f961e 	bne	r2,zero,1004544 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10046ec:	e0bffe17 	ldw	r2,-8(fp)
 10046f0:	10c00817 	ldw	r3,32(r2)
 10046f4:	00bfff44 	movi	r2,-3
 10046f8:	1886703a 	and	r3,r3,r2
 10046fc:	e0bffe17 	ldw	r2,-8(fp)
 1004700:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004704:	e0bffe17 	ldw	r2,-8(fp)
 1004708:	10800017 	ldw	r2,0(r2)
 100470c:	11000104 	addi	r4,r2,4
 1004710:	e0bffe17 	ldw	r2,-8(fp)
 1004714:	10800817 	ldw	r2,32(r2)
 1004718:	1007883a 	mov	r3,r2
 100471c:	2005883a 	mov	r2,r4
 1004720:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004724:	e0bffd17 	ldw	r2,-12(fp)
 1004728:	10800104 	addi	r2,r2,4
 100472c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004730:	003f8406 	br	1004544 <altera_avalon_jtag_uart_irq+0x28>
}
 1004734:	e037883a 	mov	sp,fp
 1004738:	df000017 	ldw	fp,0(sp)
 100473c:	dec00104 	addi	sp,sp,4
 1004740:	f800283a 	ret

01004744 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1004744:	defffc04 	addi	sp,sp,-16
 1004748:	df000315 	stw	fp,12(sp)
 100474c:	df000304 	addi	fp,sp,12
 1004750:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1004754:	e0bfff17 	ldw	r2,-4(fp)
 1004758:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100475c:	e0bffe17 	ldw	r2,-8(fp)
 1004760:	10800017 	ldw	r2,0(r2)
 1004764:	10800104 	addi	r2,r2,4
 1004768:	10800037 	ldwio	r2,0(r2)
 100476c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1004770:	e0bffd17 	ldw	r2,-12(fp)
 1004774:	1081000c 	andi	r2,r2,1024
 1004778:	1005003a 	cmpeq	r2,r2,zero
 100477c:	10000c1e 	bne	r2,zero,10047b0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1004780:	e0bffe17 	ldw	r2,-8(fp)
 1004784:	10800017 	ldw	r2,0(r2)
 1004788:	11000104 	addi	r4,r2,4
 100478c:	e0bffe17 	ldw	r2,-8(fp)
 1004790:	10800817 	ldw	r2,32(r2)
 1004794:	10810014 	ori	r2,r2,1024
 1004798:	1007883a 	mov	r3,r2
 100479c:	2005883a 	mov	r2,r4
 10047a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10047a4:	e0bffe17 	ldw	r2,-8(fp)
 10047a8:	10000915 	stw	zero,36(r2)
 10047ac:	00000a06 	br	10047d8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10047b0:	e0bffe17 	ldw	r2,-8(fp)
 10047b4:	10c00917 	ldw	r3,36(r2)
 10047b8:	00a00034 	movhi	r2,32768
 10047bc:	10bfff04 	addi	r2,r2,-4
 10047c0:	10c00536 	bltu	r2,r3,10047d8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 10047c4:	e0bffe17 	ldw	r2,-8(fp)
 10047c8:	10800917 	ldw	r2,36(r2)
 10047cc:	10c00044 	addi	r3,r2,1
 10047d0:	e0bffe17 	ldw	r2,-8(fp)
 10047d4:	10c00915 	stw	r3,36(r2)
 10047d8:	00804074 	movhi	r2,257
 10047dc:	10af4d04 	addi	r2,r2,-17100
 10047e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10047e4:	e037883a 	mov	sp,fp
 10047e8:	df000017 	ldw	fp,0(sp)
 10047ec:	dec00104 	addi	sp,sp,4
 10047f0:	f800283a 	ret

010047f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10047f4:	defffc04 	addi	sp,sp,-16
 10047f8:	df000315 	stw	fp,12(sp)
 10047fc:	df000304 	addi	fp,sp,12
 1004800:	e13ffd15 	stw	r4,-12(fp)
 1004804:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004808:	00000706 	br	1004828 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100480c:	e0bffe17 	ldw	r2,-8(fp)
 1004810:	1090000c 	andi	r2,r2,16384
 1004814:	1005003a 	cmpeq	r2,r2,zero
 1004818:	1000031e 	bne	r2,zero,1004828 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100481c:	00bffd44 	movi	r2,-11
 1004820:	e0bfff15 	stw	r2,-4(fp)
 1004824:	00000b06 	br	1004854 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004828:	e0bffd17 	ldw	r2,-12(fp)
 100482c:	10c00d17 	ldw	r3,52(r2)
 1004830:	e0bffd17 	ldw	r2,-12(fp)
 1004834:	10800c17 	ldw	r2,48(r2)
 1004838:	18800526 	beq	r3,r2,1004850 <altera_avalon_jtag_uart_close+0x5c>
 100483c:	e0bffd17 	ldw	r2,-12(fp)
 1004840:	10c00917 	ldw	r3,36(r2)
 1004844:	e0bffd17 	ldw	r2,-12(fp)
 1004848:	10800117 	ldw	r2,4(r2)
 100484c:	18bfef36 	bltu	r3,r2,100480c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004850:	e03fff15 	stw	zero,-4(fp)
 1004854:	e0bfff17 	ldw	r2,-4(fp)
}
 1004858:	e037883a 	mov	sp,fp
 100485c:	df000017 	ldw	fp,0(sp)
 1004860:	dec00104 	addi	sp,sp,4
 1004864:	f800283a 	ret

01004868 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1004868:	defff804 	addi	sp,sp,-32
 100486c:	df000715 	stw	fp,28(sp)
 1004870:	df000704 	addi	fp,sp,28
 1004874:	e13ffb15 	stw	r4,-20(fp)
 1004878:	e17ffc15 	stw	r5,-16(fp)
 100487c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1004880:	00bff9c4 	movi	r2,-25
 1004884:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1004888:	e0bffc17 	ldw	r2,-16(fp)
 100488c:	e0bfff15 	stw	r2,-4(fp)
 1004890:	e0ffff17 	ldw	r3,-4(fp)
 1004894:	189a8060 	cmpeqi	r2,r3,27137
 1004898:	1000041e 	bne	r2,zero,10048ac <altera_avalon_jtag_uart_ioctl+0x44>
 100489c:	e0ffff17 	ldw	r3,-4(fp)
 10048a0:	189a80a0 	cmpeqi	r2,r3,27138
 10048a4:	10001b1e 	bne	r2,zero,1004914 <altera_avalon_jtag_uart_ioctl+0xac>
 10048a8:	00002706 	br	1004948 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10048ac:	e0bffb17 	ldw	r2,-20(fp)
 10048b0:	10c00117 	ldw	r3,4(r2)
 10048b4:	00a00034 	movhi	r2,32768
 10048b8:	10bfffc4 	addi	r2,r2,-1
 10048bc:	18802226 	beq	r3,r2,1004948 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10048c0:	e0bffd17 	ldw	r2,-12(fp)
 10048c4:	10800017 	ldw	r2,0(r2)
 10048c8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10048cc:	e0bff917 	ldw	r2,-28(fp)
 10048d0:	10800090 	cmplti	r2,r2,2
 10048d4:	1000071e 	bne	r2,zero,10048f4 <altera_avalon_jtag_uart_ioctl+0x8c>
 10048d8:	e0fff917 	ldw	r3,-28(fp)
 10048dc:	00a00034 	movhi	r2,32768
 10048e0:	10bfffc4 	addi	r2,r2,-1
 10048e4:	18800326 	beq	r3,r2,10048f4 <altera_avalon_jtag_uart_ioctl+0x8c>
 10048e8:	e0bff917 	ldw	r2,-28(fp)
 10048ec:	e0bffe15 	stw	r2,-8(fp)
 10048f0:	00000306 	br	1004900 <altera_avalon_jtag_uart_ioctl+0x98>
 10048f4:	00e00034 	movhi	r3,32768
 10048f8:	18ffff84 	addi	r3,r3,-2
 10048fc:	e0fffe15 	stw	r3,-8(fp)
 1004900:	e0bffb17 	ldw	r2,-20(fp)
 1004904:	e0fffe17 	ldw	r3,-8(fp)
 1004908:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100490c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1004910:	00000d06 	br	1004948 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1004914:	e0bffb17 	ldw	r2,-20(fp)
 1004918:	10c00117 	ldw	r3,4(r2)
 100491c:	00a00034 	movhi	r2,32768
 1004920:	10bfffc4 	addi	r2,r2,-1
 1004924:	18800826 	beq	r3,r2,1004948 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1004928:	e13ffd17 	ldw	r4,-12(fp)
 100492c:	e0bffb17 	ldw	r2,-20(fp)
 1004930:	10c00917 	ldw	r3,36(r2)
 1004934:	e0bffb17 	ldw	r2,-20(fp)
 1004938:	10800117 	ldw	r2,4(r2)
 100493c:	1885803a 	cmpltu	r2,r3,r2
 1004940:	20800015 	stw	r2,0(r4)
      rc = 0;
 1004944:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1004948:	e0bffa17 	ldw	r2,-24(fp)
}
 100494c:	e037883a 	mov	sp,fp
 1004950:	df000017 	ldw	fp,0(sp)
 1004954:	dec00104 	addi	sp,sp,4
 1004958:	f800283a 	ret

0100495c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100495c:	defff204 	addi	sp,sp,-56
 1004960:	dfc00d15 	stw	ra,52(sp)
 1004964:	df000c15 	stw	fp,48(sp)
 1004968:	df000c04 	addi	fp,sp,48
 100496c:	e13ffb15 	stw	r4,-20(fp)
 1004970:	e17ffc15 	stw	r5,-16(fp)
 1004974:	e1bffd15 	stw	r6,-12(fp)
 1004978:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100497c:	e0bffc17 	ldw	r2,-16(fp)
 1004980:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004984:	00004806 	br	1004aa8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1004988:	e0bffb17 	ldw	r2,-20(fp)
 100498c:	10800a17 	ldw	r2,40(r2)
 1004990:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004994:	e0bffb17 	ldw	r2,-20(fp)
 1004998:	10800b17 	ldw	r2,44(r2)
 100499c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 10049a0:	e0fff717 	ldw	r3,-36(fp)
 10049a4:	e0bff617 	ldw	r2,-40(fp)
 10049a8:	18800536 	bltu	r3,r2,10049c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10049ac:	e0bff717 	ldw	r2,-36(fp)
 10049b0:	e0fff617 	ldw	r3,-40(fp)
 10049b4:	10c5c83a 	sub	r2,r2,r3
 10049b8:	e0bff815 	stw	r2,-32(fp)
 10049bc:	00000406 	br	10049d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10049c0:	00820004 	movi	r2,2048
 10049c4:	e0fff617 	ldw	r3,-40(fp)
 10049c8:	10c5c83a 	sub	r2,r2,r3
 10049cc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10049d0:	e0bff817 	ldw	r2,-32(fp)
 10049d4:	1005003a 	cmpeq	r2,r2,zero
 10049d8:	10001f1e 	bne	r2,zero,1004a58 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10049dc:	e0fffd17 	ldw	r3,-12(fp)
 10049e0:	e0bff817 	ldw	r2,-32(fp)
 10049e4:	1880022e 	bgeu	r3,r2,10049f0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10049e8:	e0bffd17 	ldw	r2,-12(fp)
 10049ec:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10049f0:	e0bffb17 	ldw	r2,-20(fp)
 10049f4:	10c00e04 	addi	r3,r2,56
 10049f8:	e0bff617 	ldw	r2,-40(fp)
 10049fc:	1887883a 	add	r3,r3,r2
 1004a00:	e0bffa17 	ldw	r2,-24(fp)
 1004a04:	1009883a 	mov	r4,r2
 1004a08:	180b883a 	mov	r5,r3
 1004a0c:	e1bff817 	ldw	r6,-32(fp)
 1004a10:	10013fc0 	call	10013fc <memcpy>
      ptr   += n;
 1004a14:	e0fff817 	ldw	r3,-32(fp)
 1004a18:	e0bffa17 	ldw	r2,-24(fp)
 1004a1c:	10c5883a 	add	r2,r2,r3
 1004a20:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1004a24:	e0fffd17 	ldw	r3,-12(fp)
 1004a28:	e0bff817 	ldw	r2,-32(fp)
 1004a2c:	1885c83a 	sub	r2,r3,r2
 1004a30:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004a34:	e0fff617 	ldw	r3,-40(fp)
 1004a38:	e0bff817 	ldw	r2,-32(fp)
 1004a3c:	1885883a 	add	r2,r3,r2
 1004a40:	10c1ffcc 	andi	r3,r2,2047
 1004a44:	e0bffb17 	ldw	r2,-20(fp)
 1004a48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1004a4c:	e0bffd17 	ldw	r2,-12(fp)
 1004a50:	10800048 	cmpgei	r2,r2,1
 1004a54:	103fcc1e 	bne	r2,zero,1004988 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1004a58:	e0fffa17 	ldw	r3,-24(fp)
 1004a5c:	e0bffc17 	ldw	r2,-16(fp)
 1004a60:	1880141e 	bne	r3,r2,1004ab4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004a64:	e0bffe17 	ldw	r2,-8(fp)
 1004a68:	1090000c 	andi	r2,r2,16384
 1004a6c:	1004c03a 	cmpne	r2,r2,zero
 1004a70:	1000101e 	bne	r2,zero,1004ab4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1004a74:	e0bffb17 	ldw	r2,-20(fp)
 1004a78:	10c00a17 	ldw	r3,40(r2)
 1004a7c:	e0bff717 	ldw	r2,-36(fp)
 1004a80:	1880051e 	bne	r3,r2,1004a98 <altera_avalon_jtag_uart_read+0x13c>
 1004a84:	e0bffb17 	ldw	r2,-20(fp)
 1004a88:	10c00917 	ldw	r3,36(r2)
 1004a8c:	e0bffb17 	ldw	r2,-20(fp)
 1004a90:	10800117 	ldw	r2,4(r2)
 1004a94:	18bff736 	bltu	r3,r2,1004a74 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1004a98:	e0bffb17 	ldw	r2,-20(fp)
 1004a9c:	10c00a17 	ldw	r3,40(r2)
 1004aa0:	e0bff717 	ldw	r2,-36(fp)
 1004aa4:	18800326 	beq	r3,r2,1004ab4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004aa8:	e0bffd17 	ldw	r2,-12(fp)
 1004aac:	10800048 	cmpgei	r2,r2,1
 1004ab0:	103fb51e 	bne	r2,zero,1004988 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1004ab4:	e0fffa17 	ldw	r3,-24(fp)
 1004ab8:	e0bffc17 	ldw	r2,-16(fp)
 1004abc:	18801926 	beq	r3,r2,1004b24 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004ac0:	0005303a 	rdctl	r2,status
 1004ac4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004ac8:	e0fff517 	ldw	r3,-44(fp)
 1004acc:	00bfff84 	movi	r2,-2
 1004ad0:	1884703a 	and	r2,r3,r2
 1004ad4:	1001703a 	wrctl	status,r2
  
  return context;
 1004ad8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1004adc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004ae0:	e0bffb17 	ldw	r2,-20(fp)
 1004ae4:	10800817 	ldw	r2,32(r2)
 1004ae8:	10c00054 	ori	r3,r2,1
 1004aec:	e0bffb17 	ldw	r2,-20(fp)
 1004af0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004af4:	e0bffb17 	ldw	r2,-20(fp)
 1004af8:	10800017 	ldw	r2,0(r2)
 1004afc:	11000104 	addi	r4,r2,4
 1004b00:	e0bffb17 	ldw	r2,-20(fp)
 1004b04:	10800817 	ldw	r2,32(r2)
 1004b08:	1007883a 	mov	r3,r2
 1004b0c:	2005883a 	mov	r2,r4
 1004b10:	10c00035 	stwio	r3,0(r2)
 1004b14:	e0bff917 	ldw	r2,-28(fp)
 1004b18:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004b1c:	e0bff417 	ldw	r2,-48(fp)
 1004b20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004b24:	e0fffa17 	ldw	r3,-24(fp)
 1004b28:	e0bffc17 	ldw	r2,-16(fp)
 1004b2c:	18800526 	beq	r3,r2,1004b44 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1004b30:	e0fffa17 	ldw	r3,-24(fp)
 1004b34:	e0bffc17 	ldw	r2,-16(fp)
 1004b38:	1887c83a 	sub	r3,r3,r2
 1004b3c:	e0ffff15 	stw	r3,-4(fp)
 1004b40:	00000906 	br	1004b68 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1004b44:	e0bffe17 	ldw	r2,-8(fp)
 1004b48:	1090000c 	andi	r2,r2,16384
 1004b4c:	1005003a 	cmpeq	r2,r2,zero
 1004b50:	1000031e 	bne	r2,zero,1004b60 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004b54:	00bffd44 	movi	r2,-11
 1004b58:	e0bfff15 	stw	r2,-4(fp)
 1004b5c:	00000206 	br	1004b68 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1004b60:	00bffec4 	movi	r2,-5
 1004b64:	e0bfff15 	stw	r2,-4(fp)
 1004b68:	e0bfff17 	ldw	r2,-4(fp)
}
 1004b6c:	e037883a 	mov	sp,fp
 1004b70:	dfc00117 	ldw	ra,4(sp)
 1004b74:	df000017 	ldw	fp,0(sp)
 1004b78:	dec00204 	addi	sp,sp,8
 1004b7c:	f800283a 	ret

01004b80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004b80:	defff204 	addi	sp,sp,-56
 1004b84:	dfc00d15 	stw	ra,52(sp)
 1004b88:	df000c15 	stw	fp,48(sp)
 1004b8c:	df000c04 	addi	fp,sp,48
 1004b90:	e13ffb15 	stw	r4,-20(fp)
 1004b94:	e17ffc15 	stw	r5,-16(fp)
 1004b98:	e1bffd15 	stw	r6,-12(fp)
 1004b9c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004ba0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1004ba4:	e0bffc17 	ldw	r2,-16(fp)
 1004ba8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004bac:	00003a06 	br	1004c98 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004bb0:	e0bffb17 	ldw	r2,-20(fp)
 1004bb4:	10800c17 	ldw	r2,48(r2)
 1004bb8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1004bbc:	e0bffb17 	ldw	r2,-20(fp)
 1004bc0:	10800d17 	ldw	r2,52(r2)
 1004bc4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1004bc8:	e0fffa17 	ldw	r3,-24(fp)
 1004bcc:	e0bff917 	ldw	r2,-28(fp)
 1004bd0:	1880062e 	bgeu	r3,r2,1004bec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1004bd4:	e0fff917 	ldw	r3,-28(fp)
 1004bd8:	e0bffa17 	ldw	r2,-24(fp)
 1004bdc:	1885c83a 	sub	r2,r3,r2
 1004be0:	10bfffc4 	addi	r2,r2,-1
 1004be4:	e0bff815 	stw	r2,-32(fp)
 1004be8:	00000c06 	br	1004c1c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1004bec:	e0bff917 	ldw	r2,-28(fp)
 1004bf0:	1005003a 	cmpeq	r2,r2,zero
 1004bf4:	1000051e 	bne	r2,zero,1004c0c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1004bf8:	00820004 	movi	r2,2048
 1004bfc:	e0fffa17 	ldw	r3,-24(fp)
 1004c00:	10c5c83a 	sub	r2,r2,r3
 1004c04:	e0bff815 	stw	r2,-32(fp)
 1004c08:	00000406 	br	1004c1c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004c0c:	0081ffc4 	movi	r2,2047
 1004c10:	e0fffa17 	ldw	r3,-24(fp)
 1004c14:	10c5c83a 	sub	r2,r2,r3
 1004c18:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004c1c:	e0bff817 	ldw	r2,-32(fp)
 1004c20:	1005003a 	cmpeq	r2,r2,zero
 1004c24:	10001f1e 	bne	r2,zero,1004ca4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1004c28:	e0fffd17 	ldw	r3,-12(fp)
 1004c2c:	e0bff817 	ldw	r2,-32(fp)
 1004c30:	1880022e 	bgeu	r3,r2,1004c3c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1004c34:	e0bffd17 	ldw	r2,-12(fp)
 1004c38:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1004c3c:	e0bffb17 	ldw	r2,-20(fp)
 1004c40:	10c20e04 	addi	r3,r2,2104
 1004c44:	e0bffa17 	ldw	r2,-24(fp)
 1004c48:	1885883a 	add	r2,r3,r2
 1004c4c:	e0fffc17 	ldw	r3,-16(fp)
 1004c50:	1009883a 	mov	r4,r2
 1004c54:	180b883a 	mov	r5,r3
 1004c58:	e1bff817 	ldw	r6,-32(fp)
 1004c5c:	10013fc0 	call	10013fc <memcpy>
      ptr   += n;
 1004c60:	e0fff817 	ldw	r3,-32(fp)
 1004c64:	e0bffc17 	ldw	r2,-16(fp)
 1004c68:	10c5883a 	add	r2,r2,r3
 1004c6c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1004c70:	e0fffd17 	ldw	r3,-12(fp)
 1004c74:	e0bff817 	ldw	r2,-32(fp)
 1004c78:	1885c83a 	sub	r2,r3,r2
 1004c7c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004c80:	e0fffa17 	ldw	r3,-24(fp)
 1004c84:	e0bff817 	ldw	r2,-32(fp)
 1004c88:	1885883a 	add	r2,r3,r2
 1004c8c:	10c1ffcc 	andi	r3,r2,2047
 1004c90:	e0bffb17 	ldw	r2,-20(fp)
 1004c94:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004c98:	e0bffd17 	ldw	r2,-12(fp)
 1004c9c:	10800048 	cmpgei	r2,r2,1
 1004ca0:	103fc31e 	bne	r2,zero,1004bb0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004ca4:	0005303a 	rdctl	r2,status
 1004ca8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004cac:	e0fff517 	ldw	r3,-44(fp)
 1004cb0:	00bfff84 	movi	r2,-2
 1004cb4:	1884703a 	and	r2,r3,r2
 1004cb8:	1001703a 	wrctl	status,r2
  
  return context;
 1004cbc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004cc0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004cc4:	e0bffb17 	ldw	r2,-20(fp)
 1004cc8:	10800817 	ldw	r2,32(r2)
 1004ccc:	10c00094 	ori	r3,r2,2
 1004cd0:	e0bffb17 	ldw	r2,-20(fp)
 1004cd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004cd8:	e0bffb17 	ldw	r2,-20(fp)
 1004cdc:	10800017 	ldw	r2,0(r2)
 1004ce0:	11000104 	addi	r4,r2,4
 1004ce4:	e0bffb17 	ldw	r2,-20(fp)
 1004ce8:	10800817 	ldw	r2,32(r2)
 1004cec:	1007883a 	mov	r3,r2
 1004cf0:	2005883a 	mov	r2,r4
 1004cf4:	10c00035 	stwio	r3,0(r2)
 1004cf8:	e0bff717 	ldw	r2,-36(fp)
 1004cfc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004d00:	e0bff417 	ldw	r2,-48(fp)
 1004d04:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1004d08:	e0bffd17 	ldw	r2,-12(fp)
 1004d0c:	10800050 	cmplti	r2,r2,1
 1004d10:	1000111e 	bne	r2,zero,1004d58 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1004d14:	e0bffe17 	ldw	r2,-8(fp)
 1004d18:	1090000c 	andi	r2,r2,16384
 1004d1c:	1004c03a 	cmpne	r2,r2,zero
 1004d20:	1000101e 	bne	r2,zero,1004d64 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1004d24:	e0bffb17 	ldw	r2,-20(fp)
 1004d28:	10c00d17 	ldw	r3,52(r2)
 1004d2c:	e0bff917 	ldw	r2,-28(fp)
 1004d30:	1880051e 	bne	r3,r2,1004d48 <altera_avalon_jtag_uart_write+0x1c8>
 1004d34:	e0bffb17 	ldw	r2,-20(fp)
 1004d38:	10c00917 	ldw	r3,36(r2)
 1004d3c:	e0bffb17 	ldw	r2,-20(fp)
 1004d40:	10800117 	ldw	r2,4(r2)
 1004d44:	18bff736 	bltu	r3,r2,1004d24 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1004d48:	e0bffb17 	ldw	r2,-20(fp)
 1004d4c:	10c00d17 	ldw	r3,52(r2)
 1004d50:	e0bff917 	ldw	r2,-28(fp)
 1004d54:	18800326 	beq	r3,r2,1004d64 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1004d58:	e0bffd17 	ldw	r2,-12(fp)
 1004d5c:	10800048 	cmpgei	r2,r2,1
 1004d60:	103fcd1e 	bne	r2,zero,1004c98 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1004d64:	e0fffc17 	ldw	r3,-16(fp)
 1004d68:	e0bff617 	ldw	r2,-40(fp)
 1004d6c:	18800526 	beq	r3,r2,1004d84 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1004d70:	e0fffc17 	ldw	r3,-16(fp)
 1004d74:	e0bff617 	ldw	r2,-40(fp)
 1004d78:	1887c83a 	sub	r3,r3,r2
 1004d7c:	e0ffff15 	stw	r3,-4(fp)
 1004d80:	00000906 	br	1004da8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1004d84:	e0bffe17 	ldw	r2,-8(fp)
 1004d88:	1090000c 	andi	r2,r2,16384
 1004d8c:	1005003a 	cmpeq	r2,r2,zero
 1004d90:	1000031e 	bne	r2,zero,1004da0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1004d94:	00bffd44 	movi	r2,-11
 1004d98:	e0bfff15 	stw	r2,-4(fp)
 1004d9c:	00000206 	br	1004da8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1004da0:	00bffec4 	movi	r2,-5
 1004da4:	e0bfff15 	stw	r2,-4(fp)
 1004da8:	e0bfff17 	ldw	r2,-4(fp)
}
 1004dac:	e037883a 	mov	sp,fp
 1004db0:	dfc00117 	ldw	ra,4(sp)
 1004db4:	df000017 	ldw	fp,0(sp)
 1004db8:	dec00204 	addi	sp,sp,8
 1004dbc:	f800283a 	ret

01004dc0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1004dc0:	defffa04 	addi	sp,sp,-24
 1004dc4:	dfc00515 	stw	ra,20(sp)
 1004dc8:	df000415 	stw	fp,16(sp)
 1004dcc:	df000404 	addi	fp,sp,16
 1004dd0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1004dd4:	e0bfff17 	ldw	r2,-4(fp)
 1004dd8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1004ddc:	e0bfff17 	ldw	r2,-4(fp)
 1004de0:	10800104 	addi	r2,r2,4
 1004de4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004de8:	0005303a 	rdctl	r2,status
 1004dec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004df0:	e0fffd17 	ldw	r3,-12(fp)
 1004df4:	00bfff84 	movi	r2,-2
 1004df8:	1884703a 	and	r2,r3,r2
 1004dfc:	1001703a 	wrctl	status,r2
  
  return context;
 1004e00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1004e04:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 1004e08:	1003cf40 	call	1003cf4 <alt_tick>
 1004e0c:	e0bffe17 	ldw	r2,-8(fp)
 1004e10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004e14:	e0bffc17 	ldw	r2,-16(fp)
 1004e18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1004e1c:	e037883a 	mov	sp,fp
 1004e20:	dfc00117 	ldw	ra,4(sp)
 1004e24:	df000017 	ldw	fp,0(sp)
 1004e28:	dec00204 	addi	sp,sp,8
 1004e2c:	f800283a 	ret

01004e30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1004e30:	defff804 	addi	sp,sp,-32
 1004e34:	dfc00715 	stw	ra,28(sp)
 1004e38:	df000615 	stw	fp,24(sp)
 1004e3c:	df000604 	addi	fp,sp,24
 1004e40:	e13ffc15 	stw	r4,-16(fp)
 1004e44:	e17ffd15 	stw	r5,-12(fp)
 1004e48:	e1bffe15 	stw	r6,-8(fp)
 1004e4c:	e1ffff15 	stw	r7,-4(fp)
 1004e50:	e0bfff17 	ldw	r2,-4(fp)
 1004e54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1004e58:	00804074 	movhi	r2,257
 1004e5c:	10af4d04 	addi	r2,r2,-17100
 1004e60:	10800017 	ldw	r2,0(r2)
 1004e64:	1004c03a 	cmpne	r2,r2,zero
 1004e68:	1000041e 	bne	r2,zero,1004e7c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1004e6c:	00c04074 	movhi	r3,257
 1004e70:	18ef4d04 	addi	r3,r3,-17100
 1004e74:	e0bffb17 	ldw	r2,-20(fp)
 1004e78:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004e7c:	e0bffc17 	ldw	r2,-16(fp)
 1004e80:	10800104 	addi	r2,r2,4
 1004e84:	1007883a 	mov	r3,r2
 1004e88:	008001c4 	movi	r2,7
 1004e8c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1004e90:	d8000015 	stw	zero,0(sp)
 1004e94:	e13ffd17 	ldw	r4,-12(fp)
 1004e98:	e17ffe17 	ldw	r5,-8(fp)
 1004e9c:	01804034 	movhi	r6,256
 1004ea0:	31937004 	addi	r6,r6,19904
 1004ea4:	e1fffc17 	ldw	r7,-16(fp)
 1004ea8:	10070900 	call	1007090 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1004eac:	e037883a 	mov	sp,fp
 1004eb0:	dfc00117 	ldw	ra,4(sp)
 1004eb4:	df000017 	ldw	fp,0(sp)
 1004eb8:	dec00204 	addi	sp,sp,8
 1004ebc:	f800283a 	ret

01004ec0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1004ec0:	defffc04 	addi	sp,sp,-16
 1004ec4:	df000315 	stw	fp,12(sp)
 1004ec8:	df000304 	addi	fp,sp,12
 1004ecc:	e13ffe15 	stw	r4,-8(fp)
 1004ed0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1004ed4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1004ed8:	e0bfff17 	ldw	r2,-4(fp)
 1004edc:	1004c03a 	cmpne	r2,r2,zero
 1004ee0:	1000061e 	bne	r2,zero,1004efc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1004ee4:	e0bffe17 	ldw	r2,-8(fp)
 1004ee8:	1007883a 	mov	r3,r2
 1004eec:	e0bffd03 	ldbu	r2,-12(fp)
 1004ef0:	10c4b03a 	or	r2,r2,r3
 1004ef4:	e0bffd05 	stb	r2,-12(fp)
 1004ef8:	00000806 	br	1004f1c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1004efc:	e0bffe17 	ldw	r2,-8(fp)
 1004f00:	1007883a 	mov	r3,r2
 1004f04:	e0bffd03 	ldbu	r2,-12(fp)
 1004f08:	10c4b03a 	or	r2,r2,r3
 1004f0c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1004f10:	e0bffd03 	ldbu	r2,-12(fp)
 1004f14:	10801014 	ori	r2,r2,64
 1004f18:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1004f1c:	e0fffd03 	ldbu	r3,-12(fp)
 1004f20:	00bfe004 	movi	r2,-128
 1004f24:	1884b03a 	or	r2,r3,r2
 1004f28:	10803fcc 	andi	r2,r2,255
}
 1004f2c:	e037883a 	mov	sp,fp
 1004f30:	df000017 	ldw	fp,0(sp)
 1004f34:	dec00104 	addi	sp,sp,4
 1004f38:	f800283a 	ret

01004f3c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1004f3c:	defffd04 	addi	sp,sp,-12
 1004f40:	df000215 	stw	fp,8(sp)
 1004f44:	df000204 	addi	fp,sp,8
 1004f48:	e13ffe15 	stw	r4,-8(fp)
 1004f4c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1004f50:	e0bffe17 	ldw	r2,-8(fp)
 1004f54:	10800a17 	ldw	r2,40(r2)
 1004f58:	e0ffff03 	ldbu	r3,-4(fp)
 1004f5c:	10c00025 	stbio	r3,0(r2)
}
 1004f60:	e037883a 	mov	sp,fp
 1004f64:	df000017 	ldw	fp,0(sp)
 1004f68:	dec00104 	addi	sp,sp,4
 1004f6c:	f800283a 	ret

01004f70 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1004f70:	defffe04 	addi	sp,sp,-8
 1004f74:	df000115 	stw	fp,4(sp)
 1004f78:	df000104 	addi	fp,sp,4
 1004f7c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1004f80:	e0bfff17 	ldw	r2,-4(fp)
 1004f84:	10800a17 	ldw	r2,40(r2)
 1004f88:	1007883a 	mov	r3,r2
 1004f8c:	00800044 	movi	r2,1
 1004f90:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1004f94:	e037883a 	mov	sp,fp
 1004f98:	df000017 	ldw	fp,0(sp)
 1004f9c:	dec00104 	addi	sp,sp,4
 1004fa0:	f800283a 	ret

01004fa4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1004fa4:	defffc04 	addi	sp,sp,-16
 1004fa8:	dfc00315 	stw	ra,12(sp)
 1004fac:	df000215 	stw	fp,8(sp)
 1004fb0:	df000204 	addi	fp,sp,8
 1004fb4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1004fb8:	e13fff17 	ldw	r4,-4(fp)
 1004fbc:	01404074 	movhi	r5,257
 1004fc0:	29687604 	addi	r5,r5,-24104
 1004fc4:	1006fe00 	call	1006fe0 <alt_find_dev>
 1004fc8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1004fcc:	e0bffe17 	ldw	r2,-8(fp)
}
 1004fd0:	e037883a 	mov	sp,fp
 1004fd4:	dfc00117 	ldw	ra,4(sp)
 1004fd8:	df000017 	ldw	fp,0(sp)
 1004fdc:	dec00204 	addi	sp,sp,8
 1004fe0:	f800283a 	ret

01004fe4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1004fe4:	defffb04 	addi	sp,sp,-20
 1004fe8:	df000415 	stw	fp,16(sp)
 1004fec:	df000404 	addi	fp,sp,16
 1004ff0:	e13ffd15 	stw	r4,-12(fp)
 1004ff4:	e17ffe15 	stw	r5,-8(fp)
 1004ff8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1004ffc:	e03ffc15 	stw	zero,-16(fp)
 1005000:	00000f06 	br	1005040 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1005004:	e0bffd17 	ldw	r2,-12(fp)
 1005008:	10800a17 	ldw	r2,40(r2)
 100500c:	11000044 	addi	r4,r2,1
 1005010:	e0fffc17 	ldw	r3,-16(fp)
 1005014:	e0bffe17 	ldw	r2,-8(fp)
 1005018:	1885883a 	add	r2,r3,r2
 100501c:	10800003 	ldbu	r2,0(r2)
 1005020:	10c03fcc 	andi	r3,r2,255
 1005024:	18c0201c 	xori	r3,r3,128
 1005028:	18ffe004 	addi	r3,r3,-128
 100502c:	2005883a 	mov	r2,r4
 1005030:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1005034:	e0bffc17 	ldw	r2,-16(fp)
 1005038:	10800044 	addi	r2,r2,1
 100503c:	e0bffc15 	stw	r2,-16(fp)
 1005040:	e0fffc17 	ldw	r3,-16(fp)
 1005044:	e0bfff17 	ldw	r2,-4(fp)
 1005048:	18bfee36 	bltu	r3,r2,1005004 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100504c:	e037883a 	mov	sp,fp
 1005050:	df000017 	ldw	fp,0(sp)
 1005054:	dec00104 	addi	sp,sp,4
 1005058:	f800283a 	ret

0100505c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100505c:	defffd04 	addi	sp,sp,-12
 1005060:	df000215 	stw	fp,8(sp)
 1005064:	df000204 	addi	fp,sp,8
 1005068:	e13ffe15 	stw	r4,-8(fp)
 100506c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1005070:	00000d06 	br	10050a8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1005074:	e0bffe17 	ldw	r2,-8(fp)
 1005078:	10800a17 	ldw	r2,40(r2)
 100507c:	11000044 	addi	r4,r2,1
 1005080:	e0bfff17 	ldw	r2,-4(fp)
 1005084:	10800003 	ldbu	r2,0(r2)
 1005088:	10c03fcc 	andi	r3,r2,255
 100508c:	18c0201c 	xori	r3,r3,128
 1005090:	18ffe004 	addi	r3,r3,-128
 1005094:	2005883a 	mov	r2,r4
 1005098:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100509c:	e0bfff17 	ldw	r2,-4(fp)
 10050a0:	10800044 	addi	r2,r2,1
 10050a4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 10050a8:	e0bfff17 	ldw	r2,-4(fp)
 10050ac:	10800003 	ldbu	r2,0(r2)
 10050b0:	10803fcc 	andi	r2,r2,255
 10050b4:	1080201c 	xori	r2,r2,128
 10050b8:	10bfe004 	addi	r2,r2,-128
 10050bc:	1004c03a 	cmpne	r2,r2,zero
 10050c0:	103fec1e 	bne	r2,zero,1005074 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 10050c4:	e037883a 	mov	sp,fp
 10050c8:	df000017 	ldw	fp,0(sp)
 10050cc:	dec00104 	addi	sp,sp,4
 10050d0:	f800283a 	ret

010050d4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10050d4:	defffb04 	addi	sp,sp,-20
 10050d8:	dfc00415 	stw	ra,16(sp)
 10050dc:	df000315 	stw	fp,12(sp)
 10050e0:	df000304 	addi	fp,sp,12
 10050e4:	e13ffd15 	stw	r4,-12(fp)
 10050e8:	e17ffe15 	stw	r5,-8(fp)
 10050ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10050f0:	e0bffd17 	ldw	r2,-12(fp)
 10050f4:	10800017 	ldw	r2,0(r2)
 10050f8:	1009883a 	mov	r4,r2
 10050fc:	e1bfff17 	ldw	r6,-4(fp)
 1005100:	e17ffe17 	ldw	r5,-8(fp)
 1005104:	1004fe40 	call	1004fe4 <alt_up_character_lcd_write>
	return 0;
 1005108:	0005883a 	mov	r2,zero
}
 100510c:	e037883a 	mov	sp,fp
 1005110:	dfc00117 	ldw	ra,4(sp)
 1005114:	df000017 	ldw	fp,0(sp)
 1005118:	dec00204 	addi	sp,sp,8
 100511c:	f800283a 	ret

01005120 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1005120:	defff904 	addi	sp,sp,-28
 1005124:	dfc00615 	stw	ra,24(sp)
 1005128:	df000515 	stw	fp,20(sp)
 100512c:	df000504 	addi	fp,sp,20
 1005130:	e13ffc15 	stw	r4,-16(fp)
 1005134:	e17ffd15 	stw	r5,-12(fp)
 1005138:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100513c:	e0bffd17 	ldw	r2,-12(fp)
 1005140:	10800a28 	cmpgeui	r2,r2,40
 1005144:	1000031e 	bne	r2,zero,1005154 <alt_up_character_lcd_set_cursor_pos+0x34>
 1005148:	e0bffe17 	ldw	r2,-8(fp)
 100514c:	108000b0 	cmpltui	r2,r2,2
 1005150:	1000031e 	bne	r2,zero,1005160 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1005154:	00bfffc4 	movi	r2,-1
 1005158:	e0bfff15 	stw	r2,-4(fp)
 100515c:	00000806 	br	1005180 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1005160:	e13ffd17 	ldw	r4,-12(fp)
 1005164:	e17ffe17 	ldw	r5,-8(fp)
 1005168:	1004ec00 	call	1004ec0 <get_DDRAM_addr>
 100516c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1005170:	e17ffb03 	ldbu	r5,-20(fp)
 1005174:	e13ffc17 	ldw	r4,-16(fp)
 1005178:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
	return 0;
 100517c:	e03fff15 	stw	zero,-4(fp)
 1005180:	e0bfff17 	ldw	r2,-4(fp)
}
 1005184:	e037883a 	mov	sp,fp
 1005188:	dfc00117 	ldw	ra,4(sp)
 100518c:	df000017 	ldw	fp,0(sp)
 1005190:	dec00204 	addi	sp,sp,8
 1005194:	f800283a 	ret

01005198 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1005198:	defff904 	addi	sp,sp,-28
 100519c:	dfc00615 	stw	ra,24(sp)
 10051a0:	df000515 	stw	fp,20(sp)
 10051a4:	df000504 	addi	fp,sp,20
 10051a8:	e13ffc15 	stw	r4,-16(fp)
 10051ac:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 10051b0:	e0bffd17 	ldw	r2,-12(fp)
 10051b4:	1005003a 	cmpeq	r2,r2,zero
 10051b8:	10001e1e 	bne	r2,zero,1005234 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 10051bc:	e0bffd17 	ldw	r2,-12(fp)
 10051c0:	10800050 	cmplti	r2,r2,1
 10051c4:	1000031e 	bne	r2,zero,10051d4 <alt_up_character_lcd_shift_cursor+0x3c>
 10051c8:	00800504 	movi	r2,20
 10051cc:	e0bfff05 	stb	r2,-4(fp)
 10051d0:	00000206 	br	10051dc <alt_up_character_lcd_shift_cursor+0x44>
 10051d4:	00c00404 	movi	r3,16
 10051d8:	e0ffff05 	stb	r3,-4(fp)
 10051dc:	e0bfff03 	ldbu	r2,-4(fp)
 10051e0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10051e4:	e0fffd17 	ldw	r3,-12(fp)
 10051e8:	e0fffe15 	stw	r3,-8(fp)
 10051ec:	e0fffe17 	ldw	r3,-8(fp)
 10051f0:	1804403a 	cmpge	r2,r3,zero
 10051f4:	1000031e 	bne	r2,zero,1005204 <alt_up_character_lcd_shift_cursor+0x6c>
 10051f8:	e0bffe17 	ldw	r2,-8(fp)
 10051fc:	0085c83a 	sub	r2,zero,r2
 1005200:	e0bffe15 	stw	r2,-8(fp)
 1005204:	e0fffe17 	ldw	r3,-8(fp)
 1005208:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100520c:	00000306 	br	100521c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1005210:	e17ffb43 	ldbu	r5,-19(fp)
 1005214:	e13ffc17 	ldw	r4,-16(fp)
 1005218:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100521c:	e0bffb03 	ldbu	r2,-20(fp)
 1005220:	10bfffc4 	addi	r2,r2,-1
 1005224:	e0bffb05 	stb	r2,-20(fp)
 1005228:	e0bffb03 	ldbu	r2,-20(fp)
 100522c:	10803fd8 	cmpnei	r2,r2,255
 1005230:	103ff71e 	bne	r2,zero,1005210 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1005234:	e037883a 	mov	sp,fp
 1005238:	dfc00117 	ldw	ra,4(sp)
 100523c:	df000017 	ldw	fp,0(sp)
 1005240:	dec00204 	addi	sp,sp,8
 1005244:	f800283a 	ret

01005248 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1005248:	defff904 	addi	sp,sp,-28
 100524c:	dfc00615 	stw	ra,24(sp)
 1005250:	df000515 	stw	fp,20(sp)
 1005254:	df000504 	addi	fp,sp,20
 1005258:	e13ffc15 	stw	r4,-16(fp)
 100525c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1005260:	e0bffd17 	ldw	r2,-12(fp)
 1005264:	1005003a 	cmpeq	r2,r2,zero
 1005268:	10001e1e 	bne	r2,zero,10052e4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100526c:	e0bffd17 	ldw	r2,-12(fp)
 1005270:	10800050 	cmplti	r2,r2,1
 1005274:	1000031e 	bne	r2,zero,1005284 <alt_up_character_lcd_shift_display+0x3c>
 1005278:	00800704 	movi	r2,28
 100527c:	e0bfff05 	stb	r2,-4(fp)
 1005280:	00000206 	br	100528c <alt_up_character_lcd_shift_display+0x44>
 1005284:	00c00604 	movi	r3,24
 1005288:	e0ffff05 	stb	r3,-4(fp)
 100528c:	e0bfff03 	ldbu	r2,-4(fp)
 1005290:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1005294:	e0fffd17 	ldw	r3,-12(fp)
 1005298:	e0fffe15 	stw	r3,-8(fp)
 100529c:	e0fffe17 	ldw	r3,-8(fp)
 10052a0:	1804403a 	cmpge	r2,r3,zero
 10052a4:	1000031e 	bne	r2,zero,10052b4 <alt_up_character_lcd_shift_display+0x6c>
 10052a8:	e0bffe17 	ldw	r2,-8(fp)
 10052ac:	0085c83a 	sub	r2,zero,r2
 10052b0:	e0bffe15 	stw	r2,-8(fp)
 10052b4:	e0fffe17 	ldw	r3,-8(fp)
 10052b8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10052bc:	00000306 	br	10052cc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10052c0:	e17ffb43 	ldbu	r5,-19(fp)
 10052c4:	e13ffc17 	ldw	r4,-16(fp)
 10052c8:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10052cc:	e0bffb03 	ldbu	r2,-20(fp)
 10052d0:	10bfffc4 	addi	r2,r2,-1
 10052d4:	e0bffb05 	stb	r2,-20(fp)
 10052d8:	e0bffb03 	ldbu	r2,-20(fp)
 10052dc:	10803fd8 	cmpnei	r2,r2,255
 10052e0:	103ff71e 	bne	r2,zero,10052c0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10052e4:	e037883a 	mov	sp,fp
 10052e8:	dfc00117 	ldw	ra,4(sp)
 10052ec:	df000017 	ldw	fp,0(sp)
 10052f0:	dec00204 	addi	sp,sp,8
 10052f4:	f800283a 	ret

010052f8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 10052f8:	defff904 	addi	sp,sp,-28
 10052fc:	dfc00615 	stw	ra,24(sp)
 1005300:	df000515 	stw	fp,20(sp)
 1005304:	df000504 	addi	fp,sp,20
 1005308:	e13ffc15 	stw	r4,-16(fp)
 100530c:	e17ffd15 	stw	r5,-12(fp)
 1005310:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1005314:	e0bffd17 	ldw	r2,-12(fp)
 1005318:	10800a28 	cmpgeui	r2,r2,40
 100531c:	1000031e 	bne	r2,zero,100532c <alt_up_character_lcd_erase_pos+0x34>
 1005320:	e0bffe17 	ldw	r2,-8(fp)
 1005324:	108000b0 	cmpltui	r2,r2,2
 1005328:	1000031e 	bne	r2,zero,1005338 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100532c:	00bfffc4 	movi	r2,-1
 1005330:	e0bfff15 	stw	r2,-4(fp)
 1005334:	00000e06 	br	1005370 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1005338:	e13ffd17 	ldw	r4,-12(fp)
 100533c:	e17ffe17 	ldw	r5,-8(fp)
 1005340:	1004ec00 	call	1004ec0 <get_DDRAM_addr>
 1005344:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1005348:	e17ffb03 	ldbu	r5,-20(fp)
 100534c:	e13ffc17 	ldw	r4,-16(fp)
 1005350:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1005354:	e0bffc17 	ldw	r2,-16(fp)
 1005358:	10800a17 	ldw	r2,40(r2)
 100535c:	10800044 	addi	r2,r2,1
 1005360:	1007883a 	mov	r3,r2
 1005364:	00800084 	movi	r2,2
 1005368:	18800025 	stbio	r2,0(r3)
	return 0;
 100536c:	e03fff15 	stw	zero,-4(fp)
 1005370:	e0bfff17 	ldw	r2,-4(fp)
}
 1005374:	e037883a 	mov	sp,fp
 1005378:	dfc00117 	ldw	ra,4(sp)
 100537c:	df000017 	ldw	fp,0(sp)
 1005380:	dec00204 	addi	sp,sp,8
 1005384:	f800283a 	ret

01005388 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1005388:	defffd04 	addi	sp,sp,-12
 100538c:	dfc00215 	stw	ra,8(sp)
 1005390:	df000115 	stw	fp,4(sp)
 1005394:	df000104 	addi	fp,sp,4
 1005398:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100539c:	e13fff17 	ldw	r4,-4(fp)
 10053a0:	01400304 	movi	r5,12
 10053a4:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
}
 10053a8:	e037883a 	mov	sp,fp
 10053ac:	dfc00117 	ldw	ra,4(sp)
 10053b0:	df000017 	ldw	fp,0(sp)
 10053b4:	dec00204 	addi	sp,sp,8
 10053b8:	f800283a 	ret

010053bc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 10053bc:	defffd04 	addi	sp,sp,-12
 10053c0:	dfc00215 	stw	ra,8(sp)
 10053c4:	df000115 	stw	fp,4(sp)
 10053c8:	df000104 	addi	fp,sp,4
 10053cc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 10053d0:	e13fff17 	ldw	r4,-4(fp)
 10053d4:	014003c4 	movi	r5,15
 10053d8:	1004f3c0 	call	1004f3c <alt_up_character_lcd_send_cmd>
}
 10053dc:	e037883a 	mov	sp,fp
 10053e0:	dfc00117 	ldw	ra,4(sp)
 10053e4:	df000017 	ldw	fp,0(sp)
 10053e8:	dec00204 	addi	sp,sp,8
 10053ec:	f800283a 	ret

010053f0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 10053f0:	defffc04 	addi	sp,sp,-16
 10053f4:	dfc00315 	stw	ra,12(sp)
 10053f8:	df000215 	stw	fp,8(sp)
 10053fc:	df000204 	addi	fp,sp,8
 1005400:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 1005404:	e0bfff17 	ldw	r2,-4(fp)
 1005408:	10800217 	ldw	r2,8(r2)
 100540c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 1005410:	00000c06 	br	1005444 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 1005414:	e13ffe17 	ldw	r4,-8(fp)
 1005418:	01404074 	movhi	r5,257
 100541c:	29617304 	addi	r5,r5,-31284
 1005420:	1007a600 	call	1007a60 <strcmp>
 1005424:	1004c03a 	cmpne	r2,r2,zero
 1005428:	1000031e 	bne	r2,zero,1005438 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 100542c:	e0bffe17 	ldw	r2,-8(fp)
 1005430:	10000005 	stb	zero,0(r2)
			break;
 1005434:	00000a06 	br	1005460 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 1005438:	e0bffe17 	ldw	r2,-8(fp)
 100543c:	10800044 	addi	r2,r2,1
 1005440:	e0bffe15 	stw	r2,-8(fp)
 1005444:	e0bffe17 	ldw	r2,-8(fp)
 1005448:	10800003 	ldbu	r2,0(r2)
 100544c:	10803fcc 	andi	r2,r2,255
 1005450:	1080201c 	xori	r2,r2,128
 1005454:	10bfe004 	addi	r2,r2,-128
 1005458:	1004c03a 	cmpne	r2,r2,zero
 100545c:	103fed1e 	bne	r2,zero,1005414 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 1005460:	e037883a 	mov	sp,fp
 1005464:	dfc00117 	ldw	ra,4(sp)
 1005468:	df000017 	ldw	fp,0(sp)
 100546c:	dec00204 	addi	sp,sp,8
 1005470:	f800283a 	ret

01005474 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1005474:	defffc04 	addi	sp,sp,-16
 1005478:	dfc00315 	stw	ra,12(sp)
 100547c:	df000215 	stw	fp,8(sp)
 1005480:	df000204 	addi	fp,sp,8
 1005484:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 1005488:	e13fff17 	ldw	r4,-4(fp)
 100548c:	01404074 	movhi	r5,257
 1005490:	29687604 	addi	r5,r5,-24104
 1005494:	1006fe00 	call	1006fe0 <alt_find_dev>
 1005498:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100549c:	e0bffe17 	ldw	r2,-8(fp)
}
 10054a0:	e037883a 	mov	sp,fp
 10054a4:	dfc00117 	ldw	ra,4(sp)
 10054a8:	df000017 	ldw	fp,0(sp)
 10054ac:	dec00204 	addi	sp,sp,8
 10054b0:	f800283a 	ret

010054b4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 10054b4:	defff904 	addi	sp,sp,-28
 10054b8:	df000615 	stw	fp,24(sp)
 10054bc:	df000604 	addi	fp,sp,24
 10054c0:	e13ffb15 	stw	r4,-20(fp)
 10054c4:	e1bffd15 	stw	r6,-12(fp)
 10054c8:	e1fffe15 	stw	r7,-8(fp)
 10054cc:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 10054d0:	e0bffb17 	ldw	r2,-20(fp)
 10054d4:	10c00c17 	ldw	r3,48(r2)
 10054d8:	e0bffd17 	ldw	r2,-12(fp)
 10054dc:	10c0042e 	bgeu	r2,r3,10054f0 <alt_up_char_buffer_draw+0x3c>
 10054e0:	e0bffb17 	ldw	r2,-20(fp)
 10054e4:	10c00d17 	ldw	r3,52(r2)
 10054e8:	e0bffe17 	ldw	r2,-8(fp)
 10054ec:	10c00336 	bltu	r2,r3,10054fc <alt_up_char_buffer_draw+0x48>
		return -1;
 10054f0:	00bfffc4 	movi	r2,-1
 10054f4:	e0bfff15 	stw	r2,-4(fp)
 10054f8:	00001d06 	br	1005570 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 10054fc:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1005500:	e0bffb17 	ldw	r2,-20(fp)
 1005504:	10c00f17 	ldw	r3,60(r2)
 1005508:	e0bffd17 	ldw	r2,-12(fp)
 100550c:	1886703a 	and	r3,r3,r2
 1005510:	e0bffb17 	ldw	r2,-20(fp)
 1005514:	10800e17 	ldw	r2,56(r2)
 1005518:	1886983a 	sll	r3,r3,r2
 100551c:	e0bffa17 	ldw	r2,-24(fp)
 1005520:	10c4b03a 	or	r2,r2,r3
 1005524:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 1005528:	e0bffb17 	ldw	r2,-20(fp)
 100552c:	10c01117 	ldw	r3,68(r2)
 1005530:	e0bffe17 	ldw	r2,-8(fp)
 1005534:	1886703a 	and	r3,r3,r2
 1005538:	e0bffb17 	ldw	r2,-20(fp)
 100553c:	10801017 	ldw	r2,64(r2)
 1005540:	1886983a 	sll	r3,r3,r2
 1005544:	e0bffa17 	ldw	r2,-24(fp)
 1005548:	10c4b03a 	or	r2,r2,r3
 100554c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 1005550:	e0bffb17 	ldw	r2,-20(fp)
 1005554:	10800b17 	ldw	r2,44(r2)
 1005558:	1007883a 	mov	r3,r2
 100555c:	e0bffa17 	ldw	r2,-24(fp)
 1005560:	1885883a 	add	r2,r3,r2
 1005564:	e0fffc03 	ldbu	r3,-16(fp)
 1005568:	10c00025 	stbio	r3,0(r2)

	return 0;
 100556c:	e03fff15 	stw	zero,-4(fp)
 1005570:	e0bfff17 	ldw	r2,-4(fp)
}
 1005574:	e037883a 	mov	sp,fp
 1005578:	df000017 	ldw	fp,0(sp)
 100557c:	dec00104 	addi	sp,sp,4
 1005580:	f800283a 	ret

01005584 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1005584:	defff904 	addi	sp,sp,-28
 1005588:	df000615 	stw	fp,24(sp)
 100558c:	df000604 	addi	fp,sp,24
 1005590:	e13ffb15 	stw	r4,-20(fp)
 1005594:	e17ffc15 	stw	r5,-16(fp)
 1005598:	e1bffd15 	stw	r6,-12(fp)
 100559c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 10055a0:	e0bffb17 	ldw	r2,-20(fp)
 10055a4:	10c00c17 	ldw	r3,48(r2)
 10055a8:	e0bffd17 	ldw	r2,-12(fp)
 10055ac:	10c0042e 	bgeu	r2,r3,10055c0 <alt_up_char_buffer_string+0x3c>
 10055b0:	e0bffb17 	ldw	r2,-20(fp)
 10055b4:	10c00d17 	ldw	r3,52(r2)
 10055b8:	e0bffe17 	ldw	r2,-8(fp)
 10055bc:	10c00336 	bltu	r2,r3,10055cc <alt_up_char_buffer_string+0x48>
		return -1;
 10055c0:	00bfffc4 	movi	r2,-1
 10055c4:	e0bfff15 	stw	r2,-4(fp)
 10055c8:	00002e06 	br	1005684 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 10055cc:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 10055d0:	e0bffb17 	ldw	r2,-20(fp)
 10055d4:	10801017 	ldw	r2,64(r2)
 10055d8:	1007883a 	mov	r3,r2
 10055dc:	e0bffe17 	ldw	r2,-8(fp)
 10055e0:	10c6983a 	sll	r3,r2,r3
 10055e4:	e0bffd17 	ldw	r2,-12(fp)
 10055e8:	1885883a 	add	r2,r3,r2
 10055ec:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 10055f0:	00001c06 	br	1005664 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 10055f4:	e0bffb17 	ldw	r2,-20(fp)
 10055f8:	10800b17 	ldw	r2,44(r2)
 10055fc:	1007883a 	mov	r3,r2
 1005600:	e0bffa17 	ldw	r2,-24(fp)
 1005604:	1889883a 	add	r4,r3,r2
 1005608:	e0bffc17 	ldw	r2,-16(fp)
 100560c:	10800003 	ldbu	r2,0(r2)
 1005610:	10c03fcc 	andi	r3,r2,255
 1005614:	18c0201c 	xori	r3,r3,128
 1005618:	18ffe004 	addi	r3,r3,-128
 100561c:	2005883a 	mov	r2,r4
 1005620:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1005624:	e0bffc17 	ldw	r2,-16(fp)
 1005628:	10800044 	addi	r2,r2,1
 100562c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 1005630:	e0bffd17 	ldw	r2,-12(fp)
 1005634:	10800044 	addi	r2,r2,1
 1005638:	e0bffd15 	stw	r2,-12(fp)
 100563c:	e0bffb17 	ldw	r2,-20(fp)
 1005640:	10c00c17 	ldw	r3,48(r2)
 1005644:	e0bffd17 	ldw	r2,-12(fp)
 1005648:	10c00336 	bltu	r2,r3,1005658 <alt_up_char_buffer_string+0xd4>
			return -1;
 100564c:	00bfffc4 	movi	r2,-1
 1005650:	e0bfff15 	stw	r2,-4(fp)
 1005654:	00000b06 	br	1005684 <alt_up_char_buffer_string+0x100>
		++offset;
 1005658:	e0bffa17 	ldw	r2,-24(fp)
 100565c:	10800044 	addi	r2,r2,1
 1005660:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1005664:	e0bffc17 	ldw	r2,-16(fp)
 1005668:	10800003 	ldbu	r2,0(r2)
 100566c:	10803fcc 	andi	r2,r2,255
 1005670:	1080201c 	xori	r2,r2,128
 1005674:	10bfe004 	addi	r2,r2,-128
 1005678:	1004c03a 	cmpne	r2,r2,zero
 100567c:	103fdd1e 	bne	r2,zero,10055f4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1005680:	e03fff15 	stw	zero,-4(fp)
 1005684:	e0bfff17 	ldw	r2,-4(fp)
}
 1005688:	e037883a 	mov	sp,fp
 100568c:	df000017 	ldw	fp,0(sp)
 1005690:	dec00104 	addi	sp,sp,4
 1005694:	f800283a 	ret

01005698 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 1005698:	defffe04 	addi	sp,sp,-8
 100569c:	df000115 	stw	fp,4(sp)
 10056a0:	df000104 	addi	fp,sp,4
 10056a4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 10056a8:	e0bfff17 	ldw	r2,-4(fp)
 10056ac:	10800a17 	ldw	r2,40(r2)
 10056b0:	10800084 	addi	r2,r2,2
 10056b4:	1007883a 	mov	r3,r2
 10056b8:	00800044 	movi	r2,1
 10056bc:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 10056c0:	e0bfff17 	ldw	r2,-4(fp)
 10056c4:	10800a17 	ldw	r2,40(r2)
 10056c8:	10800084 	addi	r2,r2,2
 10056cc:	10800023 	ldbuio	r2,0(r2)
 10056d0:	1080004c 	andi	r2,r2,1
 10056d4:	10803fcc 	andi	r2,r2,255
 10056d8:	1004c03a 	cmpne	r2,r2,zero
 10056dc:	103ff81e 	bne	r2,zero,10056c0 <alt_up_char_buffer_clear+0x28>
	return 0;
 10056e0:	0005883a 	mov	r2,zero
}
 10056e4:	e037883a 	mov	sp,fp
 10056e8:	df000017 	ldw	fp,0(sp)
 10056ec:	dec00104 	addi	sp,sp,4
 10056f0:	f800283a 	ret

010056f4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 10056f4:	defffc04 	addi	sp,sp,-16
 10056f8:	dfc00315 	stw	ra,12(sp)
 10056fc:	df000215 	stw	fp,8(sp)
 1005700:	df000204 	addi	fp,sp,8
 1005704:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 1005708:	e13fff17 	ldw	r4,-4(fp)
 100570c:	01404074 	movhi	r5,257
 1005710:	29687604 	addi	r5,r5,-24104
 1005714:	1006fe00 	call	1006fe0 <alt_find_dev>
 1005718:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100571c:	e0bffe17 	ldw	r2,-8(fp)
}
 1005720:	e037883a 	mov	sp,fp
 1005724:	dfc00117 	ldw	ra,4(sp)
 1005728:	df000017 	ldw	fp,0(sp)
 100572c:	dec00204 	addi	sp,sp,8
 1005730:	f800283a 	ret

01005734 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 1005734:	defff804 	addi	sp,sp,-32
 1005738:	dfc00715 	stw	ra,28(sp)
 100573c:	df000615 	stw	fp,24(sp)
 1005740:	df000604 	addi	fp,sp,24
 1005744:	e13ffb15 	stw	r4,-20(fp)
 1005748:	e17ffc15 	stw	r5,-16(fp)
 100574c:	e1bffd15 	stw	r6,-12(fp)
 1005750:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 1005754:	e0bffb17 	ldw	r2,-20(fp)
 1005758:	10c00f17 	ldw	r3,60(r2)
 100575c:	e0bffd17 	ldw	r2,-12(fp)
 1005760:	10c0042e 	bgeu	r2,r3,1005774 <alt_up_pixel_buffer_dma_draw+0x40>
 1005764:	e0bffb17 	ldw	r2,-20(fp)
 1005768:	10c01017 	ldw	r3,64(r2)
 100576c:	e0bffe17 	ldw	r2,-8(fp)
 1005770:	10c00336 	bltu	r2,r3,1005780 <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
 1005774:	00bfffc4 	movi	r2,-1
 1005778:	e0bfff15 	stw	r2,-4(fp)
 100577c:	00005206 	br	10058c8 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 1005780:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1005784:	e0bffb17 	ldw	r2,-20(fp)
 1005788:	10800d17 	ldw	r2,52(r2)
 100578c:	1004c03a 	cmpne	r2,r2,zero
 1005790:	1000151e 	bne	r2,zero,10057e8 <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 1005794:	e0bffb17 	ldw	r2,-20(fp)
 1005798:	10c01217 	ldw	r3,72(r2)
 100579c:	e0bffd17 	ldw	r2,-12(fp)
 10057a0:	1886703a 	and	r3,r3,r2
 10057a4:	e0bffb17 	ldw	r2,-20(fp)
 10057a8:	10801117 	ldw	r2,68(r2)
 10057ac:	1886983a 	sll	r3,r3,r2
 10057b0:	e0bffa17 	ldw	r2,-24(fp)
 10057b4:	10c4b03a 	or	r2,r2,r3
 10057b8:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 10057bc:	e0bffb17 	ldw	r2,-20(fp)
 10057c0:	10c01417 	ldw	r3,80(r2)
 10057c4:	e0bffe17 	ldw	r2,-8(fp)
 10057c8:	1886703a 	and	r3,r3,r2
 10057cc:	e0bffb17 	ldw	r2,-20(fp)
 10057d0:	10801317 	ldw	r2,76(r2)
 10057d4:	1886983a 	sll	r3,r3,r2
 10057d8:	e0bffa17 	ldw	r2,-24(fp)
 10057dc:	10c4b03a 	or	r2,r2,r3
 10057e0:	e0bffa15 	stw	r2,-24(fp)
 10057e4:	00001806 	br	1005848 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 10057e8:	e0bffb17 	ldw	r2,-20(fp)
 10057ec:	10c01217 	ldw	r3,72(r2)
 10057f0:	e0bffd17 	ldw	r2,-12(fp)
 10057f4:	1886703a 	and	r3,r3,r2
 10057f8:	e0bffb17 	ldw	r2,-20(fp)
 10057fc:	10801117 	ldw	r2,68(r2)
 1005800:	1886983a 	sll	r3,r3,r2
 1005804:	e0bffa17 	ldw	r2,-24(fp)
 1005808:	10c5883a 	add	r2,r2,r3
 100580c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 1005810:	e0bffb17 	ldw	r2,-20(fp)
 1005814:	10c01417 	ldw	r3,80(r2)
 1005818:	e0bffe17 	ldw	r2,-8(fp)
 100581c:	1888703a 	and	r4,r3,r2
 1005820:	e0bffb17 	ldw	r2,-20(fp)
 1005824:	11400f17 	ldw	r5,60(r2)
 1005828:	100307c0 	call	100307c <__mulsi3>
 100582c:	1007883a 	mov	r3,r2
 1005830:	e0bffb17 	ldw	r2,-20(fp)
 1005834:	10801117 	ldw	r2,68(r2)
 1005838:	1886983a 	sll	r3,r3,r2
 100583c:	e0bffa17 	ldw	r2,-24(fp)
 1005840:	10c5883a 	add	r2,r2,r3
 1005844:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005848:	e0bffb17 	ldw	r2,-20(fp)
 100584c:	10800e17 	ldw	r2,56(r2)
 1005850:	10800058 	cmpnei	r2,r2,1
 1005854:	1000081e 	bne	r2,zero,1005878 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 1005858:	e0bffb17 	ldw	r2,-20(fp)
 100585c:	10800c17 	ldw	r2,48(r2)
 1005860:	1007883a 	mov	r3,r2
 1005864:	e0bffa17 	ldw	r2,-24(fp)
 1005868:	1885883a 	add	r2,r3,r2
 100586c:	e0fffc17 	ldw	r3,-16(fp)
 1005870:	10c00025 	stbio	r3,0(r2)
 1005874:	00001306 	br	10058c4 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005878:	e0bffb17 	ldw	r2,-20(fp)
 100587c:	10800e17 	ldw	r2,56(r2)
 1005880:	10800098 	cmpnei	r2,r2,2
 1005884:	1000081e 	bne	r2,zero,10058a8 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 1005888:	e0bffb17 	ldw	r2,-20(fp)
 100588c:	10800c17 	ldw	r2,48(r2)
 1005890:	1007883a 	mov	r3,r2
 1005894:	e0bffa17 	ldw	r2,-24(fp)
 1005898:	1885883a 	add	r2,r3,r2
 100589c:	e0fffc17 	ldw	r3,-16(fp)
 10058a0:	10c0002d 	sthio	r3,0(r2)
 10058a4:	00000706 	br	10058c4 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 10058a8:	e0bffb17 	ldw	r2,-20(fp)
 10058ac:	10800c17 	ldw	r2,48(r2)
 10058b0:	1007883a 	mov	r3,r2
 10058b4:	e0bffa17 	ldw	r2,-24(fp)
 10058b8:	1885883a 	add	r2,r3,r2
 10058bc:	e0fffc17 	ldw	r3,-16(fp)
 10058c0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 10058c4:	e03fff15 	stw	zero,-4(fp)
 10058c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10058cc:	e037883a 	mov	sp,fp
 10058d0:	dfc00117 	ldw	ra,4(sp)
 10058d4:	df000017 	ldw	fp,0(sp)
 10058d8:	dec00204 	addi	sp,sp,8
 10058dc:	f800283a 	ret

010058e0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 10058e0:	defffd04 	addi	sp,sp,-12
 10058e4:	df000215 	stw	fp,8(sp)
 10058e8:	df000204 	addi	fp,sp,8
 10058ec:	e13ffe15 	stw	r4,-8(fp)
 10058f0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 10058f4:	e0bffe17 	ldw	r2,-8(fp)
 10058f8:	10800a17 	ldw	r2,40(r2)
 10058fc:	10800104 	addi	r2,r2,4
 1005900:	e0ffff17 	ldw	r3,-4(fp)
 1005904:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 1005908:	e0bffe17 	ldw	r2,-8(fp)
 100590c:	10800a17 	ldw	r2,40(r2)
 1005910:	10800104 	addi	r2,r2,4
 1005914:	10800037 	ldwio	r2,0(r2)
 1005918:	1007883a 	mov	r3,r2
 100591c:	e0bffe17 	ldw	r2,-8(fp)
 1005920:	10c00c15 	stw	r3,48(r2)
	return 0;
 1005924:	0005883a 	mov	r2,zero
}
 1005928:	e037883a 	mov	sp,fp
 100592c:	df000017 	ldw	fp,0(sp)
 1005930:	dec00104 	addi	sp,sp,4
 1005934:	f800283a 	ret

01005938 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 1005938:	defffe04 	addi	sp,sp,-8
 100593c:	df000115 	stw	fp,4(sp)
 1005940:	df000104 	addi	fp,sp,4
 1005944:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 1005948:	e0bfff17 	ldw	r2,-4(fp)
 100594c:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 1005950:	e0bfff17 	ldw	r2,-4(fp)
 1005954:	10800a17 	ldw	r2,40(r2)
 1005958:	1007883a 	mov	r3,r2
 100595c:	00800044 	movi	r2,1
 1005960:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 1005964:	e0bfff17 	ldw	r2,-4(fp)
 1005968:	10c00b17 	ldw	r3,44(r2)
 100596c:	e0bfff17 	ldw	r2,-4(fp)
 1005970:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 1005974:	e0bfff17 	ldw	r2,-4(fp)
 1005978:	11000b15 	stw	r4,44(r2)
	return 0;
 100597c:	0005883a 	mov	r2,zero
}
 1005980:	e037883a 	mov	sp,fp
 1005984:	df000017 	ldw	fp,0(sp)
 1005988:	dec00104 	addi	sp,sp,4
 100598c:	f800283a 	ret

01005990 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 1005990:	defffe04 	addi	sp,sp,-8
 1005994:	df000115 	stw	fp,4(sp)
 1005998:	df000104 	addi	fp,sp,4
 100599c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 10059a0:	e0bfff17 	ldw	r2,-4(fp)
 10059a4:	10800a17 	ldw	r2,40(r2)
 10059a8:	10800304 	addi	r2,r2,12
 10059ac:	10800037 	ldwio	r2,0(r2)
 10059b0:	1080004c 	andi	r2,r2,1
}
 10059b4:	e037883a 	mov	sp,fp
 10059b8:	df000017 	ldw	fp,0(sp)
 10059bc:	dec00104 	addi	sp,sp,4
 10059c0:	f800283a 	ret

010059c4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 10059c4:	defff504 	addi	sp,sp,-44
 10059c8:	dfc00a15 	stw	ra,40(sp)
 10059cc:	df000915 	stw	fp,36(sp)
 10059d0:	df000904 	addi	fp,sp,36
 10059d4:	e13ff715 	stw	r4,-36(fp)
 10059d8:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10059dc:	e0bff817 	ldw	r2,-32(fp)
 10059e0:	10800058 	cmpnei	r2,r2,1
 10059e4:	1000041e 	bne	r2,zero,10059f8 <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
 10059e8:	e0bff717 	ldw	r2,-36(fp)
 10059ec:	10800c17 	ldw	r2,48(r2)
 10059f0:	e0bfff15 	stw	r2,-4(fp)
 10059f4:	00000306 	br	1005a04 <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
 10059f8:	e0bff717 	ldw	r2,-36(fp)
 10059fc:	10800b17 	ldw	r2,44(r2)
 1005a00:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 1005a04:	e0bff717 	ldw	r2,-36(fp)
 1005a08:	10800f17 	ldw	r2,60(r2)
 1005a0c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005a10:	e0bff717 	ldw	r2,-36(fp)
 1005a14:	10800e17 	ldw	r2,56(r2)
 1005a18:	10800098 	cmpnei	r2,r2,2
 1005a1c:	1000051e 	bne	r2,zero,1005a34 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 1005a20:	e0fffe17 	ldw	r3,-8(fp)
 1005a24:	e0fffe17 	ldw	r3,-8(fp)
 1005a28:	18c5883a 	add	r2,r3,r3
 1005a2c:	e0bffe15 	stw	r2,-8(fp)
 1005a30:	00000506 	br	1005a48 <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
 1005a34:	e13ffe17 	ldw	r4,-8(fp)
 1005a38:	e13ffe17 	ldw	r4,-8(fp)
 1005a3c:	2105883a 	add	r2,r4,r4
 1005a40:	1085883a 	add	r2,r2,r2
 1005a44:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 1005a48:	e0bff717 	ldw	r2,-36(fp)
 1005a4c:	10801017 	ldw	r2,64(r2)
 1005a50:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1005a54:	e0bff717 	ldw	r2,-36(fp)
 1005a58:	10800d17 	ldw	r2,52(r2)
 1005a5c:	1004c03a 	cmpne	r2,r2,zero
 1005a60:	10001e1e 	bne	r2,zero,1005adc <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1005a64:	e0bff717 	ldw	r2,-36(fp)
 1005a68:	10801317 	ldw	r2,76(r2)
 1005a6c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 1005a70:	e03ffb15 	stw	zero,-20(fp)
 1005a74:	00001506 	br	1005acc <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
 1005a78:	e03ffc15 	stw	zero,-16(fp)
 1005a7c:	00000706 	br	1005a9c <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
 1005a80:	e0ffff17 	ldw	r3,-4(fp)
 1005a84:	e0bffc17 	ldw	r2,-16(fp)
 1005a88:	1885883a 	add	r2,r3,r2
 1005a8c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 1005a90:	e0bffc17 	ldw	r2,-16(fp)
 1005a94:	10800104 	addi	r2,r2,4
 1005a98:	e0bffc15 	stw	r2,-16(fp)
 1005a9c:	e0fffc17 	ldw	r3,-16(fp)
 1005aa0:	e13ffe17 	ldw	r4,-8(fp)
 1005aa4:	193ff636 	bltu	r3,r4,1005a80 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 1005aa8:	e0fffa17 	ldw	r3,-24(fp)
 1005aac:	00800044 	movi	r2,1
 1005ab0:	10c4983a 	sll	r2,r2,r3
 1005ab4:	e0ffff17 	ldw	r3,-4(fp)
 1005ab8:	1887883a 	add	r3,r3,r2
 1005abc:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 1005ac0:	e13ffb17 	ldw	r4,-20(fp)
 1005ac4:	21000044 	addi	r4,r4,1
 1005ac8:	e13ffb15 	stw	r4,-20(fp)
 1005acc:	e0bffb17 	ldw	r2,-20(fp)
 1005ad0:	e0fffd17 	ldw	r3,-12(fp)
 1005ad4:	10ffe836 	bltu	r2,r3,1005a78 <alt_up_pixel_buffer_dma_clear_screen+0xb4>
 1005ad8:	00001006 	br	1005b1c <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 1005adc:	e13ffd17 	ldw	r4,-12(fp)
 1005ae0:	e17ffe17 	ldw	r5,-8(fp)
 1005ae4:	100307c0 	call	100307c <__mulsi3>
 1005ae8:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 1005aec:	e03ff915 	stw	zero,-28(fp)
 1005af0:	00000706 	br	1005b10 <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
 1005af4:	e0ffff17 	ldw	r3,-4(fp)
 1005af8:	e0bff917 	ldw	r2,-28(fp)
 1005afc:	1885883a 	add	r2,r3,r2
 1005b00:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 1005b04:	e13ff917 	ldw	r4,-28(fp)
 1005b08:	21000104 	addi	r4,r4,4
 1005b0c:	e13ff915 	stw	r4,-28(fp)
 1005b10:	e0bff917 	ldw	r2,-28(fp)
 1005b14:	e0fffd17 	ldw	r3,-12(fp)
 1005b18:	10fff636 	bltu	r2,r3,1005af4 <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 1005b1c:	e037883a 	mov	sp,fp
 1005b20:	dfc00117 	ldw	ra,4(sp)
 1005b24:	df000017 	ldw	fp,0(sp)
 1005b28:	dec00204 	addi	sp,sp,8
 1005b2c:	f800283a 	ret

01005b30 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 1005b30:	deffec04 	addi	sp,sp,-80
 1005b34:	dfc01315 	stw	ra,76(sp)
 1005b38:	df001215 	stw	fp,72(sp)
 1005b3c:	df001204 	addi	fp,sp,72
 1005b40:	e13fee15 	stw	r4,-72(fp)
 1005b44:	e17fef15 	stw	r5,-68(fp)
 1005b48:	e1bff015 	stw	r6,-64(fp)
 1005b4c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1005b50:	e0bfee17 	ldw	r2,-72(fp)
 1005b54:	10800f17 	ldw	r2,60(r2)
 1005b58:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1005b5c:	e0bfee17 	ldw	r2,-72(fp)
 1005b60:	10801017 	ldw	r2,64(r2)
 1005b64:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1005b68:	e0bfef17 	ldw	r2,-68(fp)
 1005b6c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 1005b70:	e0fff117 	ldw	r3,-60(fp)
 1005b74:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 1005b78:	e13ff017 	ldw	r4,-64(fp)
 1005b7c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 1005b80:	e0800217 	ldw	r2,8(fp)
 1005b84:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 1005b88:	e0c00317 	ldw	r3,12(fp)
 1005b8c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1005b90:	e13ffa17 	ldw	r4,-24(fp)
 1005b94:	e0bffb17 	ldw	r2,-20(fp)
 1005b98:	2080062e 	bgeu	r4,r2,1005bb4 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
 1005b9c:	e0fffb17 	ldw	r3,-20(fp)
 1005ba0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 1005ba4:	e13ffa17 	ldw	r4,-24(fp)
 1005ba8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 1005bac:	e0bffc17 	ldw	r2,-16(fp)
 1005bb0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 1005bb4:	e0fff817 	ldw	r3,-32(fp)
 1005bb8:	e13ff917 	ldw	r4,-28(fp)
 1005bbc:	1900062e 	bgeu	r3,r4,1005bd8 <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
 1005bc0:	e0bff917 	ldw	r2,-28(fp)
 1005bc4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 1005bc8:	e0fff817 	ldw	r3,-32(fp)
 1005bcc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 1005bd0:	e13ffc17 	ldw	r4,-16(fp)
 1005bd4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 1005bd8:	e0bffb17 	ldw	r2,-20(fp)
 1005bdc:	e0fffe17 	ldw	r3,-8(fp)
 1005be0:	10c10d2e 	bgeu	r2,r3,1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
 1005be4:	e13ff917 	ldw	r4,-28(fp)
 1005be8:	e0bffd17 	ldw	r2,-12(fp)
 1005bec:	20800136 	bltu	r4,r2,1005bf4 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1005bf0:	00010906 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1005bf4:	e0fffa17 	ldw	r3,-24(fp)
 1005bf8:	e13ffe17 	ldw	r4,-8(fp)
 1005bfc:	19000336 	bltu	r3,r4,1005c0c <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
 1005c00:	e0bffe17 	ldw	r2,-8(fp)
 1005c04:	10bfffc4 	addi	r2,r2,-1
 1005c08:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1005c0c:	e0fff817 	ldw	r3,-32(fp)
 1005c10:	e13ffd17 	ldw	r4,-12(fp)
 1005c14:	19000336 	bltu	r3,r4,1005c24 <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
 1005c18:	e0bffd17 	ldw	r2,-12(fp)
 1005c1c:	10bfffc4 	addi	r2,r2,-1
 1005c20:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1005c24:	e0800417 	ldw	r2,16(fp)
 1005c28:	10800058 	cmpnei	r2,r2,1
 1005c2c:	1000041e 	bne	r2,zero,1005c40 <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
 1005c30:	e0bfee17 	ldw	r2,-72(fp)
 1005c34:	10800c17 	ldw	r2,48(r2)
 1005c38:	e0bfff15 	stw	r2,-4(fp)
 1005c3c:	00000306 	br	1005c4c <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
 1005c40:	e0bfee17 	ldw	r2,-72(fp)
 1005c44:	10800b17 	ldw	r2,44(r2)
 1005c48:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1005c4c:	e0bfee17 	ldw	r2,-72(fp)
 1005c50:	10800d17 	ldw	r2,52(r2)
 1005c54:	1004c03a 	cmpne	r2,r2,zero
 1005c58:	1000721e 	bne	r2,zero,1005e24 <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1005c5c:	e0bfee17 	ldw	r2,-72(fp)
 1005c60:	10801317 	ldw	r2,76(r2)
 1005c64:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 1005c68:	e0bff417 	ldw	r2,-48(fp)
 1005c6c:	e0fff917 	ldw	r3,-28(fp)
 1005c70:	1884983a 	sll	r2,r3,r2
 1005c74:	e13fff17 	ldw	r4,-4(fp)
 1005c78:	2089883a 	add	r4,r4,r2
 1005c7c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005c80:	e0bfee17 	ldw	r2,-72(fp)
 1005c84:	10800e17 	ldw	r2,56(r2)
 1005c88:	10800058 	cmpnei	r2,r2,1
 1005c8c:	10001e1e 	bne	r2,zero,1005d08 <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
 1005c90:	e0bff917 	ldw	r2,-28(fp)
 1005c94:	e0bff515 	stw	r2,-44(fp)
 1005c98:	00001706 	br	1005cf8 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
 1005c9c:	e0fffb17 	ldw	r3,-20(fp)
 1005ca0:	e0fff615 	stw	r3,-40(fp)
 1005ca4:	00000806 	br	1005cc8 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1005ca8:	e0ffff17 	ldw	r3,-4(fp)
 1005cac:	e0bff617 	ldw	r2,-40(fp)
 1005cb0:	1885883a 	add	r2,r3,r2
 1005cb4:	e0fff717 	ldw	r3,-36(fp)
 1005cb8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005cbc:	e13ff617 	ldw	r4,-40(fp)
 1005cc0:	21000044 	addi	r4,r4,1
 1005cc4:	e13ff615 	stw	r4,-40(fp)
 1005cc8:	e0bffa17 	ldw	r2,-24(fp)
 1005ccc:	e0fff617 	ldw	r3,-40(fp)
 1005cd0:	10fff52e 	bgeu	r2,r3,1005ca8 <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 1005cd4:	e0fff417 	ldw	r3,-48(fp)
 1005cd8:	00800044 	movi	r2,1
 1005cdc:	10c4983a 	sll	r2,r2,r3
 1005ce0:	e13fff17 	ldw	r4,-4(fp)
 1005ce4:	2089883a 	add	r4,r4,r2
 1005ce8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1005cec:	e0bff517 	ldw	r2,-44(fp)
 1005cf0:	10800044 	addi	r2,r2,1
 1005cf4:	e0bff515 	stw	r2,-44(fp)
 1005cf8:	e0fff817 	ldw	r3,-32(fp)
 1005cfc:	e13ff517 	ldw	r4,-44(fp)
 1005d00:	193fe62e 	bgeu	r3,r4,1005c9c <alt_up_pixel_buffer_dma_draw_box+0x16c>
 1005d04:	0000c406 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005d08:	e0bfee17 	ldw	r2,-72(fp)
 1005d0c:	10800e17 	ldw	r2,56(r2)
 1005d10:	10800098 	cmpnei	r2,r2,2
 1005d14:	1000211e 	bne	r2,zero,1005d9c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
 1005d18:	e0bff917 	ldw	r2,-28(fp)
 1005d1c:	e0bff515 	stw	r2,-44(fp)
 1005d20:	00001a06 	br	1005d8c <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
 1005d24:	e0fffb17 	ldw	r3,-20(fp)
 1005d28:	e0fff615 	stw	r3,-40(fp)
 1005d2c:	00000b06 	br	1005d5c <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1005d30:	e13ff617 	ldw	r4,-40(fp)
 1005d34:	e13ff617 	ldw	r4,-40(fp)
 1005d38:	2105883a 	add	r2,r4,r4
 1005d3c:	1007883a 	mov	r3,r2
 1005d40:	e0bfff17 	ldw	r2,-4(fp)
 1005d44:	1885883a 	add	r2,r3,r2
 1005d48:	e0fff717 	ldw	r3,-36(fp)
 1005d4c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005d50:	e0bff617 	ldw	r2,-40(fp)
 1005d54:	10800044 	addi	r2,r2,1
 1005d58:	e0bff615 	stw	r2,-40(fp)
 1005d5c:	e0fffa17 	ldw	r3,-24(fp)
 1005d60:	e13ff617 	ldw	r4,-40(fp)
 1005d64:	193ff22e 	bgeu	r3,r4,1005d30 <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 1005d68:	e0fff417 	ldw	r3,-48(fp)
 1005d6c:	00800044 	movi	r2,1
 1005d70:	10c4983a 	sll	r2,r2,r3
 1005d74:	e0ffff17 	ldw	r3,-4(fp)
 1005d78:	1887883a 	add	r3,r3,r2
 1005d7c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1005d80:	e13ff517 	ldw	r4,-44(fp)
 1005d84:	21000044 	addi	r4,r4,1
 1005d88:	e13ff515 	stw	r4,-44(fp)
 1005d8c:	e0bff817 	ldw	r2,-32(fp)
 1005d90:	e0fff517 	ldw	r3,-44(fp)
 1005d94:	10ffe32e 	bgeu	r2,r3,1005d24 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
 1005d98:	00009f06 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1005d9c:	e13ff917 	ldw	r4,-28(fp)
 1005da0:	e13ff515 	stw	r4,-44(fp)
 1005da4:	00001b06 	br	1005e14 <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
 1005da8:	e0bffb17 	ldw	r2,-20(fp)
 1005dac:	e0bff615 	stw	r2,-40(fp)
 1005db0:	00000c06 	br	1005de4 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1005db4:	e0fff617 	ldw	r3,-40(fp)
 1005db8:	e0fff617 	ldw	r3,-40(fp)
 1005dbc:	18c5883a 	add	r2,r3,r3
 1005dc0:	1085883a 	add	r2,r2,r2
 1005dc4:	1007883a 	mov	r3,r2
 1005dc8:	e0bfff17 	ldw	r2,-4(fp)
 1005dcc:	1885883a 	add	r2,r3,r2
 1005dd0:	e0fff717 	ldw	r3,-36(fp)
 1005dd4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005dd8:	e13ff617 	ldw	r4,-40(fp)
 1005ddc:	21000044 	addi	r4,r4,1
 1005de0:	e13ff615 	stw	r4,-40(fp)
 1005de4:	e0bffa17 	ldw	r2,-24(fp)
 1005de8:	e0fff617 	ldw	r3,-40(fp)
 1005dec:	10fff12e 	bgeu	r2,r3,1005db4 <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 1005df0:	e0fff417 	ldw	r3,-48(fp)
 1005df4:	00800044 	movi	r2,1
 1005df8:	10c4983a 	sll	r2,r2,r3
 1005dfc:	e13fff17 	ldw	r4,-4(fp)
 1005e00:	2089883a 	add	r4,r4,r2
 1005e04:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1005e08:	e0bff517 	ldw	r2,-44(fp)
 1005e0c:	10800044 	addi	r2,r2,1
 1005e10:	e0bff515 	stw	r2,-44(fp)
 1005e14:	e0fff817 	ldw	r3,-32(fp)
 1005e18:	e13ff517 	ldw	r4,-44(fp)
 1005e1c:	193fe22e 	bgeu	r3,r4,1005da8 <alt_up_pixel_buffer_dma_draw_box+0x278>
 1005e20:	00007d06 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005e24:	e0bfee17 	ldw	r2,-72(fp)
 1005e28:	10800e17 	ldw	r2,56(r2)
 1005e2c:	10800058 	cmpnei	r2,r2,1
 1005e30:	1000221e 	bne	r2,zero,1005ebc <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
 1005e34:	e13ff917 	ldw	r4,-28(fp)
 1005e38:	e17ffe17 	ldw	r5,-8(fp)
 1005e3c:	100307c0 	call	100307c <__mulsi3>
 1005e40:	e0ffff17 	ldw	r3,-4(fp)
 1005e44:	1887883a 	add	r3,r3,r2
 1005e48:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005e4c:	e13ff917 	ldw	r4,-28(fp)
 1005e50:	e13ff215 	stw	r4,-56(fp)
 1005e54:	00001506 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
 1005e58:	e0bffb17 	ldw	r2,-20(fp)
 1005e5c:	e0bff315 	stw	r2,-52(fp)
 1005e60:	00000806 	br	1005e84 <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1005e64:	e0ffff17 	ldw	r3,-4(fp)
 1005e68:	e0bff317 	ldw	r2,-52(fp)
 1005e6c:	1885883a 	add	r2,r3,r2
 1005e70:	e0fff717 	ldw	r3,-36(fp)
 1005e74:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005e78:	e0fff317 	ldw	r3,-52(fp)
 1005e7c:	18c00044 	addi	r3,r3,1
 1005e80:	e0fff315 	stw	r3,-52(fp)
 1005e84:	e13ffa17 	ldw	r4,-24(fp)
 1005e88:	e0bff317 	ldw	r2,-52(fp)
 1005e8c:	20bff52e 	bgeu	r4,r2,1005e64 <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 1005e90:	e0ffff17 	ldw	r3,-4(fp)
 1005e94:	e13ffe17 	ldw	r4,-8(fp)
 1005e98:	1907883a 	add	r3,r3,r4
 1005e9c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1005ea0:	e0bff217 	ldw	r2,-56(fp)
 1005ea4:	10800044 	addi	r2,r2,1
 1005ea8:	e0bff215 	stw	r2,-56(fp)
 1005eac:	e0fff817 	ldw	r3,-32(fp)
 1005eb0:	e13ff217 	ldw	r4,-56(fp)
 1005eb4:	193fe82e 	bgeu	r3,r4,1005e58 <alt_up_pixel_buffer_dma_draw_box+0x328>
 1005eb8:	00005706 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005ebc:	e0bfee17 	ldw	r2,-72(fp)
 1005ec0:	10800e17 	ldw	r2,56(r2)
 1005ec4:	10800098 	cmpnei	r2,r2,2
 1005ec8:	1000291e 	bne	r2,zero,1005f70 <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
 1005ecc:	e0fffe17 	ldw	r3,-8(fp)
 1005ed0:	e0fffe17 	ldw	r3,-8(fp)
 1005ed4:	18c5883a 	add	r2,r3,r3
 1005ed8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1005edc:	e13ff917 	ldw	r4,-28(fp)
 1005ee0:	e17ffe17 	ldw	r5,-8(fp)
 1005ee4:	100307c0 	call	100307c <__mulsi3>
 1005ee8:	e13fff17 	ldw	r4,-4(fp)
 1005eec:	2089883a 	add	r4,r4,r2
 1005ef0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005ef4:	e0bff917 	ldw	r2,-28(fp)
 1005ef8:	e0bff215 	stw	r2,-56(fp)
 1005efc:	00001806 	br	1005f60 <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
 1005f00:	e0fffb17 	ldw	r3,-20(fp)
 1005f04:	e0fff315 	stw	r3,-52(fp)
 1005f08:	00000b06 	br	1005f38 <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1005f0c:	e13ff317 	ldw	r4,-52(fp)
 1005f10:	e13ff317 	ldw	r4,-52(fp)
 1005f14:	2105883a 	add	r2,r4,r4
 1005f18:	1007883a 	mov	r3,r2
 1005f1c:	e0bfff17 	ldw	r2,-4(fp)
 1005f20:	1885883a 	add	r2,r3,r2
 1005f24:	e0fff717 	ldw	r3,-36(fp)
 1005f28:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005f2c:	e0bff317 	ldw	r2,-52(fp)
 1005f30:	10800044 	addi	r2,r2,1
 1005f34:	e0bff315 	stw	r2,-52(fp)
 1005f38:	e0fffa17 	ldw	r3,-24(fp)
 1005f3c:	e13ff317 	ldw	r4,-52(fp)
 1005f40:	193ff22e 	bgeu	r3,r4,1005f0c <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1005f44:	e0bfff17 	ldw	r2,-4(fp)
 1005f48:	e0fffe17 	ldw	r3,-8(fp)
 1005f4c:	10c5883a 	add	r2,r2,r3
 1005f50:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1005f54:	e13ff217 	ldw	r4,-56(fp)
 1005f58:	21000044 	addi	r4,r4,1
 1005f5c:	e13ff215 	stw	r4,-56(fp)
 1005f60:	e0bff817 	ldw	r2,-32(fp)
 1005f64:	e0fff217 	ldw	r3,-56(fp)
 1005f68:	10ffe52e 	bgeu	r2,r3,1005f00 <alt_up_pixel_buffer_dma_draw_box+0x3d0>
 1005f6c:	00002a06 	br	1006018 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1005f70:	e13ffe17 	ldw	r4,-8(fp)
 1005f74:	e13ffe17 	ldw	r4,-8(fp)
 1005f78:	2105883a 	add	r2,r4,r4
 1005f7c:	1085883a 	add	r2,r2,r2
 1005f80:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1005f84:	e13ff917 	ldw	r4,-28(fp)
 1005f88:	e17ffe17 	ldw	r5,-8(fp)
 1005f8c:	100307c0 	call	100307c <__mulsi3>
 1005f90:	e0ffff17 	ldw	r3,-4(fp)
 1005f94:	1887883a 	add	r3,r3,r2
 1005f98:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005f9c:	e13ff917 	ldw	r4,-28(fp)
 1005fa0:	e13ff215 	stw	r4,-56(fp)
 1005fa4:	00001906 	br	100600c <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
 1005fa8:	e0bffb17 	ldw	r2,-20(fp)
 1005fac:	e0bff315 	stw	r2,-52(fp)
 1005fb0:	00000c06 	br	1005fe4 <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1005fb4:	e0fff317 	ldw	r3,-52(fp)
 1005fb8:	e0fff317 	ldw	r3,-52(fp)
 1005fbc:	18c5883a 	add	r2,r3,r3
 1005fc0:	1085883a 	add	r2,r2,r2
 1005fc4:	1007883a 	mov	r3,r2
 1005fc8:	e0bfff17 	ldw	r2,-4(fp)
 1005fcc:	1885883a 	add	r2,r3,r2
 1005fd0:	e0fff717 	ldw	r3,-36(fp)
 1005fd4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005fd8:	e13ff317 	ldw	r4,-52(fp)
 1005fdc:	21000044 	addi	r4,r4,1
 1005fe0:	e13ff315 	stw	r4,-52(fp)
 1005fe4:	e0bffa17 	ldw	r2,-24(fp)
 1005fe8:	e0fff317 	ldw	r3,-52(fp)
 1005fec:	10fff12e 	bgeu	r2,r3,1005fb4 <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 1005ff0:	e13fff17 	ldw	r4,-4(fp)
 1005ff4:	e0bffe17 	ldw	r2,-8(fp)
 1005ff8:	2089883a 	add	r4,r4,r2
 1005ffc:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1006000:	e0fff217 	ldw	r3,-56(fp)
 1006004:	18c00044 	addi	r3,r3,1
 1006008:	e0fff215 	stw	r3,-56(fp)
 100600c:	e13ff817 	ldw	r4,-32(fp)
 1006010:	e0bff217 	ldw	r2,-56(fp)
 1006014:	20bfe42e 	bgeu	r4,r2,1005fa8 <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1006018:	e037883a 	mov	sp,fp
 100601c:	dfc00117 	ldw	ra,4(sp)
 1006020:	df000017 	ldw	fp,0(sp)
 1006024:	dec00204 	addi	sp,sp,8
 1006028:	f800283a 	ret

0100602c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 100602c:	defff104 	addi	sp,sp,-60
 1006030:	dfc00e15 	stw	ra,56(sp)
 1006034:	df000d15 	stw	fp,52(sp)
 1006038:	df000d04 	addi	fp,sp,52
 100603c:	e13ff315 	stw	r4,-52(fp)
 1006040:	e17ff415 	stw	r5,-48(fp)
 1006044:	e1bff515 	stw	r6,-44(fp)
 1006048:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 100604c:	e0bff317 	ldw	r2,-52(fp)
 1006050:	10800f17 	ldw	r2,60(r2)
 1006054:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1006058:	e0bff317 	ldw	r2,-52(fp)
 100605c:	10801017 	ldw	r2,64(r2)
 1006060:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1006064:	e0bff417 	ldw	r2,-48(fp)
 1006068:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 100606c:	e0fff517 	ldw	r3,-44(fp)
 1006070:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 1006074:	e13ff617 	ldw	r4,-40(fp)
 1006078:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 100607c:	e0800217 	ldw	r2,8(fp)
 1006080:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1006084:	e0fffb17 	ldw	r3,-20(fp)
 1006088:	e13ffc17 	ldw	r4,-16(fp)
 100608c:	1900042e 	bgeu	r3,r4,10060a0 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
 1006090:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 1006094:	e0fffb17 	ldw	r3,-20(fp)
 1006098:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 100609c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 10060a0:	e13ffc17 	ldw	r4,-16(fp)
 10060a4:	e0bffe17 	ldw	r2,-8(fp)
 10060a8:	2080b12e 	bgeu	r4,r2,1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
 10060ac:	e13ffa17 	ldw	r4,-24(fp)
 10060b0:	e0fffd17 	ldw	r3,-12(fp)
 10060b4:	20c00136 	bltu	r4,r3,10060bc <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 10060b8:	0000ad06 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 10060bc:	e0bffb17 	ldw	r2,-20(fp)
 10060c0:	e0fffe17 	ldw	r3,-8(fp)
 10060c4:	10c00336 	bltu	r2,r3,10060d4 <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
 10060c8:	e13ffe17 	ldw	r4,-8(fp)
 10060cc:	213fffc4 	addi	r4,r4,-1
 10060d0:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10060d4:	e0800317 	ldw	r2,12(fp)
 10060d8:	10800058 	cmpnei	r2,r2,1
 10060dc:	1000041e 	bne	r2,zero,10060f0 <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 10060e0:	e0bff317 	ldw	r2,-52(fp)
 10060e4:	10800c17 	ldw	r2,48(r2)
 10060e8:	e0bfff15 	stw	r2,-4(fp)
 10060ec:	00000306 	br	10060fc <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 10060f0:	e0bff317 	ldw	r2,-52(fp)
 10060f4:	10800b17 	ldw	r2,44(r2)
 10060f8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10060fc:	e0bff317 	ldw	r2,-52(fp)
 1006100:	10800d17 	ldw	r2,52(r2)
 1006104:	1004c03a 	cmpne	r2,r2,zero
 1006108:	1000431e 	bne	r2,zero,1006218 <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100610c:	e0bff317 	ldw	r2,-52(fp)
 1006110:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 1006114:	e0fffa17 	ldw	r3,-24(fp)
 1006118:	1884983a 	sll	r2,r3,r2
 100611c:	e13fff17 	ldw	r4,-4(fp)
 1006120:	2089883a 	add	r4,r4,r2
 1006124:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1006128:	e0bff317 	ldw	r2,-52(fp)
 100612c:	10800e17 	ldw	r2,56(r2)
 1006130:	10800058 	cmpnei	r2,r2,1
 1006134:	10000f1e 	bne	r2,zero,1006174 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
 1006138:	e0bffc17 	ldw	r2,-16(fp)
 100613c:	e0bff815 	stw	r2,-32(fp)
 1006140:	00000806 	br	1006164 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1006144:	e0ffff17 	ldw	r3,-4(fp)
 1006148:	e0bff817 	ldw	r2,-32(fp)
 100614c:	1885883a 	add	r2,r3,r2
 1006150:	e0fff917 	ldw	r3,-28(fp)
 1006154:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1006158:	e0fff817 	ldw	r3,-32(fp)
 100615c:	18c00044 	addi	r3,r3,1
 1006160:	e0fff815 	stw	r3,-32(fp)
 1006164:	e13ffb17 	ldw	r4,-20(fp)
 1006168:	e0bff817 	ldw	r2,-32(fp)
 100616c:	20bff52e 	bgeu	r4,r2,1006144 <alt_up_pixel_buffer_dma_draw_hline+0x118>
 1006170:	00007f06 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1006174:	e0bff317 	ldw	r2,-52(fp)
 1006178:	10800e17 	ldw	r2,56(r2)
 100617c:	10800098 	cmpnei	r2,r2,2
 1006180:	1000121e 	bne	r2,zero,10061cc <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
 1006184:	e0fffc17 	ldw	r3,-16(fp)
 1006188:	e0fff815 	stw	r3,-32(fp)
 100618c:	00000b06 	br	10061bc <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 1006190:	e13ff817 	ldw	r4,-32(fp)
 1006194:	e13ff817 	ldw	r4,-32(fp)
 1006198:	2105883a 	add	r2,r4,r4
 100619c:	1007883a 	mov	r3,r2
 10061a0:	e0bfff17 	ldw	r2,-4(fp)
 10061a4:	1885883a 	add	r2,r3,r2
 10061a8:	e0fff917 	ldw	r3,-28(fp)
 10061ac:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 10061b0:	e0bff817 	ldw	r2,-32(fp)
 10061b4:	10800044 	addi	r2,r2,1
 10061b8:	e0bff815 	stw	r2,-32(fp)
 10061bc:	e0fffb17 	ldw	r3,-20(fp)
 10061c0:	e13ff817 	ldw	r4,-32(fp)
 10061c4:	193ff22e 	bgeu	r3,r4,1006190 <alt_up_pixel_buffer_dma_draw_hline+0x164>
 10061c8:	00006906 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 10061cc:	e0bffc17 	ldw	r2,-16(fp)
 10061d0:	e0bff815 	stw	r2,-32(fp)
 10061d4:	00000c06 	br	1006208 <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 10061d8:	e0fff817 	ldw	r3,-32(fp)
 10061dc:	e0fff817 	ldw	r3,-32(fp)
 10061e0:	18c5883a 	add	r2,r3,r3
 10061e4:	1085883a 	add	r2,r2,r2
 10061e8:	1007883a 	mov	r3,r2
 10061ec:	e0bfff17 	ldw	r2,-4(fp)
 10061f0:	1885883a 	add	r2,r3,r2
 10061f4:	e0fff917 	ldw	r3,-28(fp)
 10061f8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 10061fc:	e13ff817 	ldw	r4,-32(fp)
 1006200:	21000044 	addi	r4,r4,1
 1006204:	e13ff815 	stw	r4,-32(fp)
 1006208:	e0bffb17 	ldw	r2,-20(fp)
 100620c:	e0fff817 	ldw	r3,-32(fp)
 1006210:	10fff12e 	bgeu	r2,r3,10061d8 <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
 1006214:	00005606 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1006218:	e0bff317 	ldw	r2,-52(fp)
 100621c:	10800e17 	ldw	r2,56(r2)
 1006220:	10800058 	cmpnei	r2,r2,1
 1006224:	1000151e 	bne	r2,zero,100627c <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
 1006228:	e13ffa17 	ldw	r4,-24(fp)
 100622c:	e17ffe17 	ldw	r5,-8(fp)
 1006230:	100307c0 	call	100307c <__mulsi3>
 1006234:	e13fff17 	ldw	r4,-4(fp)
 1006238:	2089883a 	add	r4,r4,r2
 100623c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1006240:	e0bffc17 	ldw	r2,-16(fp)
 1006244:	e0bff715 	stw	r2,-36(fp)
 1006248:	00000806 	br	100626c <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
 100624c:	e0ffff17 	ldw	r3,-4(fp)
 1006250:	e0bff717 	ldw	r2,-36(fp)
 1006254:	1885883a 	add	r2,r3,r2
 1006258:	e0fff917 	ldw	r3,-28(fp)
 100625c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1006260:	e0fff717 	ldw	r3,-36(fp)
 1006264:	18c00044 	addi	r3,r3,1
 1006268:	e0fff715 	stw	r3,-36(fp)
 100626c:	e13ffb17 	ldw	r4,-20(fp)
 1006270:	e0bff717 	ldw	r2,-36(fp)
 1006274:	20bff52e 	bgeu	r4,r2,100624c <alt_up_pixel_buffer_dma_draw_hline+0x220>
 1006278:	00003d06 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100627c:	e0bff317 	ldw	r2,-52(fp)
 1006280:	10800e17 	ldw	r2,56(r2)
 1006284:	10800098 	cmpnei	r2,r2,2
 1006288:	10001c1e 	bne	r2,zero,10062fc <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
 100628c:	e0fffe17 	ldw	r3,-8(fp)
 1006290:	e0fffe17 	ldw	r3,-8(fp)
 1006294:	18c5883a 	add	r2,r3,r3
 1006298:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 100629c:	e13ffa17 	ldw	r4,-24(fp)
 10062a0:	e17ffe17 	ldw	r5,-8(fp)
 10062a4:	100307c0 	call	100307c <__mulsi3>
 10062a8:	e13fff17 	ldw	r4,-4(fp)
 10062ac:	2089883a 	add	r4,r4,r2
 10062b0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10062b4:	e0bffc17 	ldw	r2,-16(fp)
 10062b8:	e0bff715 	stw	r2,-36(fp)
 10062bc:	00000b06 	br	10062ec <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 10062c0:	e0fff717 	ldw	r3,-36(fp)
 10062c4:	e0fff717 	ldw	r3,-36(fp)
 10062c8:	18c5883a 	add	r2,r3,r3
 10062cc:	1007883a 	mov	r3,r2
 10062d0:	e0bfff17 	ldw	r2,-4(fp)
 10062d4:	1885883a 	add	r2,r3,r2
 10062d8:	e0fff917 	ldw	r3,-28(fp)
 10062dc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10062e0:	e13ff717 	ldw	r4,-36(fp)
 10062e4:	21000044 	addi	r4,r4,1
 10062e8:	e13ff715 	stw	r4,-36(fp)
 10062ec:	e0bffb17 	ldw	r2,-20(fp)
 10062f0:	e0fff717 	ldw	r3,-36(fp)
 10062f4:	10fff22e 	bgeu	r2,r3,10062c0 <alt_up_pixel_buffer_dma_draw_hline+0x294>
 10062f8:	00001d06 	br	1006370 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10062fc:	e13ffe17 	ldw	r4,-8(fp)
 1006300:	e13ffe17 	ldw	r4,-8(fp)
 1006304:	2105883a 	add	r2,r4,r4
 1006308:	1085883a 	add	r2,r2,r2
 100630c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 1006310:	e13ffa17 	ldw	r4,-24(fp)
 1006314:	e17ffe17 	ldw	r5,-8(fp)
 1006318:	100307c0 	call	100307c <__mulsi3>
 100631c:	e0ffff17 	ldw	r3,-4(fp)
 1006320:	1887883a 	add	r3,r3,r2
 1006324:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1006328:	e13ffc17 	ldw	r4,-16(fp)
 100632c:	e13ff715 	stw	r4,-36(fp)
 1006330:	00000c06 	br	1006364 <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1006334:	e0fff717 	ldw	r3,-36(fp)
 1006338:	e0fff717 	ldw	r3,-36(fp)
 100633c:	18c5883a 	add	r2,r3,r3
 1006340:	1085883a 	add	r2,r2,r2
 1006344:	1007883a 	mov	r3,r2
 1006348:	e0bfff17 	ldw	r2,-4(fp)
 100634c:	1885883a 	add	r2,r3,r2
 1006350:	e0fff917 	ldw	r3,-28(fp)
 1006354:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1006358:	e13ff717 	ldw	r4,-36(fp)
 100635c:	21000044 	addi	r4,r4,1
 1006360:	e13ff715 	stw	r4,-36(fp)
 1006364:	e0bffb17 	ldw	r2,-20(fp)
 1006368:	e0fff717 	ldw	r3,-36(fp)
 100636c:	10fff12e 	bgeu	r2,r3,1006334 <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 1006370:	e037883a 	mov	sp,fp
 1006374:	dfc00117 	ldw	ra,4(sp)
 1006378:	df000017 	ldw	fp,0(sp)
 100637c:	dec00204 	addi	sp,sp,8
 1006380:	f800283a 	ret

01006384 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 1006384:	defff004 	addi	sp,sp,-64
 1006388:	dfc00f15 	stw	ra,60(sp)
 100638c:	df000e15 	stw	fp,56(sp)
 1006390:	df000e04 	addi	fp,sp,56
 1006394:	e13ff215 	stw	r4,-56(fp)
 1006398:	e17ff315 	stw	r5,-52(fp)
 100639c:	e1bff415 	stw	r6,-48(fp)
 10063a0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10063a4:	e0bff217 	ldw	r2,-56(fp)
 10063a8:	10800f17 	ldw	r2,60(r2)
 10063ac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10063b0:	e0bff217 	ldw	r2,-56(fp)
 10063b4:	10801017 	ldw	r2,64(r2)
 10063b8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 10063bc:	e0bff317 	ldw	r2,-52(fp)
 10063c0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 10063c4:	e0fff417 	ldw	r3,-48(fp)
 10063c8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 10063cc:	e13ff517 	ldw	r4,-44(fp)
 10063d0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 10063d4:	e0800217 	ldw	r2,8(fp)
 10063d8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 10063dc:	e0fffa17 	ldw	r3,-24(fp)
 10063e0:	e13ffb17 	ldw	r4,-20(fp)
 10063e4:	1900042e 	bgeu	r3,r4,10063f8 <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
 10063e8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 10063ec:	e0fffa17 	ldw	r3,-24(fp)
 10063f0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 10063f4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 10063f8:	e13ffc17 	ldw	r4,-16(fp)
 10063fc:	e0bffe17 	ldw	r2,-8(fp)
 1006400:	2080d12e 	bgeu	r4,r2,1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
 1006404:	e0fffb17 	ldw	r3,-20(fp)
 1006408:	e13ffd17 	ldw	r4,-12(fp)
 100640c:	19000136 	bltu	r3,r4,1006414 <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1006410:	0000cd06 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1006414:	e0bffa17 	ldw	r2,-24(fp)
 1006418:	e0fffd17 	ldw	r3,-12(fp)
 100641c:	10c00336 	bltu	r2,r3,100642c <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
 1006420:	e13ffd17 	ldw	r4,-12(fp)
 1006424:	213fffc4 	addi	r4,r4,-1
 1006428:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100642c:	e0800317 	ldw	r2,12(fp)
 1006430:	10800058 	cmpnei	r2,r2,1
 1006434:	1000041e 	bne	r2,zero,1006448 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 1006438:	e0bff217 	ldw	r2,-56(fp)
 100643c:	10800c17 	ldw	r2,48(r2)
 1006440:	e0bfff15 	stw	r2,-4(fp)
 1006444:	00000306 	br	1006454 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 1006448:	e0bff217 	ldw	r2,-56(fp)
 100644c:	10800b17 	ldw	r2,44(r2)
 1006450:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1006454:	e0bff217 	ldw	r2,-56(fp)
 1006458:	10800d17 	ldw	r2,52(r2)
 100645c:	1004c03a 	cmpne	r2,r2,zero
 1006460:	1000571e 	bne	r2,zero,10065c0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1006464:	e0bff217 	ldw	r2,-56(fp)
 1006468:	10801317 	ldw	r2,76(r2)
 100646c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 1006470:	e0bff717 	ldw	r2,-36(fp)
 1006474:	e0fffb17 	ldw	r3,-20(fp)
 1006478:	1884983a 	sll	r2,r3,r2
 100647c:	e13fff17 	ldw	r4,-4(fp)
 1006480:	2089883a 	add	r4,r4,r2
 1006484:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1006488:	e0bff217 	ldw	r2,-56(fp)
 100648c:	10800e17 	ldw	r2,56(r2)
 1006490:	10800058 	cmpnei	r2,r2,1
 1006494:	1000151e 	bne	r2,zero,10064ec <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
 1006498:	e0bffb17 	ldw	r2,-20(fp)
 100649c:	e0bff815 	stw	r2,-32(fp)
 10064a0:	00000e06 	br	10064dc <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 10064a4:	e0ffff17 	ldw	r3,-4(fp)
 10064a8:	e0bffc17 	ldw	r2,-16(fp)
 10064ac:	1885883a 	add	r2,r3,r2
 10064b0:	e0fff917 	ldw	r3,-28(fp)
 10064b4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10064b8:	e0fff717 	ldw	r3,-36(fp)
 10064bc:	00800044 	movi	r2,1
 10064c0:	10c4983a 	sll	r2,r2,r3
 10064c4:	e0ffff17 	ldw	r3,-4(fp)
 10064c8:	1887883a 	add	r3,r3,r2
 10064cc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10064d0:	e13ff817 	ldw	r4,-32(fp)
 10064d4:	21000044 	addi	r4,r4,1
 10064d8:	e13ff815 	stw	r4,-32(fp)
 10064dc:	e0bffa17 	ldw	r2,-24(fp)
 10064e0:	e0fff817 	ldw	r3,-32(fp)
 10064e4:	10ffef2e 	bgeu	r2,r3,10064a4 <alt_up_pixel_buffer_dma_draw_vline+0x120>
 10064e8:	00009706 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10064ec:	e0bff217 	ldw	r2,-56(fp)
 10064f0:	10800e17 	ldw	r2,56(r2)
 10064f4:	10800098 	cmpnei	r2,r2,2
 10064f8:	1000181e 	bne	r2,zero,100655c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
 10064fc:	e13ffb17 	ldw	r4,-20(fp)
 1006500:	e13ff815 	stw	r4,-32(fp)
 1006504:	00001106 	br	100654c <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 1006508:	e0fffc17 	ldw	r3,-16(fp)
 100650c:	e0fffc17 	ldw	r3,-16(fp)
 1006510:	18c5883a 	add	r2,r3,r3
 1006514:	1007883a 	mov	r3,r2
 1006518:	e0bfff17 	ldw	r2,-4(fp)
 100651c:	1885883a 	add	r2,r3,r2
 1006520:	e0fff917 	ldw	r3,-28(fp)
 1006524:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 1006528:	e0fff717 	ldw	r3,-36(fp)
 100652c:	00800044 	movi	r2,1
 1006530:	10c4983a 	sll	r2,r2,r3
 1006534:	e13fff17 	ldw	r4,-4(fp)
 1006538:	2089883a 	add	r4,r4,r2
 100653c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1006540:	e0bff817 	ldw	r2,-32(fp)
 1006544:	10800044 	addi	r2,r2,1
 1006548:	e0bff815 	stw	r2,-32(fp)
 100654c:	e0fffa17 	ldw	r3,-24(fp)
 1006550:	e13ff817 	ldw	r4,-32(fp)
 1006554:	193fec2e 	bgeu	r3,r4,1006508 <alt_up_pixel_buffer_dma_draw_vline+0x184>
 1006558:	00007b06 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100655c:	e0bffb17 	ldw	r2,-20(fp)
 1006560:	e0bff815 	stw	r2,-32(fp)
 1006564:	00001206 	br	10065b0 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1006568:	e0fffc17 	ldw	r3,-16(fp)
 100656c:	e0fffc17 	ldw	r3,-16(fp)
 1006570:	18c5883a 	add	r2,r3,r3
 1006574:	1085883a 	add	r2,r2,r2
 1006578:	1007883a 	mov	r3,r2
 100657c:	e0bfff17 	ldw	r2,-4(fp)
 1006580:	1885883a 	add	r2,r3,r2
 1006584:	e0fff917 	ldw	r3,-28(fp)
 1006588:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100658c:	e0fff717 	ldw	r3,-36(fp)
 1006590:	00800044 	movi	r2,1
 1006594:	10c4983a 	sll	r2,r2,r3
 1006598:	e13fff17 	ldw	r4,-4(fp)
 100659c:	2089883a 	add	r4,r4,r2
 10065a0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10065a4:	e0bff817 	ldw	r2,-32(fp)
 10065a8:	10800044 	addi	r2,r2,1
 10065ac:	e0bff815 	stw	r2,-32(fp)
 10065b0:	e0fffa17 	ldw	r3,-24(fp)
 10065b4:	e13ff817 	ldw	r4,-32(fp)
 10065b8:	193feb2e 	bgeu	r3,r4,1006568 <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
 10065bc:	00006206 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10065c0:	e0bff217 	ldw	r2,-56(fp)
 10065c4:	10800e17 	ldw	r2,56(r2)
 10065c8:	10800058 	cmpnei	r2,r2,1
 10065cc:	1000191e 	bne	r2,zero,1006634 <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
 10065d0:	e13ffb17 	ldw	r4,-20(fp)
 10065d4:	e17ffe17 	ldw	r5,-8(fp)
 10065d8:	100307c0 	call	100307c <__mulsi3>
 10065dc:	e0ffff17 	ldw	r3,-4(fp)
 10065e0:	1887883a 	add	r3,r3,r2
 10065e4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10065e8:	e13ffb17 	ldw	r4,-20(fp)
 10065ec:	e13ff615 	stw	r4,-40(fp)
 10065f0:	00000c06 	br	1006624 <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 10065f4:	e0ffff17 	ldw	r3,-4(fp)
 10065f8:	e0bffc17 	ldw	r2,-16(fp)
 10065fc:	1885883a 	add	r2,r3,r2
 1006600:	e0fff917 	ldw	r3,-28(fp)
 1006604:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 1006608:	e0bfff17 	ldw	r2,-4(fp)
 100660c:	e0fffe17 	ldw	r3,-8(fp)
 1006610:	10c5883a 	add	r2,r2,r3
 1006614:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1006618:	e13ff617 	ldw	r4,-40(fp)
 100661c:	21000044 	addi	r4,r4,1
 1006620:	e13ff615 	stw	r4,-40(fp)
 1006624:	e0bffa17 	ldw	r2,-24(fp)
 1006628:	e0fff617 	ldw	r3,-40(fp)
 100662c:	10fff12e 	bgeu	r2,r3,10065f4 <alt_up_pixel_buffer_dma_draw_vline+0x270>
 1006630:	00004506 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1006634:	e0bff217 	ldw	r2,-56(fp)
 1006638:	10800e17 	ldw	r2,56(r2)
 100663c:	10800098 	cmpnei	r2,r2,2
 1006640:	1000201e 	bne	r2,zero,10066c4 <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
 1006644:	e13ffe17 	ldw	r4,-8(fp)
 1006648:	e13ffe17 	ldw	r4,-8(fp)
 100664c:	2105883a 	add	r2,r4,r4
 1006650:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1006654:	e13ffb17 	ldw	r4,-20(fp)
 1006658:	e17ffe17 	ldw	r5,-8(fp)
 100665c:	100307c0 	call	100307c <__mulsi3>
 1006660:	e0ffff17 	ldw	r3,-4(fp)
 1006664:	1887883a 	add	r3,r3,r2
 1006668:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100666c:	e13ffb17 	ldw	r4,-20(fp)
 1006670:	e13ff615 	stw	r4,-40(fp)
 1006674:	00000f06 	br	10066b4 <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 1006678:	e0fffc17 	ldw	r3,-16(fp)
 100667c:	e0fffc17 	ldw	r3,-16(fp)
 1006680:	18c5883a 	add	r2,r3,r3
 1006684:	1007883a 	mov	r3,r2
 1006688:	e0bfff17 	ldw	r2,-4(fp)
 100668c:	1885883a 	add	r2,r3,r2
 1006690:	e0fff917 	ldw	r3,-28(fp)
 1006694:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 1006698:	e13fff17 	ldw	r4,-4(fp)
 100669c:	e0bffe17 	ldw	r2,-8(fp)
 10066a0:	2089883a 	add	r4,r4,r2
 10066a4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10066a8:	e0fff617 	ldw	r3,-40(fp)
 10066ac:	18c00044 	addi	r3,r3,1
 10066b0:	e0fff615 	stw	r3,-40(fp)
 10066b4:	e13ffa17 	ldw	r4,-24(fp)
 10066b8:	e0bff617 	ldw	r2,-40(fp)
 10066bc:	20bfee2e 	bgeu	r4,r2,1006678 <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
 10066c0:	00002106 	br	1006748 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10066c4:	e0fffe17 	ldw	r3,-8(fp)
 10066c8:	e0fffe17 	ldw	r3,-8(fp)
 10066cc:	18c5883a 	add	r2,r3,r3
 10066d0:	1085883a 	add	r2,r2,r2
 10066d4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10066d8:	e13ffb17 	ldw	r4,-20(fp)
 10066dc:	e17ffe17 	ldw	r5,-8(fp)
 10066e0:	100307c0 	call	100307c <__mulsi3>
 10066e4:	e13fff17 	ldw	r4,-4(fp)
 10066e8:	2089883a 	add	r4,r4,r2
 10066ec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10066f0:	e0bffb17 	ldw	r2,-20(fp)
 10066f4:	e0bff615 	stw	r2,-40(fp)
 10066f8:	00001006 	br	100673c <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 10066fc:	e0fffc17 	ldw	r3,-16(fp)
 1006700:	e0fffc17 	ldw	r3,-16(fp)
 1006704:	18c5883a 	add	r2,r3,r3
 1006708:	1085883a 	add	r2,r2,r2
 100670c:	1007883a 	mov	r3,r2
 1006710:	e0bfff17 	ldw	r2,-4(fp)
 1006714:	1885883a 	add	r2,r3,r2
 1006718:	e0fff917 	ldw	r3,-28(fp)
 100671c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 1006720:	e13fff17 	ldw	r4,-4(fp)
 1006724:	e0bffe17 	ldw	r2,-8(fp)
 1006728:	2089883a 	add	r4,r4,r2
 100672c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1006730:	e0fff617 	ldw	r3,-40(fp)
 1006734:	18c00044 	addi	r3,r3,1
 1006738:	e0fff615 	stw	r3,-40(fp)
 100673c:	e13ffa17 	ldw	r4,-24(fp)
 1006740:	e0bff617 	ldw	r2,-40(fp)
 1006744:	20bfed2e 	bgeu	r4,r2,10066fc <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 1006748:	e037883a 	mov	sp,fp
 100674c:	dfc00117 	ldw	ra,4(sp)
 1006750:	df000017 	ldw	fp,0(sp)
 1006754:	dec00204 	addi	sp,sp,8
 1006758:	f800283a 	ret

0100675c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 100675c:	defff804 	addi	sp,sp,-32
 1006760:	dfc00715 	stw	ra,28(sp)
 1006764:	df000615 	stw	fp,24(sp)
 1006768:	df000604 	addi	fp,sp,24
 100676c:	e13ffc15 	stw	r4,-16(fp)
 1006770:	e17ffd15 	stw	r5,-12(fp)
 1006774:	e1bffe15 	stw	r6,-8(fp)
 1006778:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 100677c:	e0800317 	ldw	r2,12(fp)
 1006780:	d8800015 	stw	r2,0(sp)
 1006784:	e0800417 	ldw	r2,16(fp)
 1006788:	d8800115 	stw	r2,4(sp)
 100678c:	e13ffc17 	ldw	r4,-16(fp)
 1006790:	e17ffd17 	ldw	r5,-12(fp)
 1006794:	e1bfff17 	ldw	r6,-4(fp)
 1006798:	e1fffe17 	ldw	r7,-8(fp)
 100679c:	100602c0 	call	100602c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 10067a0:	e0800317 	ldw	r2,12(fp)
 10067a4:	d8800015 	stw	r2,0(sp)
 10067a8:	e0800417 	ldw	r2,16(fp)
 10067ac:	d8800115 	stw	r2,4(sp)
 10067b0:	e13ffc17 	ldw	r4,-16(fp)
 10067b4:	e17ffd17 	ldw	r5,-12(fp)
 10067b8:	e1bfff17 	ldw	r6,-4(fp)
 10067bc:	e1c00217 	ldw	r7,8(fp)
 10067c0:	100602c0 	call	100602c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 10067c4:	e0800317 	ldw	r2,12(fp)
 10067c8:	d8800015 	stw	r2,0(sp)
 10067cc:	e0800417 	ldw	r2,16(fp)
 10067d0:	d8800115 	stw	r2,4(sp)
 10067d4:	e13ffc17 	ldw	r4,-16(fp)
 10067d8:	e17ffd17 	ldw	r5,-12(fp)
 10067dc:	e1bffe17 	ldw	r6,-8(fp)
 10067e0:	e1c00217 	ldw	r7,8(fp)
 10067e4:	10063840 	call	1006384 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 10067e8:	e0800317 	ldw	r2,12(fp)
 10067ec:	d8800015 	stw	r2,0(sp)
 10067f0:	e0800417 	ldw	r2,16(fp)
 10067f4:	d8800115 	stw	r2,4(sp)
 10067f8:	e13ffc17 	ldw	r4,-16(fp)
 10067fc:	e17fff17 	ldw	r5,-4(fp)
 1006800:	e1bffe17 	ldw	r6,-8(fp)
 1006804:	e1c00217 	ldw	r7,8(fp)
 1006808:	10063840 	call	1006384 <alt_up_pixel_buffer_dma_draw_vline>
}
 100680c:	e037883a 	mov	sp,fp
 1006810:	dfc00117 	ldw	ra,4(sp)
 1006814:	df000017 	ldw	fp,0(sp)
 1006818:	dec00204 	addi	sp,sp,8
 100681c:	f800283a 	ret

01006820 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 1006820:	defffa04 	addi	sp,sp,-24
 1006824:	dfc00515 	stw	ra,20(sp)
 1006828:	df000415 	stw	fp,16(sp)
 100682c:	df000404 	addi	fp,sp,16
 1006830:	e13ffc15 	stw	r4,-16(fp)
 1006834:	e17ffd15 	stw	r5,-12(fp)
 1006838:	e1bffe15 	stw	r6,-8(fp)
 100683c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 1006840:	e0c00317 	ldw	r3,12(fp)
 1006844:	1804c03a 	cmpne	r2,r3,zero
 1006848:	10000b1e 	bne	r2,zero,1006878 <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 100684c:	e13ffd17 	ldw	r4,-12(fp)
 1006850:	e17fff17 	ldw	r5,-4(fp)
 1006854:	100307c0 	call	100307c <__mulsi3>
 1006858:	e0fffe17 	ldw	r3,-8(fp)
 100685c:	10c5883a 	add	r2,r2,r3
 1006860:	1007883a 	mov	r3,r2
 1006864:	e0bffc17 	ldw	r2,-16(fp)
 1006868:	1885883a 	add	r2,r3,r2
 100686c:	e0c00217 	ldw	r3,8(fp)
 1006870:	10c00025 	stbio	r3,0(r2)
 1006874:	00001b06 	br	10068e4 <helper_plot_pixel+0xc4>
	else if (mode == 1)
 1006878:	e0c00317 	ldw	r3,12(fp)
 100687c:	18800058 	cmpnei	r2,r3,1
 1006880:	10000c1e 	bne	r2,zero,10068b4 <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 1006884:	e13ffd17 	ldw	r4,-12(fp)
 1006888:	e17fff17 	ldw	r5,-4(fp)
 100688c:	100307c0 	call	100307c <__mulsi3>
 1006890:	e0fffe17 	ldw	r3,-8(fp)
 1006894:	10c5883a 	add	r2,r2,r3
 1006898:	1085883a 	add	r2,r2,r2
 100689c:	1007883a 	mov	r3,r2
 10068a0:	e0bffc17 	ldw	r2,-16(fp)
 10068a4:	1885883a 	add	r2,r3,r2
 10068a8:	e0c00217 	ldw	r3,8(fp)
 10068ac:	10c0002d 	sthio	r3,0(r2)
 10068b0:	00000c06 	br	10068e4 <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 10068b4:	e13ffd17 	ldw	r4,-12(fp)
 10068b8:	e17fff17 	ldw	r5,-4(fp)
 10068bc:	100307c0 	call	100307c <__mulsi3>
 10068c0:	e0fffe17 	ldw	r3,-8(fp)
 10068c4:	10c5883a 	add	r2,r2,r3
 10068c8:	1085883a 	add	r2,r2,r2
 10068cc:	1085883a 	add	r2,r2,r2
 10068d0:	1007883a 	mov	r3,r2
 10068d4:	e0bffc17 	ldw	r2,-16(fp)
 10068d8:	1885883a 	add	r2,r3,r2
 10068dc:	e0c00217 	ldw	r3,8(fp)
 10068e0:	10c00035 	stwio	r3,0(r2)
}
 10068e4:	e037883a 	mov	sp,fp
 10068e8:	dfc00117 	ldw	ra,4(sp)
 10068ec:	df000017 	ldw	fp,0(sp)
 10068f0:	dec00204 	addi	sp,sp,8
 10068f4:	f800283a 	ret

010068f8 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 10068f8:	deffe404 	addi	sp,sp,-112
 10068fc:	dfc01b15 	stw	ra,108(sp)
 1006900:	df001a15 	stw	fp,104(sp)
 1006904:	df001a04 	addi	fp,sp,104
 1006908:	e13fe815 	stw	r4,-96(fp)
 100690c:	e17fe915 	stw	r5,-92(fp)
 1006910:	e1bfea15 	stw	r6,-88(fp)
 1006914:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 1006918:	e0bfe917 	ldw	r2,-92(fp)
 100691c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 1006920:	e0ffea17 	ldw	r3,-88(fp)
 1006924:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 1006928:	e13feb17 	ldw	r4,-84(fp)
 100692c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 1006930:	e0800217 	ldw	r2,8(fp)
 1006934:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 1006938:	e0fff717 	ldw	r3,-36(fp)
 100693c:	e13ff917 	ldw	r4,-28(fp)
 1006940:	1905c83a 	sub	r2,r3,r4
 1006944:	e0bfff15 	stw	r2,-4(fp)
 1006948:	e0ffff17 	ldw	r3,-4(fp)
 100694c:	1804403a 	cmpge	r2,r3,zero
 1006950:	1000031e 	bne	r2,zero,1006960 <alt_up_pixel_buffer_dma_draw_line+0x68>
 1006954:	e13fff17 	ldw	r4,-4(fp)
 1006958:	0109c83a 	sub	r4,zero,r4
 100695c:	e13fff15 	stw	r4,-4(fp)
 1006960:	e0fff817 	ldw	r3,-32(fp)
 1006964:	e13ffa17 	ldw	r4,-24(fp)
 1006968:	1905c83a 	sub	r2,r3,r4
 100696c:	e0bffe15 	stw	r2,-8(fp)
 1006970:	e0fffe17 	ldw	r3,-8(fp)
 1006974:	1804403a 	cmpge	r2,r3,zero
 1006978:	1000031e 	bne	r2,zero,1006988 <alt_up_pixel_buffer_dma_draw_line+0x90>
 100697c:	e13ffe17 	ldw	r4,-8(fp)
 1006980:	0109c83a 	sub	r4,zero,r4
 1006984:	e13ffe15 	stw	r4,-8(fp)
 1006988:	e0fffe17 	ldw	r3,-8(fp)
 100698c:	e13fff17 	ldw	r4,-4(fp)
 1006990:	1904803a 	cmplt	r2,r3,r4
 1006994:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 1006998:	e0bfe817 	ldw	r2,-96(fp)
 100699c:	10800e17 	ldw	r2,56(r2)
 10069a0:	10800060 	cmpeqi	r2,r2,1
 10069a4:	10000c1e 	bne	r2,zero,10069d8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 10069a8:	e0bfe817 	ldw	r2,-96(fp)
 10069ac:	10800e17 	ldw	r2,56(r2)
 10069b0:	10800098 	cmpnei	r2,r2,2
 10069b4:	1000031e 	bne	r2,zero,10069c4 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 10069b8:	00800044 	movi	r2,1
 10069bc:	e0bffc15 	stw	r2,-16(fp)
 10069c0:	00000206 	br	10069cc <alt_up_pixel_buffer_dma_draw_line+0xd4>
 10069c4:	00c00084 	movi	r3,2
 10069c8:	e0fffc15 	stw	r3,-16(fp)
 10069cc:	e13ffc17 	ldw	r4,-16(fp)
 10069d0:	e13ffd15 	stw	r4,-12(fp)
 10069d4:	00000106 	br	10069dc <alt_up_pixel_buffer_dma_draw_line+0xe4>
 10069d8:	e03ffd15 	stw	zero,-12(fp)
 10069dc:	e0bffd17 	ldw	r2,-12(fp)
 10069e0:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 10069e4:	e0c00317 	ldw	r3,12(fp)
 10069e8:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 10069ec:	e0bfe817 	ldw	r2,-96(fp)
 10069f0:	10800d17 	ldw	r2,52(r2)
 10069f4:	1004c03a 	cmpne	r2,r2,zero
 10069f8:	1000091e 	bne	r2,zero,1006a20 <alt_up_pixel_buffer_dma_draw_line+0x128>
 10069fc:	e0bfe817 	ldw	r2,-96(fp)
 1006a00:	10c01317 	ldw	r3,76(r2)
 1006a04:	e0bfef17 	ldw	r2,-68(fp)
 1006a08:	1885c83a 	sub	r2,r3,r2
 1006a0c:	1007883a 	mov	r3,r2
 1006a10:	00800044 	movi	r2,1
 1006a14:	10c4983a 	sll	r2,r2,r3
 1006a18:	e0bffb15 	stw	r2,-20(fp)
 1006a1c:	00000306 	br	1006a2c <alt_up_pixel_buffer_dma_draw_line+0x134>
 1006a20:	e0bfe817 	ldw	r2,-96(fp)
 1006a24:	10800f17 	ldw	r2,60(r2)
 1006a28:	e0bffb15 	stw	r2,-20(fp)
 1006a2c:	e13ffb17 	ldw	r4,-20(fp)
 1006a30:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 1006a34:	e0800417 	ldw	r2,16(fp)
 1006a38:	10800058 	cmpnei	r2,r2,1
 1006a3c:	1000041e 	bne	r2,zero,1006a50 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 1006a40:	e0bfe817 	ldw	r2,-96(fp)
 1006a44:	10800c17 	ldw	r2,48(r2)
 1006a48:	e0bfed15 	stw	r2,-76(fp)
 1006a4c:	00000306 	br	1006a5c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 1006a50:	e0bfe817 	ldw	r2,-96(fp)
 1006a54:	10800b17 	ldw	r2,44(r2)
 1006a58:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 1006a5c:	e0fff603 	ldbu	r3,-40(fp)
 1006a60:	18803fcc 	andi	r2,r3,255
 1006a64:	1080201c 	xori	r2,r2,128
 1006a68:	10bfe004 	addi	r2,r2,-128
 1006a6c:	10800050 	cmplti	r2,r2,1
 1006a70:	10000c1e 	bne	r2,zero,1006aa4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 1006a74:	e13ffa17 	ldw	r4,-24(fp)
 1006a78:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 1006a7c:	e0bff917 	ldw	r2,-28(fp)
 1006a80:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 1006a84:	e0fff317 	ldw	r3,-52(fp)
 1006a88:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 1006a8c:	e13ff817 	ldw	r4,-32(fp)
 1006a90:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 1006a94:	e0bff717 	ldw	r2,-36(fp)
 1006a98:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 1006a9c:	e0fff317 	ldw	r3,-52(fp)
 1006aa0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 1006aa4:	e13ff817 	ldw	r4,-32(fp)
 1006aa8:	e0bffa17 	ldw	r2,-24(fp)
 1006aac:	20800c0e 	bge	r4,r2,1006ae0 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 1006ab0:	e0fffa17 	ldw	r3,-24(fp)
 1006ab4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 1006ab8:	e13ff817 	ldw	r4,-32(fp)
 1006abc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 1006ac0:	e0bff317 	ldw	r2,-52(fp)
 1006ac4:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 1006ac8:	e0fff917 	ldw	r3,-28(fp)
 1006acc:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 1006ad0:	e13ff717 	ldw	r4,-36(fp)
 1006ad4:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 1006ad8:	e0bff317 	ldw	r2,-52(fp)
 1006adc:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 1006ae0:	e0fff817 	ldw	r3,-32(fp)
 1006ae4:	e13ffa17 	ldw	r4,-24(fp)
 1006ae8:	1907c83a 	sub	r3,r3,r4
 1006aec:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 1006af0:	e0fff717 	ldw	r3,-36(fp)
 1006af4:	e13ff917 	ldw	r4,-28(fp)
 1006af8:	1905c83a 	sub	r2,r3,r4
 1006afc:	e0bff415 	stw	r2,-48(fp)
 1006b00:	e0fff417 	ldw	r3,-48(fp)
 1006b04:	1804403a 	cmpge	r2,r3,zero
 1006b08:	1000031e 	bne	r2,zero,1006b18 <alt_up_pixel_buffer_dma_draw_line+0x220>
 1006b0c:	e13ff417 	ldw	r4,-48(fp)
 1006b10:	0109c83a 	sub	r4,zero,r4
 1006b14:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 1006b18:	e0fff517 	ldw	r3,-44(fp)
 1006b1c:	1804d7fa 	srli	r2,r3,31
 1006b20:	e13ff517 	ldw	r4,-44(fp)
 1006b24:	1105883a 	add	r2,r2,r4
 1006b28:	1005d07a 	srai	r2,r2,1
 1006b2c:	0085c83a 	sub	r2,zero,r2
 1006b30:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 1006b34:	e0bff917 	ldw	r2,-28(fp)
 1006b38:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 1006b3c:	e0fff917 	ldw	r3,-28(fp)
 1006b40:	e13ff717 	ldw	r4,-36(fp)
 1006b44:	1900030e 	bge	r3,r4,1006b54 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 1006b48:	00800044 	movi	r2,1
 1006b4c:	e0bff215 	stw	r2,-56(fp)
 1006b50:	00000206 	br	1006b5c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 1006b54:	00ffffc4 	movi	r3,-1
 1006b58:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 1006b5c:	e13ff603 	ldbu	r4,-40(fp)
 1006b60:	20803fcc 	andi	r2,r4,255
 1006b64:	1080201c 	xori	r2,r2,128
 1006b68:	10bfe004 	addi	r2,r2,-128
 1006b6c:	10800058 	cmpnei	r2,r2,1
 1006b70:	1000221e 	bne	r2,zero,1006bfc <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 1006b74:	e0bffa17 	ldw	r2,-24(fp)
 1006b78:	e0bff115 	stw	r2,-60(fp)
 1006b7c:	00001b06 	br	1006bec <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 1006b80:	e0ffee17 	ldw	r3,-72(fp)
 1006b84:	d8c00015 	stw	r3,0(sp)
 1006b88:	e13fef17 	ldw	r4,-68(fp)
 1006b8c:	d9000115 	stw	r4,4(sp)
 1006b90:	e13fed17 	ldw	r4,-76(fp)
 1006b94:	e17fec17 	ldw	r5,-80(fp)
 1006b98:	e1bff017 	ldw	r6,-64(fp)
 1006b9c:	e1fff117 	ldw	r7,-60(fp)
 1006ba0:	10068200 	call	1006820 <helper_plot_pixel>
			error = error + deltay;
 1006ba4:	e0bff317 	ldw	r2,-52(fp)
 1006ba8:	e0fff417 	ldw	r3,-48(fp)
 1006bac:	10c5883a 	add	r2,r2,r3
 1006bb0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 1006bb4:	e13ff317 	ldw	r4,-52(fp)
 1006bb8:	20800050 	cmplti	r2,r4,1
 1006bbc:	1000081e 	bne	r2,zero,1006be0 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 1006bc0:	e0bff017 	ldw	r2,-64(fp)
 1006bc4:	e0fff217 	ldw	r3,-56(fp)
 1006bc8:	10c5883a 	add	r2,r2,r3
 1006bcc:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 1006bd0:	e13ff317 	ldw	r4,-52(fp)
 1006bd4:	e0bff517 	ldw	r2,-44(fp)
 1006bd8:	2089c83a 	sub	r4,r4,r2
 1006bdc:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1006be0:	e0fff117 	ldw	r3,-60(fp)
 1006be4:	18c00044 	addi	r3,r3,1
 1006be8:	e0fff115 	stw	r3,-60(fp)
 1006bec:	e13ff817 	ldw	r4,-32(fp)
 1006bf0:	e0bff117 	ldw	r2,-60(fp)
 1006bf4:	20bfe20e 	bge	r4,r2,1006b80 <alt_up_pixel_buffer_dma_draw_line+0x288>
 1006bf8:	00002106 	br	1006c80 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1006bfc:	e0fffa17 	ldw	r3,-24(fp)
 1006c00:	e0fff115 	stw	r3,-60(fp)
 1006c04:	00001b06 	br	1006c74 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1006c08:	e13fee17 	ldw	r4,-72(fp)
 1006c0c:	d9000015 	stw	r4,0(sp)
 1006c10:	e0bfef17 	ldw	r2,-68(fp)
 1006c14:	d8800115 	stw	r2,4(sp)
 1006c18:	e13fed17 	ldw	r4,-76(fp)
 1006c1c:	e17fec17 	ldw	r5,-80(fp)
 1006c20:	e1bff117 	ldw	r6,-60(fp)
 1006c24:	e1fff017 	ldw	r7,-64(fp)
 1006c28:	10068200 	call	1006820 <helper_plot_pixel>
			error = error + deltay;
 1006c2c:	e0fff317 	ldw	r3,-52(fp)
 1006c30:	e13ff417 	ldw	r4,-48(fp)
 1006c34:	1907883a 	add	r3,r3,r4
 1006c38:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1006c3c:	e0fff317 	ldw	r3,-52(fp)
 1006c40:	18800050 	cmplti	r2,r3,1
 1006c44:	1000081e 	bne	r2,zero,1006c68 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1006c48:	e13ff017 	ldw	r4,-64(fp)
 1006c4c:	e0bff217 	ldw	r2,-56(fp)
 1006c50:	2089883a 	add	r4,r4,r2
 1006c54:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1006c58:	e0fff317 	ldw	r3,-52(fp)
 1006c5c:	e13ff517 	ldw	r4,-44(fp)
 1006c60:	1907c83a 	sub	r3,r3,r4
 1006c64:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1006c68:	e0bff117 	ldw	r2,-60(fp)
 1006c6c:	10800044 	addi	r2,r2,1
 1006c70:	e0bff115 	stw	r2,-60(fp)
 1006c74:	e0fff817 	ldw	r3,-32(fp)
 1006c78:	e13ff117 	ldw	r4,-60(fp)
 1006c7c:	193fe20e 	bge	r3,r4,1006c08 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1006c80:	e037883a 	mov	sp,fp
 1006c84:	dfc00117 	ldw	ra,4(sp)
 1006c88:	df000017 	ldw	fp,0(sp)
 1006c8c:	dec00204 	addi	sp,sp,8
 1006c90:	f800283a 	ret

01006c94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1006c94:	defff404 	addi	sp,sp,-48
 1006c98:	df000b15 	stw	fp,44(sp)
 1006c9c:	df000b04 	addi	fp,sp,44
 1006ca0:	e13ffb15 	stw	r4,-20(fp)
 1006ca4:	e17ffc15 	stw	r5,-16(fp)
 1006ca8:	e1bffd15 	stw	r6,-12(fp)
 1006cac:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1006cb0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1006cb4:	00804074 	movhi	r2,257
 1006cb8:	10af4d04 	addi	r2,r2,-17100
 1006cbc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1006cc0:	1005003a 	cmpeq	r2,r2,zero
 1006cc4:	1000411e 	bne	r2,zero,1006dcc <alt_alarm_start+0x138>
  {
    if (alarm)
 1006cc8:	e0bffb17 	ldw	r2,-20(fp)
 1006ccc:	1005003a 	cmpeq	r2,r2,zero
 1006cd0:	10003b1e 	bne	r2,zero,1006dc0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1006cd4:	e0fffb17 	ldw	r3,-20(fp)
 1006cd8:	e0bffd17 	ldw	r2,-12(fp)
 1006cdc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1006ce0:	e0fffb17 	ldw	r3,-20(fp)
 1006ce4:	e0bffe17 	ldw	r2,-8(fp)
 1006ce8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006cec:	0005303a 	rdctl	r2,status
 1006cf0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006cf4:	e0fff817 	ldw	r3,-32(fp)
 1006cf8:	00bfff84 	movi	r2,-2
 1006cfc:	1884703a 	and	r2,r3,r2
 1006d00:	1001703a 	wrctl	status,r2
  
  return context;
 1006d04:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1006d08:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1006d0c:	00804074 	movhi	r2,257
 1006d10:	10af4e04 	addi	r2,r2,-17096
 1006d14:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1006d18:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1006d1c:	e0fffc17 	ldw	r3,-16(fp)
 1006d20:	e0bff917 	ldw	r2,-28(fp)
 1006d24:	1885883a 	add	r2,r3,r2
 1006d28:	10c00044 	addi	r3,r2,1
 1006d2c:	e0bffb17 	ldw	r2,-20(fp)
 1006d30:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1006d34:	e0bffb17 	ldw	r2,-20(fp)
 1006d38:	10c00217 	ldw	r3,8(r2)
 1006d3c:	e0bff917 	ldw	r2,-28(fp)
 1006d40:	1880042e 	bgeu	r3,r2,1006d54 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1006d44:	e0fffb17 	ldw	r3,-20(fp)
 1006d48:	00800044 	movi	r2,1
 1006d4c:	18800405 	stb	r2,16(r3)
 1006d50:	00000206 	br	1006d5c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1006d54:	e0bffb17 	ldw	r2,-20(fp)
 1006d58:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1006d5c:	e0fffb17 	ldw	r3,-20(fp)
 1006d60:	00804074 	movhi	r2,257
 1006d64:	10a87b04 	addi	r2,r2,-24084
 1006d68:	e0bff615 	stw	r2,-40(fp)
 1006d6c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006d70:	e0fff717 	ldw	r3,-36(fp)
 1006d74:	e0bff617 	ldw	r2,-40(fp)
 1006d78:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1006d7c:	e0bff617 	ldw	r2,-40(fp)
 1006d80:	10c00017 	ldw	r3,0(r2)
 1006d84:	e0bff717 	ldw	r2,-36(fp)
 1006d88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1006d8c:	e0bff617 	ldw	r2,-40(fp)
 1006d90:	10c00017 	ldw	r3,0(r2)
 1006d94:	e0bff717 	ldw	r2,-36(fp)
 1006d98:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1006d9c:	e0fff617 	ldw	r3,-40(fp)
 1006da0:	e0bff717 	ldw	r2,-36(fp)
 1006da4:	18800015 	stw	r2,0(r3)
 1006da8:	e0bffa17 	ldw	r2,-24(fp)
 1006dac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006db0:	e0bff517 	ldw	r2,-44(fp)
 1006db4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1006db8:	e03fff15 	stw	zero,-4(fp)
 1006dbc:	00000506 	br	1006dd4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1006dc0:	00bffa84 	movi	r2,-22
 1006dc4:	e0bfff15 	stw	r2,-4(fp)
 1006dc8:	00000206 	br	1006dd4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1006dcc:	00bfde84 	movi	r2,-134
 1006dd0:	e0bfff15 	stw	r2,-4(fp)
 1006dd4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1006dd8:	e037883a 	mov	sp,fp
 1006ddc:	df000017 	ldw	fp,0(sp)
 1006de0:	dec00104 	addi	sp,sp,4
 1006de4:	f800283a 	ret

01006de8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1006de8:	deffff04 	addi	sp,sp,-4
 1006dec:	df000015 	stw	fp,0(sp)
 1006df0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1006df4:	e037883a 	mov	sp,fp
 1006df8:	df000017 	ldw	fp,0(sp)
 1006dfc:	dec00104 	addi	sp,sp,4
 1006e00:	f800283a 	ret

01006e04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1006e04:	defff904 	addi	sp,sp,-28
 1006e08:	dfc00615 	stw	ra,24(sp)
 1006e0c:	df000515 	stw	fp,20(sp)
 1006e10:	df000504 	addi	fp,sp,20
 1006e14:	e13ffd15 	stw	r4,-12(fp)
 1006e18:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1006e1c:	e0bffd17 	ldw	r2,-12(fp)
 1006e20:	1005003a 	cmpeq	r2,r2,zero
 1006e24:	1000041e 	bne	r2,zero,1006e38 <alt_dev_llist_insert+0x34>
 1006e28:	e0bffd17 	ldw	r2,-12(fp)
 1006e2c:	10800217 	ldw	r2,8(r2)
 1006e30:	1004c03a 	cmpne	r2,r2,zero
 1006e34:	1000071e 	bne	r2,zero,1006e54 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1006e38:	1006eb80 	call	1006eb8 <alt_get_errno>
 1006e3c:	1007883a 	mov	r3,r2
 1006e40:	00800584 	movi	r2,22
 1006e44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1006e48:	00bffa84 	movi	r2,-22
 1006e4c:	e0bfff15 	stw	r2,-4(fp)
 1006e50:	00001306 	br	1006ea0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1006e54:	e0fffd17 	ldw	r3,-12(fp)
 1006e58:	e0bffe17 	ldw	r2,-8(fp)
 1006e5c:	e0bffb15 	stw	r2,-20(fp)
 1006e60:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006e64:	e0fffc17 	ldw	r3,-16(fp)
 1006e68:	e0bffb17 	ldw	r2,-20(fp)
 1006e6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1006e70:	e0bffb17 	ldw	r2,-20(fp)
 1006e74:	10c00017 	ldw	r3,0(r2)
 1006e78:	e0bffc17 	ldw	r2,-16(fp)
 1006e7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1006e80:	e0bffb17 	ldw	r2,-20(fp)
 1006e84:	10c00017 	ldw	r3,0(r2)
 1006e88:	e0bffc17 	ldw	r2,-16(fp)
 1006e8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1006e90:	e0fffb17 	ldw	r3,-20(fp)
 1006e94:	e0bffc17 	ldw	r2,-16(fp)
 1006e98:	18800015 	stw	r2,0(r3)

  return 0;  
 1006e9c:	e03fff15 	stw	zero,-4(fp)
 1006ea0:	e0bfff17 	ldw	r2,-4(fp)
}
 1006ea4:	e037883a 	mov	sp,fp
 1006ea8:	dfc00117 	ldw	ra,4(sp)
 1006eac:	df000017 	ldw	fp,0(sp)
 1006eb0:	dec00204 	addi	sp,sp,8
 1006eb4:	f800283a 	ret

01006eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1006eb8:	defffd04 	addi	sp,sp,-12
 1006ebc:	dfc00215 	stw	ra,8(sp)
 1006ec0:	df000115 	stw	fp,4(sp)
 1006ec4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1006ec8:	00804074 	movhi	r2,257
 1006ecc:	10a87904 	addi	r2,r2,-24092
 1006ed0:	10800017 	ldw	r2,0(r2)
 1006ed4:	1005003a 	cmpeq	r2,r2,zero
 1006ed8:	1000061e 	bne	r2,zero,1006ef4 <alt_get_errno+0x3c>
 1006edc:	00804074 	movhi	r2,257
 1006ee0:	10a87904 	addi	r2,r2,-24092
 1006ee4:	10800017 	ldw	r2,0(r2)
 1006ee8:	103ee83a 	callr	r2
 1006eec:	e0bfff15 	stw	r2,-4(fp)
 1006ef0:	00000306 	br	1006f00 <alt_get_errno+0x48>
 1006ef4:	00804074 	movhi	r2,257
 1006ef8:	10af4204 	addi	r2,r2,-17144
 1006efc:	e0bfff15 	stw	r2,-4(fp)
 1006f00:	e0bfff17 	ldw	r2,-4(fp)
}
 1006f04:	e037883a 	mov	sp,fp
 1006f08:	dfc00117 	ldw	ra,4(sp)
 1006f0c:	df000017 	ldw	fp,0(sp)
 1006f10:	dec00204 	addi	sp,sp,8
 1006f14:	f800283a 	ret

01006f18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1006f18:	defffd04 	addi	sp,sp,-12
 1006f1c:	dfc00215 	stw	ra,8(sp)
 1006f20:	df000115 	stw	fp,4(sp)
 1006f24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1006f28:	00bfff04 	movi	r2,-4
 1006f2c:	00c04074 	movhi	r3,257
 1006f30:	18e13204 	addi	r3,r3,-31544
 1006f34:	1885883a 	add	r2,r3,r2
 1006f38:	e0bfff15 	stw	r2,-4(fp)
 1006f3c:	00000606 	br	1006f58 <_do_ctors+0x40>
        (*ctor) (); 
 1006f40:	e0bfff17 	ldw	r2,-4(fp)
 1006f44:	10800017 	ldw	r2,0(r2)
 1006f48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1006f4c:	e0bfff17 	ldw	r2,-4(fp)
 1006f50:	10bfff04 	addi	r2,r2,-4
 1006f54:	e0bfff15 	stw	r2,-4(fp)
 1006f58:	e0ffff17 	ldw	r3,-4(fp)
 1006f5c:	00804074 	movhi	r2,257
 1006f60:	10a13104 	addi	r2,r2,-31548
 1006f64:	18bff62e 	bgeu	r3,r2,1006f40 <_do_ctors+0x28>
        (*ctor) (); 
}
 1006f68:	e037883a 	mov	sp,fp
 1006f6c:	dfc00117 	ldw	ra,4(sp)
 1006f70:	df000017 	ldw	fp,0(sp)
 1006f74:	dec00204 	addi	sp,sp,8
 1006f78:	f800283a 	ret

01006f7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1006f7c:	defffd04 	addi	sp,sp,-12
 1006f80:	dfc00215 	stw	ra,8(sp)
 1006f84:	df000115 	stw	fp,4(sp)
 1006f88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006f8c:	00bfff04 	movi	r2,-4
 1006f90:	00c04074 	movhi	r3,257
 1006f94:	18e13204 	addi	r3,r3,-31544
 1006f98:	1885883a 	add	r2,r3,r2
 1006f9c:	e0bfff15 	stw	r2,-4(fp)
 1006fa0:	00000606 	br	1006fbc <_do_dtors+0x40>
        (*dtor) (); 
 1006fa4:	e0bfff17 	ldw	r2,-4(fp)
 1006fa8:	10800017 	ldw	r2,0(r2)
 1006fac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006fb0:	e0bfff17 	ldw	r2,-4(fp)
 1006fb4:	10bfff04 	addi	r2,r2,-4
 1006fb8:	e0bfff15 	stw	r2,-4(fp)
 1006fbc:	e0ffff17 	ldw	r3,-4(fp)
 1006fc0:	00804074 	movhi	r2,257
 1006fc4:	10a13204 	addi	r2,r2,-31544
 1006fc8:	18bff62e 	bgeu	r3,r2,1006fa4 <_do_dtors+0x28>
        (*dtor) (); 
}
 1006fcc:	e037883a 	mov	sp,fp
 1006fd0:	dfc00117 	ldw	ra,4(sp)
 1006fd4:	df000017 	ldw	fp,0(sp)
 1006fd8:	dec00204 	addi	sp,sp,8
 1006fdc:	f800283a 	ret

01006fe0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1006fe0:	defff904 	addi	sp,sp,-28
 1006fe4:	dfc00615 	stw	ra,24(sp)
 1006fe8:	df000515 	stw	fp,20(sp)
 1006fec:	df000504 	addi	fp,sp,20
 1006ff0:	e13ffd15 	stw	r4,-12(fp)
 1006ff4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1006ff8:	e0bffe17 	ldw	r2,-8(fp)
 1006ffc:	10800017 	ldw	r2,0(r2)
 1007000:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1007004:	e13ffd17 	ldw	r4,-12(fp)
 1007008:	10005f80 	call	10005f8 <strlen>
 100700c:	10800044 	addi	r2,r2,1
 1007010:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1007014:	00000d06 	br	100704c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1007018:	e0bffc17 	ldw	r2,-16(fp)
 100701c:	11000217 	ldw	r4,8(r2)
 1007020:	e1bffb17 	ldw	r6,-20(fp)
 1007024:	e17ffd17 	ldw	r5,-12(fp)
 1007028:	10079ec0 	call	10079ec <memcmp>
 100702c:	1004c03a 	cmpne	r2,r2,zero
 1007030:	1000031e 	bne	r2,zero,1007040 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1007034:	e0bffc17 	ldw	r2,-16(fp)
 1007038:	e0bfff15 	stw	r2,-4(fp)
 100703c:	00000706 	br	100705c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1007040:	e0bffc17 	ldw	r2,-16(fp)
 1007044:	10800017 	ldw	r2,0(r2)
 1007048:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100704c:	e0fffe17 	ldw	r3,-8(fp)
 1007050:	e0bffc17 	ldw	r2,-16(fp)
 1007054:	10fff01e 	bne	r2,r3,1007018 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1007058:	e03fff15 	stw	zero,-4(fp)
 100705c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007060:	e037883a 	mov	sp,fp
 1007064:	dfc00117 	ldw	ra,4(sp)
 1007068:	df000017 	ldw	fp,0(sp)
 100706c:	dec00204 	addi	sp,sp,8
 1007070:	f800283a 	ret

01007074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1007074:	deffff04 	addi	sp,sp,-4
 1007078:	df000015 	stw	fp,0(sp)
 100707c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1007080:	e037883a 	mov	sp,fp
 1007084:	df000017 	ldw	fp,0(sp)
 1007088:	dec00104 	addi	sp,sp,4
 100708c:	f800283a 	ret

01007090 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1007090:	defff904 	addi	sp,sp,-28
 1007094:	dfc00615 	stw	ra,24(sp)
 1007098:	df000515 	stw	fp,20(sp)
 100709c:	df000504 	addi	fp,sp,20
 10070a0:	e13ffc15 	stw	r4,-16(fp)
 10070a4:	e17ffd15 	stw	r5,-12(fp)
 10070a8:	e1bffe15 	stw	r6,-8(fp)
 10070ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 10070b0:	e0800217 	ldw	r2,8(fp)
 10070b4:	d8800015 	stw	r2,0(sp)
 10070b8:	e13ffc17 	ldw	r4,-16(fp)
 10070bc:	e17ffd17 	ldw	r5,-12(fp)
 10070c0:	e1bffe17 	ldw	r6,-8(fp)
 10070c4:	e1ffff17 	ldw	r7,-4(fp)
 10070c8:	10072640 	call	1007264 <alt_iic_isr_register>
}  
 10070cc:	e037883a 	mov	sp,fp
 10070d0:	dfc00117 	ldw	ra,4(sp)
 10070d4:	df000017 	ldw	fp,0(sp)
 10070d8:	dec00204 	addi	sp,sp,8
 10070dc:	f800283a 	ret

010070e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10070e0:	defff904 	addi	sp,sp,-28
 10070e4:	df000615 	stw	fp,24(sp)
 10070e8:	df000604 	addi	fp,sp,24
 10070ec:	e13ffe15 	stw	r4,-8(fp)
 10070f0:	e17fff15 	stw	r5,-4(fp)
 10070f4:	e0bfff17 	ldw	r2,-4(fp)
 10070f8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10070fc:	0005303a 	rdctl	r2,status
 1007100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007104:	e0fffb17 	ldw	r3,-20(fp)
 1007108:	00bfff84 	movi	r2,-2
 100710c:	1884703a 	and	r2,r3,r2
 1007110:	1001703a 	wrctl	status,r2
  
  return context;
 1007114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1007118:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 100711c:	e0fffc17 	ldw	r3,-16(fp)
 1007120:	00800044 	movi	r2,1
 1007124:	10c4983a 	sll	r2,r2,r3
 1007128:	1007883a 	mov	r3,r2
 100712c:	00804074 	movhi	r2,257
 1007130:	10af4f04 	addi	r2,r2,-17092
 1007134:	10800017 	ldw	r2,0(r2)
 1007138:	1886b03a 	or	r3,r3,r2
 100713c:	00804074 	movhi	r2,257
 1007140:	10af4f04 	addi	r2,r2,-17092
 1007144:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1007148:	00804074 	movhi	r2,257
 100714c:	10af4f04 	addi	r2,r2,-17092
 1007150:	10800017 	ldw	r2,0(r2)
 1007154:	100170fa 	wrctl	ienable,r2
 1007158:	e0bffd17 	ldw	r2,-12(fp)
 100715c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007160:	e0bffa17 	ldw	r2,-24(fp)
 1007164:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1007168:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100716c:	e037883a 	mov	sp,fp
 1007170:	df000017 	ldw	fp,0(sp)
 1007174:	dec00104 	addi	sp,sp,4
 1007178:	f800283a 	ret

0100717c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100717c:	defff904 	addi	sp,sp,-28
 1007180:	df000615 	stw	fp,24(sp)
 1007184:	df000604 	addi	fp,sp,24
 1007188:	e13ffe15 	stw	r4,-8(fp)
 100718c:	e17fff15 	stw	r5,-4(fp)
 1007190:	e0bfff17 	ldw	r2,-4(fp)
 1007194:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007198:	0005303a 	rdctl	r2,status
 100719c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10071a0:	e0fffb17 	ldw	r3,-20(fp)
 10071a4:	00bfff84 	movi	r2,-2
 10071a8:	1884703a 	and	r2,r3,r2
 10071ac:	1001703a 	wrctl	status,r2
  
  return context;
 10071b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10071b4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 10071b8:	e0fffc17 	ldw	r3,-16(fp)
 10071bc:	00800044 	movi	r2,1
 10071c0:	10c4983a 	sll	r2,r2,r3
 10071c4:	0084303a 	nor	r2,zero,r2
 10071c8:	1007883a 	mov	r3,r2
 10071cc:	00804074 	movhi	r2,257
 10071d0:	10af4f04 	addi	r2,r2,-17092
 10071d4:	10800017 	ldw	r2,0(r2)
 10071d8:	1886703a 	and	r3,r3,r2
 10071dc:	00804074 	movhi	r2,257
 10071e0:	10af4f04 	addi	r2,r2,-17092
 10071e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10071e8:	00804074 	movhi	r2,257
 10071ec:	10af4f04 	addi	r2,r2,-17092
 10071f0:	10800017 	ldw	r2,0(r2)
 10071f4:	100170fa 	wrctl	ienable,r2
 10071f8:	e0bffd17 	ldw	r2,-12(fp)
 10071fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007200:	e0bffa17 	ldw	r2,-24(fp)
 1007204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1007208:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100720c:	e037883a 	mov	sp,fp
 1007210:	df000017 	ldw	fp,0(sp)
 1007214:	dec00104 	addi	sp,sp,4
 1007218:	f800283a 	ret

0100721c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100721c:	defffc04 	addi	sp,sp,-16
 1007220:	df000315 	stw	fp,12(sp)
 1007224:	df000304 	addi	fp,sp,12
 1007228:	e13ffe15 	stw	r4,-8(fp)
 100722c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1007230:	000530fa 	rdctl	r2,ienable
 1007234:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1007238:	e0ffff17 	ldw	r3,-4(fp)
 100723c:	00800044 	movi	r2,1
 1007240:	10c4983a 	sll	r2,r2,r3
 1007244:	1007883a 	mov	r3,r2
 1007248:	e0bffd17 	ldw	r2,-12(fp)
 100724c:	1884703a 	and	r2,r3,r2
 1007250:	1004c03a 	cmpne	r2,r2,zero
}
 1007254:	e037883a 	mov	sp,fp
 1007258:	df000017 	ldw	fp,0(sp)
 100725c:	dec00104 	addi	sp,sp,4
 1007260:	f800283a 	ret

01007264 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1007264:	defff404 	addi	sp,sp,-48
 1007268:	dfc00b15 	stw	ra,44(sp)
 100726c:	df000a15 	stw	fp,40(sp)
 1007270:	df000a04 	addi	fp,sp,40
 1007274:	e13ffb15 	stw	r4,-20(fp)
 1007278:	e17ffc15 	stw	r5,-16(fp)
 100727c:	e1bffd15 	stw	r6,-12(fp)
 1007280:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1007284:	00bffa84 	movi	r2,-22
 1007288:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100728c:	e0bffc17 	ldw	r2,-16(fp)
 1007290:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1007294:	e0bff917 	ldw	r2,-28(fp)
 1007298:	10800808 	cmpgei	r2,r2,32
 100729c:	1000291e 	bne	r2,zero,1007344 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10072a0:	0005303a 	rdctl	r2,status
 10072a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10072a8:	e0fff717 	ldw	r3,-36(fp)
 10072ac:	00bfff84 	movi	r2,-2
 10072b0:	1884703a 	and	r2,r3,r2
 10072b4:	1001703a 	wrctl	status,r2
  
  return context;
 10072b8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 10072bc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 10072c0:	e0bff917 	ldw	r2,-28(fp)
 10072c4:	00c04074 	movhi	r3,257
 10072c8:	18ef5a04 	addi	r3,r3,-17048
 10072cc:	100490fa 	slli	r2,r2,3
 10072d0:	10c7883a 	add	r3,r2,r3
 10072d4:	e0bffd17 	ldw	r2,-12(fp)
 10072d8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10072dc:	e0bff917 	ldw	r2,-28(fp)
 10072e0:	00c04074 	movhi	r3,257
 10072e4:	18ef5a04 	addi	r3,r3,-17048
 10072e8:	100490fa 	slli	r2,r2,3
 10072ec:	10c5883a 	add	r2,r2,r3
 10072f0:	10c00104 	addi	r3,r2,4
 10072f4:	e0bffe17 	ldw	r2,-8(fp)
 10072f8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10072fc:	e0bffd17 	ldw	r2,-12(fp)
 1007300:	1005003a 	cmpeq	r2,r2,zero
 1007304:	1000051e 	bne	r2,zero,100731c <alt_iic_isr_register+0xb8>
 1007308:	e17ff917 	ldw	r5,-28(fp)
 100730c:	e13ffb17 	ldw	r4,-20(fp)
 1007310:	10070e00 	call	10070e0 <alt_ic_irq_enable>
 1007314:	e0bfff15 	stw	r2,-4(fp)
 1007318:	00000406 	br	100732c <alt_iic_isr_register+0xc8>
 100731c:	e17ff917 	ldw	r5,-28(fp)
 1007320:	e13ffb17 	ldw	r4,-20(fp)
 1007324:	100717c0 	call	100717c <alt_ic_irq_disable>
 1007328:	e0bfff15 	stw	r2,-4(fp)
 100732c:	e0bfff17 	ldw	r2,-4(fp)
 1007330:	e0bffa15 	stw	r2,-24(fp)
 1007334:	e0bff817 	ldw	r2,-32(fp)
 1007338:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100733c:	e0bff617 	ldw	r2,-40(fp)
 1007340:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1007344:	e0bffa17 	ldw	r2,-24(fp)
}
 1007348:	e037883a 	mov	sp,fp
 100734c:	dfc00117 	ldw	ra,4(sp)
 1007350:	df000017 	ldw	fp,0(sp)
 1007354:	dec00204 	addi	sp,sp,8
 1007358:	f800283a 	ret

0100735c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100735c:	defff804 	addi	sp,sp,-32
 1007360:	dfc00715 	stw	ra,28(sp)
 1007364:	df000615 	stw	fp,24(sp)
 1007368:	dc000515 	stw	r16,20(sp)
 100736c:	df000504 	addi	fp,sp,20
 1007370:	e13ffc15 	stw	r4,-16(fp)
 1007374:	e17ffd15 	stw	r5,-12(fp)
 1007378:	e1bffe15 	stw	r6,-8(fp)
 100737c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1007380:	e13ffd17 	ldw	r4,-12(fp)
 1007384:	e17ffe17 	ldw	r5,-8(fp)
 1007388:	e1bfff17 	ldw	r6,-4(fp)
 100738c:	10075a40 	call	10075a4 <open>
 1007390:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1007394:	e0bffb17 	ldw	r2,-20(fp)
 1007398:	1004803a 	cmplt	r2,r2,zero
 100739c:	10001f1e 	bne	r2,zero,100741c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10073a0:	e13ffb17 	ldw	r4,-20(fp)
 10073a4:	04004074 	movhi	r16,257
 10073a8:	8423c604 	addi	r16,r16,-28904
 10073ac:	01400304 	movi	r5,12
 10073b0:	100307c0 	call	100307c <__mulsi3>
 10073b4:	1405883a 	add	r2,r2,r16
 10073b8:	10c00017 	ldw	r3,0(r2)
 10073bc:	e0bffc17 	ldw	r2,-16(fp)
 10073c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10073c4:	e13ffb17 	ldw	r4,-20(fp)
 10073c8:	04004074 	movhi	r16,257
 10073cc:	8423c604 	addi	r16,r16,-28904
 10073d0:	01400304 	movi	r5,12
 10073d4:	100307c0 	call	100307c <__mulsi3>
 10073d8:	1405883a 	add	r2,r2,r16
 10073dc:	10800104 	addi	r2,r2,4
 10073e0:	10c00017 	ldw	r3,0(r2)
 10073e4:	e0bffc17 	ldw	r2,-16(fp)
 10073e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10073ec:	e13ffb17 	ldw	r4,-20(fp)
 10073f0:	04004074 	movhi	r16,257
 10073f4:	8423c604 	addi	r16,r16,-28904
 10073f8:	01400304 	movi	r5,12
 10073fc:	100307c0 	call	100307c <__mulsi3>
 1007400:	1405883a 	add	r2,r2,r16
 1007404:	10800204 	addi	r2,r2,8
 1007408:	10c00017 	ldw	r3,0(r2)
 100740c:	e0bffc17 	ldw	r2,-16(fp)
 1007410:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1007414:	e13ffb17 	ldw	r4,-20(fp)
 1007418:	1003b280 	call	1003b28 <alt_release_fd>
  }
} 
 100741c:	e037883a 	mov	sp,fp
 1007420:	dfc00217 	ldw	ra,8(sp)
 1007424:	df000117 	ldw	fp,4(sp)
 1007428:	dc000017 	ldw	r16,0(sp)
 100742c:	dec00304 	addi	sp,sp,12
 1007430:	f800283a 	ret

01007434 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1007434:	defffb04 	addi	sp,sp,-20
 1007438:	dfc00415 	stw	ra,16(sp)
 100743c:	df000315 	stw	fp,12(sp)
 1007440:	df000304 	addi	fp,sp,12
 1007444:	e13ffd15 	stw	r4,-12(fp)
 1007448:	e17ffe15 	stw	r5,-8(fp)
 100744c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1007450:	01004074 	movhi	r4,257
 1007454:	2123c904 	addi	r4,r4,-28892
 1007458:	e17ffd17 	ldw	r5,-12(fp)
 100745c:	01800044 	movi	r6,1
 1007460:	01c07fc4 	movi	r7,511
 1007464:	100735c0 	call	100735c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1007468:	01004074 	movhi	r4,257
 100746c:	2123c604 	addi	r4,r4,-28904
 1007470:	e17ffe17 	ldw	r5,-8(fp)
 1007474:	000d883a 	mov	r6,zero
 1007478:	01c07fc4 	movi	r7,511
 100747c:	100735c0 	call	100735c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1007480:	01004074 	movhi	r4,257
 1007484:	2123cc04 	addi	r4,r4,-28880
 1007488:	e17fff17 	ldw	r5,-4(fp)
 100748c:	01800044 	movi	r6,1
 1007490:	01c07fc4 	movi	r7,511
 1007494:	100735c0 	call	100735c <alt_open_fd>
}  
 1007498:	e037883a 	mov	sp,fp
 100749c:	dfc00117 	ldw	ra,4(sp)
 10074a0:	df000017 	ldw	fp,0(sp)
 10074a4:	dec00204 	addi	sp,sp,8
 10074a8:	f800283a 	ret

010074ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10074ac:	defffa04 	addi	sp,sp,-24
 10074b0:	dfc00515 	stw	ra,20(sp)
 10074b4:	df000415 	stw	fp,16(sp)
 10074b8:	dc000315 	stw	r16,12(sp)
 10074bc:	df000304 	addi	fp,sp,12
 10074c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10074c4:	e0bffe17 	ldw	r2,-8(fp)
 10074c8:	10800217 	ldw	r2,8(r2)
 10074cc:	10d00034 	orhi	r3,r2,16384
 10074d0:	e0bffe17 	ldw	r2,-8(fp)
 10074d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10074d8:	e03ffd15 	stw	zero,-12(fp)
 10074dc:	00002306 	br	100756c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10074e0:	e13ffd17 	ldw	r4,-12(fp)
 10074e4:	04004074 	movhi	r16,257
 10074e8:	8423c604 	addi	r16,r16,-28904
 10074ec:	01400304 	movi	r5,12
 10074f0:	100307c0 	call	100307c <__mulsi3>
 10074f4:	1405883a 	add	r2,r2,r16
 10074f8:	10c00017 	ldw	r3,0(r2)
 10074fc:	e0bffe17 	ldw	r2,-8(fp)
 1007500:	10800017 	ldw	r2,0(r2)
 1007504:	1880161e 	bne	r3,r2,1007560 <alt_file_locked+0xb4>
 1007508:	e13ffd17 	ldw	r4,-12(fp)
 100750c:	04004074 	movhi	r16,257
 1007510:	8423c604 	addi	r16,r16,-28904
 1007514:	01400304 	movi	r5,12
 1007518:	100307c0 	call	100307c <__mulsi3>
 100751c:	1405883a 	add	r2,r2,r16
 1007520:	10800204 	addi	r2,r2,8
 1007524:	10800017 	ldw	r2,0(r2)
 1007528:	1004403a 	cmpge	r2,r2,zero
 100752c:	10000c1e 	bne	r2,zero,1007560 <alt_file_locked+0xb4>
 1007530:	e13ffd17 	ldw	r4,-12(fp)
 1007534:	01400304 	movi	r5,12
 1007538:	100307c0 	call	100307c <__mulsi3>
 100753c:	1007883a 	mov	r3,r2
 1007540:	00804074 	movhi	r2,257
 1007544:	10a3c604 	addi	r2,r2,-28904
 1007548:	1887883a 	add	r3,r3,r2
 100754c:	e0bffe17 	ldw	r2,-8(fp)
 1007550:	18800326 	beq	r3,r2,1007560 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1007554:	00bffcc4 	movi	r2,-13
 1007558:	e0bfff15 	stw	r2,-4(fp)
 100755c:	00000a06 	br	1007588 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1007560:	e0bffd17 	ldw	r2,-12(fp)
 1007564:	10800044 	addi	r2,r2,1
 1007568:	e0bffd15 	stw	r2,-12(fp)
 100756c:	00804074 	movhi	r2,257
 1007570:	10a87804 	addi	r2,r2,-24096
 1007574:	10800017 	ldw	r2,0(r2)
 1007578:	1007883a 	mov	r3,r2
 100757c:	e0bffd17 	ldw	r2,-12(fp)
 1007580:	18bfd72e 	bgeu	r3,r2,10074e0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1007584:	e03fff15 	stw	zero,-4(fp)
 1007588:	e0bfff17 	ldw	r2,-4(fp)
}
 100758c:	e037883a 	mov	sp,fp
 1007590:	dfc00217 	ldw	ra,8(sp)
 1007594:	df000117 	ldw	fp,4(sp)
 1007598:	dc000017 	ldw	r16,0(sp)
 100759c:	dec00304 	addi	sp,sp,12
 10075a0:	f800283a 	ret

010075a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10075a4:	defff404 	addi	sp,sp,-48
 10075a8:	dfc00b15 	stw	ra,44(sp)
 10075ac:	df000a15 	stw	fp,40(sp)
 10075b0:	df000a04 	addi	fp,sp,40
 10075b4:	e13ffb15 	stw	r4,-20(fp)
 10075b8:	e17ffc15 	stw	r5,-16(fp)
 10075bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10075c0:	00bfffc4 	movi	r2,-1
 10075c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10075c8:	00bffb44 	movi	r2,-19
 10075cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10075d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10075d4:	e13ffb17 	ldw	r4,-20(fp)
 10075d8:	01404074 	movhi	r5,257
 10075dc:	29687604 	addi	r5,r5,-24104
 10075e0:	1006fe00 	call	1006fe0 <alt_find_dev>
 10075e4:	e0bffa15 	stw	r2,-24(fp)
 10075e8:	e0bffa17 	ldw	r2,-24(fp)
 10075ec:	1004c03a 	cmpne	r2,r2,zero
 10075f0:	1000051e 	bne	r2,zero,1007608 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10075f4:	e13ffb17 	ldw	r4,-20(fp)
 10075f8:	10077b00 	call	10077b0 <alt_find_file>
 10075fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1007600:	00800044 	movi	r2,1
 1007604:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1007608:	e0bffa17 	ldw	r2,-24(fp)
 100760c:	1005003a 	cmpeq	r2,r2,zero
 1007610:	1000311e 	bne	r2,zero,10076d8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1007614:	e13ffa17 	ldw	r4,-24(fp)
 1007618:	10078d00 	call	10078d0 <alt_get_fd>
 100761c:	e0bff815 	stw	r2,-32(fp)
 1007620:	e0bff817 	ldw	r2,-32(fp)
 1007624:	1004403a 	cmpge	r2,r2,zero
 1007628:	1000031e 	bne	r2,zero,1007638 <open+0x94>
    {
      status = index;
 100762c:	e0bff817 	ldw	r2,-32(fp)
 1007630:	e0bff715 	stw	r2,-36(fp)
 1007634:	00002a06 	br	10076e0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1007638:	e13ff817 	ldw	r4,-32(fp)
 100763c:	01400304 	movi	r5,12
 1007640:	100307c0 	call	100307c <__mulsi3>
 1007644:	1007883a 	mov	r3,r2
 1007648:	00804074 	movhi	r2,257
 100764c:	10a3c604 	addi	r2,r2,-28904
 1007650:	1885883a 	add	r2,r3,r2
 1007654:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1007658:	e0fffc17 	ldw	r3,-16(fp)
 100765c:	00900034 	movhi	r2,16384
 1007660:	10bfffc4 	addi	r2,r2,-1
 1007664:	1886703a 	and	r3,r3,r2
 1007668:	e0bff917 	ldw	r2,-28(fp)
 100766c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1007670:	e0bff617 	ldw	r2,-40(fp)
 1007674:	1004c03a 	cmpne	r2,r2,zero
 1007678:	1000061e 	bne	r2,zero,1007694 <open+0xf0>
 100767c:	e13ff917 	ldw	r4,-28(fp)
 1007680:	10074ac0 	call	10074ac <alt_file_locked>
 1007684:	e0bff715 	stw	r2,-36(fp)
 1007688:	e0bff717 	ldw	r2,-36(fp)
 100768c:	1004803a 	cmplt	r2,r2,zero
 1007690:	1000131e 	bne	r2,zero,10076e0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1007694:	e0bffa17 	ldw	r2,-24(fp)
 1007698:	10800317 	ldw	r2,12(r2)
 100769c:	1005003a 	cmpeq	r2,r2,zero
 10076a0:	1000091e 	bne	r2,zero,10076c8 <open+0x124>
 10076a4:	e0bffa17 	ldw	r2,-24(fp)
 10076a8:	10800317 	ldw	r2,12(r2)
 10076ac:	e13ff917 	ldw	r4,-28(fp)
 10076b0:	e17ffb17 	ldw	r5,-20(fp)
 10076b4:	e1bffc17 	ldw	r6,-16(fp)
 10076b8:	e1fffd17 	ldw	r7,-12(fp)
 10076bc:	103ee83a 	callr	r2
 10076c0:	e0bfff15 	stw	r2,-4(fp)
 10076c4:	00000106 	br	10076cc <open+0x128>
 10076c8:	e03fff15 	stw	zero,-4(fp)
 10076cc:	e0bfff17 	ldw	r2,-4(fp)
 10076d0:	e0bff715 	stw	r2,-36(fp)
 10076d4:	00000206 	br	10076e0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10076d8:	00bffb44 	movi	r2,-19
 10076dc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10076e0:	e0bff717 	ldw	r2,-36(fp)
 10076e4:	1004403a 	cmpge	r2,r2,zero
 10076e8:	1000091e 	bne	r2,zero,1007710 <open+0x16c>
  {
    alt_release_fd (index);  
 10076ec:	e13ff817 	ldw	r4,-32(fp)
 10076f0:	1003b280 	call	1003b28 <alt_release_fd>
    ALT_ERRNO = -status;
 10076f4:	10077300 	call	1007730 <alt_get_errno>
 10076f8:	e0fff717 	ldw	r3,-36(fp)
 10076fc:	00c7c83a 	sub	r3,zero,r3
 1007700:	10c00015 	stw	r3,0(r2)
    return -1;
 1007704:	00bfffc4 	movi	r2,-1
 1007708:	e0bffe15 	stw	r2,-8(fp)
 100770c:	00000206 	br	1007718 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1007710:	e0bff817 	ldw	r2,-32(fp)
 1007714:	e0bffe15 	stw	r2,-8(fp)
 1007718:	e0bffe17 	ldw	r2,-8(fp)
}
 100771c:	e037883a 	mov	sp,fp
 1007720:	dfc00117 	ldw	ra,4(sp)
 1007724:	df000017 	ldw	fp,0(sp)
 1007728:	dec00204 	addi	sp,sp,8
 100772c:	f800283a 	ret

01007730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1007730:	defffd04 	addi	sp,sp,-12
 1007734:	dfc00215 	stw	ra,8(sp)
 1007738:	df000115 	stw	fp,4(sp)
 100773c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1007740:	00804074 	movhi	r2,257
 1007744:	10a87904 	addi	r2,r2,-24092
 1007748:	10800017 	ldw	r2,0(r2)
 100774c:	1005003a 	cmpeq	r2,r2,zero
 1007750:	1000061e 	bne	r2,zero,100776c <alt_get_errno+0x3c>
 1007754:	00804074 	movhi	r2,257
 1007758:	10a87904 	addi	r2,r2,-24092
 100775c:	10800017 	ldw	r2,0(r2)
 1007760:	103ee83a 	callr	r2
 1007764:	e0bfff15 	stw	r2,-4(fp)
 1007768:	00000306 	br	1007778 <alt_get_errno+0x48>
 100776c:	00804074 	movhi	r2,257
 1007770:	10af4204 	addi	r2,r2,-17144
 1007774:	e0bfff15 	stw	r2,-4(fp)
 1007778:	e0bfff17 	ldw	r2,-4(fp)
}
 100777c:	e037883a 	mov	sp,fp
 1007780:	dfc00117 	ldw	ra,4(sp)
 1007784:	df000017 	ldw	fp,0(sp)
 1007788:	dec00204 	addi	sp,sp,8
 100778c:	f800283a 	ret

01007790 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1007790:	deffff04 	addi	sp,sp,-4
 1007794:	df000015 	stw	fp,0(sp)
 1007798:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100779c:	000170fa 	wrctl	ienable,zero
}
 10077a0:	e037883a 	mov	sp,fp
 10077a4:	df000017 	ldw	fp,0(sp)
 10077a8:	dec00104 	addi	sp,sp,4
 10077ac:	f800283a 	ret

010077b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10077b0:	defffa04 	addi	sp,sp,-24
 10077b4:	dfc00515 	stw	ra,20(sp)
 10077b8:	df000415 	stw	fp,16(sp)
 10077bc:	df000404 	addi	fp,sp,16
 10077c0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10077c4:	00804074 	movhi	r2,257
 10077c8:	10a87404 	addi	r2,r2,-24112
 10077cc:	10800017 	ldw	r2,0(r2)
 10077d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10077d4:	00003306 	br	10078a4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10077d8:	e0bffd17 	ldw	r2,-12(fp)
 10077dc:	11000217 	ldw	r4,8(r2)
 10077e0:	10005f80 	call	10005f8 <strlen>
 10077e4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10077e8:	e0bffd17 	ldw	r2,-12(fp)
 10077ec:	10c00217 	ldw	r3,8(r2)
 10077f0:	e0bffc17 	ldw	r2,-16(fp)
 10077f4:	1885883a 	add	r2,r3,r2
 10077f8:	10bfffc4 	addi	r2,r2,-1
 10077fc:	10800003 	ldbu	r2,0(r2)
 1007800:	10803fcc 	andi	r2,r2,255
 1007804:	1080201c 	xori	r2,r2,128
 1007808:	10bfe004 	addi	r2,r2,-128
 100780c:	10800bd8 	cmpnei	r2,r2,47
 1007810:	1000031e 	bne	r2,zero,1007820 <alt_find_file+0x70>
    {
      len -= 1;
 1007814:	e0bffc17 	ldw	r2,-16(fp)
 1007818:	10bfffc4 	addi	r2,r2,-1
 100781c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1007820:	e0bffc17 	ldw	r2,-16(fp)
 1007824:	1007883a 	mov	r3,r2
 1007828:	e0bffe17 	ldw	r2,-8(fp)
 100782c:	1885883a 	add	r2,r3,r2
 1007830:	10800003 	ldbu	r2,0(r2)
 1007834:	10803fcc 	andi	r2,r2,255
 1007838:	1080201c 	xori	r2,r2,128
 100783c:	10bfe004 	addi	r2,r2,-128
 1007840:	10800be0 	cmpeqi	r2,r2,47
 1007844:	10000a1e 	bne	r2,zero,1007870 <alt_find_file+0xc0>
 1007848:	e0bffc17 	ldw	r2,-16(fp)
 100784c:	1007883a 	mov	r3,r2
 1007850:	e0bffe17 	ldw	r2,-8(fp)
 1007854:	1885883a 	add	r2,r3,r2
 1007858:	10800003 	ldbu	r2,0(r2)
 100785c:	10803fcc 	andi	r2,r2,255
 1007860:	1080201c 	xori	r2,r2,128
 1007864:	10bfe004 	addi	r2,r2,-128
 1007868:	1004c03a 	cmpne	r2,r2,zero
 100786c:	10000a1e 	bne	r2,zero,1007898 <alt_find_file+0xe8>
 1007870:	e0bffd17 	ldw	r2,-12(fp)
 1007874:	11000217 	ldw	r4,8(r2)
 1007878:	e1bffc17 	ldw	r6,-16(fp)
 100787c:	e17ffe17 	ldw	r5,-8(fp)
 1007880:	10079ec0 	call	10079ec <memcmp>
 1007884:	1004c03a 	cmpne	r2,r2,zero
 1007888:	1000031e 	bne	r2,zero,1007898 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100788c:	e0bffd17 	ldw	r2,-12(fp)
 1007890:	e0bfff15 	stw	r2,-4(fp)
 1007894:	00000806 	br	10078b8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1007898:	e0bffd17 	ldw	r2,-12(fp)
 100789c:	10800017 	ldw	r2,0(r2)
 10078a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10078a4:	00c04074 	movhi	r3,257
 10078a8:	18e87404 	addi	r3,r3,-24112
 10078ac:	e0bffd17 	ldw	r2,-12(fp)
 10078b0:	10ffc91e 	bne	r2,r3,10077d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10078b4:	e03fff15 	stw	zero,-4(fp)
 10078b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10078bc:	e037883a 	mov	sp,fp
 10078c0:	dfc00117 	ldw	ra,4(sp)
 10078c4:	df000017 	ldw	fp,0(sp)
 10078c8:	dec00204 	addi	sp,sp,8
 10078cc:	f800283a 	ret

010078d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10078d0:	defffa04 	addi	sp,sp,-24
 10078d4:	dfc00515 	stw	ra,20(sp)
 10078d8:	df000415 	stw	fp,16(sp)
 10078dc:	dc000315 	stw	r16,12(sp)
 10078e0:	df000304 	addi	fp,sp,12
 10078e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10078e8:	00bffa04 	movi	r2,-24
 10078ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10078f0:	e03ffe15 	stw	zero,-8(fp)
 10078f4:	00002006 	br	1007978 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 10078f8:	e13ffe17 	ldw	r4,-8(fp)
 10078fc:	04004074 	movhi	r16,257
 1007900:	8423c604 	addi	r16,r16,-28904
 1007904:	01400304 	movi	r5,12
 1007908:	100307c0 	call	100307c <__mulsi3>
 100790c:	1405883a 	add	r2,r2,r16
 1007910:	10800017 	ldw	r2,0(r2)
 1007914:	1004c03a 	cmpne	r2,r2,zero
 1007918:	1000141e 	bne	r2,zero,100796c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 100791c:	e13ffe17 	ldw	r4,-8(fp)
 1007920:	04004074 	movhi	r16,257
 1007924:	8423c604 	addi	r16,r16,-28904
 1007928:	01400304 	movi	r5,12
 100792c:	100307c0 	call	100307c <__mulsi3>
 1007930:	1407883a 	add	r3,r2,r16
 1007934:	e0bfff17 	ldw	r2,-4(fp)
 1007938:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100793c:	00804074 	movhi	r2,257
 1007940:	10a87804 	addi	r2,r2,-24096
 1007944:	10c00017 	ldw	r3,0(r2)
 1007948:	e0bffe17 	ldw	r2,-8(fp)
 100794c:	1880040e 	bge	r3,r2,1007960 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1007950:	00c04074 	movhi	r3,257
 1007954:	18e87804 	addi	r3,r3,-24096
 1007958:	e0bffe17 	ldw	r2,-8(fp)
 100795c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1007960:	e0bffe17 	ldw	r2,-8(fp)
 1007964:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1007968:	00000606 	br	1007984 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100796c:	e0bffe17 	ldw	r2,-8(fp)
 1007970:	10800044 	addi	r2,r2,1
 1007974:	e0bffe15 	stw	r2,-8(fp)
 1007978:	e0bffe17 	ldw	r2,-8(fp)
 100797c:	10800810 	cmplti	r2,r2,32
 1007980:	103fdd1e 	bne	r2,zero,10078f8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1007984:	e0bffd17 	ldw	r2,-12(fp)
}
 1007988:	e037883a 	mov	sp,fp
 100798c:	dfc00217 	ldw	ra,8(sp)
 1007990:	df000117 	ldw	fp,4(sp)
 1007994:	dc000017 	ldw	r16,0(sp)
 1007998:	dec00304 	addi	sp,sp,12
 100799c:	f800283a 	ret

010079a0 <atexit>:
 10079a0:	200b883a 	mov	r5,r4
 10079a4:	000d883a 	mov	r6,zero
 10079a8:	0009883a 	mov	r4,zero
 10079ac:	000f883a 	mov	r7,zero
 10079b0:	1007b1c1 	jmpi	1007b1c <__register_exitproc>

010079b4 <exit>:
 10079b4:	defffe04 	addi	sp,sp,-8
 10079b8:	000b883a 	mov	r5,zero
 10079bc:	dc000015 	stw	r16,0(sp)
 10079c0:	dfc00115 	stw	ra,4(sp)
 10079c4:	2021883a 	mov	r16,r4
 10079c8:	1007c540 	call	1007c54 <__call_exitprocs>
 10079cc:	00804074 	movhi	r2,257
 10079d0:	10a87104 	addi	r2,r2,-24124
 10079d4:	11000017 	ldw	r4,0(r2)
 10079d8:	20800f17 	ldw	r2,60(r4)
 10079dc:	10000126 	beq	r2,zero,10079e4 <exit+0x30>
 10079e0:	103ee83a 	callr	r2
 10079e4:	8009883a 	mov	r4,r16
 10079e8:	10084a40 	call	10084a4 <_exit>

010079ec <memcmp>:
 10079ec:	00c000c4 	movi	r3,3
 10079f0:	1980032e 	bgeu	r3,r6,1007a00 <memcmp+0x14>
 10079f4:	2144b03a 	or	r2,r4,r5
 10079f8:	10c4703a 	and	r2,r2,r3
 10079fc:	10000f26 	beq	r2,zero,1007a3c <memcmp+0x50>
 1007a00:	31ffffc4 	addi	r7,r6,-1
 1007a04:	3000061e 	bne	r6,zero,1007a20 <memcmp+0x34>
 1007a08:	00000a06 	br	1007a34 <memcmp+0x48>
 1007a0c:	39ffffc4 	addi	r7,r7,-1
 1007a10:	00bfffc4 	movi	r2,-1
 1007a14:	21000044 	addi	r4,r4,1
 1007a18:	29400044 	addi	r5,r5,1
 1007a1c:	38800526 	beq	r7,r2,1007a34 <memcmp+0x48>
 1007a20:	20c00003 	ldbu	r3,0(r4)
 1007a24:	28800003 	ldbu	r2,0(r5)
 1007a28:	18bff826 	beq	r3,r2,1007a0c <memcmp+0x20>
 1007a2c:	1885c83a 	sub	r2,r3,r2
 1007a30:	f800283a 	ret
 1007a34:	0005883a 	mov	r2,zero
 1007a38:	f800283a 	ret
 1007a3c:	180f883a 	mov	r7,r3
 1007a40:	20c00017 	ldw	r3,0(r4)
 1007a44:	28800017 	ldw	r2,0(r5)
 1007a48:	18bfed1e 	bne	r3,r2,1007a00 <memcmp+0x14>
 1007a4c:	31bfff04 	addi	r6,r6,-4
 1007a50:	21000104 	addi	r4,r4,4
 1007a54:	29400104 	addi	r5,r5,4
 1007a58:	39bff936 	bltu	r7,r6,1007a40 <memcmp+0x54>
 1007a5c:	003fe806 	br	1007a00 <memcmp+0x14>

01007a60 <strcmp>:
 1007a60:	2144b03a 	or	r2,r4,r5
 1007a64:	108000cc 	andi	r2,r2,3
 1007a68:	10001d1e 	bne	r2,zero,1007ae0 <strcmp+0x80>
 1007a6c:	200f883a 	mov	r7,r4
 1007a70:	28800017 	ldw	r2,0(r5)
 1007a74:	21000017 	ldw	r4,0(r4)
 1007a78:	280d883a 	mov	r6,r5
 1007a7c:	2080161e 	bne	r4,r2,1007ad8 <strcmp+0x78>
 1007a80:	023fbff4 	movhi	r8,65279
 1007a84:	423fbfc4 	addi	r8,r8,-257
 1007a88:	2207883a 	add	r3,r4,r8
 1007a8c:	01602074 	movhi	r5,32897
 1007a90:	29602004 	addi	r5,r5,-32640
 1007a94:	1946703a 	and	r3,r3,r5
 1007a98:	0104303a 	nor	r2,zero,r4
 1007a9c:	10c4703a 	and	r2,r2,r3
 1007aa0:	10001c1e 	bne	r2,zero,1007b14 <strcmp+0xb4>
 1007aa4:	4013883a 	mov	r9,r8
 1007aa8:	2811883a 	mov	r8,r5
 1007aac:	00000106 	br	1007ab4 <strcmp+0x54>
 1007ab0:	1800181e 	bne	r3,zero,1007b14 <strcmp+0xb4>
 1007ab4:	39c00104 	addi	r7,r7,4
 1007ab8:	39000017 	ldw	r4,0(r7)
 1007abc:	31800104 	addi	r6,r6,4
 1007ac0:	31400017 	ldw	r5,0(r6)
 1007ac4:	2245883a 	add	r2,r4,r9
 1007ac8:	1204703a 	and	r2,r2,r8
 1007acc:	0106303a 	nor	r3,zero,r4
 1007ad0:	1886703a 	and	r3,r3,r2
 1007ad4:	217ff626 	beq	r4,r5,1007ab0 <strcmp+0x50>
 1007ad8:	3809883a 	mov	r4,r7
 1007adc:	300b883a 	mov	r5,r6
 1007ae0:	20c00007 	ldb	r3,0(r4)
 1007ae4:	1800051e 	bne	r3,zero,1007afc <strcmp+0x9c>
 1007ae8:	00000606 	br	1007b04 <strcmp+0xa4>
 1007aec:	21000044 	addi	r4,r4,1
 1007af0:	20c00007 	ldb	r3,0(r4)
 1007af4:	29400044 	addi	r5,r5,1
 1007af8:	18000226 	beq	r3,zero,1007b04 <strcmp+0xa4>
 1007afc:	28800007 	ldb	r2,0(r5)
 1007b00:	18bffa26 	beq	r3,r2,1007aec <strcmp+0x8c>
 1007b04:	20c00003 	ldbu	r3,0(r4)
 1007b08:	28800003 	ldbu	r2,0(r5)
 1007b0c:	1885c83a 	sub	r2,r3,r2
 1007b10:	f800283a 	ret
 1007b14:	0005883a 	mov	r2,zero
 1007b18:	f800283a 	ret

01007b1c <__register_exitproc>:
 1007b1c:	defffa04 	addi	sp,sp,-24
 1007b20:	00804074 	movhi	r2,257
 1007b24:	10a87104 	addi	r2,r2,-24124
 1007b28:	dc000015 	stw	r16,0(sp)
 1007b2c:	14000017 	ldw	r16,0(r2)
 1007b30:	dd000415 	stw	r20,16(sp)
 1007b34:	2829883a 	mov	r20,r5
 1007b38:	81405217 	ldw	r5,328(r16)
 1007b3c:	dcc00315 	stw	r19,12(sp)
 1007b40:	dc800215 	stw	r18,8(sp)
 1007b44:	dc400115 	stw	r17,4(sp)
 1007b48:	dfc00515 	stw	ra,20(sp)
 1007b4c:	2023883a 	mov	r17,r4
 1007b50:	3027883a 	mov	r19,r6
 1007b54:	3825883a 	mov	r18,r7
 1007b58:	28002526 	beq	r5,zero,1007bf0 <__register_exitproc+0xd4>
 1007b5c:	29000117 	ldw	r4,4(r5)
 1007b60:	008007c4 	movi	r2,31
 1007b64:	11002716 	blt	r2,r4,1007c04 <__register_exitproc+0xe8>
 1007b68:	8800101e 	bne	r17,zero,1007bac <__register_exitproc+0x90>
 1007b6c:	2105883a 	add	r2,r4,r4
 1007b70:	1085883a 	add	r2,r2,r2
 1007b74:	20c00044 	addi	r3,r4,1
 1007b78:	1145883a 	add	r2,r2,r5
 1007b7c:	0009883a 	mov	r4,zero
 1007b80:	15000215 	stw	r20,8(r2)
 1007b84:	28c00115 	stw	r3,4(r5)
 1007b88:	2005883a 	mov	r2,r4
 1007b8c:	dfc00517 	ldw	ra,20(sp)
 1007b90:	dd000417 	ldw	r20,16(sp)
 1007b94:	dcc00317 	ldw	r19,12(sp)
 1007b98:	dc800217 	ldw	r18,8(sp)
 1007b9c:	dc400117 	ldw	r17,4(sp)
 1007ba0:	dc000017 	ldw	r16,0(sp)
 1007ba4:	dec00604 	addi	sp,sp,24
 1007ba8:	f800283a 	ret
 1007bac:	29802204 	addi	r6,r5,136
 1007bb0:	00800044 	movi	r2,1
 1007bb4:	110e983a 	sll	r7,r2,r4
 1007bb8:	30c04017 	ldw	r3,256(r6)
 1007bbc:	2105883a 	add	r2,r4,r4
 1007bc0:	1085883a 	add	r2,r2,r2
 1007bc4:	1185883a 	add	r2,r2,r6
 1007bc8:	19c6b03a 	or	r3,r3,r7
 1007bcc:	14802015 	stw	r18,128(r2)
 1007bd0:	14c00015 	stw	r19,0(r2)
 1007bd4:	00800084 	movi	r2,2
 1007bd8:	30c04015 	stw	r3,256(r6)
 1007bdc:	88bfe31e 	bne	r17,r2,1007b6c <__register_exitproc+0x50>
 1007be0:	30804117 	ldw	r2,260(r6)
 1007be4:	11c4b03a 	or	r2,r2,r7
 1007be8:	30804115 	stw	r2,260(r6)
 1007bec:	003fdf06 	br	1007b6c <__register_exitproc+0x50>
 1007bf0:	00804074 	movhi	r2,257
 1007bf4:	10af9a04 	addi	r2,r2,-16792
 1007bf8:	100b883a 	mov	r5,r2
 1007bfc:	80805215 	stw	r2,328(r16)
 1007c00:	003fd606 	br	1007b5c <__register_exitproc+0x40>
 1007c04:	00800034 	movhi	r2,0
 1007c08:	10800004 	addi	r2,r2,0
 1007c0c:	1000021e 	bne	r2,zero,1007c18 <__register_exitproc+0xfc>
 1007c10:	013fffc4 	movi	r4,-1
 1007c14:	003fdc06 	br	1007b88 <__register_exitproc+0x6c>
 1007c18:	01006404 	movi	r4,400
 1007c1c:	103ee83a 	callr	r2
 1007c20:	1007883a 	mov	r3,r2
 1007c24:	103ffa26 	beq	r2,zero,1007c10 <__register_exitproc+0xf4>
 1007c28:	80805217 	ldw	r2,328(r16)
 1007c2c:	180b883a 	mov	r5,r3
 1007c30:	18000115 	stw	zero,4(r3)
 1007c34:	18800015 	stw	r2,0(r3)
 1007c38:	80c05215 	stw	r3,328(r16)
 1007c3c:	18006215 	stw	zero,392(r3)
 1007c40:	18006315 	stw	zero,396(r3)
 1007c44:	0009883a 	mov	r4,zero
 1007c48:	883fc826 	beq	r17,zero,1007b6c <__register_exitproc+0x50>
 1007c4c:	003fd706 	br	1007bac <__register_exitproc+0x90>

01007c50 <register_fini>:
 1007c50:	f800283a 	ret

01007c54 <__call_exitprocs>:
 1007c54:	00804074 	movhi	r2,257
 1007c58:	10a87104 	addi	r2,r2,-24124
 1007c5c:	10800017 	ldw	r2,0(r2)
 1007c60:	defff304 	addi	sp,sp,-52
 1007c64:	df000b15 	stw	fp,44(sp)
 1007c68:	d8800115 	stw	r2,4(sp)
 1007c6c:	00800034 	movhi	r2,0
 1007c70:	10800004 	addi	r2,r2,0
 1007c74:	1005003a 	cmpeq	r2,r2,zero
 1007c78:	d8800215 	stw	r2,8(sp)
 1007c7c:	d8800117 	ldw	r2,4(sp)
 1007c80:	dd400815 	stw	r21,32(sp)
 1007c84:	dd000715 	stw	r20,28(sp)
 1007c88:	10805204 	addi	r2,r2,328
 1007c8c:	dfc00c15 	stw	ra,48(sp)
 1007c90:	ddc00a15 	stw	r23,40(sp)
 1007c94:	dd800915 	stw	r22,36(sp)
 1007c98:	dcc00615 	stw	r19,24(sp)
 1007c9c:	dc800515 	stw	r18,20(sp)
 1007ca0:	dc400415 	stw	r17,16(sp)
 1007ca4:	dc000315 	stw	r16,12(sp)
 1007ca8:	282b883a 	mov	r21,r5
 1007cac:	2039883a 	mov	fp,r4
 1007cb0:	d8800015 	stw	r2,0(sp)
 1007cb4:	2829003a 	cmpeq	r20,r5,zero
 1007cb8:	d8800117 	ldw	r2,4(sp)
 1007cbc:	14405217 	ldw	r17,328(r2)
 1007cc0:	88001026 	beq	r17,zero,1007d04 <__call_exitprocs+0xb0>
 1007cc4:	ddc00017 	ldw	r23,0(sp)
 1007cc8:	88800117 	ldw	r2,4(r17)
 1007ccc:	8c802204 	addi	r18,r17,136
 1007cd0:	143fffc4 	addi	r16,r2,-1
 1007cd4:	80000916 	blt	r16,zero,1007cfc <__call_exitprocs+0xa8>
 1007cd8:	05bfffc4 	movi	r22,-1
 1007cdc:	a000151e 	bne	r20,zero,1007d34 <__call_exitprocs+0xe0>
 1007ce0:	8409883a 	add	r4,r16,r16
 1007ce4:	2105883a 	add	r2,r4,r4
 1007ce8:	1485883a 	add	r2,r2,r18
 1007cec:	10c02017 	ldw	r3,128(r2)
 1007cf0:	a8c01126 	beq	r21,r3,1007d38 <__call_exitprocs+0xe4>
 1007cf4:	843fffc4 	addi	r16,r16,-1
 1007cf8:	85bff81e 	bne	r16,r22,1007cdc <__call_exitprocs+0x88>
 1007cfc:	d8800217 	ldw	r2,8(sp)
 1007d00:	10003126 	beq	r2,zero,1007dc8 <__call_exitprocs+0x174>
 1007d04:	dfc00c17 	ldw	ra,48(sp)
 1007d08:	df000b17 	ldw	fp,44(sp)
 1007d0c:	ddc00a17 	ldw	r23,40(sp)
 1007d10:	dd800917 	ldw	r22,36(sp)
 1007d14:	dd400817 	ldw	r21,32(sp)
 1007d18:	dd000717 	ldw	r20,28(sp)
 1007d1c:	dcc00617 	ldw	r19,24(sp)
 1007d20:	dc800517 	ldw	r18,20(sp)
 1007d24:	dc400417 	ldw	r17,16(sp)
 1007d28:	dc000317 	ldw	r16,12(sp)
 1007d2c:	dec00d04 	addi	sp,sp,52
 1007d30:	f800283a 	ret
 1007d34:	8409883a 	add	r4,r16,r16
 1007d38:	88c00117 	ldw	r3,4(r17)
 1007d3c:	2105883a 	add	r2,r4,r4
 1007d40:	1445883a 	add	r2,r2,r17
 1007d44:	18ffffc4 	addi	r3,r3,-1
 1007d48:	11800217 	ldw	r6,8(r2)
 1007d4c:	1c001526 	beq	r3,r16,1007da4 <__call_exitprocs+0x150>
 1007d50:	10000215 	stw	zero,8(r2)
 1007d54:	303fe726 	beq	r6,zero,1007cf4 <__call_exitprocs+0xa0>
 1007d58:	00c00044 	movi	r3,1
 1007d5c:	1c06983a 	sll	r3,r3,r16
 1007d60:	90804017 	ldw	r2,256(r18)
 1007d64:	8cc00117 	ldw	r19,4(r17)
 1007d68:	1884703a 	and	r2,r3,r2
 1007d6c:	10001426 	beq	r2,zero,1007dc0 <__call_exitprocs+0x16c>
 1007d70:	90804117 	ldw	r2,260(r18)
 1007d74:	1884703a 	and	r2,r3,r2
 1007d78:	10000c1e 	bne	r2,zero,1007dac <__call_exitprocs+0x158>
 1007d7c:	2105883a 	add	r2,r4,r4
 1007d80:	1485883a 	add	r2,r2,r18
 1007d84:	11400017 	ldw	r5,0(r2)
 1007d88:	e009883a 	mov	r4,fp
 1007d8c:	303ee83a 	callr	r6
 1007d90:	88800117 	ldw	r2,4(r17)
 1007d94:	98bfc81e 	bne	r19,r2,1007cb8 <__call_exitprocs+0x64>
 1007d98:	b8800017 	ldw	r2,0(r23)
 1007d9c:	147fd526 	beq	r2,r17,1007cf4 <__call_exitprocs+0xa0>
 1007da0:	003fc506 	br	1007cb8 <__call_exitprocs+0x64>
 1007da4:	8c000115 	stw	r16,4(r17)
 1007da8:	003fea06 	br	1007d54 <__call_exitprocs+0x100>
 1007dac:	2105883a 	add	r2,r4,r4
 1007db0:	1485883a 	add	r2,r2,r18
 1007db4:	11000017 	ldw	r4,0(r2)
 1007db8:	303ee83a 	callr	r6
 1007dbc:	003ff406 	br	1007d90 <__call_exitprocs+0x13c>
 1007dc0:	303ee83a 	callr	r6
 1007dc4:	003ff206 	br	1007d90 <__call_exitprocs+0x13c>
 1007dc8:	88800117 	ldw	r2,4(r17)
 1007dcc:	1000081e 	bne	r2,zero,1007df0 <__call_exitprocs+0x19c>
 1007dd0:	89000017 	ldw	r4,0(r17)
 1007dd4:	20000726 	beq	r4,zero,1007df4 <__call_exitprocs+0x1a0>
 1007dd8:	b9000015 	stw	r4,0(r23)
 1007ddc:	8809883a 	mov	r4,r17
 1007de0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1007de4:	bc400017 	ldw	r17,0(r23)
 1007de8:	883fb71e 	bne	r17,zero,1007cc8 <__call_exitprocs+0x74>
 1007dec:	003fc506 	br	1007d04 <__call_exitprocs+0xb0>
 1007df0:	89000017 	ldw	r4,0(r17)
 1007df4:	882f883a 	mov	r23,r17
 1007df8:	2023883a 	mov	r17,r4
 1007dfc:	883fb21e 	bne	r17,zero,1007cc8 <__call_exitprocs+0x74>
 1007e00:	003fc006 	br	1007d04 <__call_exitprocs+0xb0>

01007e04 <__umoddi3>:
 1007e04:	defff004 	addi	sp,sp,-64
 1007e08:	3011883a 	mov	r8,r6
 1007e0c:	000d883a 	mov	r6,zero
 1007e10:	dd400b15 	stw	r21,44(sp)
 1007e14:	dcc00915 	stw	r19,36(sp)
 1007e18:	dc000615 	stw	r16,24(sp)
 1007e1c:	dfc00f15 	stw	ra,60(sp)
 1007e20:	df000e15 	stw	fp,56(sp)
 1007e24:	ddc00d15 	stw	r23,52(sp)
 1007e28:	dd800c15 	stw	r22,48(sp)
 1007e2c:	dd000a15 	stw	r20,40(sp)
 1007e30:	dc800815 	stw	r18,32(sp)
 1007e34:	dc400715 	stw	r17,28(sp)
 1007e38:	2817883a 	mov	r11,r5
 1007e3c:	d9800415 	stw	r6,16(sp)
 1007e40:	4027883a 	mov	r19,r8
 1007e44:	d9800515 	stw	r6,20(sp)
 1007e48:	2021883a 	mov	r16,r4
 1007e4c:	282b883a 	mov	r21,r5
 1007e50:	38002c1e 	bne	r7,zero,1007f04 <__umoddi3+0x100>
 1007e54:	2a005636 	bltu	r5,r8,1007fb0 <__umoddi3+0x1ac>
 1007e58:	40009a26 	beq	r8,zero,10080c4 <__umoddi3+0x2c0>
 1007e5c:	00bfffd4 	movui	r2,65535
 1007e60:	14c09236 	bltu	r2,r19,10080ac <__umoddi3+0x2a8>
 1007e64:	00803fc4 	movi	r2,255
 1007e68:	14c15c36 	bltu	r2,r19,10083dc <__umoddi3+0x5d8>
 1007e6c:	000b883a 	mov	r5,zero
 1007e70:	0005883a 	mov	r2,zero
 1007e74:	9884d83a 	srl	r2,r19,r2
 1007e78:	01004074 	movhi	r4,257
 1007e7c:	21217a04 	addi	r4,r4,-31256
 1007e80:	01800804 	movi	r6,32
 1007e84:	1105883a 	add	r2,r2,r4
 1007e88:	10c00003 	ldbu	r3,0(r2)
 1007e8c:	28c7883a 	add	r3,r5,r3
 1007e90:	30e5c83a 	sub	r18,r6,r3
 1007e94:	9000a41e 	bne	r18,zero,1008128 <__umoddi3+0x324>
 1007e98:	982ed43a 	srli	r23,r19,16
 1007e9c:	acebc83a 	sub	r21,r21,r19
 1007ea0:	9d3fffcc 	andi	r20,r19,65535
 1007ea4:	002d883a 	mov	r22,zero
 1007ea8:	a809883a 	mov	r4,r21
 1007eac:	b80b883a 	mov	r5,r23
 1007eb0:	10004a00 	call	10004a0 <__udivsi3>
 1007eb4:	100b883a 	mov	r5,r2
 1007eb8:	a009883a 	mov	r4,r20
 1007ebc:	100307c0 	call	100307c <__mulsi3>
 1007ec0:	a809883a 	mov	r4,r21
 1007ec4:	b80b883a 	mov	r5,r23
 1007ec8:	1023883a 	mov	r17,r2
 1007ecc:	10004a80 	call	10004a8 <__umodsi3>
 1007ed0:	1004943a 	slli	r2,r2,16
 1007ed4:	8006d43a 	srli	r3,r16,16
 1007ed8:	10c4b03a 	or	r2,r2,r3
 1007edc:	1440032e 	bgeu	r2,r17,1007eec <__umoddi3+0xe8>
 1007ee0:	14c5883a 	add	r2,r2,r19
 1007ee4:	14c00136 	bltu	r2,r19,1007eec <__umoddi3+0xe8>
 1007ee8:	14415836 	bltu	r2,r17,100844c <__umoddi3+0x648>
 1007eec:	1463c83a 	sub	r17,r2,r17
 1007ef0:	8809883a 	mov	r4,r17
 1007ef4:	b80b883a 	mov	r5,r23
 1007ef8:	10004a00 	call	10004a0 <__udivsi3>
 1007efc:	a009883a 	mov	r4,r20
 1007f00:	00005306 	br	1008050 <__umoddi3+0x24c>
 1007f04:	380d883a 	mov	r6,r7
 1007f08:	29c0132e 	bgeu	r5,r7,1007f58 <__umoddi3+0x154>
 1007f0c:	d9000415 	stw	r4,16(sp)
 1007f10:	d9400515 	stw	r5,20(sp)
 1007f14:	d9400417 	ldw	r5,16(sp)
 1007f18:	5813883a 	mov	r9,r11
 1007f1c:	2811883a 	mov	r8,r5
 1007f20:	4005883a 	mov	r2,r8
 1007f24:	4807883a 	mov	r3,r9
 1007f28:	dfc00f17 	ldw	ra,60(sp)
 1007f2c:	df000e17 	ldw	fp,56(sp)
 1007f30:	ddc00d17 	ldw	r23,52(sp)
 1007f34:	dd800c17 	ldw	r22,48(sp)
 1007f38:	dd400b17 	ldw	r21,44(sp)
 1007f3c:	dd000a17 	ldw	r20,40(sp)
 1007f40:	dcc00917 	ldw	r19,36(sp)
 1007f44:	dc800817 	ldw	r18,32(sp)
 1007f48:	dc400717 	ldw	r17,28(sp)
 1007f4c:	dc000617 	ldw	r16,24(sp)
 1007f50:	dec01004 	addi	sp,sp,64
 1007f54:	f800283a 	ret
 1007f58:	00bfffd4 	movui	r2,65535
 1007f5c:	11c06636 	bltu	r2,r7,10080f8 <__umoddi3+0x2f4>
 1007f60:	00803fc4 	movi	r2,255
 1007f64:	11c12036 	bltu	r2,r7,10083e8 <__umoddi3+0x5e4>
 1007f68:	000b883a 	mov	r5,zero
 1007f6c:	0005883a 	mov	r2,zero
 1007f70:	3084d83a 	srl	r2,r6,r2
 1007f74:	01004074 	movhi	r4,257
 1007f78:	21217a04 	addi	r4,r4,-31256
 1007f7c:	01c00804 	movi	r7,32
 1007f80:	1105883a 	add	r2,r2,r4
 1007f84:	10c00003 	ldbu	r3,0(r2)
 1007f88:	28c7883a 	add	r3,r5,r3
 1007f8c:	38e5c83a 	sub	r18,r7,r3
 1007f90:	9000941e 	bne	r18,zero,10081e4 <__umoddi3+0x3e0>
 1007f94:	35405e36 	bltu	r6,r21,1008110 <__umoddi3+0x30c>
 1007f98:	84c05d2e 	bgeu	r16,r19,1008110 <__umoddi3+0x30c>
 1007f9c:	8011883a 	mov	r8,r16
 1007fa0:	a813883a 	mov	r9,r21
 1007fa4:	dc000415 	stw	r16,16(sp)
 1007fa8:	dd400515 	stw	r21,20(sp)
 1007fac:	003fdc06 	br	1007f20 <__umoddi3+0x11c>
 1007fb0:	00bfffd4 	movui	r2,65535
 1007fb4:	12004a36 	bltu	r2,r8,10080e0 <__umoddi3+0x2dc>
 1007fb8:	00803fc4 	movi	r2,255
 1007fbc:	12010d36 	bltu	r2,r8,10083f4 <__umoddi3+0x5f0>
 1007fc0:	000b883a 	mov	r5,zero
 1007fc4:	0005883a 	mov	r2,zero
 1007fc8:	9884d83a 	srl	r2,r19,r2
 1007fcc:	01004074 	movhi	r4,257
 1007fd0:	21217a04 	addi	r4,r4,-31256
 1007fd4:	01800804 	movi	r6,32
 1007fd8:	1105883a 	add	r2,r2,r4
 1007fdc:	10c00003 	ldbu	r3,0(r2)
 1007fe0:	28c7883a 	add	r3,r5,r3
 1007fe4:	30c7c83a 	sub	r3,r6,r3
 1007fe8:	1800dc1e 	bne	r3,zero,100835c <__umoddi3+0x558>
 1007fec:	002d883a 	mov	r22,zero
 1007ff0:	982ed43a 	srli	r23,r19,16
 1007ff4:	a809883a 	mov	r4,r21
 1007ff8:	9cbfffcc 	andi	r18,r19,65535
 1007ffc:	b80b883a 	mov	r5,r23
 1008000:	10004a00 	call	10004a0 <__udivsi3>
 1008004:	100b883a 	mov	r5,r2
 1008008:	9009883a 	mov	r4,r18
 100800c:	100307c0 	call	100307c <__mulsi3>
 1008010:	a809883a 	mov	r4,r21
 1008014:	b80b883a 	mov	r5,r23
 1008018:	1023883a 	mov	r17,r2
 100801c:	10004a80 	call	10004a8 <__umodsi3>
 1008020:	1004943a 	slli	r2,r2,16
 1008024:	8006d43a 	srli	r3,r16,16
 1008028:	10c4b03a 	or	r2,r2,r3
 100802c:	1440032e 	bgeu	r2,r17,100803c <__umoddi3+0x238>
 1008030:	14c5883a 	add	r2,r2,r19
 1008034:	14c00136 	bltu	r2,r19,100803c <__umoddi3+0x238>
 1008038:	14410236 	bltu	r2,r17,1008444 <__umoddi3+0x640>
 100803c:	1463c83a 	sub	r17,r2,r17
 1008040:	8809883a 	mov	r4,r17
 1008044:	b80b883a 	mov	r5,r23
 1008048:	10004a00 	call	10004a0 <__udivsi3>
 100804c:	9009883a 	mov	r4,r18
 1008050:	100b883a 	mov	r5,r2
 1008054:	100307c0 	call	100307c <__mulsi3>
 1008058:	8809883a 	mov	r4,r17
 100805c:	b80b883a 	mov	r5,r23
 1008060:	102b883a 	mov	r21,r2
 1008064:	10004a80 	call	10004a8 <__umodsi3>
 1008068:	1004943a 	slli	r2,r2,16
 100806c:	80ffffcc 	andi	r3,r16,65535
 1008070:	10c4b03a 	or	r2,r2,r3
 1008074:	1540042e 	bgeu	r2,r21,1008088 <__umoddi3+0x284>
 1008078:	14c5883a 	add	r2,r2,r19
 100807c:	14c00236 	bltu	r2,r19,1008088 <__umoddi3+0x284>
 1008080:	1540012e 	bgeu	r2,r21,1008088 <__umoddi3+0x284>
 1008084:	14c5883a 	add	r2,r2,r19
 1008088:	1545c83a 	sub	r2,r2,r21
 100808c:	1584d83a 	srl	r2,r2,r22
 1008090:	0013883a 	mov	r9,zero
 1008094:	d8800415 	stw	r2,16(sp)
 1008098:	d8c00417 	ldw	r3,16(sp)
 100809c:	0005883a 	mov	r2,zero
 10080a0:	d8800515 	stw	r2,20(sp)
 10080a4:	1811883a 	mov	r8,r3
 10080a8:	003f9d06 	br	1007f20 <__umoddi3+0x11c>
 10080ac:	00804034 	movhi	r2,256
 10080b0:	10bfffc4 	addi	r2,r2,-1
 10080b4:	14c0c636 	bltu	r2,r19,10083d0 <__umoddi3+0x5cc>
 10080b8:	01400404 	movi	r5,16
 10080bc:	2805883a 	mov	r2,r5
 10080c0:	003f6c06 	br	1007e74 <__umoddi3+0x70>
 10080c4:	01000044 	movi	r4,1
 10080c8:	000b883a 	mov	r5,zero
 10080cc:	10004a00 	call	10004a0 <__udivsi3>
 10080d0:	1027883a 	mov	r19,r2
 10080d4:	00bfffd4 	movui	r2,65535
 10080d8:	14fff436 	bltu	r2,r19,10080ac <__umoddi3+0x2a8>
 10080dc:	003f6106 	br	1007e64 <__umoddi3+0x60>
 10080e0:	00804034 	movhi	r2,256
 10080e4:	10bfffc4 	addi	r2,r2,-1
 10080e8:	1200c536 	bltu	r2,r8,1008400 <__umoddi3+0x5fc>
 10080ec:	01400404 	movi	r5,16
 10080f0:	2805883a 	mov	r2,r5
 10080f4:	003fb406 	br	1007fc8 <__umoddi3+0x1c4>
 10080f8:	00804034 	movhi	r2,256
 10080fc:	10bfffc4 	addi	r2,r2,-1
 1008100:	11c0c236 	bltu	r2,r7,100840c <__umoddi3+0x608>
 1008104:	01400404 	movi	r5,16
 1008108:	2805883a 	mov	r2,r5
 100810c:	003f9806 	br	1007f70 <__umoddi3+0x16c>
 1008110:	84c9c83a 	sub	r4,r16,r19
 1008114:	8105803a 	cmpltu	r2,r16,r4
 1008118:	a987c83a 	sub	r3,r21,r6
 100811c:	18abc83a 	sub	r21,r3,r2
 1008120:	2021883a 	mov	r16,r4
 1008124:	003f9d06 	br	1007f9c <__umoddi3+0x198>
 1008128:	9ca6983a 	sll	r19,r19,r18
 100812c:	3485c83a 	sub	r2,r6,r18
 1008130:	a8a2d83a 	srl	r17,r21,r2
 1008134:	982ed43a 	srli	r23,r19,16
 1008138:	ac86983a 	sll	r3,r21,r18
 100813c:	8084d83a 	srl	r2,r16,r2
 1008140:	8809883a 	mov	r4,r17
 1008144:	b80b883a 	mov	r5,r23
 1008148:	18b8b03a 	or	fp,r3,r2
 100814c:	9d3fffcc 	andi	r20,r19,65535
 1008150:	10004a00 	call	10004a0 <__udivsi3>
 1008154:	100b883a 	mov	r5,r2
 1008158:	a009883a 	mov	r4,r20
 100815c:	100307c0 	call	100307c <__mulsi3>
 1008160:	8809883a 	mov	r4,r17
 1008164:	b80b883a 	mov	r5,r23
 1008168:	102b883a 	mov	r21,r2
 100816c:	10004a80 	call	10004a8 <__umodsi3>
 1008170:	1004943a 	slli	r2,r2,16
 1008174:	e006d43a 	srli	r3,fp,16
 1008178:	902d883a 	mov	r22,r18
 100817c:	10c4b03a 	or	r2,r2,r3
 1008180:	1540022e 	bgeu	r2,r21,100818c <__umoddi3+0x388>
 1008184:	14c5883a 	add	r2,r2,r19
 1008188:	14c0ab2e 	bgeu	r2,r19,1008438 <__umoddi3+0x634>
 100818c:	1563c83a 	sub	r17,r2,r21
 1008190:	8809883a 	mov	r4,r17
 1008194:	b80b883a 	mov	r5,r23
 1008198:	10004a00 	call	10004a0 <__udivsi3>
 100819c:	100b883a 	mov	r5,r2
 10081a0:	a009883a 	mov	r4,r20
 10081a4:	100307c0 	call	100307c <__mulsi3>
 10081a8:	8809883a 	mov	r4,r17
 10081ac:	b80b883a 	mov	r5,r23
 10081b0:	102b883a 	mov	r21,r2
 10081b4:	10004a80 	call	10004a8 <__umodsi3>
 10081b8:	1004943a 	slli	r2,r2,16
 10081bc:	e0ffffcc 	andi	r3,fp,65535
 10081c0:	10c4b03a 	or	r2,r2,r3
 10081c4:	1540042e 	bgeu	r2,r21,10081d8 <__umoddi3+0x3d4>
 10081c8:	14c5883a 	add	r2,r2,r19
 10081cc:	14c00236 	bltu	r2,r19,10081d8 <__umoddi3+0x3d4>
 10081d0:	1540012e 	bgeu	r2,r21,10081d8 <__umoddi3+0x3d4>
 10081d4:	14c5883a 	add	r2,r2,r19
 10081d8:	84a0983a 	sll	r16,r16,r18
 10081dc:	156bc83a 	sub	r21,r2,r21
 10081e0:	003f3106 	br	1007ea8 <__umoddi3+0xa4>
 10081e4:	3c8fc83a 	sub	r7,r7,r18
 10081e8:	3486983a 	sll	r3,r6,r18
 10081ec:	99c4d83a 	srl	r2,r19,r7
 10081f0:	a9e2d83a 	srl	r17,r21,r7
 10081f4:	ac8c983a 	sll	r6,r21,r18
 10081f8:	18acb03a 	or	r22,r3,r2
 10081fc:	b02ed43a 	srli	r23,r22,16
 1008200:	81c4d83a 	srl	r2,r16,r7
 1008204:	8809883a 	mov	r4,r17
 1008208:	b80b883a 	mov	r5,r23
 100820c:	308cb03a 	or	r6,r6,r2
 1008210:	d9c00315 	stw	r7,12(sp)
 1008214:	d9800215 	stw	r6,8(sp)
 1008218:	b53fffcc 	andi	r20,r22,65535
 100821c:	10004a00 	call	10004a0 <__udivsi3>
 1008220:	100b883a 	mov	r5,r2
 1008224:	a009883a 	mov	r4,r20
 1008228:	1039883a 	mov	fp,r2
 100822c:	100307c0 	call	100307c <__mulsi3>
 1008230:	8809883a 	mov	r4,r17
 1008234:	b80b883a 	mov	r5,r23
 1008238:	102b883a 	mov	r21,r2
 100823c:	10004a80 	call	10004a8 <__umodsi3>
 1008240:	d9000217 	ldw	r4,8(sp)
 1008244:	1004943a 	slli	r2,r2,16
 1008248:	9ca6983a 	sll	r19,r19,r18
 100824c:	2006d43a 	srli	r3,r4,16
 1008250:	84a0983a 	sll	r16,r16,r18
 1008254:	dcc00015 	stw	r19,0(sp)
 1008258:	10c4b03a 	or	r2,r2,r3
 100825c:	dc000115 	stw	r16,4(sp)
 1008260:	1540032e 	bgeu	r2,r21,1008270 <__umoddi3+0x46c>
 1008264:	1585883a 	add	r2,r2,r22
 1008268:	e73fffc4 	addi	fp,fp,-1
 100826c:	15806e2e 	bgeu	r2,r22,1008428 <__umoddi3+0x624>
 1008270:	1563c83a 	sub	r17,r2,r21
 1008274:	8809883a 	mov	r4,r17
 1008278:	b80b883a 	mov	r5,r23
 100827c:	10004a00 	call	10004a0 <__udivsi3>
 1008280:	100b883a 	mov	r5,r2
 1008284:	a009883a 	mov	r4,r20
 1008288:	1021883a 	mov	r16,r2
 100828c:	100307c0 	call	100307c <__mulsi3>
 1008290:	b80b883a 	mov	r5,r23
 1008294:	8809883a 	mov	r4,r17
 1008298:	1029883a 	mov	r20,r2
 100829c:	10004a80 	call	10004a8 <__umodsi3>
 10082a0:	d9400217 	ldw	r5,8(sp)
 10082a4:	1004943a 	slli	r2,r2,16
 10082a8:	28ffffcc 	andi	r3,r5,65535
 10082ac:	10c4b03a 	or	r2,r2,r3
 10082b0:	1500032e 	bgeu	r2,r20,10082c0 <__umoddi3+0x4bc>
 10082b4:	1585883a 	add	r2,r2,r22
 10082b8:	843fffc4 	addi	r16,r16,-1
 10082bc:	1580562e 	bgeu	r2,r22,1008418 <__umoddi3+0x614>
 10082c0:	d9800017 	ldw	r6,0(sp)
 10082c4:	e022943a 	slli	r17,fp,16
 10082c8:	302ed43a 	srli	r23,r6,16
 10082cc:	8462b03a 	or	r17,r16,r17
 10082d0:	34ffffcc 	andi	r19,r6,65535
 10082d4:	882ad43a 	srli	r21,r17,16
 10082d8:	8c7fffcc 	andi	r17,r17,65535
 10082dc:	8809883a 	mov	r4,r17
 10082e0:	980b883a 	mov	r5,r19
 10082e4:	1521c83a 	sub	r16,r2,r20
 10082e8:	100307c0 	call	100307c <__mulsi3>
 10082ec:	8809883a 	mov	r4,r17
 10082f0:	b80b883a 	mov	r5,r23
 10082f4:	1029883a 	mov	r20,r2
 10082f8:	100307c0 	call	100307c <__mulsi3>
 10082fc:	980b883a 	mov	r5,r19
 1008300:	a809883a 	mov	r4,r21
 1008304:	1023883a 	mov	r17,r2
 1008308:	100307c0 	call	100307c <__mulsi3>
 100830c:	a809883a 	mov	r4,r21
 1008310:	b80b883a 	mov	r5,r23
 1008314:	1027883a 	mov	r19,r2
 1008318:	100307c0 	call	100307c <__mulsi3>
 100831c:	100b883a 	mov	r5,r2
 1008320:	a004d43a 	srli	r2,r20,16
 1008324:	8ce3883a 	add	r17,r17,r19
 1008328:	1449883a 	add	r4,r2,r17
 100832c:	24c0022e 	bgeu	r4,r19,1008338 <__umoddi3+0x534>
 1008330:	00800074 	movhi	r2,1
 1008334:	288b883a 	add	r5,r5,r2
 1008338:	2004d43a 	srli	r2,r4,16
 100833c:	2008943a 	slli	r4,r4,16
 1008340:	a0ffffcc 	andi	r3,r20,65535
 1008344:	288d883a 	add	r6,r5,r2
 1008348:	20c9883a 	add	r4,r4,r3
 100834c:	81800b36 	bltu	r16,r6,100837c <__umoddi3+0x578>
 1008350:	81804026 	beq	r16,r6,1008454 <__umoddi3+0x650>
 1008354:	818dc83a 	sub	r6,r16,r6
 1008358:	00000f06 	br	1008398 <__umoddi3+0x594>
 100835c:	30c5c83a 	sub	r2,r6,r3
 1008360:	182d883a 	mov	r22,r3
 1008364:	8084d83a 	srl	r2,r16,r2
 1008368:	a8c6983a 	sll	r3,r21,r3
 100836c:	9da6983a 	sll	r19,r19,r22
 1008370:	85a0983a 	sll	r16,r16,r22
 1008374:	18aab03a 	or	r21,r3,r2
 1008378:	003f1d06 	br	1007ff0 <__umoddi3+0x1ec>
 100837c:	d8c00017 	ldw	r3,0(sp)
 1008380:	20c5c83a 	sub	r2,r4,r3
 1008384:	2089803a 	cmpltu	r4,r4,r2
 1008388:	3587c83a 	sub	r3,r6,r22
 100838c:	1907c83a 	sub	r3,r3,r4
 1008390:	80cdc83a 	sub	r6,r16,r3
 1008394:	1009883a 	mov	r4,r2
 1008398:	d9400117 	ldw	r5,4(sp)
 100839c:	2905c83a 	sub	r2,r5,r4
 10083a0:	2887803a 	cmpltu	r3,r5,r2
 10083a4:	30c7c83a 	sub	r3,r6,r3
 10083a8:	d9800317 	ldw	r6,12(sp)
 10083ac:	1484d83a 	srl	r2,r2,r18
 10083b0:	1988983a 	sll	r4,r3,r6
 10083b4:	1c86d83a 	srl	r3,r3,r18
 10083b8:	2088b03a 	or	r4,r4,r2
 10083bc:	2011883a 	mov	r8,r4
 10083c0:	1813883a 	mov	r9,r3
 10083c4:	d9000415 	stw	r4,16(sp)
 10083c8:	d8c00515 	stw	r3,20(sp)
 10083cc:	003ed406 	br	1007f20 <__umoddi3+0x11c>
 10083d0:	01400604 	movi	r5,24
 10083d4:	2805883a 	mov	r2,r5
 10083d8:	003ea606 	br	1007e74 <__umoddi3+0x70>
 10083dc:	01400204 	movi	r5,8
 10083e0:	2805883a 	mov	r2,r5
 10083e4:	003ea306 	br	1007e74 <__umoddi3+0x70>
 10083e8:	01400204 	movi	r5,8
 10083ec:	2805883a 	mov	r2,r5
 10083f0:	003edf06 	br	1007f70 <__umoddi3+0x16c>
 10083f4:	01400204 	movi	r5,8
 10083f8:	2805883a 	mov	r2,r5
 10083fc:	003ef206 	br	1007fc8 <__umoddi3+0x1c4>
 1008400:	01400604 	movi	r5,24
 1008404:	2805883a 	mov	r2,r5
 1008408:	003eef06 	br	1007fc8 <__umoddi3+0x1c4>
 100840c:	01400604 	movi	r5,24
 1008410:	2805883a 	mov	r2,r5
 1008414:	003ed606 	br	1007f70 <__umoddi3+0x16c>
 1008418:	153fa92e 	bgeu	r2,r20,10082c0 <__umoddi3+0x4bc>
 100841c:	843fffc4 	addi	r16,r16,-1
 1008420:	1585883a 	add	r2,r2,r22
 1008424:	003fa606 	br	10082c0 <__umoddi3+0x4bc>
 1008428:	157f912e 	bgeu	r2,r21,1008270 <__umoddi3+0x46c>
 100842c:	e73fffc4 	addi	fp,fp,-1
 1008430:	1585883a 	add	r2,r2,r22
 1008434:	003f8e06 	br	1008270 <__umoddi3+0x46c>
 1008438:	157f542e 	bgeu	r2,r21,100818c <__umoddi3+0x388>
 100843c:	14c5883a 	add	r2,r2,r19
 1008440:	003f5206 	br	100818c <__umoddi3+0x388>
 1008444:	14c5883a 	add	r2,r2,r19
 1008448:	003efc06 	br	100803c <__umoddi3+0x238>
 100844c:	14c5883a 	add	r2,r2,r19
 1008450:	003ea606 	br	1007eec <__umoddi3+0xe8>
 1008454:	d8800117 	ldw	r2,4(sp)
 1008458:	113fc836 	bltu	r2,r4,100837c <__umoddi3+0x578>
 100845c:	000d883a 	mov	r6,zero
 1008460:	003fcd06 	br	1008398 <__umoddi3+0x594>

01008464 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1008464:	defffd04 	addi	sp,sp,-12
 1008468:	df000215 	stw	fp,8(sp)
 100846c:	df000204 	addi	fp,sp,8
 1008470:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1008474:	e0bfff17 	ldw	r2,-4(fp)
 1008478:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100847c:	e0bffe17 	ldw	r2,-8(fp)
 1008480:	1005003a 	cmpeq	r2,r2,zero
 1008484:	1000021e 	bne	r2,zero,1008490 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1008488:	002af070 	cmpltui	zero,zero,43969
 100848c:	00000106 	br	1008494 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1008490:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1008494:	e037883a 	mov	sp,fp
 1008498:	df000017 	ldw	fp,0(sp)
 100849c:	dec00104 	addi	sp,sp,4
 10084a0:	f800283a 	ret

010084a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10084a4:	defffd04 	addi	sp,sp,-12
 10084a8:	dfc00215 	stw	ra,8(sp)
 10084ac:	df000115 	stw	fp,4(sp)
 10084b0:	df000104 	addi	fp,sp,4
 10084b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10084b8:	e13fff17 	ldw	r4,-4(fp)
 10084bc:	10084640 	call	1008464 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10084c0:	003fff06 	br	10084c0 <_exit+0x1c>
 10084c4:	01007c50 	cmplti	r4,zero,497
