
sd_card.elf:     file format elf32-littlenios2
sd_card.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00012dfc memsz 0x00012dfc flags r-x
    LOAD off    0x00013e1c vaddr 0x01012e1c paddr 0x010148d0 align 2**12
         filesz 0x00001ab4 memsz 0x00001ab4 flags rw-
    LOAD off    0x00016384 vaddr 0x01016384 paddr 0x01016384 align 2**12
         filesz 0x00000000 memsz 0x00000888 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000127c8  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a0  0101297c  0101297c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab4  01012e1c  010148d0  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000888  01016384  01016384  00016384  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000158d0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  000158f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c2f  00000000  00000000  000166b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000299b4  00000000  00000000  000182df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008716  00000000  00000000  00041c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00017169  00000000  00000000  0004a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ffc  00000000  00000000  00061514  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000277b  00000000  00000000  00063510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ddd5  00000000  00000000  00065c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00073a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a30  00000000  00000000  00073a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078089  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007808c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078098  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078099  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007809a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000780a5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000780b0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000780bb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  000780c6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004accb  00000000  00000000  000780fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0101297c l    d  .rodata	00000000 .rodata
01012e1c l    d  .rwdata	00000000 .rwdata
01016384 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010004b4 l     F .text	00000058 __sprint_r
01012a62 l     O .rodata	00000010 blanks.3452
01012a52 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002530 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01003f58 l     F .text	00000058 std
01004064 l     F .text	00000008 __fp_lock
0100406c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01012e1c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0101489c l     O .rwdata	00000004 charset
01012a98 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01012be0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01008418 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009544 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01009e80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01009ee0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01009fe4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a108 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a1e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a348 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010148c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100a830 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010137d8 l     O .rwdata	00001060 jtag_uart_0
01014838 l     O .rwdata	0000002c character_lcd_0
01014864 l     O .rwdata	0000002c SD_Card
0100a92c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
01012d5c l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100f188 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100f3b0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01010180 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010624 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01010774 l     F .text	000000f8 alt_file_locked
010109f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01011100 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0101161c l     F .text	00000058 __sprint_r
01012e0c l     O .rodata	00000010 blanks.3391
01012dfc l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 alt_exit.c
01012758 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
01012918 l     F .text	00000060 alt_get_errno
010163b4 g     O .bss	00000004 aux_status_register
01005d48 g     F .text	00000094 _mprec_log10
01005e34 g     F .text	00000088 __any_on
010075ec g     F .text	00000070 _isatty_r
01012bb8 g     O .rodata	00000028 __mprec_tinytens
0100a3a8 g     F .text	0000006c alt_main
0100038c g     F .text	000000a0 _puts_r
0101697c g     O .bss	00000100 alt_irq
0100765c g     F .text	00000078 _lseek_r
010148d0 g       *ABS*	00000000 __flash_rwdata_start
0100faa8 g     F .text	00000034 alt_up_character_lcd_send_cmd
01008f38 g     F .text	00000088 __eqdf2
0100ad14 g     F .text	000001b0 Check_for_Master_Boot_Record
01016c0c g       *ABS*	00000000 __alt_heap_start
0100ebf4 g     F .text	00000200 alt_up_sd_card_fclose
010115a8 g     F .text	00000074 _kill_r
01000314 g     F .text	00000044 printf
010114e8 g     F .text	000000a0 _signal_r
010070a4 g     F .text	00000068 __sseek
01003fc0 g     F .text	000000a4 __sinit
01004ccc g     F .text	00000084 _setlocale_r
010040c0 g     F .text	0000009c __sfmoreglue
0100a434 g     F .text	00000020 __malloc_unlock
010163d8 g     O .bss	00000004 current_sector_modified
0100eef0 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
010057c4 g     F .text	000000e0 memmove
010040b0 g     F .text	00000010 _cleanup
01005ebc g     F .text	000000bc _Balloc
0100d798 g     F .text	000000c8 alt_up_sd_card_is_Present
0100aa2c g     F .text	00000050 Save_Modified_Sector
01009048 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100fa2c g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
010163d0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
01007578 g     F .text	00000074 _fstat_r
0101639c g     O .bss	00000004 errno
010163a4 g     O .bss	00000004 alt_argv
0101c890 g       *ABS*	00000000 _gp
0100dd58 g     F .text	000003a8 alt_up_sd_card_fopen
0100d8d4 g     F .text	000000d4 alt_up_sd_card_find_first
010163c4 g     O .bss	00000004 command_argument_register
010127b8 g     F .text	00000020 getpid
01013658 g     O .rwdata	00000180 alt_fd_list
0100cfc0 g     F .text	0000012c find_first_empty_record_in_root_directory
010102a8 g     F .text	00000094 alt_find_dev
01005724 g     F .text	000000a0 memcpy
0100fc40 g     F .text	0000004c alt_up_character_lcd_write_fd
010040a4 g     F .text	0000000c _cleanup_r
010091e0 g     F .text	000000f8 __floatsidf
010106fc g     F .text	00000078 alt_io_redirect
01009158 g     F .text	00000088 __ltdf2
0101297c g       *ABS*	00000000 __DTOR_END__
0100042c g     F .text	00000014 puts
0100cbd0 g     F .text	000001a4 find_first_empty_cluster
01005c98 g     F .text	000000b0 __ratio
0100d6d4 g     F .text	000000c4 alt_up_sd_card_open_dev
01012734 g     F .text	00000024 __vfiprintf_internal
0100f5c8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01000358 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01009680 g     F .text	00000008 __udivsi3
0100a044 g     F .text	000000c4 isatty
010112cc g     F .text	000000cc _raise_r
01010e0c g     F .text	00000064 __assert_func
01012ac8 g     O .rodata	000000c8 __mprec_tens
01004ca8 g     F .text	00000008 __locale_charset
01016390 g     O .bss	00000004 __malloc_top_pad
010115a4 g     F .text	00000004 _getpid_r
01014898 g     O .rwdata	00000004 __mb_cur_max
01004cb0 g     F .text	0000000c _localeconv_r
01006620 g     F .text	0000003c __i2b
0100468c g     F .text	0000049c __sfvwrite_r
01011420 g     F .text	000000b4 __sigtramp_r
0100beac g     F .text	000000c0 get_dir_divider_location
0100702c g     F .text	00000070 _sbrk_r
0100bb4c g     F .text	000000d0 filename_to_upper_case
0100e100 g     F .text	00000090 alt_up_sd_card_set_attributes
0100aec4 g     F .text	00000284 Read_File_Record_At_Offset
010076d4 g     F .text	00000078 _read_r
0101321c g     O .rwdata	0000000c __lc_ctype
010148b8 g     O .rwdata	00000004 alt_max_fd
01009b80 g     F .text	00000138 __unpack_d
0100c76c g     F .text	00000464 find_file_in_directory
01007454 g     F .text	00000110 _fclose_r
01003f24 g     F .text	00000034 fflush
01016394 g     O .bss	00000004 __malloc_max_sbrked_mem
0100d860 g     F .text	00000074 alt_up_sd_card_is_FAT16
010088a8 g     F .text	00000074 __adddf3
01005b78 g     F .text	00000120 __b2d
01007db8 g     F .text	00000660 __umoddi3
0100a254 g     F .text	000000f4 lseek
01014894 g     O .rwdata	00000004 _global_impure_ptr
0100c258 g     F .text	00000514 get_home_directory_cluster_for_file
010069c8 g     F .text	000005f4 _realloc_r
01016c0c g       *ABS*	00000000 __bss_end
0101052c g     F .text	000000f8 alt_iic_isr_register
01010af0 g     F .text	0000010c alt_tick
0100774c g     F .text	0000066c __udivdi3
01012b90 g     O .rodata	00000028 __mprec_bigtens
010068a8 g     F .text	00000120 __s2b
010112b4 g     F .text	00000018 abort
010093b0 g     F .text	00000194 __floatunsidf
01005a98 g     F .text	00000060 __mcmp
010163dc g     O .bss	00000004 current_sector_index
0100408c g     F .text	00000018 __fp_lock_all
010104e4 g     F .text	00000048 alt_ic_irq_enabled
01010a58 g     F .text	00000098 alt_alarm_stop
0100ac30 g     F .text	000000e4 mark_cluster
010163e0 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01013630 g     O .rwdata	00000028 alt_dev_null
0100d0ec g     F .text	000001b8 convert_filename_to_name_extension
0100ff28 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010100b0 g     F .text	0000001c alt_dcache_flush_all
01005964 g     F .text	00000070 __hi0bits
010163b0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
010092d8 g     F .text	000000d8 __fixdfsi
0100cd74 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
010148d0 g       *ABS*	00000000 __ram_rwdata_end
010148b0 g     O .rwdata	00000008 alt_dev_list
0100a70c g     F .text	00000124 write
010163d4 g     O .bss	00000004 device_pointer
01012e1c g       *ABS*	00000000 __ram_rodata_end
01009f0c g     F .text	000000d8 fstat
010127d8 g     F .text	00000140 kill
01006788 g     F .text	00000120 __pow5mult
01011674 g     F .text	000010c0 ___vfiprintf_internal_r
01016384 g     O .bss	00000004 __nlocale_changed
01009688 g     F .text	00000008 __umodsi3
01016c0c g       *ABS*	00000000 end
0100f0c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
01012978 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010097ec g     F .text	00000080 __clzsi2
0100f7ec g     F .text	00000240 altera_avalon_jtag_uart_write
01003fb0 g     F .text	00000004 __sfp_lock_acquire
01005640 g     F .text	000000e4 memchr
0100fb50 g     F .text	00000078 alt_up_character_lcd_write
0100050c g     F .text	00001ec4 ___vfprintf_internal_r
01004378 g     F .text	00000314 _free_r
01011104 g     F .text	000001b0 __call_exitprocs
01016388 g     O .bss	00000004 __mlocale_changed
010148a4 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010163e4 g     O .bss	00000004 _alt_tick_rate
01006280 g     F .text	0000014c __lshift
010163e8 g     O .bss	00000004 _alt_nticks
01011588 g     F .text	0000001c signal
0100a454 g     F .text	00000124 read
0100a8c4 g     F .text	00000068 alt_sys_init
0100fdb4 g     F .text	000000b0 alt_up_character_lcd_shift_display
01010fcc g     F .text	00000134 __register_exitproc
010063cc g     F .text	00000254 __multiply
0100fe64 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100f460 g     F .text	00000074 altera_avalon_jtag_uart_close
01009690 g     F .text	00000038 __mulsi3
01012e1c g       *ABS*	00000000 __ram_rwdata_start
0101297c g       *ABS*	00000000 __ram_rodata_start
010163ec g     O .bss	00000028 __malloc_current_mallinfo
01005f78 g     F .text	0000017c __d2b
010163ac g     O .bss	00000004 initialized
0100ef80 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01010d3c g     F .text	000000d0 alt_get_fd
01016414 g     O .bss	00000014 search_data
01009cb8 g     F .text	000000c8 __fpcmp_parts_d
010073e4 g     F .text	00000070 _close_r
01010f3c g     F .text	00000074 memcmp
0100f030 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01016c0c g       *ABS*	00000000 __alt_stack_base
0100f078 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010023f4 g     F .text	0000013c __swsetup_r
01008ce0 g     F .text	00000258 __divdf3
0100415c g     F .text	000000f0 __sfp
01016428 g     O .bss	00000054 boot_sector_data
01005ddc g     F .text	00000058 __copybits
01013228 g     O .rwdata	00000408 __malloc_av_
01003fbc g     F .text	00000004 __sinit_lock_release
0100891c g     F .text	000003c4 __muldf3
01007188 g     F .text	00000060 __sread
01010c1c g     F .text	00000120 alt_find_file
010100cc g     F .text	000000b4 alt_dev_llist_insert
0100a414 g     F .text	00000020 __malloc_lock
0100a650 g     F .text	000000bc sbrk
01003d28 g     F .text	000001fc _fflush_r
0100731c g     F .text	000000c8 _calloc_r
01016384 g       *ABS*	00000000 __bss_start
010058a4 g     F .text	00000098 memset
010001f0 g     F .text	00000124 main
010163a8 g     O .bss	00000004 alt_envp
01016398 g     O .bss	00000004 __malloc_max_total_mem
0100efd8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100e190 g     F .text	0000008c alt_up_sd_card_get_attributes
0100a964 g     F .text	000000c8 Write_Sector_Data
0100e5b8 g     F .text	0000063c alt_up_sd_card_write
0100fd04 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100709c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01007564 g     F .text	00000014 fclose
01016a7c g     O .bss	00000190 _atexit0
01002774 g     F .text	000015b4 _dtoa_r
01004f00 g     F .text	00000740 _malloc_r
010148bc g     O .rwdata	00000004 alt_errno
01010f14 g     F .text	00000028 _fiprintf_r
01011410 g     F .text	00000010 _init_signal
01004bf0 g     F .text	000000b8 _fwalk
010095c0 g     F .text	00000060 __divsi3
01012bec g     O .rodata	00000014 __thenan_df
0100fb10 g     F .text	00000040 alt_up_character_lcd_open_dev
0100424c g     F .text	0000012c _malloc_trim_r
0101297c g       *ABS*	00000000 __CTOR_END__
010163b8 g     O .bss	00000004 status_register
0100fadc g     F .text	00000034 alt_up_character_lcd_init
010071e8 g     F .text	000000bc strcmp
010163c0 g     O .bss	00000004 command_register
0101297c g       *ABS*	00000000 __flash_rodata_start
0101297c g       *ABS*	00000000 __DTOR_LIST__
01008fc0 g     F .text	00000088 __nedf2
0100a890 g     F .text	00000034 alt_irq_init
0100a5d8 g     F .text	00000078 alt_release_fd
0100ab78 g     F .text	000000b8 get_cluster_flag
0100fef4 g     F .text	00000034 alt_up_character_lcd_cursor_off
01012c00 g     O .rodata	00000100 __clz_tab
0100b148 g     F .text	000002b8 Write_File_Record_At_Offset
0101638c g     O .bss	00000004 _PathLocale
01010e84 g     F .text	00000014 atexit
010072a4 g     F .text	00000078 _write_r
01004d50 g     F .text	0000001c setlocale
0100b400 g     F .text	00000648 Check_for_DOS_FAT
0100d2a4 g     F .text	000002dc create_file
01014890 g     O .rwdata	00000004 _impure_ptr
010163bc g     O .bss	00000004 CSD_register_w0
010163a0 g     O .bss	00000004 alt_argc
01010244 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005af8 g     F .text	00000080 __ulp
01006fbc g     F .text	00000040 __isinfd
01004074 g     F .text	00000018 __fp_unlock_all
010148a8 g     O .rwdata	00000008 alt_fs_list
0100bc1c g     F .text	00000290 check_file_name_for_FAT16_compliance
010163c8 g     O .bss	00000004 buffer_memory
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004cbc g     F .text	00000010 localeconv
01010358 g     F .text	00000050 alt_ic_isr_register
010163cc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
010148d0 g       *ABS*	00000000 _edata
01016c0c g       *ABS*	00000000 _end
0101647c g     O .bss	00000500 active_files
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100d580 g     F .text	00000154 copy_file_record_name_to_string
0100f4d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100ba48 g     F .text	00000104 Look_for_FAT16
01010444 g     F .text	000000a0 alt_ic_irq_disable
0100710c g     F .text	0000007c __swrite
010148a0 g     O .rwdata	00000004 __malloc_trim_threshold
01010bfc g     F .text	00000020 altera_nios2_qsys_irq_init
01010e98 g     F .text	00000038 exit
01010ed0 g     F .text	00000044 fiprintf
01010fb0 g     F .text	0000001c _vfiprintf_r
0100d9a8 g     F .text	000003b0 alt_up_sd_card_find_next
01004b28 g     F .text	000000c8 _fwalk_reent
010060f4 g     F .text	0000018c __mdiff
01009620 g     F .text	00000060 __modsi3
0100aa7c g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01003fb4 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100fbc8 g     F .text	00000078 alt_up_character_lcd_string
01012798 g     F .text	00000020 _exit
01006ffc g     F .text	00000030 __isnand
0100ff5c g     F .text	00000154 alt_alarm_start
010096c8 g     F .text	00000124 __muldi3
0100edf4 g     F .text	000000fc Read_Sector_Data_CRC
0100e21c g     F .text	0000039c alt_up_sd_card_read
01004d6c g     F .text	00000194 __smakebuf_r
01000440 g     F .text	00000074 strlen
010113ac g     F .text	00000064 _init_signal_r
0101086c g     F .text	0000018c open
010090d0 g     F .text	00000088 __gedf2
01010e70 g     F .text	00000014 __assert
0101033c g     F .text	0000001c alt_icache_flush_all
0100fc8c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
010148c4 g     O .rwdata	00000004 alt_priority_mask
010103a8 g     F .text	0000009c alt_ic_irq_enable
010023d0 g     F .text	00000024 __vfprintf_internal
01008828 g     F .text	00000080 __subdf3
010059d4 g     F .text	000000c4 __lo0bits
010148c8 g     O .rwdata	00000008 alt_alarm_list
010101e0 g     F .text	00000064 _do_ctors
010114d4 g     F .text	00000014 __sigtramp
01009d80 g     F .text	00000100 close
0100a168 g     F .text	00000080 alt_load
0100986c g     F .text	00000314 __pack_d
0100bf6c g     F .text	000002ec match_file_record_to_name_ext
01011398 g     F .text	00000014 raise
00000000  w      *UND*	00000000 free
01003fb8 g     F .text	00000004 __sinit_lock_acquire
0100665c g     F .text	0000012c __multadd
0100593c g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18da5f04 	addi	r3,r3,27004
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18da5f04 	addi	r3,r3,27004
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6b22414 	ori	gp,gp,51344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	1098e114 	ori	r2,r2,25476

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18db0314 	ori	r3,r3,27660

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100a1680 	call	100a168 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100a3a80 	call	100a3a8 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:
#include <stdio.h>
#include <altera_up_sd_card_avalon_interface.h>

int main(void) {
 10001f0:	defff904 	addi	sp,sp,-28
 10001f4:	dfc00615 	stw	ra,24(sp)
 10001f8:	df000515 	stw	fp,20(sp)
 10001fc:	df000504 	addi	fp,sp,20
	char buffer_name[10];
	short int handler;
	alt_up_sd_card_dev *device_reference = NULL;
 1000200:	e03ffc15 	stw	zero,-16(fp)
	int connected = 0;
 1000204:	e03ffb15 	stw	zero,-20(fp)
	device_reference = alt_up_sd_card_open_dev("/dev/SD_Card");
 1000208:	01004074 	movhi	r4,257
 100020c:	210a5f04 	addi	r4,r4,10620
 1000210:	100d6d40 	call	100d6d4 <alt_up_sd_card_open_dev>
 1000214:	e0bffc15 	stw	r2,-16(fp)

	if (device_reference != NULL) {
 1000218:	e0bffc17 	ldw	r2,-16(fp)
 100021c:	1005003a 	cmpeq	r2,r2,zero
 1000220:	1000361e 	bne	r2,zero,10002fc <main+0x10c>
 1000224:	00000006 	br	1000228 <main+0x38>
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 1000228:	e0bffb17 	ldw	r2,-20(fp)
 100022c:	1004c03a 	cmpne	r2,r2,zero
 1000230:	1000271e 	bne	r2,zero,10002d0 <main+0xe0>
 1000234:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 1000238:	1005003a 	cmpeq	r2,r2,zero
 100023c:	1000241e 	bne	r2,zero,10002d0 <main+0xe0>
			printf("Card connected.\n");
 1000240:	01004074 	movhi	r4,257
 1000244:	210a6304 	addi	r4,r4,10636
 1000248:	100042c0 	call	100042c <puts>
				if (alt_up_sd_card_is_FAT16()) {
 100024c:	100d8600 	call	100d860 <alt_up_sd_card_is_FAT16>
 1000250:	1005003a 	cmpeq	r2,r2,zero
 1000254:	1000181e 	bne	r2,zero,10002b8 <main+0xc8>
					printf("FAT16 file system detected.\n");
 1000258:	01004074 	movhi	r4,257
 100025c:	210a6704 	addi	r4,r4,10652
 1000260:	100042c0 	call	100042c <puts>

					//Print out the list in the sd card
					handler = alt_up_sd_card_find_first("", buffer_name);
 1000264:	e17ffd84 	addi	r5,fp,-10
 1000268:	01004074 	movhi	r4,257
 100026c:	210a6e04 	addi	r4,r4,10680
 1000270:	100d8d40 	call	100d8d4 <alt_up_sd_card_find_first>
 1000274:	e0bffd0d 	sth	r2,-12(fp)
					printf("%s \n", buffer_name);
 1000278:	e17ffd84 	addi	r5,fp,-10
 100027c:	01004074 	movhi	r4,257
 1000280:	210a6f04 	addi	r4,r4,10684
 1000284:	10003140 	call	1000314 <printf>
					while ((handler = alt_up_sd_card_find_next(buffer_name)) != -1)
 1000288:	00000406 	br	100029c <main+0xac>
						printf("%s \n", buffer_name);
 100028c:	e17ffd84 	addi	r5,fp,-10
 1000290:	01004074 	movhi	r4,257
 1000294:	210a6f04 	addi	r4,r4,10684
 1000298:	10003140 	call	1000314 <printf>
					printf("FAT16 file system detected.\n");

					//Print out the list in the sd card
					handler = alt_up_sd_card_find_first("", buffer_name);
					printf("%s \n", buffer_name);
					while ((handler = alt_up_sd_card_find_next(buffer_name)) != -1)
 100029c:	e13ffd84 	addi	r4,fp,-10
 10002a0:	100d9a80 	call	100d9a8 <alt_up_sd_card_find_next>
 10002a4:	e0bffd0d 	sth	r2,-12(fp)
 10002a8:	e0bffd0f 	ldh	r2,-12(fp)
 10002ac:	10bfffd8 	cmpnei	r2,r2,-1
 10002b0:	103ff61e 	bne	r2,zero,100028c <main+0x9c>
 10002b4:	00000306 	br	10002c4 <main+0xd4>
						printf("%s \n", buffer_name);

				}else{
					printf("Unknown file system.\n");
 10002b8:	01004074 	movhi	r4,257
 10002bc:	210a7104 	addi	r4,r4,10692
 10002c0:	100042c0 	call	100042c <puts>
				}
				connected = 1;
 10002c4:	00800044 	movi	r2,1
 10002c8:	e0bffb15 	stw	r2,-20(fp)
	int connected = 0;
	device_reference = alt_up_sd_card_open_dev("/dev/SD_Card");

	if (device_reference != NULL) {
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 10002cc:	003fd606 	br	1000228 <main+0x38>

				}else{
					printf("Unknown file system.\n");
				}
				connected = 1;
			} else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)) {
 10002d0:	e0bffb17 	ldw	r2,-20(fp)
 10002d4:	10800058 	cmpnei	r2,r2,1
 10002d8:	103fd31e 	bne	r2,zero,1000228 <main+0x38>
 10002dc:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 10002e0:	1004c03a 	cmpne	r2,r2,zero
 10002e4:	103fd01e 	bne	r2,zero,1000228 <main+0x38>
				printf("Card disconnected.\n");
 10002e8:	01004074 	movhi	r4,257
 10002ec:	210a7704 	addi	r4,r4,10716
 10002f0:	100042c0 	call	100042c <puts>
				connected = 0;
 10002f4:	e03ffb15 	stw	zero,-20(fp)
			}
		}
 10002f8:	003fcb06 	br	1000228 <main+0x38>
	}
	return 0;
 10002fc:	0005883a 	mov	r2,zero
}
 1000300:	e037883a 	mov	sp,fp
 1000304:	dfc00117 	ldw	ra,4(sp)
 1000308:	df000017 	ldw	fp,0(sp)
 100030c:	dec00204 	addi	sp,sp,8
 1000310:	f800283a 	ret

01000314 <printf>:
 1000314:	defffb04 	addi	sp,sp,-20
 1000318:	dfc00115 	stw	ra,4(sp)
 100031c:	d9400215 	stw	r5,8(sp)
 1000320:	d9800315 	stw	r6,12(sp)
 1000324:	d9c00415 	stw	r7,16(sp)
 1000328:	00804074 	movhi	r2,257
 100032c:	10922404 	addi	r2,r2,18576
 1000330:	10c00017 	ldw	r3,0(r2)
 1000334:	200b883a 	mov	r5,r4
 1000338:	d8800204 	addi	r2,sp,8
 100033c:	19000217 	ldw	r4,8(r3)
 1000340:	100d883a 	mov	r6,r2
 1000344:	d8800015 	stw	r2,0(sp)
 1000348:	10023d00 	call	10023d0 <__vfprintf_internal>
 100034c:	dfc00117 	ldw	ra,4(sp)
 1000350:	dec00504 	addi	sp,sp,20
 1000354:	f800283a 	ret

01000358 <_printf_r>:
 1000358:	defffc04 	addi	sp,sp,-16
 100035c:	dfc00115 	stw	ra,4(sp)
 1000360:	d9800215 	stw	r6,8(sp)
 1000364:	d9c00315 	stw	r7,12(sp)
 1000368:	280d883a 	mov	r6,r5
 100036c:	21400217 	ldw	r5,8(r4)
 1000370:	d8c00204 	addi	r3,sp,8
 1000374:	180f883a 	mov	r7,r3
 1000378:	d8c00015 	stw	r3,0(sp)
 100037c:	100050c0 	call	100050c <___vfprintf_internal_r>
 1000380:	dfc00117 	ldw	ra,4(sp)
 1000384:	dec00404 	addi	sp,sp,16
 1000388:	f800283a 	ret

0100038c <_puts_r>:
 100038c:	defff604 	addi	sp,sp,-40
 1000390:	dc400715 	stw	r17,28(sp)
 1000394:	2023883a 	mov	r17,r4
 1000398:	2809883a 	mov	r4,r5
 100039c:	dfc00915 	stw	ra,36(sp)
 10003a0:	dcc00815 	stw	r19,32(sp)
 10003a4:	2827883a 	mov	r19,r5
 10003a8:	10004400 	call	1000440 <strlen>
 10003ac:	89400217 	ldw	r5,8(r17)
 10003b0:	00c04074 	movhi	r3,257
 10003b4:	18ca7c04 	addi	r3,r3,10736
 10003b8:	01c00044 	movi	r7,1
 10003bc:	12000044 	addi	r8,r2,1
 10003c0:	d8c00515 	stw	r3,20(sp)
 10003c4:	d9c00615 	stw	r7,24(sp)
 10003c8:	d8c00304 	addi	r3,sp,12
 10003cc:	01c00084 	movi	r7,2
 10003d0:	8809883a 	mov	r4,r17
 10003d4:	d80d883a 	mov	r6,sp
 10003d8:	d8c00015 	stw	r3,0(sp)
 10003dc:	dcc00315 	stw	r19,12(sp)
 10003e0:	da000215 	stw	r8,8(sp)
 10003e4:	d9c00115 	stw	r7,4(sp)
 10003e8:	d8800415 	stw	r2,16(sp)
 10003ec:	100468c0 	call	100468c <__sfvwrite_r>
 10003f0:	00ffffc4 	movi	r3,-1
 10003f4:	10000626 	beq	r2,zero,1000410 <_puts_r+0x84>
 10003f8:	1805883a 	mov	r2,r3
 10003fc:	dfc00917 	ldw	ra,36(sp)
 1000400:	dcc00817 	ldw	r19,32(sp)
 1000404:	dc400717 	ldw	r17,28(sp)
 1000408:	dec00a04 	addi	sp,sp,40
 100040c:	f800283a 	ret
 1000410:	00c00284 	movi	r3,10
 1000414:	1805883a 	mov	r2,r3
 1000418:	dfc00917 	ldw	ra,36(sp)
 100041c:	dcc00817 	ldw	r19,32(sp)
 1000420:	dc400717 	ldw	r17,28(sp)
 1000424:	dec00a04 	addi	sp,sp,40
 1000428:	f800283a 	ret

0100042c <puts>:
 100042c:	00804074 	movhi	r2,257
 1000430:	10922404 	addi	r2,r2,18576
 1000434:	200b883a 	mov	r5,r4
 1000438:	11000017 	ldw	r4,0(r2)
 100043c:	100038c1 	jmpi	100038c <_puts_r>

01000440 <strlen>:
 1000440:	208000cc 	andi	r2,r4,3
 1000444:	2011883a 	mov	r8,r4
 1000448:	1000161e 	bne	r2,zero,10004a4 <strlen+0x64>
 100044c:	20c00017 	ldw	r3,0(r4)
 1000450:	017fbff4 	movhi	r5,65279
 1000454:	297fbfc4 	addi	r5,r5,-257
 1000458:	01e02074 	movhi	r7,32897
 100045c:	39e02004 	addi	r7,r7,-32640
 1000460:	1945883a 	add	r2,r3,r5
 1000464:	11c4703a 	and	r2,r2,r7
 1000468:	00c6303a 	nor	r3,zero,r3
 100046c:	1886703a 	and	r3,r3,r2
 1000470:	18000c1e 	bne	r3,zero,10004a4 <strlen+0x64>
 1000474:	280d883a 	mov	r6,r5
 1000478:	380b883a 	mov	r5,r7
 100047c:	21000104 	addi	r4,r4,4
 1000480:	20800017 	ldw	r2,0(r4)
 1000484:	1187883a 	add	r3,r2,r6
 1000488:	1946703a 	and	r3,r3,r5
 100048c:	0084303a 	nor	r2,zero,r2
 1000490:	10c4703a 	and	r2,r2,r3
 1000494:	103ff926 	beq	r2,zero,100047c <strlen+0x3c>
 1000498:	20800007 	ldb	r2,0(r4)
 100049c:	10000326 	beq	r2,zero,10004ac <strlen+0x6c>
 10004a0:	21000044 	addi	r4,r4,1
 10004a4:	20800007 	ldb	r2,0(r4)
 10004a8:	103ffd1e 	bne	r2,zero,10004a0 <strlen+0x60>
 10004ac:	2205c83a 	sub	r2,r4,r8
 10004b0:	f800283a 	ret

010004b4 <__sprint_r>:
 10004b4:	30800217 	ldw	r2,8(r6)
 10004b8:	defffe04 	addi	sp,sp,-8
 10004bc:	dc000015 	stw	r16,0(sp)
 10004c0:	dfc00115 	stw	ra,4(sp)
 10004c4:	3021883a 	mov	r16,r6
 10004c8:	0007883a 	mov	r3,zero
 10004cc:	1000061e 	bne	r2,zero,10004e8 <__sprint_r+0x34>
 10004d0:	1805883a 	mov	r2,r3
 10004d4:	30000115 	stw	zero,4(r6)
 10004d8:	dfc00117 	ldw	ra,4(sp)
 10004dc:	dc000017 	ldw	r16,0(sp)
 10004e0:	dec00204 	addi	sp,sp,8
 10004e4:	f800283a 	ret
 10004e8:	100468c0 	call	100468c <__sfvwrite_r>
 10004ec:	1007883a 	mov	r3,r2
 10004f0:	1805883a 	mov	r2,r3
 10004f4:	80000115 	stw	zero,4(r16)
 10004f8:	80000215 	stw	zero,8(r16)
 10004fc:	dfc00117 	ldw	ra,4(sp)
 1000500:	dc000017 	ldw	r16,0(sp)
 1000504:	dec00204 	addi	sp,sp,8
 1000508:	f800283a 	ret

0100050c <___vfprintf_internal_r>:
 100050c:	defea404 	addi	sp,sp,-1392
 1000510:	dd815815 	stw	r22,1376(sp)
 1000514:	dc015215 	stw	r16,1352(sp)
 1000518:	d9c15115 	stw	r7,1348(sp)
 100051c:	dfc15b15 	stw	ra,1388(sp)
 1000520:	df015a15 	stw	fp,1384(sp)
 1000524:	ddc15915 	stw	r23,1380(sp)
 1000528:	dd415715 	stw	r21,1372(sp)
 100052c:	dd015615 	stw	r20,1368(sp)
 1000530:	dcc15515 	stw	r19,1364(sp)
 1000534:	dc815415 	stw	r18,1360(sp)
 1000538:	dc415315 	stw	r17,1356(sp)
 100053c:	282d883a 	mov	r22,r5
 1000540:	3021883a 	mov	r16,r6
 1000544:	d9014f15 	stw	r4,1340(sp)
 1000548:	1004cb00 	call	1004cb0 <_localeconv_r>
 100054c:	10800017 	ldw	r2,0(r2)
 1000550:	d9c15117 	ldw	r7,1348(sp)
 1000554:	d8814915 	stw	r2,1316(sp)
 1000558:	d8814f17 	ldw	r2,1340(sp)
 100055c:	10000226 	beq	r2,zero,1000568 <___vfprintf_internal_r+0x5c>
 1000560:	10800e17 	ldw	r2,56(r2)
 1000564:	10020d26 	beq	r2,zero,1000d9c <___vfprintf_internal_r+0x890>
 1000568:	b080030b 	ldhu	r2,12(r22)
 100056c:	1080020c 	andi	r2,r2,8
 1000570:	10020e26 	beq	r2,zero,1000dac <___vfprintf_internal_r+0x8a0>
 1000574:	b0800417 	ldw	r2,16(r22)
 1000578:	10020c26 	beq	r2,zero,1000dac <___vfprintf_internal_r+0x8a0>
 100057c:	b200030b 	ldhu	r8,12(r22)
 1000580:	00800284 	movi	r2,10
 1000584:	40c0068c 	andi	r3,r8,26
 1000588:	18802f1e 	bne	r3,r2,1000648 <___vfprintf_internal_r+0x13c>
 100058c:	b080038f 	ldh	r2,14(r22)
 1000590:	10002d16 	blt	r2,zero,1000648 <___vfprintf_internal_r+0x13c>
 1000594:	b240038b 	ldhu	r9,14(r22)
 1000598:	b2800717 	ldw	r10,28(r22)
 100059c:	b2c00917 	ldw	r11,36(r22)
 10005a0:	d9014f17 	ldw	r4,1340(sp)
 10005a4:	dc402904 	addi	r17,sp,164
 10005a8:	d8804004 	addi	r2,sp,256
 10005ac:	00c10004 	movi	r3,1024
 10005b0:	423fff4c 	andi	r8,r8,65533
 10005b4:	800d883a 	mov	r6,r16
 10005b8:	880b883a 	mov	r5,r17
 10005bc:	da002c0d 	sth	r8,176(sp)
 10005c0:	da402c8d 	sth	r9,178(sp)
 10005c4:	da803015 	stw	r10,192(sp)
 10005c8:	dac03215 	stw	r11,200(sp)
 10005cc:	d8802d15 	stw	r2,180(sp)
 10005d0:	d8c02e15 	stw	r3,184(sp)
 10005d4:	d8802915 	stw	r2,164(sp)
 10005d8:	d8c02b15 	stw	r3,172(sp)
 10005dc:	d8002f15 	stw	zero,188(sp)
 10005e0:	100050c0 	call	100050c <___vfprintf_internal_r>
 10005e4:	d8814b15 	stw	r2,1324(sp)
 10005e8:	10000416 	blt	r2,zero,10005fc <___vfprintf_internal_r+0xf0>
 10005ec:	d9014f17 	ldw	r4,1340(sp)
 10005f0:	880b883a 	mov	r5,r17
 10005f4:	1003d280 	call	1003d28 <_fflush_r>
 10005f8:	1002321e 	bne	r2,zero,1000ec4 <___vfprintf_internal_r+0x9b8>
 10005fc:	d8802c0b 	ldhu	r2,176(sp)
 1000600:	1080100c 	andi	r2,r2,64
 1000604:	10000326 	beq	r2,zero,1000614 <___vfprintf_internal_r+0x108>
 1000608:	b080030b 	ldhu	r2,12(r22)
 100060c:	10801014 	ori	r2,r2,64
 1000610:	b080030d 	sth	r2,12(r22)
 1000614:	d8814b17 	ldw	r2,1324(sp)
 1000618:	dfc15b17 	ldw	ra,1388(sp)
 100061c:	df015a17 	ldw	fp,1384(sp)
 1000620:	ddc15917 	ldw	r23,1380(sp)
 1000624:	dd815817 	ldw	r22,1376(sp)
 1000628:	dd415717 	ldw	r21,1372(sp)
 100062c:	dd015617 	ldw	r20,1368(sp)
 1000630:	dcc15517 	ldw	r19,1364(sp)
 1000634:	dc815417 	ldw	r18,1360(sp)
 1000638:	dc415317 	ldw	r17,1356(sp)
 100063c:	dc015217 	ldw	r16,1352(sp)
 1000640:	dec15c04 	addi	sp,sp,1392
 1000644:	f800283a 	ret
 1000648:	0005883a 	mov	r2,zero
 100064c:	0007883a 	mov	r3,zero
 1000650:	dd401904 	addi	r21,sp,100
 1000654:	d8814215 	stw	r2,1288(sp)
 1000658:	802f883a 	mov	r23,r16
 100065c:	d8c14315 	stw	r3,1292(sp)
 1000660:	d8014b15 	stw	zero,1324(sp)
 1000664:	d8014815 	stw	zero,1312(sp)
 1000668:	d8014415 	stw	zero,1296(sp)
 100066c:	d8014715 	stw	zero,1308(sp)
 1000670:	dd400c15 	stw	r21,48(sp)
 1000674:	d8000e15 	stw	zero,56(sp)
 1000678:	d8000d15 	stw	zero,52(sp)
 100067c:	b8800007 	ldb	r2,0(r23)
 1000680:	10001926 	beq	r2,zero,10006e8 <___vfprintf_internal_r+0x1dc>
 1000684:	00c00944 	movi	r3,37
 1000688:	10c01726 	beq	r2,r3,10006e8 <___vfprintf_internal_r+0x1dc>
 100068c:	b821883a 	mov	r16,r23
 1000690:	00000106 	br	1000698 <___vfprintf_internal_r+0x18c>
 1000694:	10c00326 	beq	r2,r3,10006a4 <___vfprintf_internal_r+0x198>
 1000698:	84000044 	addi	r16,r16,1
 100069c:	80800007 	ldb	r2,0(r16)
 10006a0:	103ffc1e 	bne	r2,zero,1000694 <___vfprintf_internal_r+0x188>
 10006a4:	85e7c83a 	sub	r19,r16,r23
 10006a8:	98000e26 	beq	r19,zero,10006e4 <___vfprintf_internal_r+0x1d8>
 10006ac:	dc800e17 	ldw	r18,56(sp)
 10006b0:	dc400d17 	ldw	r17,52(sp)
 10006b4:	008001c4 	movi	r2,7
 10006b8:	94e5883a 	add	r18,r18,r19
 10006bc:	8c400044 	addi	r17,r17,1
 10006c0:	adc00015 	stw	r23,0(r21)
 10006c4:	dc800e15 	stw	r18,56(sp)
 10006c8:	acc00115 	stw	r19,4(r21)
 10006cc:	dc400d15 	stw	r17,52(sp)
 10006d0:	14428b16 	blt	r2,r17,1001100 <___vfprintf_internal_r+0xbf4>
 10006d4:	ad400204 	addi	r21,r21,8
 10006d8:	d9014b17 	ldw	r4,1324(sp)
 10006dc:	24c9883a 	add	r4,r4,r19
 10006e0:	d9014b15 	stw	r4,1324(sp)
 10006e4:	802f883a 	mov	r23,r16
 10006e8:	b8800007 	ldb	r2,0(r23)
 10006ec:	10013c26 	beq	r2,zero,1000be0 <___vfprintf_internal_r+0x6d4>
 10006f0:	bdc00044 	addi	r23,r23,1
 10006f4:	d8000405 	stb	zero,16(sp)
 10006f8:	b8c00007 	ldb	r3,0(r23)
 10006fc:	04ffffc4 	movi	r19,-1
 1000700:	d8014c15 	stw	zero,1328(sp)
 1000704:	d8014a15 	stw	zero,1320(sp)
 1000708:	d8c14d15 	stw	r3,1332(sp)
 100070c:	bdc00044 	addi	r23,r23,1
 1000710:	d9414d17 	ldw	r5,1332(sp)
 1000714:	00801604 	movi	r2,88
 1000718:	28fff804 	addi	r3,r5,-32
 100071c:	10c06036 	bltu	r2,r3,10008a0 <___vfprintf_internal_r+0x394>
 1000720:	18c5883a 	add	r2,r3,r3
 1000724:	1085883a 	add	r2,r2,r2
 1000728:	00c04034 	movhi	r3,256
 100072c:	18c1cf04 	addi	r3,r3,1852
 1000730:	10c5883a 	add	r2,r2,r3
 1000734:	11000017 	ldw	r4,0(r2)
 1000738:	2000683a 	jmp	r4
 100073c:	010016b0 	cmpltui	r4,zero,90
 1000740:	010008a0 	cmpeqi	r4,zero,34
 1000744:	010008a0 	cmpeqi	r4,zero,34
 1000748:	0100169c 	xori	r4,zero,90
 100074c:	010008a0 	cmpeqi	r4,zero,34
 1000750:	010008a0 	cmpeqi	r4,zero,34
 1000754:	010008a0 	cmpeqi	r4,zero,34
 1000758:	010008a0 	cmpeqi	r4,zero,34
 100075c:	010008a0 	cmpeqi	r4,zero,34
 1000760:	010008a0 	cmpeqi	r4,zero,34
 1000764:	0100147c 	xorhi	r4,zero,81
 1000768:	0100168c 	andi	r4,zero,90
 100076c:	010008a0 	cmpeqi	r4,zero,34
 1000770:	01001494 	movui	r4,82
 1000774:	01001734 	movhi	r4,92
 1000778:	010008a0 	cmpeqi	r4,zero,34
 100077c:	01001720 	cmpeqi	r4,zero,92
 1000780:	010016dc 	xori	r4,zero,91
 1000784:	010016dc 	xori	r4,zero,91
 1000788:	010016dc 	xori	r4,zero,91
 100078c:	010016dc 	xori	r4,zero,91
 1000790:	010016dc 	xori	r4,zero,91
 1000794:	010016dc 	xori	r4,zero,91
 1000798:	010016dc 	xori	r4,zero,91
 100079c:	010016dc 	xori	r4,zero,91
 10007a0:	010016dc 	xori	r4,zero,91
 10007a4:	010008a0 	cmpeqi	r4,zero,34
 10007a8:	010008a0 	cmpeqi	r4,zero,34
 10007ac:	010008a0 	cmpeqi	r4,zero,34
 10007b0:	010008a0 	cmpeqi	r4,zero,34
 10007b4:	010008a0 	cmpeqi	r4,zero,34
 10007b8:	010008a0 	cmpeqi	r4,zero,34
 10007bc:	010008a0 	cmpeqi	r4,zero,34
 10007c0:	010008a0 	cmpeqi	r4,zero,34
 10007c4:	010008a0 	cmpeqi	r4,zero,34
 10007c8:	010008a0 	cmpeqi	r4,zero,34
 10007cc:	01000ef8 	rdprs	r4,zero,59
 10007d0:	01001564 	muli	r4,zero,85
 10007d4:	010008a0 	cmpeqi	r4,zero,34
 10007d8:	01001564 	muli	r4,zero,85
 10007dc:	010008a0 	cmpeqi	r4,zero,34
 10007e0:	010008a0 	cmpeqi	r4,zero,34
 10007e4:	010008a0 	cmpeqi	r4,zero,34
 10007e8:	010008a0 	cmpeqi	r4,zero,34
 10007ec:	010016c8 	cmpgei	r4,zero,91
 10007f0:	010008a0 	cmpeqi	r4,zero,34
 10007f4:	010008a0 	cmpeqi	r4,zero,34
 10007f8:	01000fac 	andhi	r4,zero,62
 10007fc:	010008a0 	cmpeqi	r4,zero,34
 1000800:	010008a0 	cmpeqi	r4,zero,34
 1000804:	010008a0 	cmpeqi	r4,zero,34
 1000808:	010008a0 	cmpeqi	r4,zero,34
 100080c:	010008a0 	cmpeqi	r4,zero,34
 1000810:	01000ff8 	rdprs	r4,zero,63
 1000814:	010008a0 	cmpeqi	r4,zero,34
 1000818:	010008a0 	cmpeqi	r4,zero,34
 100081c:	01001618 	cmpnei	r4,zero,88
 1000820:	010008a0 	cmpeqi	r4,zero,34
 1000824:	010008a0 	cmpeqi	r4,zero,34
 1000828:	010008a0 	cmpeqi	r4,zero,34
 100082c:	010008a0 	cmpeqi	r4,zero,34
 1000830:	010008a0 	cmpeqi	r4,zero,34
 1000834:	010008a0 	cmpeqi	r4,zero,34
 1000838:	010008a0 	cmpeqi	r4,zero,34
 100083c:	010008a0 	cmpeqi	r4,zero,34
 1000840:	010008a0 	cmpeqi	r4,zero,34
 1000844:	010008a0 	cmpeqi	r4,zero,34
 1000848:	010015ec 	andhi	r4,zero,87
 100084c:	01000f04 	movi	r4,60
 1000850:	01001564 	muli	r4,zero,85
 1000854:	01001564 	muli	r4,zero,85
 1000858:	01001564 	muli	r4,zero,85
 100085c:	01001550 	cmplti	r4,zero,85
 1000860:	01000f04 	movi	r4,60
 1000864:	010008a0 	cmpeqi	r4,zero,34
 1000868:	010008a0 	cmpeqi	r4,zero,34
 100086c:	010014d8 	cmpnei	r4,zero,83
 1000870:	010008a0 	cmpeqi	r4,zero,34
 1000874:	010014a8 	cmpgeui	r4,zero,82
 1000878:	01000fb8 	rdprs	r4,zero,62
 100087c:	01001508 	cmpgei	r4,zero,84
 1000880:	010014f4 	movhi	r4,83
 1000884:	010008a0 	cmpeqi	r4,zero,34
 1000888:	0100179c 	xori	r4,zero,94
 100088c:	010008a0 	cmpeqi	r4,zero,34
 1000890:	01001004 	movi	r4,64
 1000894:	010008a0 	cmpeqi	r4,zero,34
 1000898:	010008a0 	cmpeqi	r4,zero,34
 100089c:	0100167c 	xorhi	r4,zero,89
 10008a0:	d9014d17 	ldw	r4,1332(sp)
 10008a4:	2000ce26 	beq	r4,zero,1000be0 <___vfprintf_internal_r+0x6d4>
 10008a8:	01400044 	movi	r5,1
 10008ac:	d9800f04 	addi	r6,sp,60
 10008b0:	d9c14015 	stw	r7,1280(sp)
 10008b4:	d9414515 	stw	r5,1300(sp)
 10008b8:	d9814115 	stw	r6,1284(sp)
 10008bc:	280f883a 	mov	r7,r5
 10008c0:	d9000f05 	stb	r4,60(sp)
 10008c4:	d8000405 	stb	zero,16(sp)
 10008c8:	d8014615 	stw	zero,1304(sp)
 10008cc:	d8c14c17 	ldw	r3,1328(sp)
 10008d0:	1880008c 	andi	r2,r3,2
 10008d4:	1005003a 	cmpeq	r2,r2,zero
 10008d8:	d8815015 	stw	r2,1344(sp)
 10008dc:	1000031e 	bne	r2,zero,10008ec <___vfprintf_internal_r+0x3e0>
 10008e0:	d9014517 	ldw	r4,1300(sp)
 10008e4:	21000084 	addi	r4,r4,2
 10008e8:	d9014515 	stw	r4,1300(sp)
 10008ec:	d9414c17 	ldw	r5,1328(sp)
 10008f0:	2940210c 	andi	r5,r5,132
 10008f4:	d9414e15 	stw	r5,1336(sp)
 10008f8:	28002d1e 	bne	r5,zero,10009b0 <___vfprintf_internal_r+0x4a4>
 10008fc:	d9814a17 	ldw	r6,1320(sp)
 1000900:	d8814517 	ldw	r2,1300(sp)
 1000904:	30a1c83a 	sub	r16,r6,r2
 1000908:	0400290e 	bge	zero,r16,10009b0 <___vfprintf_internal_r+0x4a4>
 100090c:	00800404 	movi	r2,16
 1000910:	14045e0e 	bge	r2,r16,1001a8c <___vfprintf_internal_r+0x1580>
 1000914:	dc800e17 	ldw	r18,56(sp)
 1000918:	dc400d17 	ldw	r17,52(sp)
 100091c:	1027883a 	mov	r19,r2
 1000920:	07004074 	movhi	fp,257
 1000924:	e70a9884 	addi	fp,fp,10850
 1000928:	050001c4 	movi	r20,7
 100092c:	00000306 	br	100093c <___vfprintf_internal_r+0x430>
 1000930:	843ffc04 	addi	r16,r16,-16
 1000934:	ad400204 	addi	r21,r21,8
 1000938:	9c00130e 	bge	r19,r16,1000988 <___vfprintf_internal_r+0x47c>
 100093c:	94800404 	addi	r18,r18,16
 1000940:	8c400044 	addi	r17,r17,1
 1000944:	af000015 	stw	fp,0(r21)
 1000948:	acc00115 	stw	r19,4(r21)
 100094c:	dc800e15 	stw	r18,56(sp)
 1000950:	dc400d15 	stw	r17,52(sp)
 1000954:	a47ff60e 	bge	r20,r17,1000930 <___vfprintf_internal_r+0x424>
 1000958:	d9014f17 	ldw	r4,1340(sp)
 100095c:	b00b883a 	mov	r5,r22
 1000960:	d9800c04 	addi	r6,sp,48
 1000964:	d9c15115 	stw	r7,1348(sp)
 1000968:	10004b40 	call	10004b4 <__sprint_r>
 100096c:	d9c15117 	ldw	r7,1348(sp)
 1000970:	10009e1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000974:	843ffc04 	addi	r16,r16,-16
 1000978:	dc800e17 	ldw	r18,56(sp)
 100097c:	dc400d17 	ldw	r17,52(sp)
 1000980:	dd401904 	addi	r21,sp,100
 1000984:	9c3fed16 	blt	r19,r16,100093c <___vfprintf_internal_r+0x430>
 1000988:	9425883a 	add	r18,r18,r16
 100098c:	8c400044 	addi	r17,r17,1
 1000990:	008001c4 	movi	r2,7
 1000994:	af000015 	stw	fp,0(r21)
 1000998:	ac000115 	stw	r16,4(r21)
 100099c:	dc800e15 	stw	r18,56(sp)
 10009a0:	dc400d15 	stw	r17,52(sp)
 10009a4:	1441f516 	blt	r2,r17,100117c <___vfprintf_internal_r+0xc70>
 10009a8:	ad400204 	addi	r21,r21,8
 10009ac:	00000206 	br	10009b8 <___vfprintf_internal_r+0x4ac>
 10009b0:	dc800e17 	ldw	r18,56(sp)
 10009b4:	dc400d17 	ldw	r17,52(sp)
 10009b8:	d8800407 	ldb	r2,16(sp)
 10009bc:	10000b26 	beq	r2,zero,10009ec <___vfprintf_internal_r+0x4e0>
 10009c0:	00800044 	movi	r2,1
 10009c4:	94800044 	addi	r18,r18,1
 10009c8:	8c400044 	addi	r17,r17,1
 10009cc:	a8800115 	stw	r2,4(r21)
 10009d0:	d8c00404 	addi	r3,sp,16
 10009d4:	008001c4 	movi	r2,7
 10009d8:	a8c00015 	stw	r3,0(r21)
 10009dc:	dc800e15 	stw	r18,56(sp)
 10009e0:	dc400d15 	stw	r17,52(sp)
 10009e4:	1441da16 	blt	r2,r17,1001150 <___vfprintf_internal_r+0xc44>
 10009e8:	ad400204 	addi	r21,r21,8
 10009ec:	d9015017 	ldw	r4,1344(sp)
 10009f0:	20000b1e 	bne	r4,zero,1000a20 <___vfprintf_internal_r+0x514>
 10009f4:	d8800444 	addi	r2,sp,17
 10009f8:	94800084 	addi	r18,r18,2
 10009fc:	8c400044 	addi	r17,r17,1
 1000a00:	a8800015 	stw	r2,0(r21)
 1000a04:	00c00084 	movi	r3,2
 1000a08:	008001c4 	movi	r2,7
 1000a0c:	a8c00115 	stw	r3,4(r21)
 1000a10:	dc800e15 	stw	r18,56(sp)
 1000a14:	dc400d15 	stw	r17,52(sp)
 1000a18:	1441c216 	blt	r2,r17,1001124 <___vfprintf_internal_r+0xc18>
 1000a1c:	ad400204 	addi	r21,r21,8
 1000a20:	d9414e17 	ldw	r5,1336(sp)
 1000a24:	00802004 	movi	r2,128
 1000a28:	2880b126 	beq	r5,r2,1000cf0 <___vfprintf_internal_r+0x7e4>
 1000a2c:	d8c14617 	ldw	r3,1304(sp)
 1000a30:	19e1c83a 	sub	r16,r3,r7
 1000a34:	0400260e 	bge	zero,r16,1000ad0 <___vfprintf_internal_r+0x5c4>
 1000a38:	00800404 	movi	r2,16
 1000a3c:	1403cf0e 	bge	r2,r16,100197c <___vfprintf_internal_r+0x1470>
 1000a40:	1027883a 	mov	r19,r2
 1000a44:	07004074 	movhi	fp,257
 1000a48:	e70a9484 	addi	fp,fp,10834
 1000a4c:	050001c4 	movi	r20,7
 1000a50:	00000306 	br	1000a60 <___vfprintf_internal_r+0x554>
 1000a54:	843ffc04 	addi	r16,r16,-16
 1000a58:	ad400204 	addi	r21,r21,8
 1000a5c:	9c00130e 	bge	r19,r16,1000aac <___vfprintf_internal_r+0x5a0>
 1000a60:	94800404 	addi	r18,r18,16
 1000a64:	8c400044 	addi	r17,r17,1
 1000a68:	af000015 	stw	fp,0(r21)
 1000a6c:	acc00115 	stw	r19,4(r21)
 1000a70:	dc800e15 	stw	r18,56(sp)
 1000a74:	dc400d15 	stw	r17,52(sp)
 1000a78:	a47ff60e 	bge	r20,r17,1000a54 <___vfprintf_internal_r+0x548>
 1000a7c:	d9014f17 	ldw	r4,1340(sp)
 1000a80:	b00b883a 	mov	r5,r22
 1000a84:	d9800c04 	addi	r6,sp,48
 1000a88:	d9c15115 	stw	r7,1348(sp)
 1000a8c:	10004b40 	call	10004b4 <__sprint_r>
 1000a90:	d9c15117 	ldw	r7,1348(sp)
 1000a94:	1000551e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000a98:	843ffc04 	addi	r16,r16,-16
 1000a9c:	dc800e17 	ldw	r18,56(sp)
 1000aa0:	dc400d17 	ldw	r17,52(sp)
 1000aa4:	dd401904 	addi	r21,sp,100
 1000aa8:	9c3fed16 	blt	r19,r16,1000a60 <___vfprintf_internal_r+0x554>
 1000aac:	9425883a 	add	r18,r18,r16
 1000ab0:	8c400044 	addi	r17,r17,1
 1000ab4:	008001c4 	movi	r2,7
 1000ab8:	af000015 	stw	fp,0(r21)
 1000abc:	ac000115 	stw	r16,4(r21)
 1000ac0:	dc800e15 	stw	r18,56(sp)
 1000ac4:	dc400d15 	stw	r17,52(sp)
 1000ac8:	14418216 	blt	r2,r17,10010d4 <___vfprintf_internal_r+0xbc8>
 1000acc:	ad400204 	addi	r21,r21,8
 1000ad0:	d9014c17 	ldw	r4,1328(sp)
 1000ad4:	2080400c 	andi	r2,r4,256
 1000ad8:	10004a1e 	bne	r2,zero,1000c04 <___vfprintf_internal_r+0x6f8>
 1000adc:	d9414117 	ldw	r5,1284(sp)
 1000ae0:	91e5883a 	add	r18,r18,r7
 1000ae4:	8c400044 	addi	r17,r17,1
 1000ae8:	008001c4 	movi	r2,7
 1000aec:	a9400015 	stw	r5,0(r21)
 1000af0:	a9c00115 	stw	r7,4(r21)
 1000af4:	dc800e15 	stw	r18,56(sp)
 1000af8:	dc400d15 	stw	r17,52(sp)
 1000afc:	14416716 	blt	r2,r17,100109c <___vfprintf_internal_r+0xb90>
 1000b00:	a8c00204 	addi	r3,r21,8
 1000b04:	d9814c17 	ldw	r6,1328(sp)
 1000b08:	3080010c 	andi	r2,r6,4
 1000b0c:	10002826 	beq	r2,zero,1000bb0 <___vfprintf_internal_r+0x6a4>
 1000b10:	d8814a17 	ldw	r2,1320(sp)
 1000b14:	d9014517 	ldw	r4,1300(sp)
 1000b18:	1121c83a 	sub	r16,r2,r4
 1000b1c:	0400240e 	bge	zero,r16,1000bb0 <___vfprintf_internal_r+0x6a4>
 1000b20:	00800404 	movi	r2,16
 1000b24:	1404550e 	bge	r2,r16,1001c7c <___vfprintf_internal_r+0x1770>
 1000b28:	dc400d17 	ldw	r17,52(sp)
 1000b2c:	1027883a 	mov	r19,r2
 1000b30:	07004074 	movhi	fp,257
 1000b34:	e70a9884 	addi	fp,fp,10850
 1000b38:	050001c4 	movi	r20,7
 1000b3c:	00000306 	br	1000b4c <___vfprintf_internal_r+0x640>
 1000b40:	843ffc04 	addi	r16,r16,-16
 1000b44:	18c00204 	addi	r3,r3,8
 1000b48:	9c00110e 	bge	r19,r16,1000b90 <___vfprintf_internal_r+0x684>
 1000b4c:	94800404 	addi	r18,r18,16
 1000b50:	8c400044 	addi	r17,r17,1
 1000b54:	1f000015 	stw	fp,0(r3)
 1000b58:	1cc00115 	stw	r19,4(r3)
 1000b5c:	dc800e15 	stw	r18,56(sp)
 1000b60:	dc400d15 	stw	r17,52(sp)
 1000b64:	a47ff60e 	bge	r20,r17,1000b40 <___vfprintf_internal_r+0x634>
 1000b68:	d9014f17 	ldw	r4,1340(sp)
 1000b6c:	b00b883a 	mov	r5,r22
 1000b70:	d9800c04 	addi	r6,sp,48
 1000b74:	10004b40 	call	10004b4 <__sprint_r>
 1000b78:	10001c1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000b7c:	843ffc04 	addi	r16,r16,-16
 1000b80:	dc800e17 	ldw	r18,56(sp)
 1000b84:	dc400d17 	ldw	r17,52(sp)
 1000b88:	d8c01904 	addi	r3,sp,100
 1000b8c:	9c3fef16 	blt	r19,r16,1000b4c <___vfprintf_internal_r+0x640>
 1000b90:	9425883a 	add	r18,r18,r16
 1000b94:	8c400044 	addi	r17,r17,1
 1000b98:	008001c4 	movi	r2,7
 1000b9c:	1f000015 	stw	fp,0(r3)
 1000ba0:	1c000115 	stw	r16,4(r3)
 1000ba4:	dc800e15 	stw	r18,56(sp)
 1000ba8:	dc400d15 	stw	r17,52(sp)
 1000bac:	1440cb16 	blt	r2,r17,1000edc <___vfprintf_internal_r+0x9d0>
 1000bb0:	d8814a17 	ldw	r2,1320(sp)
 1000bb4:	d9414517 	ldw	r5,1300(sp)
 1000bb8:	1140010e 	bge	r2,r5,1000bc0 <___vfprintf_internal_r+0x6b4>
 1000bbc:	2805883a 	mov	r2,r5
 1000bc0:	d9814b17 	ldw	r6,1324(sp)
 1000bc4:	308d883a 	add	r6,r6,r2
 1000bc8:	d9814b15 	stw	r6,1324(sp)
 1000bcc:	90013b1e 	bne	r18,zero,10010bc <___vfprintf_internal_r+0xbb0>
 1000bd0:	d9c14017 	ldw	r7,1280(sp)
 1000bd4:	dd401904 	addi	r21,sp,100
 1000bd8:	d8000d15 	stw	zero,52(sp)
 1000bdc:	003ea706 	br	100067c <___vfprintf_internal_r+0x170>
 1000be0:	d8800e17 	ldw	r2,56(sp)
 1000be4:	1005451e 	bne	r2,zero,10020fc <___vfprintf_internal_r+0x1bf0>
 1000be8:	d8000d15 	stw	zero,52(sp)
 1000bec:	b080030b 	ldhu	r2,12(r22)
 1000bf0:	1080100c 	andi	r2,r2,64
 1000bf4:	103e8726 	beq	r2,zero,1000614 <___vfprintf_internal_r+0x108>
 1000bf8:	00bfffc4 	movi	r2,-1
 1000bfc:	d8814b15 	stw	r2,1324(sp)
 1000c00:	003e8406 	br	1000614 <___vfprintf_internal_r+0x108>
 1000c04:	d9814d17 	ldw	r6,1332(sp)
 1000c08:	00801944 	movi	r2,101
 1000c0c:	11806e16 	blt	r2,r6,1000dc8 <___vfprintf_internal_r+0x8bc>
 1000c10:	d9414717 	ldw	r5,1308(sp)
 1000c14:	00c00044 	movi	r3,1
 1000c18:	1943490e 	bge	r3,r5,1001940 <___vfprintf_internal_r+0x1434>
 1000c1c:	d8814117 	ldw	r2,1284(sp)
 1000c20:	94800044 	addi	r18,r18,1
 1000c24:	8c400044 	addi	r17,r17,1
 1000c28:	a8800015 	stw	r2,0(r21)
 1000c2c:	008001c4 	movi	r2,7
 1000c30:	a8c00115 	stw	r3,4(r21)
 1000c34:	dc800e15 	stw	r18,56(sp)
 1000c38:	dc400d15 	stw	r17,52(sp)
 1000c3c:	1441ca16 	blt	r2,r17,1001368 <___vfprintf_internal_r+0xe5c>
 1000c40:	a8c00204 	addi	r3,r21,8
 1000c44:	d9014917 	ldw	r4,1316(sp)
 1000c48:	00800044 	movi	r2,1
 1000c4c:	94800044 	addi	r18,r18,1
 1000c50:	8c400044 	addi	r17,r17,1
 1000c54:	18800115 	stw	r2,4(r3)
 1000c58:	008001c4 	movi	r2,7
 1000c5c:	19000015 	stw	r4,0(r3)
 1000c60:	dc800e15 	stw	r18,56(sp)
 1000c64:	dc400d15 	stw	r17,52(sp)
 1000c68:	1441b616 	blt	r2,r17,1001344 <___vfprintf_internal_r+0xe38>
 1000c6c:	1cc00204 	addi	r19,r3,8
 1000c70:	d9014217 	ldw	r4,1288(sp)
 1000c74:	d9414317 	ldw	r5,1292(sp)
 1000c78:	000d883a 	mov	r6,zero
 1000c7c:	000f883a 	mov	r7,zero
 1000c80:	1008fc00 	call	1008fc0 <__nedf2>
 1000c84:	10017426 	beq	r2,zero,1001258 <___vfprintf_internal_r+0xd4c>
 1000c88:	d9414717 	ldw	r5,1308(sp)
 1000c8c:	d9814117 	ldw	r6,1284(sp)
 1000c90:	8c400044 	addi	r17,r17,1
 1000c94:	2c85883a 	add	r2,r5,r18
 1000c98:	14bfffc4 	addi	r18,r2,-1
 1000c9c:	28bfffc4 	addi	r2,r5,-1
 1000ca0:	30c00044 	addi	r3,r6,1
 1000ca4:	98800115 	stw	r2,4(r19)
 1000ca8:	008001c4 	movi	r2,7
 1000cac:	98c00015 	stw	r3,0(r19)
 1000cb0:	dc800e15 	stw	r18,56(sp)
 1000cb4:	dc400d15 	stw	r17,52(sp)
 1000cb8:	14418e16 	blt	r2,r17,10012f4 <___vfprintf_internal_r+0xde8>
 1000cbc:	9cc00204 	addi	r19,r19,8
 1000cc0:	d9414817 	ldw	r5,1312(sp)
 1000cc4:	d8800804 	addi	r2,sp,32
 1000cc8:	8c400044 	addi	r17,r17,1
 1000ccc:	9165883a 	add	r18,r18,r5
 1000cd0:	98800015 	stw	r2,0(r19)
 1000cd4:	008001c4 	movi	r2,7
 1000cd8:	99400115 	stw	r5,4(r19)
 1000cdc:	dc800e15 	stw	r18,56(sp)
 1000ce0:	dc400d15 	stw	r17,52(sp)
 1000ce4:	1440ed16 	blt	r2,r17,100109c <___vfprintf_internal_r+0xb90>
 1000ce8:	98c00204 	addi	r3,r19,8
 1000cec:	003f8506 	br	1000b04 <___vfprintf_internal_r+0x5f8>
 1000cf0:	d9814a17 	ldw	r6,1320(sp)
 1000cf4:	d8814517 	ldw	r2,1300(sp)
 1000cf8:	30a1c83a 	sub	r16,r6,r2
 1000cfc:	043f4b0e 	bge	zero,r16,1000a2c <___vfprintf_internal_r+0x520>
 1000d00:	00800404 	movi	r2,16
 1000d04:	14043a0e 	bge	r2,r16,1001df0 <___vfprintf_internal_r+0x18e4>
 1000d08:	1027883a 	mov	r19,r2
 1000d0c:	07004074 	movhi	fp,257
 1000d10:	e70a9484 	addi	fp,fp,10834
 1000d14:	050001c4 	movi	r20,7
 1000d18:	00000306 	br	1000d28 <___vfprintf_internal_r+0x81c>
 1000d1c:	843ffc04 	addi	r16,r16,-16
 1000d20:	ad400204 	addi	r21,r21,8
 1000d24:	9c00130e 	bge	r19,r16,1000d74 <___vfprintf_internal_r+0x868>
 1000d28:	94800404 	addi	r18,r18,16
 1000d2c:	8c400044 	addi	r17,r17,1
 1000d30:	af000015 	stw	fp,0(r21)
 1000d34:	acc00115 	stw	r19,4(r21)
 1000d38:	dc800e15 	stw	r18,56(sp)
 1000d3c:	dc400d15 	stw	r17,52(sp)
 1000d40:	a47ff60e 	bge	r20,r17,1000d1c <___vfprintf_internal_r+0x810>
 1000d44:	d9014f17 	ldw	r4,1340(sp)
 1000d48:	b00b883a 	mov	r5,r22
 1000d4c:	d9800c04 	addi	r6,sp,48
 1000d50:	d9c15115 	stw	r7,1348(sp)
 1000d54:	10004b40 	call	10004b4 <__sprint_r>
 1000d58:	d9c15117 	ldw	r7,1348(sp)
 1000d5c:	103fa31e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000d60:	843ffc04 	addi	r16,r16,-16
 1000d64:	dc800e17 	ldw	r18,56(sp)
 1000d68:	dc400d17 	ldw	r17,52(sp)
 1000d6c:	dd401904 	addi	r21,sp,100
 1000d70:	9c3fed16 	blt	r19,r16,1000d28 <___vfprintf_internal_r+0x81c>
 1000d74:	9425883a 	add	r18,r18,r16
 1000d78:	8c400044 	addi	r17,r17,1
 1000d7c:	008001c4 	movi	r2,7
 1000d80:	af000015 	stw	fp,0(r21)
 1000d84:	ac000115 	stw	r16,4(r21)
 1000d88:	dc800e15 	stw	r18,56(sp)
 1000d8c:	dc400d15 	stw	r17,52(sp)
 1000d90:	14416116 	blt	r2,r17,1001318 <___vfprintf_internal_r+0xe0c>
 1000d94:	ad400204 	addi	r21,r21,8
 1000d98:	003f2406 	br	1000a2c <___vfprintf_internal_r+0x520>
 1000d9c:	d9014f17 	ldw	r4,1340(sp)
 1000da0:	1003fc00 	call	1003fc0 <__sinit>
 1000da4:	d9c15117 	ldw	r7,1348(sp)
 1000da8:	003def06 	br	1000568 <___vfprintf_internal_r+0x5c>
 1000dac:	d9014f17 	ldw	r4,1340(sp)
 1000db0:	b00b883a 	mov	r5,r22
 1000db4:	d9c15115 	stw	r7,1348(sp)
 1000db8:	10023f40 	call	10023f4 <__swsetup_r>
 1000dbc:	d9c15117 	ldw	r7,1348(sp)
 1000dc0:	103dee26 	beq	r2,zero,100057c <___vfprintf_internal_r+0x70>
 1000dc4:	003f8c06 	br	1000bf8 <___vfprintf_internal_r+0x6ec>
 1000dc8:	d9014217 	ldw	r4,1288(sp)
 1000dcc:	d9414317 	ldw	r5,1292(sp)
 1000dd0:	000d883a 	mov	r6,zero
 1000dd4:	000f883a 	mov	r7,zero
 1000dd8:	1008f380 	call	1008f38 <__eqdf2>
 1000ddc:	1000f21e 	bne	r2,zero,10011a8 <___vfprintf_internal_r+0xc9c>
 1000de0:	00804074 	movhi	r2,257
 1000de4:	108a9404 	addi	r2,r2,10832
 1000de8:	94800044 	addi	r18,r18,1
 1000dec:	8c400044 	addi	r17,r17,1
 1000df0:	a8800015 	stw	r2,0(r21)
 1000df4:	00c00044 	movi	r3,1
 1000df8:	008001c4 	movi	r2,7
 1000dfc:	a8c00115 	stw	r3,4(r21)
 1000e00:	dc800e15 	stw	r18,56(sp)
 1000e04:	dc400d15 	stw	r17,52(sp)
 1000e08:	14430016 	blt	r2,r17,1001a0c <___vfprintf_internal_r+0x1500>
 1000e0c:	a8c00204 	addi	r3,r21,8
 1000e10:	d8800517 	ldw	r2,20(sp)
 1000e14:	d9014717 	ldw	r4,1308(sp)
 1000e18:	11015c0e 	bge	r2,r4,100138c <___vfprintf_internal_r+0xe80>
 1000e1c:	dc400d17 	ldw	r17,52(sp)
 1000e20:	d9814917 	ldw	r6,1316(sp)
 1000e24:	00800044 	movi	r2,1
 1000e28:	94800044 	addi	r18,r18,1
 1000e2c:	8c400044 	addi	r17,r17,1
 1000e30:	18800115 	stw	r2,4(r3)
 1000e34:	008001c4 	movi	r2,7
 1000e38:	19800015 	stw	r6,0(r3)
 1000e3c:	dc800e15 	stw	r18,56(sp)
 1000e40:	dc400d15 	stw	r17,52(sp)
 1000e44:	14431616 	blt	r2,r17,1001aa0 <___vfprintf_internal_r+0x1594>
 1000e48:	18c00204 	addi	r3,r3,8
 1000e4c:	d8814717 	ldw	r2,1308(sp)
 1000e50:	143fffc4 	addi	r16,r2,-1
 1000e54:	043f2b0e 	bge	zero,r16,1000b04 <___vfprintf_internal_r+0x5f8>
 1000e58:	00800404 	movi	r2,16
 1000e5c:	1402a80e 	bge	r2,r16,1001900 <___vfprintf_internal_r+0x13f4>
 1000e60:	dc400d17 	ldw	r17,52(sp)
 1000e64:	1027883a 	mov	r19,r2
 1000e68:	07004074 	movhi	fp,257
 1000e6c:	e70a9484 	addi	fp,fp,10834
 1000e70:	050001c4 	movi	r20,7
 1000e74:	00000306 	br	1000e84 <___vfprintf_internal_r+0x978>
 1000e78:	18c00204 	addi	r3,r3,8
 1000e7c:	843ffc04 	addi	r16,r16,-16
 1000e80:	9c02a20e 	bge	r19,r16,100190c <___vfprintf_internal_r+0x1400>
 1000e84:	94800404 	addi	r18,r18,16
 1000e88:	8c400044 	addi	r17,r17,1
 1000e8c:	1f000015 	stw	fp,0(r3)
 1000e90:	1cc00115 	stw	r19,4(r3)
 1000e94:	dc800e15 	stw	r18,56(sp)
 1000e98:	dc400d15 	stw	r17,52(sp)
 1000e9c:	a47ff60e 	bge	r20,r17,1000e78 <___vfprintf_internal_r+0x96c>
 1000ea0:	d9014f17 	ldw	r4,1340(sp)
 1000ea4:	b00b883a 	mov	r5,r22
 1000ea8:	d9800c04 	addi	r6,sp,48
 1000eac:	10004b40 	call	10004b4 <__sprint_r>
 1000eb0:	103f4e1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000eb4:	dc800e17 	ldw	r18,56(sp)
 1000eb8:	dc400d17 	ldw	r17,52(sp)
 1000ebc:	d8c01904 	addi	r3,sp,100
 1000ec0:	003fee06 	br	1000e7c <___vfprintf_internal_r+0x970>
 1000ec4:	d8802c0b 	ldhu	r2,176(sp)
 1000ec8:	00ffffc4 	movi	r3,-1
 1000ecc:	d8c14b15 	stw	r3,1324(sp)
 1000ed0:	1080100c 	andi	r2,r2,64
 1000ed4:	103dcc1e 	bne	r2,zero,1000608 <___vfprintf_internal_r+0xfc>
 1000ed8:	003dce06 	br	1000614 <___vfprintf_internal_r+0x108>
 1000edc:	d9014f17 	ldw	r4,1340(sp)
 1000ee0:	b00b883a 	mov	r5,r22
 1000ee4:	d9800c04 	addi	r6,sp,48
 1000ee8:	10004b40 	call	10004b4 <__sprint_r>
 1000eec:	103f3f1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1000ef0:	dc800e17 	ldw	r18,56(sp)
 1000ef4:	003f2e06 	br	1000bb0 <___vfprintf_internal_r+0x6a4>
 1000ef8:	d9414c17 	ldw	r5,1328(sp)
 1000efc:	29400414 	ori	r5,r5,16
 1000f00:	d9414c15 	stw	r5,1328(sp)
 1000f04:	d9814c17 	ldw	r6,1328(sp)
 1000f08:	3080080c 	andi	r2,r6,32
 1000f0c:	10014f1e 	bne	r2,zero,100144c <___vfprintf_internal_r+0xf40>
 1000f10:	d8c14c17 	ldw	r3,1328(sp)
 1000f14:	1880040c 	andi	r2,r3,16
 1000f18:	1002f01e 	bne	r2,zero,1001adc <___vfprintf_internal_r+0x15d0>
 1000f1c:	d9014c17 	ldw	r4,1328(sp)
 1000f20:	2080100c 	andi	r2,r4,64
 1000f24:	1002ed26 	beq	r2,zero,1001adc <___vfprintf_internal_r+0x15d0>
 1000f28:	3880000f 	ldh	r2,0(r7)
 1000f2c:	39c00104 	addi	r7,r7,4
 1000f30:	d9c14015 	stw	r7,1280(sp)
 1000f34:	1023d7fa 	srai	r17,r2,31
 1000f38:	1021883a 	mov	r16,r2
 1000f3c:	88037816 	blt	r17,zero,1001d20 <___vfprintf_internal_r+0x1814>
 1000f40:	01000044 	movi	r4,1
 1000f44:	98000416 	blt	r19,zero,1000f58 <___vfprintf_internal_r+0xa4c>
 1000f48:	d8c14c17 	ldw	r3,1328(sp)
 1000f4c:	00bfdfc4 	movi	r2,-129
 1000f50:	1886703a 	and	r3,r3,r2
 1000f54:	d8c14c15 	stw	r3,1328(sp)
 1000f58:	8444b03a 	or	r2,r16,r17
 1000f5c:	10022c1e 	bne	r2,zero,1001810 <___vfprintf_internal_r+0x1304>
 1000f60:	98022b1e 	bne	r19,zero,1001810 <___vfprintf_internal_r+0x1304>
 1000f64:	20803fcc 	andi	r2,r4,255
 1000f68:	1002a126 	beq	r2,zero,10019f0 <___vfprintf_internal_r+0x14e4>
 1000f6c:	d8c01904 	addi	r3,sp,100
 1000f70:	dd000f04 	addi	r20,sp,60
 1000f74:	d8c14115 	stw	r3,1284(sp)
 1000f78:	d8c14117 	ldw	r3,1284(sp)
 1000f7c:	dcc14515 	stw	r19,1300(sp)
 1000f80:	a0c5c83a 	sub	r2,r20,r3
 1000f84:	11c00a04 	addi	r7,r2,40
 1000f88:	99c0010e 	bge	r19,r7,1000f90 <___vfprintf_internal_r+0xa84>
 1000f8c:	d9c14515 	stw	r7,1300(sp)
 1000f90:	dcc14615 	stw	r19,1304(sp)
 1000f94:	d8800407 	ldb	r2,16(sp)
 1000f98:	103e4c26 	beq	r2,zero,10008cc <___vfprintf_internal_r+0x3c0>
 1000f9c:	d8814517 	ldw	r2,1300(sp)
 1000fa0:	10800044 	addi	r2,r2,1
 1000fa4:	d8814515 	stw	r2,1300(sp)
 1000fa8:	003e4806 	br	10008cc <___vfprintf_internal_r+0x3c0>
 1000fac:	d9814c17 	ldw	r6,1328(sp)
 1000fb0:	31800414 	ori	r6,r6,16
 1000fb4:	d9814c15 	stw	r6,1328(sp)
 1000fb8:	d8c14c17 	ldw	r3,1328(sp)
 1000fbc:	1880080c 	andi	r2,r3,32
 1000fc0:	1001271e 	bne	r2,zero,1001460 <___vfprintf_internal_r+0xf54>
 1000fc4:	d9414c17 	ldw	r5,1328(sp)
 1000fc8:	2880040c 	andi	r2,r5,16
 1000fcc:	1002bc1e 	bne	r2,zero,1001ac0 <___vfprintf_internal_r+0x15b4>
 1000fd0:	d9814c17 	ldw	r6,1328(sp)
 1000fd4:	3080100c 	andi	r2,r6,64
 1000fd8:	1002b926 	beq	r2,zero,1001ac0 <___vfprintf_internal_r+0x15b4>
 1000fdc:	3c00000b 	ldhu	r16,0(r7)
 1000fe0:	0009883a 	mov	r4,zero
 1000fe4:	39c00104 	addi	r7,r7,4
 1000fe8:	0023883a 	mov	r17,zero
 1000fec:	d9c14015 	stw	r7,1280(sp)
 1000ff0:	d8000405 	stb	zero,16(sp)
 1000ff4:	003fd306 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1000ff8:	d9014c17 	ldw	r4,1328(sp)
 1000ffc:	21000414 	ori	r4,r4,16
 1001000:	d9014c15 	stw	r4,1328(sp)
 1001004:	d9414c17 	ldw	r5,1328(sp)
 1001008:	2880080c 	andi	r2,r5,32
 100100c:	1001081e 	bne	r2,zero,1001430 <___vfprintf_internal_r+0xf24>
 1001010:	d8c14c17 	ldw	r3,1328(sp)
 1001014:	1880040c 	andi	r2,r3,16
 1001018:	1002b61e 	bne	r2,zero,1001af4 <___vfprintf_internal_r+0x15e8>
 100101c:	d9014c17 	ldw	r4,1328(sp)
 1001020:	2080100c 	andi	r2,r4,64
 1001024:	1002b326 	beq	r2,zero,1001af4 <___vfprintf_internal_r+0x15e8>
 1001028:	3c00000b 	ldhu	r16,0(r7)
 100102c:	01000044 	movi	r4,1
 1001030:	39c00104 	addi	r7,r7,4
 1001034:	0023883a 	mov	r17,zero
 1001038:	d9c14015 	stw	r7,1280(sp)
 100103c:	d8000405 	stb	zero,16(sp)
 1001040:	003fc006 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001044:	d9014f17 	ldw	r4,1340(sp)
 1001048:	b00b883a 	mov	r5,r22
 100104c:	d9800c04 	addi	r6,sp,48
 1001050:	10004b40 	call	10004b4 <__sprint_r>
 1001054:	103ee51e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001058:	dc800e17 	ldw	r18,56(sp)
 100105c:	d8c01904 	addi	r3,sp,100
 1001060:	d9814c17 	ldw	r6,1328(sp)
 1001064:	3080004c 	andi	r2,r6,1
 1001068:	1005003a 	cmpeq	r2,r2,zero
 100106c:	103ea51e 	bne	r2,zero,1000b04 <___vfprintf_internal_r+0x5f8>
 1001070:	00800044 	movi	r2,1
 1001074:	dc400d17 	ldw	r17,52(sp)
 1001078:	18800115 	stw	r2,4(r3)
 100107c:	d8814917 	ldw	r2,1316(sp)
 1001080:	94800044 	addi	r18,r18,1
 1001084:	8c400044 	addi	r17,r17,1
 1001088:	18800015 	stw	r2,0(r3)
 100108c:	008001c4 	movi	r2,7
 1001090:	dc800e15 	stw	r18,56(sp)
 1001094:	dc400d15 	stw	r17,52(sp)
 1001098:	1442240e 	bge	r2,r17,100192c <___vfprintf_internal_r+0x1420>
 100109c:	d9014f17 	ldw	r4,1340(sp)
 10010a0:	b00b883a 	mov	r5,r22
 10010a4:	d9800c04 	addi	r6,sp,48
 10010a8:	10004b40 	call	10004b4 <__sprint_r>
 10010ac:	103ecf1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 10010b0:	dc800e17 	ldw	r18,56(sp)
 10010b4:	d8c01904 	addi	r3,sp,100
 10010b8:	003e9206 	br	1000b04 <___vfprintf_internal_r+0x5f8>
 10010bc:	d9014f17 	ldw	r4,1340(sp)
 10010c0:	b00b883a 	mov	r5,r22
 10010c4:	d9800c04 	addi	r6,sp,48
 10010c8:	10004b40 	call	10004b4 <__sprint_r>
 10010cc:	103ec026 	beq	r2,zero,1000bd0 <___vfprintf_internal_r+0x6c4>
 10010d0:	003ec606 	br	1000bec <___vfprintf_internal_r+0x6e0>
 10010d4:	d9014f17 	ldw	r4,1340(sp)
 10010d8:	b00b883a 	mov	r5,r22
 10010dc:	d9800c04 	addi	r6,sp,48
 10010e0:	d9c15115 	stw	r7,1348(sp)
 10010e4:	10004b40 	call	10004b4 <__sprint_r>
 10010e8:	d9c15117 	ldw	r7,1348(sp)
 10010ec:	103ebf1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 10010f0:	dc800e17 	ldw	r18,56(sp)
 10010f4:	dc400d17 	ldw	r17,52(sp)
 10010f8:	dd401904 	addi	r21,sp,100
 10010fc:	003e7406 	br	1000ad0 <___vfprintf_internal_r+0x5c4>
 1001100:	d9014f17 	ldw	r4,1340(sp)
 1001104:	b00b883a 	mov	r5,r22
 1001108:	d9800c04 	addi	r6,sp,48
 100110c:	d9c15115 	stw	r7,1348(sp)
 1001110:	10004b40 	call	10004b4 <__sprint_r>
 1001114:	d9c15117 	ldw	r7,1348(sp)
 1001118:	103eb41e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 100111c:	dd401904 	addi	r21,sp,100
 1001120:	003d6d06 	br	10006d8 <___vfprintf_internal_r+0x1cc>
 1001124:	d9014f17 	ldw	r4,1340(sp)
 1001128:	b00b883a 	mov	r5,r22
 100112c:	d9800c04 	addi	r6,sp,48
 1001130:	d9c15115 	stw	r7,1348(sp)
 1001134:	10004b40 	call	10004b4 <__sprint_r>
 1001138:	d9c15117 	ldw	r7,1348(sp)
 100113c:	103eab1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001140:	dc800e17 	ldw	r18,56(sp)
 1001144:	dc400d17 	ldw	r17,52(sp)
 1001148:	dd401904 	addi	r21,sp,100
 100114c:	003e3406 	br	1000a20 <___vfprintf_internal_r+0x514>
 1001150:	d9014f17 	ldw	r4,1340(sp)
 1001154:	b00b883a 	mov	r5,r22
 1001158:	d9800c04 	addi	r6,sp,48
 100115c:	d9c15115 	stw	r7,1348(sp)
 1001160:	10004b40 	call	10004b4 <__sprint_r>
 1001164:	d9c15117 	ldw	r7,1348(sp)
 1001168:	103ea01e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 100116c:	dc800e17 	ldw	r18,56(sp)
 1001170:	dc400d17 	ldw	r17,52(sp)
 1001174:	dd401904 	addi	r21,sp,100
 1001178:	003e1c06 	br	10009ec <___vfprintf_internal_r+0x4e0>
 100117c:	d9014f17 	ldw	r4,1340(sp)
 1001180:	b00b883a 	mov	r5,r22
 1001184:	d9800c04 	addi	r6,sp,48
 1001188:	d9c15115 	stw	r7,1348(sp)
 100118c:	10004b40 	call	10004b4 <__sprint_r>
 1001190:	d9c15117 	ldw	r7,1348(sp)
 1001194:	103e951e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001198:	dc800e17 	ldw	r18,56(sp)
 100119c:	dc400d17 	ldw	r17,52(sp)
 10011a0:	dd401904 	addi	r21,sp,100
 10011a4:	003e0406 	br	10009b8 <___vfprintf_internal_r+0x4ac>
 10011a8:	d9000517 	ldw	r4,20(sp)
 10011ac:	0102580e 	bge	zero,r4,1001b10 <___vfprintf_internal_r+0x1604>
 10011b0:	d9814717 	ldw	r6,1308(sp)
 10011b4:	21807a16 	blt	r4,r6,10013a0 <___vfprintf_internal_r+0xe94>
 10011b8:	d8814117 	ldw	r2,1284(sp)
 10011bc:	91a5883a 	add	r18,r18,r6
 10011c0:	8c400044 	addi	r17,r17,1
 10011c4:	a8800015 	stw	r2,0(r21)
 10011c8:	008001c4 	movi	r2,7
 10011cc:	a9800115 	stw	r6,4(r21)
 10011d0:	dc800e15 	stw	r18,56(sp)
 10011d4:	dc400d15 	stw	r17,52(sp)
 10011d8:	1442fc16 	blt	r2,r17,1001dcc <___vfprintf_internal_r+0x18c0>
 10011dc:	a8c00204 	addi	r3,r21,8
 10011e0:	d9414717 	ldw	r5,1308(sp)
 10011e4:	2161c83a 	sub	r16,r4,r5
 10011e8:	043f9d0e 	bge	zero,r16,1001060 <___vfprintf_internal_r+0xb54>
 10011ec:	00800404 	movi	r2,16
 10011f0:	1402190e 	bge	r2,r16,1001a58 <___vfprintf_internal_r+0x154c>
 10011f4:	dc400d17 	ldw	r17,52(sp)
 10011f8:	1027883a 	mov	r19,r2
 10011fc:	07004074 	movhi	fp,257
 1001200:	e70a9484 	addi	fp,fp,10834
 1001204:	050001c4 	movi	r20,7
 1001208:	00000306 	br	1001218 <___vfprintf_internal_r+0xd0c>
 100120c:	18c00204 	addi	r3,r3,8
 1001210:	843ffc04 	addi	r16,r16,-16
 1001214:	9c02130e 	bge	r19,r16,1001a64 <___vfprintf_internal_r+0x1558>
 1001218:	94800404 	addi	r18,r18,16
 100121c:	8c400044 	addi	r17,r17,1
 1001220:	1f000015 	stw	fp,0(r3)
 1001224:	1cc00115 	stw	r19,4(r3)
 1001228:	dc800e15 	stw	r18,56(sp)
 100122c:	dc400d15 	stw	r17,52(sp)
 1001230:	a47ff60e 	bge	r20,r17,100120c <___vfprintf_internal_r+0xd00>
 1001234:	d9014f17 	ldw	r4,1340(sp)
 1001238:	b00b883a 	mov	r5,r22
 100123c:	d9800c04 	addi	r6,sp,48
 1001240:	10004b40 	call	10004b4 <__sprint_r>
 1001244:	103e691e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001248:	dc800e17 	ldw	r18,56(sp)
 100124c:	dc400d17 	ldw	r17,52(sp)
 1001250:	d8c01904 	addi	r3,sp,100
 1001254:	003fee06 	br	1001210 <___vfprintf_internal_r+0xd04>
 1001258:	d8814717 	ldw	r2,1308(sp)
 100125c:	143fffc4 	addi	r16,r2,-1
 1001260:	043e970e 	bge	zero,r16,1000cc0 <___vfprintf_internal_r+0x7b4>
 1001264:	00800404 	movi	r2,16
 1001268:	1400180e 	bge	r2,r16,10012cc <___vfprintf_internal_r+0xdc0>
 100126c:	1029883a 	mov	r20,r2
 1001270:	07004074 	movhi	fp,257
 1001274:	e70a9484 	addi	fp,fp,10834
 1001278:	054001c4 	movi	r21,7
 100127c:	00000306 	br	100128c <___vfprintf_internal_r+0xd80>
 1001280:	9cc00204 	addi	r19,r19,8
 1001284:	843ffc04 	addi	r16,r16,-16
 1001288:	a400120e 	bge	r20,r16,10012d4 <___vfprintf_internal_r+0xdc8>
 100128c:	94800404 	addi	r18,r18,16
 1001290:	8c400044 	addi	r17,r17,1
 1001294:	9f000015 	stw	fp,0(r19)
 1001298:	9d000115 	stw	r20,4(r19)
 100129c:	dc800e15 	stw	r18,56(sp)
 10012a0:	dc400d15 	stw	r17,52(sp)
 10012a4:	ac7ff60e 	bge	r21,r17,1001280 <___vfprintf_internal_r+0xd74>
 10012a8:	d9014f17 	ldw	r4,1340(sp)
 10012ac:	b00b883a 	mov	r5,r22
 10012b0:	d9800c04 	addi	r6,sp,48
 10012b4:	10004b40 	call	10004b4 <__sprint_r>
 10012b8:	103e4c1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 10012bc:	dc800e17 	ldw	r18,56(sp)
 10012c0:	dc400d17 	ldw	r17,52(sp)
 10012c4:	dcc01904 	addi	r19,sp,100
 10012c8:	003fee06 	br	1001284 <___vfprintf_internal_r+0xd78>
 10012cc:	07004074 	movhi	fp,257
 10012d0:	e70a9484 	addi	fp,fp,10834
 10012d4:	9425883a 	add	r18,r18,r16
 10012d8:	8c400044 	addi	r17,r17,1
 10012dc:	008001c4 	movi	r2,7
 10012e0:	9f000015 	stw	fp,0(r19)
 10012e4:	9c000115 	stw	r16,4(r19)
 10012e8:	dc800e15 	stw	r18,56(sp)
 10012ec:	dc400d15 	stw	r17,52(sp)
 10012f0:	147e720e 	bge	r2,r17,1000cbc <___vfprintf_internal_r+0x7b0>
 10012f4:	d9014f17 	ldw	r4,1340(sp)
 10012f8:	b00b883a 	mov	r5,r22
 10012fc:	d9800c04 	addi	r6,sp,48
 1001300:	10004b40 	call	10004b4 <__sprint_r>
 1001304:	103e391e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001308:	dc800e17 	ldw	r18,56(sp)
 100130c:	dc400d17 	ldw	r17,52(sp)
 1001310:	dcc01904 	addi	r19,sp,100
 1001314:	003e6a06 	br	1000cc0 <___vfprintf_internal_r+0x7b4>
 1001318:	d9014f17 	ldw	r4,1340(sp)
 100131c:	b00b883a 	mov	r5,r22
 1001320:	d9800c04 	addi	r6,sp,48
 1001324:	d9c15115 	stw	r7,1348(sp)
 1001328:	10004b40 	call	10004b4 <__sprint_r>
 100132c:	d9c15117 	ldw	r7,1348(sp)
 1001330:	103e2e1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001334:	dc800e17 	ldw	r18,56(sp)
 1001338:	dc400d17 	ldw	r17,52(sp)
 100133c:	dd401904 	addi	r21,sp,100
 1001340:	003dba06 	br	1000a2c <___vfprintf_internal_r+0x520>
 1001344:	d9014f17 	ldw	r4,1340(sp)
 1001348:	b00b883a 	mov	r5,r22
 100134c:	d9800c04 	addi	r6,sp,48
 1001350:	10004b40 	call	10004b4 <__sprint_r>
 1001354:	103e251e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001358:	dc800e17 	ldw	r18,56(sp)
 100135c:	dc400d17 	ldw	r17,52(sp)
 1001360:	dcc01904 	addi	r19,sp,100
 1001364:	003e4206 	br	1000c70 <___vfprintf_internal_r+0x764>
 1001368:	d9014f17 	ldw	r4,1340(sp)
 100136c:	b00b883a 	mov	r5,r22
 1001370:	d9800c04 	addi	r6,sp,48
 1001374:	10004b40 	call	10004b4 <__sprint_r>
 1001378:	103e1c1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 100137c:	dc800e17 	ldw	r18,56(sp)
 1001380:	dc400d17 	ldw	r17,52(sp)
 1001384:	d8c01904 	addi	r3,sp,100
 1001388:	003e2e06 	br	1000c44 <___vfprintf_internal_r+0x738>
 100138c:	d9414c17 	ldw	r5,1328(sp)
 1001390:	2880004c 	andi	r2,r5,1
 1001394:	1005003a 	cmpeq	r2,r2,zero
 1001398:	103dda1e 	bne	r2,zero,1000b04 <___vfprintf_internal_r+0x5f8>
 100139c:	003e9f06 	br	1000e1c <___vfprintf_internal_r+0x910>
 10013a0:	d8c14117 	ldw	r3,1284(sp)
 10013a4:	9125883a 	add	r18,r18,r4
 10013a8:	8c400044 	addi	r17,r17,1
 10013ac:	008001c4 	movi	r2,7
 10013b0:	a8c00015 	stw	r3,0(r21)
 10013b4:	a9000115 	stw	r4,4(r21)
 10013b8:	dc800e15 	stw	r18,56(sp)
 10013bc:	dc400d15 	stw	r17,52(sp)
 10013c0:	14426c16 	blt	r2,r17,1001d74 <___vfprintf_internal_r+0x1868>
 10013c4:	a8c00204 	addi	r3,r21,8
 10013c8:	d9414917 	ldw	r5,1316(sp)
 10013cc:	00800044 	movi	r2,1
 10013d0:	94800044 	addi	r18,r18,1
 10013d4:	8c400044 	addi	r17,r17,1
 10013d8:	18800115 	stw	r2,4(r3)
 10013dc:	008001c4 	movi	r2,7
 10013e0:	19400015 	stw	r5,0(r3)
 10013e4:	dc800e15 	stw	r18,56(sp)
 10013e8:	dc400d15 	stw	r17,52(sp)
 10013ec:	2021883a 	mov	r16,r4
 10013f0:	14425616 	blt	r2,r17,1001d4c <___vfprintf_internal_r+0x1840>
 10013f4:	19400204 	addi	r5,r3,8
 10013f8:	d9814717 	ldw	r6,1308(sp)
 10013fc:	8c400044 	addi	r17,r17,1
 1001400:	dc400d15 	stw	r17,52(sp)
 1001404:	3107c83a 	sub	r3,r6,r4
 1001408:	d9014117 	ldw	r4,1284(sp)
 100140c:	90e5883a 	add	r18,r18,r3
 1001410:	28c00115 	stw	r3,4(r5)
 1001414:	8105883a 	add	r2,r16,r4
 1001418:	28800015 	stw	r2,0(r5)
 100141c:	008001c4 	movi	r2,7
 1001420:	dc800e15 	stw	r18,56(sp)
 1001424:	147f1d16 	blt	r2,r17,100109c <___vfprintf_internal_r+0xb90>
 1001428:	28c00204 	addi	r3,r5,8
 100142c:	003db506 	br	1000b04 <___vfprintf_internal_r+0x5f8>
 1001430:	3c000017 	ldw	r16,0(r7)
 1001434:	3c400117 	ldw	r17,4(r7)
 1001438:	39800204 	addi	r6,r7,8
 100143c:	01000044 	movi	r4,1
 1001440:	d9814015 	stw	r6,1280(sp)
 1001444:	d8000405 	stb	zero,16(sp)
 1001448:	003ebe06 	br	1000f44 <___vfprintf_internal_r+0xa38>
 100144c:	3c000017 	ldw	r16,0(r7)
 1001450:	3c400117 	ldw	r17,4(r7)
 1001454:	38800204 	addi	r2,r7,8
 1001458:	d8814015 	stw	r2,1280(sp)
 100145c:	003eb706 	br	1000f3c <___vfprintf_internal_r+0xa30>
 1001460:	3c000017 	ldw	r16,0(r7)
 1001464:	3c400117 	ldw	r17,4(r7)
 1001468:	39000204 	addi	r4,r7,8
 100146c:	d9014015 	stw	r4,1280(sp)
 1001470:	0009883a 	mov	r4,zero
 1001474:	d8000405 	stb	zero,16(sp)
 1001478:	003eb206 	br	1000f44 <___vfprintf_internal_r+0xa38>
 100147c:	38c00017 	ldw	r3,0(r7)
 1001480:	39c00104 	addi	r7,r7,4
 1001484:	d8c14a15 	stw	r3,1320(sp)
 1001488:	1800d70e 	bge	r3,zero,10017e8 <___vfprintf_internal_r+0x12dc>
 100148c:	00c7c83a 	sub	r3,zero,r3
 1001490:	d8c14a15 	stw	r3,1320(sp)
 1001494:	d9014c17 	ldw	r4,1328(sp)
 1001498:	b8c00007 	ldb	r3,0(r23)
 100149c:	21000114 	ori	r4,r4,4
 10014a0:	d9014c15 	stw	r4,1328(sp)
 10014a4:	003c9806 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10014a8:	d9814c17 	ldw	r6,1328(sp)
 10014ac:	3080080c 	andi	r2,r6,32
 10014b0:	1001f626 	beq	r2,zero,1001c8c <___vfprintf_internal_r+0x1780>
 10014b4:	d9014b17 	ldw	r4,1324(sp)
 10014b8:	38800017 	ldw	r2,0(r7)
 10014bc:	39c00104 	addi	r7,r7,4
 10014c0:	d9c14015 	stw	r7,1280(sp)
 10014c4:	2007d7fa 	srai	r3,r4,31
 10014c8:	d9c14017 	ldw	r7,1280(sp)
 10014cc:	11000015 	stw	r4,0(r2)
 10014d0:	10c00115 	stw	r3,4(r2)
 10014d4:	003c6906 	br	100067c <___vfprintf_internal_r+0x170>
 10014d8:	b8c00007 	ldb	r3,0(r23)
 10014dc:	00801b04 	movi	r2,108
 10014e0:	18825526 	beq	r3,r2,1001e38 <___vfprintf_internal_r+0x192c>
 10014e4:	d9414c17 	ldw	r5,1328(sp)
 10014e8:	29400414 	ori	r5,r5,16
 10014ec:	d9414c15 	stw	r5,1328(sp)
 10014f0:	003c8506 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10014f4:	d9814c17 	ldw	r6,1328(sp)
 10014f8:	b8c00007 	ldb	r3,0(r23)
 10014fc:	31800814 	ori	r6,r6,32
 1001500:	d9814c15 	stw	r6,1328(sp)
 1001504:	003c8006 	br	1000708 <___vfprintf_internal_r+0x1fc>
 1001508:	d8814c17 	ldw	r2,1328(sp)
 100150c:	3c000017 	ldw	r16,0(r7)
 1001510:	00c01e04 	movi	r3,120
 1001514:	10800094 	ori	r2,r2,2
 1001518:	d8814c15 	stw	r2,1328(sp)
 100151c:	39c00104 	addi	r7,r7,4
 1001520:	01404074 	movhi	r5,257
 1001524:	294a7d04 	addi	r5,r5,10740
 1001528:	00800c04 	movi	r2,48
 100152c:	0023883a 	mov	r17,zero
 1001530:	01000084 	movi	r4,2
 1001534:	d9c14015 	stw	r7,1280(sp)
 1001538:	d8c14d15 	stw	r3,1332(sp)
 100153c:	d9414415 	stw	r5,1296(sp)
 1001540:	d8800445 	stb	r2,17(sp)
 1001544:	d8c00485 	stb	r3,18(sp)
 1001548:	d8000405 	stb	zero,16(sp)
 100154c:	003e7d06 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001550:	d8814c17 	ldw	r2,1328(sp)
 1001554:	b8c00007 	ldb	r3,0(r23)
 1001558:	10801014 	ori	r2,r2,64
 100155c:	d8814c15 	stw	r2,1328(sp)
 1001560:	003c6906 	br	1000708 <___vfprintf_internal_r+0x1fc>
 1001564:	d9414c17 	ldw	r5,1328(sp)
 1001568:	2880020c 	andi	r2,r5,8
 100156c:	1001e526 	beq	r2,zero,1001d04 <___vfprintf_internal_r+0x17f8>
 1001570:	39800017 	ldw	r6,0(r7)
 1001574:	38800204 	addi	r2,r7,8
 1001578:	d8814015 	stw	r2,1280(sp)
 100157c:	d9814215 	stw	r6,1288(sp)
 1001580:	39c00117 	ldw	r7,4(r7)
 1001584:	d9c14315 	stw	r7,1292(sp)
 1001588:	d9014217 	ldw	r4,1288(sp)
 100158c:	d9414317 	ldw	r5,1292(sp)
 1001590:	1006fbc0 	call	1006fbc <__isinfd>
 1001594:	10021d26 	beq	r2,zero,1001e0c <___vfprintf_internal_r+0x1900>
 1001598:	d9014217 	ldw	r4,1288(sp)
 100159c:	d9414317 	ldw	r5,1292(sp)
 10015a0:	000d883a 	mov	r6,zero
 10015a4:	000f883a 	mov	r7,zero
 10015a8:	10091580 	call	1009158 <__ltdf2>
 10015ac:	1002d016 	blt	r2,zero,10020f0 <___vfprintf_internal_r+0x1be4>
 10015b0:	d9414d17 	ldw	r5,1332(sp)
 10015b4:	008011c4 	movi	r2,71
 10015b8:	11421016 	blt	r2,r5,1001dfc <___vfprintf_internal_r+0x18f0>
 10015bc:	01804074 	movhi	r6,257
 10015c0:	318a8204 	addi	r6,r6,10760
 10015c4:	d9814115 	stw	r6,1284(sp)
 10015c8:	d9014c17 	ldw	r4,1328(sp)
 10015cc:	00c000c4 	movi	r3,3
 10015d0:	00bfdfc4 	movi	r2,-129
 10015d4:	2088703a 	and	r4,r4,r2
 10015d8:	180f883a 	mov	r7,r3
 10015dc:	d8c14515 	stw	r3,1300(sp)
 10015e0:	d9014c15 	stw	r4,1328(sp)
 10015e4:	d8014615 	stw	zero,1304(sp)
 10015e8:	003e6a06 	br	1000f94 <___vfprintf_internal_r+0xa88>
 10015ec:	38800017 	ldw	r2,0(r7)
 10015f0:	00c00044 	movi	r3,1
 10015f4:	39c00104 	addi	r7,r7,4
 10015f8:	d9c14015 	stw	r7,1280(sp)
 10015fc:	d9000f04 	addi	r4,sp,60
 1001600:	180f883a 	mov	r7,r3
 1001604:	d8c14515 	stw	r3,1300(sp)
 1001608:	d9014115 	stw	r4,1284(sp)
 100160c:	d8800f05 	stb	r2,60(sp)
 1001610:	d8000405 	stb	zero,16(sp)
 1001614:	003cac06 	br	10008c8 <___vfprintf_internal_r+0x3bc>
 1001618:	01404074 	movhi	r5,257
 100161c:	294a8804 	addi	r5,r5,10784
 1001620:	d9414415 	stw	r5,1296(sp)
 1001624:	d9814c17 	ldw	r6,1328(sp)
 1001628:	3080080c 	andi	r2,r6,32
 100162c:	1000ff26 	beq	r2,zero,1001a2c <___vfprintf_internal_r+0x1520>
 1001630:	3c000017 	ldw	r16,0(r7)
 1001634:	3c400117 	ldw	r17,4(r7)
 1001638:	38800204 	addi	r2,r7,8
 100163c:	d8814015 	stw	r2,1280(sp)
 1001640:	d9414c17 	ldw	r5,1328(sp)
 1001644:	2880004c 	andi	r2,r5,1
 1001648:	1005003a 	cmpeq	r2,r2,zero
 100164c:	1000b91e 	bne	r2,zero,1001934 <___vfprintf_internal_r+0x1428>
 1001650:	8444b03a 	or	r2,r16,r17
 1001654:	1000b726 	beq	r2,zero,1001934 <___vfprintf_internal_r+0x1428>
 1001658:	d9814d17 	ldw	r6,1332(sp)
 100165c:	29400094 	ori	r5,r5,2
 1001660:	00800c04 	movi	r2,48
 1001664:	01000084 	movi	r4,2
 1001668:	d9414c15 	stw	r5,1328(sp)
 100166c:	d8800445 	stb	r2,17(sp)
 1001670:	d9800485 	stb	r6,18(sp)
 1001674:	d8000405 	stb	zero,16(sp)
 1001678:	003e3206 	br	1000f44 <___vfprintf_internal_r+0xa38>
 100167c:	01804074 	movhi	r6,257
 1001680:	318a7d04 	addi	r6,r6,10740
 1001684:	d9814415 	stw	r6,1296(sp)
 1001688:	003fe606 	br	1001624 <___vfprintf_internal_r+0x1118>
 100168c:	00800ac4 	movi	r2,43
 1001690:	d8800405 	stb	r2,16(sp)
 1001694:	b8c00007 	ldb	r3,0(r23)
 1001698:	003c1b06 	br	1000708 <___vfprintf_internal_r+0x1fc>
 100169c:	d8814c17 	ldw	r2,1328(sp)
 10016a0:	b8c00007 	ldb	r3,0(r23)
 10016a4:	10800054 	ori	r2,r2,1
 10016a8:	d8814c15 	stw	r2,1328(sp)
 10016ac:	003c1606 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10016b0:	d8800407 	ldb	r2,16(sp)
 10016b4:	10004c1e 	bne	r2,zero,10017e8 <___vfprintf_internal_r+0x12dc>
 10016b8:	00800804 	movi	r2,32
 10016bc:	d8800405 	stb	r2,16(sp)
 10016c0:	b8c00007 	ldb	r3,0(r23)
 10016c4:	003c1006 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10016c8:	d9814c17 	ldw	r6,1328(sp)
 10016cc:	b8c00007 	ldb	r3,0(r23)
 10016d0:	31800214 	ori	r6,r6,8
 10016d4:	d9814c15 	stw	r6,1328(sp)
 10016d8:	003c0b06 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10016dc:	0009883a 	mov	r4,zero
 10016e0:	04000244 	movi	r16,9
 10016e4:	01400284 	movi	r5,10
 10016e8:	d9c15115 	stw	r7,1348(sp)
 10016ec:	10096900 	call	1009690 <__mulsi3>
 10016f0:	b9000007 	ldb	r4,0(r23)
 10016f4:	d8c14d17 	ldw	r3,1332(sp)
 10016f8:	bdc00044 	addi	r23,r23,1
 10016fc:	d9014d15 	stw	r4,1332(sp)
 1001700:	d9414d17 	ldw	r5,1332(sp)
 1001704:	1885883a 	add	r2,r3,r2
 1001708:	113ff404 	addi	r4,r2,-48
 100170c:	28bff404 	addi	r2,r5,-48
 1001710:	d9c15117 	ldw	r7,1348(sp)
 1001714:	80bff32e 	bgeu	r16,r2,10016e4 <___vfprintf_internal_r+0x11d8>
 1001718:	d9014a15 	stw	r4,1320(sp)
 100171c:	003bfc06 	br	1000710 <___vfprintf_internal_r+0x204>
 1001720:	d8814c17 	ldw	r2,1328(sp)
 1001724:	b8c00007 	ldb	r3,0(r23)
 1001728:	10802014 	ori	r2,r2,128
 100172c:	d8814c15 	stw	r2,1328(sp)
 1001730:	003bf506 	br	1000708 <___vfprintf_internal_r+0x1fc>
 1001734:	b8c00007 	ldb	r3,0(r23)
 1001738:	00800a84 	movi	r2,42
 100173c:	bdc00044 	addi	r23,r23,1
 1001740:	18831826 	beq	r3,r2,10023a4 <___vfprintf_internal_r+0x1e98>
 1001744:	d8c14d15 	stw	r3,1332(sp)
 1001748:	18bff404 	addi	r2,r3,-48
 100174c:	00c00244 	movi	r3,9
 1001750:	18827b36 	bltu	r3,r2,1002140 <___vfprintf_internal_r+0x1c34>
 1001754:	1821883a 	mov	r16,r3
 1001758:	0009883a 	mov	r4,zero
 100175c:	01400284 	movi	r5,10
 1001760:	d9c15115 	stw	r7,1348(sp)
 1001764:	10096900 	call	1009690 <__mulsi3>
 1001768:	d9414d17 	ldw	r5,1332(sp)
 100176c:	b9800007 	ldb	r6,0(r23)
 1001770:	d9c15117 	ldw	r7,1348(sp)
 1001774:	1145883a 	add	r2,r2,r5
 1001778:	113ff404 	addi	r4,r2,-48
 100177c:	30bff404 	addi	r2,r6,-48
 1001780:	d9814d15 	stw	r6,1332(sp)
 1001784:	bdc00044 	addi	r23,r23,1
 1001788:	80bff42e 	bgeu	r16,r2,100175c <___vfprintf_internal_r+0x1250>
 100178c:	2027883a 	mov	r19,r4
 1001790:	203bdf0e 	bge	r4,zero,1000710 <___vfprintf_internal_r+0x204>
 1001794:	04ffffc4 	movi	r19,-1
 1001798:	003bdd06 	br	1000710 <___vfprintf_internal_r+0x204>
 100179c:	d8000405 	stb	zero,16(sp)
 10017a0:	39800017 	ldw	r6,0(r7)
 10017a4:	39c00104 	addi	r7,r7,4
 10017a8:	d9c14015 	stw	r7,1280(sp)
 10017ac:	d9814115 	stw	r6,1284(sp)
 10017b0:	3001c926 	beq	r6,zero,1001ed8 <___vfprintf_internal_r+0x19cc>
 10017b4:	98000e16 	blt	r19,zero,10017f0 <___vfprintf_internal_r+0x12e4>
 10017b8:	d9014117 	ldw	r4,1284(sp)
 10017bc:	000b883a 	mov	r5,zero
 10017c0:	980d883a 	mov	r6,r19
 10017c4:	10056400 	call	1005640 <memchr>
 10017c8:	10025926 	beq	r2,zero,1002130 <___vfprintf_internal_r+0x1c24>
 10017cc:	d8c14117 	ldw	r3,1284(sp)
 10017d0:	10cfc83a 	sub	r7,r2,r3
 10017d4:	99c19e16 	blt	r19,r7,1001e50 <___vfprintf_internal_r+0x1944>
 10017d8:	d9c14515 	stw	r7,1300(sp)
 10017dc:	38000916 	blt	r7,zero,1001804 <___vfprintf_internal_r+0x12f8>
 10017e0:	d8014615 	stw	zero,1304(sp)
 10017e4:	003deb06 	br	1000f94 <___vfprintf_internal_r+0xa88>
 10017e8:	b8c00007 	ldb	r3,0(r23)
 10017ec:	003bc606 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10017f0:	d9014117 	ldw	r4,1284(sp)
 10017f4:	10004400 	call	1000440 <strlen>
 10017f8:	d8814515 	stw	r2,1300(sp)
 10017fc:	100f883a 	mov	r7,r2
 1001800:	103ff70e 	bge	r2,zero,10017e0 <___vfprintf_internal_r+0x12d4>
 1001804:	d8014515 	stw	zero,1300(sp)
 1001808:	d8014615 	stw	zero,1304(sp)
 100180c:	003de106 	br	1000f94 <___vfprintf_internal_r+0xa88>
 1001810:	20c03fcc 	andi	r3,r4,255
 1001814:	00800044 	movi	r2,1
 1001818:	18802d26 	beq	r3,r2,10018d0 <___vfprintf_internal_r+0x13c4>
 100181c:	18800e36 	bltu	r3,r2,1001858 <___vfprintf_internal_r+0x134c>
 1001820:	00800084 	movi	r2,2
 1001824:	1880fa26 	beq	r3,r2,1001c10 <___vfprintf_internal_r+0x1704>
 1001828:	01004074 	movhi	r4,257
 100182c:	210a8d04 	addi	r4,r4,10804
 1001830:	10004400 	call	1000440 <strlen>
 1001834:	100f883a 	mov	r7,r2
 1001838:	dcc14515 	stw	r19,1300(sp)
 100183c:	9880010e 	bge	r19,r2,1001844 <___vfprintf_internal_r+0x1338>
 1001840:	d8814515 	stw	r2,1300(sp)
 1001844:	00804074 	movhi	r2,257
 1001848:	108a8d04 	addi	r2,r2,10804
 100184c:	dcc14615 	stw	r19,1304(sp)
 1001850:	d8814115 	stw	r2,1284(sp)
 1001854:	003dcf06 	br	1000f94 <___vfprintf_internal_r+0xa88>
 1001858:	d9401904 	addi	r5,sp,100
 100185c:	dd000f04 	addi	r20,sp,60
 1001860:	d9414115 	stw	r5,1284(sp)
 1001864:	880a977a 	slli	r5,r17,29
 1001868:	d9814117 	ldw	r6,1284(sp)
 100186c:	8004d0fa 	srli	r2,r16,3
 1001870:	8806d0fa 	srli	r3,r17,3
 1001874:	810001cc 	andi	r4,r16,7
 1001878:	2884b03a 	or	r2,r5,r2
 100187c:	31bfffc4 	addi	r6,r6,-1
 1001880:	21000c04 	addi	r4,r4,48
 1001884:	d9814115 	stw	r6,1284(sp)
 1001888:	10cab03a 	or	r5,r2,r3
 100188c:	31000005 	stb	r4,0(r6)
 1001890:	1021883a 	mov	r16,r2
 1001894:	1823883a 	mov	r17,r3
 1001898:	283ff21e 	bne	r5,zero,1001864 <___vfprintf_internal_r+0x1358>
 100189c:	d8c14c17 	ldw	r3,1328(sp)
 10018a0:	1880004c 	andi	r2,r3,1
 10018a4:	1005003a 	cmpeq	r2,r2,zero
 10018a8:	103db31e 	bne	r2,zero,1000f78 <___vfprintf_internal_r+0xa6c>
 10018ac:	20803fcc 	andi	r2,r4,255
 10018b0:	1080201c 	xori	r2,r2,128
 10018b4:	10bfe004 	addi	r2,r2,-128
 10018b8:	00c00c04 	movi	r3,48
 10018bc:	10fdae26 	beq	r2,r3,1000f78 <___vfprintf_internal_r+0xa6c>
 10018c0:	31bfffc4 	addi	r6,r6,-1
 10018c4:	d9814115 	stw	r6,1284(sp)
 10018c8:	30c00005 	stb	r3,0(r6)
 10018cc:	003daa06 	br	1000f78 <___vfprintf_internal_r+0xa6c>
 10018d0:	88800068 	cmpgeui	r2,r17,1
 10018d4:	10002c1e 	bne	r2,zero,1001988 <___vfprintf_internal_r+0x147c>
 10018d8:	8800021e 	bne	r17,zero,10018e4 <___vfprintf_internal_r+0x13d8>
 10018dc:	00800244 	movi	r2,9
 10018e0:	14002936 	bltu	r2,r16,1001988 <___vfprintf_internal_r+0x147c>
 10018e4:	d90018c4 	addi	r4,sp,99
 10018e8:	dd000f04 	addi	r20,sp,60
 10018ec:	d9014115 	stw	r4,1284(sp)
 10018f0:	d9014117 	ldw	r4,1284(sp)
 10018f4:	80800c04 	addi	r2,r16,48
 10018f8:	20800005 	stb	r2,0(r4)
 10018fc:	003d9e06 	br	1000f78 <___vfprintf_internal_r+0xa6c>
 1001900:	dc400d17 	ldw	r17,52(sp)
 1001904:	07004074 	movhi	fp,257
 1001908:	e70a9484 	addi	fp,fp,10834
 100190c:	9425883a 	add	r18,r18,r16
 1001910:	8c400044 	addi	r17,r17,1
 1001914:	008001c4 	movi	r2,7
 1001918:	1f000015 	stw	fp,0(r3)
 100191c:	1c000115 	stw	r16,4(r3)
 1001920:	dc800e15 	stw	r18,56(sp)
 1001924:	dc400d15 	stw	r17,52(sp)
 1001928:	147ddc16 	blt	r2,r17,100109c <___vfprintf_internal_r+0xb90>
 100192c:	18c00204 	addi	r3,r3,8
 1001930:	003c7406 	br	1000b04 <___vfprintf_internal_r+0x5f8>
 1001934:	01000084 	movi	r4,2
 1001938:	d8000405 	stb	zero,16(sp)
 100193c:	003d8106 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001940:	d9814c17 	ldw	r6,1328(sp)
 1001944:	30c4703a 	and	r2,r6,r3
 1001948:	1005003a 	cmpeq	r2,r2,zero
 100194c:	103cb326 	beq	r2,zero,1000c1c <___vfprintf_internal_r+0x710>
 1001950:	d9014117 	ldw	r4,1284(sp)
 1001954:	94800044 	addi	r18,r18,1
 1001958:	8c400044 	addi	r17,r17,1
 100195c:	008001c4 	movi	r2,7
 1001960:	a9000015 	stw	r4,0(r21)
 1001964:	a8c00115 	stw	r3,4(r21)
 1001968:	dc800e15 	stw	r18,56(sp)
 100196c:	dc400d15 	stw	r17,52(sp)
 1001970:	147e6016 	blt	r2,r17,10012f4 <___vfprintf_internal_r+0xde8>
 1001974:	acc00204 	addi	r19,r21,8
 1001978:	003cd106 	br	1000cc0 <___vfprintf_internal_r+0x7b4>
 100197c:	07004074 	movhi	fp,257
 1001980:	e70a9484 	addi	fp,fp,10834
 1001984:	003c4906 	br	1000aac <___vfprintf_internal_r+0x5a0>
 1001988:	dd000f04 	addi	r20,sp,60
 100198c:	dc801904 	addi	r18,sp,100
 1001990:	8009883a 	mov	r4,r16
 1001994:	880b883a 	mov	r5,r17
 1001998:	01800284 	movi	r6,10
 100199c:	000f883a 	mov	r7,zero
 10019a0:	1007db80 	call	1007db8 <__umoddi3>
 10019a4:	12000c04 	addi	r8,r2,48
 10019a8:	94bfffc4 	addi	r18,r18,-1
 10019ac:	8009883a 	mov	r4,r16
 10019b0:	880b883a 	mov	r5,r17
 10019b4:	01800284 	movi	r6,10
 10019b8:	000f883a 	mov	r7,zero
 10019bc:	92000005 	stb	r8,0(r18)
 10019c0:	100774c0 	call	100774c <__udivdi3>
 10019c4:	1009883a 	mov	r4,r2
 10019c8:	1021883a 	mov	r16,r2
 10019cc:	18800068 	cmpgeui	r2,r3,1
 10019d0:	1823883a 	mov	r17,r3
 10019d4:	103fee1e 	bne	r2,zero,1001990 <___vfprintf_internal_r+0x1484>
 10019d8:	1800021e 	bne	r3,zero,10019e4 <___vfprintf_internal_r+0x14d8>
 10019dc:	00800244 	movi	r2,9
 10019e0:	113feb36 	bltu	r2,r4,1001990 <___vfprintf_internal_r+0x1484>
 10019e4:	94bfffc4 	addi	r18,r18,-1
 10019e8:	dc814115 	stw	r18,1284(sp)
 10019ec:	003fc006 	br	10018f0 <___vfprintf_internal_r+0x13e4>
 10019f0:	d9014c17 	ldw	r4,1328(sp)
 10019f4:	2080004c 	andi	r2,r4,1
 10019f8:	10009a1e 	bne	r2,zero,1001c64 <___vfprintf_internal_r+0x1758>
 10019fc:	d9401904 	addi	r5,sp,100
 1001a00:	dd000f04 	addi	r20,sp,60
 1001a04:	d9414115 	stw	r5,1284(sp)
 1001a08:	003d5b06 	br	1000f78 <___vfprintf_internal_r+0xa6c>
 1001a0c:	d9014f17 	ldw	r4,1340(sp)
 1001a10:	b00b883a 	mov	r5,r22
 1001a14:	d9800c04 	addi	r6,sp,48
 1001a18:	10004b40 	call	10004b4 <__sprint_r>
 1001a1c:	103c731e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001a20:	dc800e17 	ldw	r18,56(sp)
 1001a24:	d8c01904 	addi	r3,sp,100
 1001a28:	003cf906 	br	1000e10 <___vfprintf_internal_r+0x904>
 1001a2c:	d8c14c17 	ldw	r3,1328(sp)
 1001a30:	1880040c 	andi	r2,r3,16
 1001a34:	1000711e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x16f0>
 1001a38:	d9014c17 	ldw	r4,1328(sp)
 1001a3c:	2080100c 	andi	r2,r4,64
 1001a40:	10006e26 	beq	r2,zero,1001bfc <___vfprintf_internal_r+0x16f0>
 1001a44:	3c00000b 	ldhu	r16,0(r7)
 1001a48:	0023883a 	mov	r17,zero
 1001a4c:	39c00104 	addi	r7,r7,4
 1001a50:	d9c14015 	stw	r7,1280(sp)
 1001a54:	003efa06 	br	1001640 <___vfprintf_internal_r+0x1134>
 1001a58:	dc400d17 	ldw	r17,52(sp)
 1001a5c:	07004074 	movhi	fp,257
 1001a60:	e70a9484 	addi	fp,fp,10834
 1001a64:	9425883a 	add	r18,r18,r16
 1001a68:	8c400044 	addi	r17,r17,1
 1001a6c:	008001c4 	movi	r2,7
 1001a70:	1f000015 	stw	fp,0(r3)
 1001a74:	1c000115 	stw	r16,4(r3)
 1001a78:	dc800e15 	stw	r18,56(sp)
 1001a7c:	dc400d15 	stw	r17,52(sp)
 1001a80:	147d7016 	blt	r2,r17,1001044 <___vfprintf_internal_r+0xb38>
 1001a84:	18c00204 	addi	r3,r3,8
 1001a88:	003d7506 	br	1001060 <___vfprintf_internal_r+0xb54>
 1001a8c:	dc800e17 	ldw	r18,56(sp)
 1001a90:	dc400d17 	ldw	r17,52(sp)
 1001a94:	07004074 	movhi	fp,257
 1001a98:	e70a9884 	addi	fp,fp,10850
 1001a9c:	003bba06 	br	1000988 <___vfprintf_internal_r+0x47c>
 1001aa0:	d9014f17 	ldw	r4,1340(sp)
 1001aa4:	b00b883a 	mov	r5,r22
 1001aa8:	d9800c04 	addi	r6,sp,48
 1001aac:	10004b40 	call	10004b4 <__sprint_r>
 1001ab0:	103c4e1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001ab4:	dc800e17 	ldw	r18,56(sp)
 1001ab8:	d8c01904 	addi	r3,sp,100
 1001abc:	003ce306 	br	1000e4c <___vfprintf_internal_r+0x940>
 1001ac0:	3c000017 	ldw	r16,0(r7)
 1001ac4:	0009883a 	mov	r4,zero
 1001ac8:	39c00104 	addi	r7,r7,4
 1001acc:	0023883a 	mov	r17,zero
 1001ad0:	d9c14015 	stw	r7,1280(sp)
 1001ad4:	d8000405 	stb	zero,16(sp)
 1001ad8:	003d1a06 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001adc:	38800017 	ldw	r2,0(r7)
 1001ae0:	39c00104 	addi	r7,r7,4
 1001ae4:	d9c14015 	stw	r7,1280(sp)
 1001ae8:	1023d7fa 	srai	r17,r2,31
 1001aec:	1021883a 	mov	r16,r2
 1001af0:	003d1206 	br	1000f3c <___vfprintf_internal_r+0xa30>
 1001af4:	3c000017 	ldw	r16,0(r7)
 1001af8:	01000044 	movi	r4,1
 1001afc:	39c00104 	addi	r7,r7,4
 1001b00:	0023883a 	mov	r17,zero
 1001b04:	d9c14015 	stw	r7,1280(sp)
 1001b08:	d8000405 	stb	zero,16(sp)
 1001b0c:	003d0d06 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001b10:	00804074 	movhi	r2,257
 1001b14:	108a9404 	addi	r2,r2,10832
 1001b18:	94800044 	addi	r18,r18,1
 1001b1c:	8c400044 	addi	r17,r17,1
 1001b20:	a8800015 	stw	r2,0(r21)
 1001b24:	00c00044 	movi	r3,1
 1001b28:	008001c4 	movi	r2,7
 1001b2c:	a8c00115 	stw	r3,4(r21)
 1001b30:	dc800e15 	stw	r18,56(sp)
 1001b34:	dc400d15 	stw	r17,52(sp)
 1001b38:	1440ca16 	blt	r2,r17,1001e64 <___vfprintf_internal_r+0x1958>
 1001b3c:	a8c00204 	addi	r3,r21,8
 1001b40:	2000061e 	bne	r4,zero,1001b5c <___vfprintf_internal_r+0x1650>
 1001b44:	d9414717 	ldw	r5,1308(sp)
 1001b48:	2800041e 	bne	r5,zero,1001b5c <___vfprintf_internal_r+0x1650>
 1001b4c:	d9814c17 	ldw	r6,1328(sp)
 1001b50:	3080004c 	andi	r2,r6,1
 1001b54:	1005003a 	cmpeq	r2,r2,zero
 1001b58:	103bea1e 	bne	r2,zero,1000b04 <___vfprintf_internal_r+0x5f8>
 1001b5c:	00800044 	movi	r2,1
 1001b60:	dc400d17 	ldw	r17,52(sp)
 1001b64:	18800115 	stw	r2,4(r3)
 1001b68:	d8814917 	ldw	r2,1316(sp)
 1001b6c:	94800044 	addi	r18,r18,1
 1001b70:	8c400044 	addi	r17,r17,1
 1001b74:	18800015 	stw	r2,0(r3)
 1001b78:	008001c4 	movi	r2,7
 1001b7c:	dc800e15 	stw	r18,56(sp)
 1001b80:	dc400d15 	stw	r17,52(sp)
 1001b84:	1440ca16 	blt	r2,r17,1001eb0 <___vfprintf_internal_r+0x19a4>
 1001b88:	18c00204 	addi	r3,r3,8
 1001b8c:	0121c83a 	sub	r16,zero,r4
 1001b90:	0400500e 	bge	zero,r16,1001cd4 <___vfprintf_internal_r+0x17c8>
 1001b94:	00800404 	movi	r2,16
 1001b98:	1400800e 	bge	r2,r16,1001d9c <___vfprintf_internal_r+0x1890>
 1001b9c:	1027883a 	mov	r19,r2
 1001ba0:	07004074 	movhi	fp,257
 1001ba4:	e70a9484 	addi	fp,fp,10834
 1001ba8:	050001c4 	movi	r20,7
 1001bac:	00000306 	br	1001bbc <___vfprintf_internal_r+0x16b0>
 1001bb0:	18c00204 	addi	r3,r3,8
 1001bb4:	843ffc04 	addi	r16,r16,-16
 1001bb8:	9c007a0e 	bge	r19,r16,1001da4 <___vfprintf_internal_r+0x1898>
 1001bbc:	94800404 	addi	r18,r18,16
 1001bc0:	8c400044 	addi	r17,r17,1
 1001bc4:	1f000015 	stw	fp,0(r3)
 1001bc8:	1cc00115 	stw	r19,4(r3)
 1001bcc:	dc800e15 	stw	r18,56(sp)
 1001bd0:	dc400d15 	stw	r17,52(sp)
 1001bd4:	a47ff60e 	bge	r20,r17,1001bb0 <___vfprintf_internal_r+0x16a4>
 1001bd8:	d9014f17 	ldw	r4,1340(sp)
 1001bdc:	b00b883a 	mov	r5,r22
 1001be0:	d9800c04 	addi	r6,sp,48
 1001be4:	10004b40 	call	10004b4 <__sprint_r>
 1001be8:	103c001e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001bec:	dc800e17 	ldw	r18,56(sp)
 1001bf0:	dc400d17 	ldw	r17,52(sp)
 1001bf4:	d8c01904 	addi	r3,sp,100
 1001bf8:	003fee06 	br	1001bb4 <___vfprintf_internal_r+0x16a8>
 1001bfc:	3c000017 	ldw	r16,0(r7)
 1001c00:	0023883a 	mov	r17,zero
 1001c04:	39c00104 	addi	r7,r7,4
 1001c08:	d9c14015 	stw	r7,1280(sp)
 1001c0c:	003e8c06 	br	1001640 <___vfprintf_internal_r+0x1134>
 1001c10:	d9401904 	addi	r5,sp,100
 1001c14:	dd000f04 	addi	r20,sp,60
 1001c18:	d9414115 	stw	r5,1284(sp)
 1001c1c:	d9814417 	ldw	r6,1296(sp)
 1001c20:	880a973a 	slli	r5,r17,28
 1001c24:	8004d13a 	srli	r2,r16,4
 1001c28:	810003cc 	andi	r4,r16,15
 1001c2c:	3109883a 	add	r4,r6,r4
 1001c30:	2884b03a 	or	r2,r5,r2
 1001c34:	21400003 	ldbu	r5,0(r4)
 1001c38:	d9014117 	ldw	r4,1284(sp)
 1001c3c:	8806d13a 	srli	r3,r17,4
 1001c40:	1021883a 	mov	r16,r2
 1001c44:	213fffc4 	addi	r4,r4,-1
 1001c48:	d9014115 	stw	r4,1284(sp)
 1001c4c:	d9814117 	ldw	r6,1284(sp)
 1001c50:	10c8b03a 	or	r4,r2,r3
 1001c54:	1823883a 	mov	r17,r3
 1001c58:	31400005 	stb	r5,0(r6)
 1001c5c:	203fef1e 	bne	r4,zero,1001c1c <___vfprintf_internal_r+0x1710>
 1001c60:	003cc506 	br	1000f78 <___vfprintf_internal_r+0xa6c>
 1001c64:	00800c04 	movi	r2,48
 1001c68:	d98018c4 	addi	r6,sp,99
 1001c6c:	dd000f04 	addi	r20,sp,60
 1001c70:	d88018c5 	stb	r2,99(sp)
 1001c74:	d9814115 	stw	r6,1284(sp)
 1001c78:	003cbf06 	br	1000f78 <___vfprintf_internal_r+0xa6c>
 1001c7c:	dc400d17 	ldw	r17,52(sp)
 1001c80:	07004074 	movhi	fp,257
 1001c84:	e70a9884 	addi	fp,fp,10850
 1001c88:	003bc106 	br	1000b90 <___vfprintf_internal_r+0x684>
 1001c8c:	d9414c17 	ldw	r5,1328(sp)
 1001c90:	2880040c 	andi	r2,r5,16
 1001c94:	10007c26 	beq	r2,zero,1001e88 <___vfprintf_internal_r+0x197c>
 1001c98:	38800017 	ldw	r2,0(r7)
 1001c9c:	39c00104 	addi	r7,r7,4
 1001ca0:	d9c14015 	stw	r7,1280(sp)
 1001ca4:	d9814b17 	ldw	r6,1324(sp)
 1001ca8:	d9c14017 	ldw	r7,1280(sp)
 1001cac:	11800015 	stw	r6,0(r2)
 1001cb0:	003a7206 	br	100067c <___vfprintf_internal_r+0x170>
 1001cb4:	d9014f17 	ldw	r4,1340(sp)
 1001cb8:	b00b883a 	mov	r5,r22
 1001cbc:	d9800c04 	addi	r6,sp,48
 1001cc0:	10004b40 	call	10004b4 <__sprint_r>
 1001cc4:	103bc91e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001cc8:	dc800e17 	ldw	r18,56(sp)
 1001ccc:	dc400d17 	ldw	r17,52(sp)
 1001cd0:	d8c01904 	addi	r3,sp,100
 1001cd4:	d9014717 	ldw	r4,1308(sp)
 1001cd8:	d9414117 	ldw	r5,1284(sp)
 1001cdc:	8c400044 	addi	r17,r17,1
 1001ce0:	9125883a 	add	r18,r18,r4
 1001ce4:	008001c4 	movi	r2,7
 1001ce8:	19400015 	stw	r5,0(r3)
 1001cec:	19000115 	stw	r4,4(r3)
 1001cf0:	dc800e15 	stw	r18,56(sp)
 1001cf4:	dc400d15 	stw	r17,52(sp)
 1001cf8:	147ce816 	blt	r2,r17,100109c <___vfprintf_internal_r+0xb90>
 1001cfc:	18c00204 	addi	r3,r3,8
 1001d00:	003b8006 	br	1000b04 <___vfprintf_internal_r+0x5f8>
 1001d04:	38c00017 	ldw	r3,0(r7)
 1001d08:	39000204 	addi	r4,r7,8
 1001d0c:	d9014015 	stw	r4,1280(sp)
 1001d10:	d8c14215 	stw	r3,1288(sp)
 1001d14:	39c00117 	ldw	r7,4(r7)
 1001d18:	d9c14315 	stw	r7,1292(sp)
 1001d1c:	003e1a06 	br	1001588 <___vfprintf_internal_r+0x107c>
 1001d20:	0005883a 	mov	r2,zero
 1001d24:	1409c83a 	sub	r4,r2,r16
 1001d28:	1105803a 	cmpltu	r2,r2,r4
 1001d2c:	044bc83a 	sub	r5,zero,r17
 1001d30:	2885c83a 	sub	r2,r5,r2
 1001d34:	2021883a 	mov	r16,r4
 1001d38:	1023883a 	mov	r17,r2
 1001d3c:	01000044 	movi	r4,1
 1001d40:	00800b44 	movi	r2,45
 1001d44:	d8800405 	stb	r2,16(sp)
 1001d48:	003c7e06 	br	1000f44 <___vfprintf_internal_r+0xa38>
 1001d4c:	d9014f17 	ldw	r4,1340(sp)
 1001d50:	b00b883a 	mov	r5,r22
 1001d54:	d9800c04 	addi	r6,sp,48
 1001d58:	10004b40 	call	10004b4 <__sprint_r>
 1001d5c:	103ba31e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001d60:	dc800e17 	ldw	r18,56(sp)
 1001d64:	dc400d17 	ldw	r17,52(sp)
 1001d68:	d9000517 	ldw	r4,20(sp)
 1001d6c:	d9401904 	addi	r5,sp,100
 1001d70:	003da106 	br	10013f8 <___vfprintf_internal_r+0xeec>
 1001d74:	d9014f17 	ldw	r4,1340(sp)
 1001d78:	b00b883a 	mov	r5,r22
 1001d7c:	d9800c04 	addi	r6,sp,48
 1001d80:	10004b40 	call	10004b4 <__sprint_r>
 1001d84:	103b991e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001d88:	dc800e17 	ldw	r18,56(sp)
 1001d8c:	dc400d17 	ldw	r17,52(sp)
 1001d90:	d9000517 	ldw	r4,20(sp)
 1001d94:	d8c01904 	addi	r3,sp,100
 1001d98:	003d8b06 	br	10013c8 <___vfprintf_internal_r+0xebc>
 1001d9c:	07004074 	movhi	fp,257
 1001da0:	e70a9484 	addi	fp,fp,10834
 1001da4:	9425883a 	add	r18,r18,r16
 1001da8:	8c400044 	addi	r17,r17,1
 1001dac:	008001c4 	movi	r2,7
 1001db0:	1f000015 	stw	fp,0(r3)
 1001db4:	1c000115 	stw	r16,4(r3)
 1001db8:	dc800e15 	stw	r18,56(sp)
 1001dbc:	dc400d15 	stw	r17,52(sp)
 1001dc0:	147fbc16 	blt	r2,r17,1001cb4 <___vfprintf_internal_r+0x17a8>
 1001dc4:	18c00204 	addi	r3,r3,8
 1001dc8:	003fc206 	br	1001cd4 <___vfprintf_internal_r+0x17c8>
 1001dcc:	d9014f17 	ldw	r4,1340(sp)
 1001dd0:	b00b883a 	mov	r5,r22
 1001dd4:	d9800c04 	addi	r6,sp,48
 1001dd8:	10004b40 	call	10004b4 <__sprint_r>
 1001ddc:	103b831e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001de0:	dc800e17 	ldw	r18,56(sp)
 1001de4:	d9000517 	ldw	r4,20(sp)
 1001de8:	d8c01904 	addi	r3,sp,100
 1001dec:	003cfc06 	br	10011e0 <___vfprintf_internal_r+0xcd4>
 1001df0:	07004074 	movhi	fp,257
 1001df4:	e70a9484 	addi	fp,fp,10834
 1001df8:	003bde06 	br	1000d74 <___vfprintf_internal_r+0x868>
 1001dfc:	00804074 	movhi	r2,257
 1001e00:	108a8304 	addi	r2,r2,10764
 1001e04:	d8814115 	stw	r2,1284(sp)
 1001e08:	003def06 	br	10015c8 <___vfprintf_internal_r+0x10bc>
 1001e0c:	d9014217 	ldw	r4,1288(sp)
 1001e10:	d9414317 	ldw	r5,1292(sp)
 1001e14:	1006ffc0 	call	1006ffc <__isnand>
 1001e18:	10003926 	beq	r2,zero,1001f00 <___vfprintf_internal_r+0x19f4>
 1001e1c:	d9414d17 	ldw	r5,1332(sp)
 1001e20:	008011c4 	movi	r2,71
 1001e24:	1140ce16 	blt	r2,r5,1002160 <___vfprintf_internal_r+0x1c54>
 1001e28:	01804074 	movhi	r6,257
 1001e2c:	318a8404 	addi	r6,r6,10768
 1001e30:	d9814115 	stw	r6,1284(sp)
 1001e34:	003de406 	br	10015c8 <___vfprintf_internal_r+0x10bc>
 1001e38:	d9014c17 	ldw	r4,1328(sp)
 1001e3c:	bdc00044 	addi	r23,r23,1
 1001e40:	b8c00007 	ldb	r3,0(r23)
 1001e44:	21000814 	ori	r4,r4,32
 1001e48:	d9014c15 	stw	r4,1328(sp)
 1001e4c:	003a2e06 	br	1000708 <___vfprintf_internal_r+0x1fc>
 1001e50:	dcc14515 	stw	r19,1300(sp)
 1001e54:	98011016 	blt	r19,zero,1002298 <___vfprintf_internal_r+0x1d8c>
 1001e58:	980f883a 	mov	r7,r19
 1001e5c:	d8014615 	stw	zero,1304(sp)
 1001e60:	003c4c06 	br	1000f94 <___vfprintf_internal_r+0xa88>
 1001e64:	d9014f17 	ldw	r4,1340(sp)
 1001e68:	b00b883a 	mov	r5,r22
 1001e6c:	d9800c04 	addi	r6,sp,48
 1001e70:	10004b40 	call	10004b4 <__sprint_r>
 1001e74:	103b5d1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001e78:	dc800e17 	ldw	r18,56(sp)
 1001e7c:	d9000517 	ldw	r4,20(sp)
 1001e80:	d8c01904 	addi	r3,sp,100
 1001e84:	003f2e06 	br	1001b40 <___vfprintf_internal_r+0x1634>
 1001e88:	d8c14c17 	ldw	r3,1328(sp)
 1001e8c:	1880100c 	andi	r2,r3,64
 1001e90:	1000a026 	beq	r2,zero,1002114 <___vfprintf_internal_r+0x1c08>
 1001e94:	38800017 	ldw	r2,0(r7)
 1001e98:	39c00104 	addi	r7,r7,4
 1001e9c:	d9c14015 	stw	r7,1280(sp)
 1001ea0:	d9014b17 	ldw	r4,1324(sp)
 1001ea4:	d9c14017 	ldw	r7,1280(sp)
 1001ea8:	1100000d 	sth	r4,0(r2)
 1001eac:	0039f306 	br	100067c <___vfprintf_internal_r+0x170>
 1001eb0:	d9014f17 	ldw	r4,1340(sp)
 1001eb4:	b00b883a 	mov	r5,r22
 1001eb8:	d9800c04 	addi	r6,sp,48
 1001ebc:	10004b40 	call	10004b4 <__sprint_r>
 1001ec0:	103b4a1e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1001ec4:	dc800e17 	ldw	r18,56(sp)
 1001ec8:	dc400d17 	ldw	r17,52(sp)
 1001ecc:	d9000517 	ldw	r4,20(sp)
 1001ed0:	d8c01904 	addi	r3,sp,100
 1001ed4:	003f2d06 	br	1001b8c <___vfprintf_internal_r+0x1680>
 1001ed8:	00800184 	movi	r2,6
 1001edc:	14c09a36 	bltu	r2,r19,1002148 <___vfprintf_internal_r+0x1c3c>
 1001ee0:	dcc14515 	stw	r19,1300(sp)
 1001ee4:	9800010e 	bge	r19,zero,1001eec <___vfprintf_internal_r+0x19e0>
 1001ee8:	d8014515 	stw	zero,1300(sp)
 1001eec:	00804074 	movhi	r2,257
 1001ef0:	108a8604 	addi	r2,r2,10776
 1001ef4:	980f883a 	mov	r7,r19
 1001ef8:	d8814115 	stw	r2,1284(sp)
 1001efc:	003a7206 	br	10008c8 <___vfprintf_internal_r+0x3bc>
 1001f00:	00bfffc4 	movi	r2,-1
 1001f04:	9880e226 	beq	r19,r2,1002290 <___vfprintf_internal_r+0x1d84>
 1001f08:	d9414d17 	ldw	r5,1332(sp)
 1001f0c:	008019c4 	movi	r2,103
 1001f10:	2880dc26 	beq	r5,r2,1002284 <___vfprintf_internal_r+0x1d78>
 1001f14:	008011c4 	movi	r2,71
 1001f18:	2880da26 	beq	r5,r2,1002284 <___vfprintf_internal_r+0x1d78>
 1001f1c:	d9414c17 	ldw	r5,1328(sp)
 1001f20:	d9014317 	ldw	r4,1292(sp)
 1001f24:	d9814217 	ldw	r6,1288(sp)
 1001f28:	29404014 	ori	r5,r5,256
 1001f2c:	d9414c15 	stw	r5,1328(sp)
 1001f30:	2000cc16 	blt	r4,zero,1002264 <___vfprintf_internal_r+0x1d58>
 1001f34:	3021883a 	mov	r16,r6
 1001f38:	2023883a 	mov	r17,r4
 1001f3c:	0039883a 	mov	fp,zero
 1001f40:	d9414d17 	ldw	r5,1332(sp)
 1001f44:	00801984 	movi	r2,102
 1001f48:	2880b726 	beq	r5,r2,1002228 <___vfprintf_internal_r+0x1d1c>
 1001f4c:	00801184 	movi	r2,70
 1001f50:	2880b526 	beq	r5,r2,1002228 <___vfprintf_internal_r+0x1d1c>
 1001f54:	00801944 	movi	r2,101
 1001f58:	2880c826 	beq	r5,r2,100227c <___vfprintf_internal_r+0x1d70>
 1001f5c:	00801144 	movi	r2,69
 1001f60:	2880c626 	beq	r5,r2,100227c <___vfprintf_internal_r+0x1d70>
 1001f64:	9829883a 	mov	r20,r19
 1001f68:	d9014f17 	ldw	r4,1340(sp)
 1001f6c:	d8800504 	addi	r2,sp,20
 1001f70:	880d883a 	mov	r6,r17
 1001f74:	d8800115 	stw	r2,4(sp)
 1001f78:	d8c00604 	addi	r3,sp,24
 1001f7c:	d8800704 	addi	r2,sp,28
 1001f80:	800b883a 	mov	r5,r16
 1001f84:	01c00084 	movi	r7,2
 1001f88:	d8c00215 	stw	r3,8(sp)
 1001f8c:	d8800315 	stw	r2,12(sp)
 1001f90:	dd000015 	stw	r20,0(sp)
 1001f94:	10027740 	call	1002774 <_dtoa_r>
 1001f98:	d9814d17 	ldw	r6,1332(sp)
 1001f9c:	d8814115 	stw	r2,1284(sp)
 1001fa0:	008019c4 	movi	r2,103
 1001fa4:	30809526 	beq	r6,r2,10021fc <___vfprintf_internal_r+0x1cf0>
 1001fa8:	d8c14d17 	ldw	r3,1332(sp)
 1001fac:	008011c4 	movi	r2,71
 1001fb0:	18809226 	beq	r3,r2,10021fc <___vfprintf_internal_r+0x1cf0>
 1001fb4:	d9414117 	ldw	r5,1284(sp)
 1001fb8:	d9814d17 	ldw	r6,1332(sp)
 1001fbc:	00801984 	movi	r2,102
 1001fc0:	2d25883a 	add	r18,r5,r20
 1001fc4:	30808626 	beq	r6,r2,10021e0 <___vfprintf_internal_r+0x1cd4>
 1001fc8:	00801184 	movi	r2,70
 1001fcc:	30808426 	beq	r6,r2,10021e0 <___vfprintf_internal_r+0x1cd4>
 1001fd0:	000d883a 	mov	r6,zero
 1001fd4:	000f883a 	mov	r7,zero
 1001fd8:	880b883a 	mov	r5,r17
 1001fdc:	8009883a 	mov	r4,r16
 1001fe0:	1008f380 	call	1008f38 <__eqdf2>
 1001fe4:	1000751e 	bne	r2,zero,10021bc <___vfprintf_internal_r+0x1cb0>
 1001fe8:	9005883a 	mov	r2,r18
 1001fec:	dc800715 	stw	r18,28(sp)
 1001ff0:	d9014117 	ldw	r4,1284(sp)
 1001ff4:	d9414d17 	ldw	r5,1332(sp)
 1001ff8:	00c019c4 	movi	r3,103
 1001ffc:	1125c83a 	sub	r18,r2,r4
 1002000:	28c06826 	beq	r5,r3,10021a4 <___vfprintf_internal_r+0x1c98>
 1002004:	008011c4 	movi	r2,71
 1002008:	28806626 	beq	r5,r2,10021a4 <___vfprintf_internal_r+0x1c98>
 100200c:	d9000517 	ldw	r4,20(sp)
 1002010:	d8c14d17 	ldw	r3,1332(sp)
 1002014:	00801944 	movi	r2,101
 1002018:	10c05516 	blt	r2,r3,1002170 <___vfprintf_internal_r+0x1c64>
 100201c:	213fffc4 	addi	r4,r4,-1
 1002020:	d9000515 	stw	r4,20(sp)
 1002024:	d8c00805 	stb	r3,32(sp)
 1002028:	2021883a 	mov	r16,r4
 100202c:	2000c116 	blt	r4,zero,1002334 <___vfprintf_internal_r+0x1e28>
 1002030:	00800ac4 	movi	r2,43
 1002034:	d8800845 	stb	r2,33(sp)
 1002038:	00800244 	movi	r2,9
 100203c:	1400af0e 	bge	r2,r16,10022fc <___vfprintf_internal_r+0x1df0>
 1002040:	1027883a 	mov	r19,r2
 1002044:	dc400b84 	addi	r17,sp,46
 1002048:	8009883a 	mov	r4,r16
 100204c:	01400284 	movi	r5,10
 1002050:	10096200 	call	1009620 <__modsi3>
 1002054:	10800c04 	addi	r2,r2,48
 1002058:	8c7fffc4 	addi	r17,r17,-1
 100205c:	8009883a 	mov	r4,r16
 1002060:	01400284 	movi	r5,10
 1002064:	88800005 	stb	r2,0(r17)
 1002068:	10095c00 	call	10095c0 <__divsi3>
 100206c:	1021883a 	mov	r16,r2
 1002070:	98bff516 	blt	r19,r2,1002048 <___vfprintf_internal_r+0x1b3c>
 1002074:	10c00c04 	addi	r3,r2,48
 1002078:	d88009c4 	addi	r2,sp,39
 100207c:	108001c4 	addi	r2,r2,7
 1002080:	897fffc4 	addi	r5,r17,-1
 1002084:	88ffffc5 	stb	r3,-1(r17)
 1002088:	2880a72e 	bgeu	r5,r2,1002328 <___vfprintf_internal_r+0x1e1c>
 100208c:	1009883a 	mov	r4,r2
 1002090:	d9800804 	addi	r6,sp,32
 1002094:	d8c00884 	addi	r3,sp,34
 1002098:	28800003 	ldbu	r2,0(r5)
 100209c:	29400044 	addi	r5,r5,1
 10020a0:	18800005 	stb	r2,0(r3)
 10020a4:	18c00044 	addi	r3,r3,1
 10020a8:	293ffb36 	bltu	r5,r4,1002098 <___vfprintf_internal_r+0x1b8c>
 10020ac:	1987c83a 	sub	r3,r3,r6
 10020b0:	00800044 	movi	r2,1
 10020b4:	d8c14815 	stw	r3,1312(sp)
 10020b8:	90cf883a 	add	r7,r18,r3
 10020bc:	1480960e 	bge	r2,r18,1002318 <___vfprintf_internal_r+0x1e0c>
 10020c0:	39c00044 	addi	r7,r7,1
 10020c4:	d9c14515 	stw	r7,1300(sp)
 10020c8:	38003416 	blt	r7,zero,100219c <___vfprintf_internal_r+0x1c90>
 10020cc:	e0803fcc 	andi	r2,fp,255
 10020d0:	1080201c 	xori	r2,r2,128
 10020d4:	10bfe004 	addi	r2,r2,-128
 10020d8:	10004e26 	beq	r2,zero,1002214 <___vfprintf_internal_r+0x1d08>
 10020dc:	00800b44 	movi	r2,45
 10020e0:	dc814715 	stw	r18,1308(sp)
 10020e4:	d8014615 	stw	zero,1304(sp)
 10020e8:	d8800405 	stb	r2,16(sp)
 10020ec:	003bab06 	br	1000f9c <___vfprintf_internal_r+0xa90>
 10020f0:	00800b44 	movi	r2,45
 10020f4:	d8800405 	stb	r2,16(sp)
 10020f8:	003d2d06 	br	10015b0 <___vfprintf_internal_r+0x10a4>
 10020fc:	d9014f17 	ldw	r4,1340(sp)
 1002100:	b00b883a 	mov	r5,r22
 1002104:	d9800c04 	addi	r6,sp,48
 1002108:	10004b40 	call	10004b4 <__sprint_r>
 100210c:	103ab71e 	bne	r2,zero,1000bec <___vfprintf_internal_r+0x6e0>
 1002110:	003ab506 	br	1000be8 <___vfprintf_internal_r+0x6dc>
 1002114:	38800017 	ldw	r2,0(r7)
 1002118:	39c00104 	addi	r7,r7,4
 100211c:	d9c14015 	stw	r7,1280(sp)
 1002120:	d9414b17 	ldw	r5,1324(sp)
 1002124:	d9c14017 	ldw	r7,1280(sp)
 1002128:	11400015 	stw	r5,0(r2)
 100212c:	00395306 	br	100067c <___vfprintf_internal_r+0x170>
 1002130:	980f883a 	mov	r7,r19
 1002134:	dcc14515 	stw	r19,1300(sp)
 1002138:	d8014615 	stw	zero,1304(sp)
 100213c:	003b9506 	br	1000f94 <___vfprintf_internal_r+0xa88>
 1002140:	0027883a 	mov	r19,zero
 1002144:	00397206 	br	1000710 <___vfprintf_internal_r+0x204>
 1002148:	00c04074 	movhi	r3,257
 100214c:	18ca8604 	addi	r3,r3,10776
 1002150:	100f883a 	mov	r7,r2
 1002154:	d8814515 	stw	r2,1300(sp)
 1002158:	d8c14115 	stw	r3,1284(sp)
 100215c:	0039da06 	br	10008c8 <___vfprintf_internal_r+0x3bc>
 1002160:	00804074 	movhi	r2,257
 1002164:	108a8504 	addi	r2,r2,10772
 1002168:	d8814115 	stw	r2,1284(sp)
 100216c:	003d1606 	br	10015c8 <___vfprintf_internal_r+0x10bc>
 1002170:	d9414d17 	ldw	r5,1332(sp)
 1002174:	00801984 	movi	r2,102
 1002178:	28804926 	beq	r5,r2,10022a0 <___vfprintf_internal_r+0x1d94>
 100217c:	200f883a 	mov	r7,r4
 1002180:	24805716 	blt	r4,r18,10022e0 <___vfprintf_internal_r+0x1dd4>
 1002184:	d9414c17 	ldw	r5,1328(sp)
 1002188:	2880004c 	andi	r2,r5,1
 100218c:	10000126 	beq	r2,zero,1002194 <___vfprintf_internal_r+0x1c88>
 1002190:	21c00044 	addi	r7,r4,1
 1002194:	d9c14515 	stw	r7,1300(sp)
 1002198:	383fcc0e 	bge	r7,zero,10020cc <___vfprintf_internal_r+0x1bc0>
 100219c:	d8014515 	stw	zero,1300(sp)
 10021a0:	003fca06 	br	10020cc <___vfprintf_internal_r+0x1bc0>
 10021a4:	d9000517 	ldw	r4,20(sp)
 10021a8:	00bfff04 	movi	r2,-4
 10021ac:	1100480e 	bge	r2,r4,10022d0 <___vfprintf_internal_r+0x1dc4>
 10021b0:	99004716 	blt	r19,r4,10022d0 <___vfprintf_internal_r+0x1dc4>
 10021b4:	d8c14d15 	stw	r3,1332(sp)
 10021b8:	003ff006 	br	100217c <___vfprintf_internal_r+0x1c70>
 10021bc:	d8800717 	ldw	r2,28(sp)
 10021c0:	14bf8b2e 	bgeu	r2,r18,1001ff0 <___vfprintf_internal_r+0x1ae4>
 10021c4:	9007883a 	mov	r3,r18
 10021c8:	01000c04 	movi	r4,48
 10021cc:	11000005 	stb	r4,0(r2)
 10021d0:	10800044 	addi	r2,r2,1
 10021d4:	d8800715 	stw	r2,28(sp)
 10021d8:	18bffc1e 	bne	r3,r2,10021cc <___vfprintf_internal_r+0x1cc0>
 10021dc:	003f8406 	br	1001ff0 <___vfprintf_internal_r+0x1ae4>
 10021e0:	d8814117 	ldw	r2,1284(sp)
 10021e4:	10c00007 	ldb	r3,0(r2)
 10021e8:	00800c04 	movi	r2,48
 10021ec:	18805b26 	beq	r3,r2,100235c <___vfprintf_internal_r+0x1e50>
 10021f0:	d9000517 	ldw	r4,20(sp)
 10021f4:	9125883a 	add	r18,r18,r4
 10021f8:	003f7506 	br	1001fd0 <___vfprintf_internal_r+0x1ac4>
 10021fc:	d9014c17 	ldw	r4,1328(sp)
 1002200:	2080004c 	andi	r2,r4,1
 1002204:	1005003a 	cmpeq	r2,r2,zero
 1002208:	103f6a26 	beq	r2,zero,1001fb4 <___vfprintf_internal_r+0x1aa8>
 100220c:	d8800717 	ldw	r2,28(sp)
 1002210:	003f7706 	br	1001ff0 <___vfprintf_internal_r+0x1ae4>
 1002214:	d9c14515 	stw	r7,1300(sp)
 1002218:	38004d16 	blt	r7,zero,1002350 <___vfprintf_internal_r+0x1e44>
 100221c:	dc814715 	stw	r18,1308(sp)
 1002220:	d8014615 	stw	zero,1304(sp)
 1002224:	003b5b06 	br	1000f94 <___vfprintf_internal_r+0xa88>
 1002228:	d9014f17 	ldw	r4,1340(sp)
 100222c:	d8800504 	addi	r2,sp,20
 1002230:	d8800115 	stw	r2,4(sp)
 1002234:	d8c00604 	addi	r3,sp,24
 1002238:	d8800704 	addi	r2,sp,28
 100223c:	800b883a 	mov	r5,r16
 1002240:	880d883a 	mov	r6,r17
 1002244:	01c000c4 	movi	r7,3
 1002248:	d8c00215 	stw	r3,8(sp)
 100224c:	d8800315 	stw	r2,12(sp)
 1002250:	dcc00015 	stw	r19,0(sp)
 1002254:	9829883a 	mov	r20,r19
 1002258:	10027740 	call	1002774 <_dtoa_r>
 100225c:	d8814115 	stw	r2,1284(sp)
 1002260:	003f5106 	br	1001fa8 <___vfprintf_internal_r+0x1a9c>
 1002264:	d8c14217 	ldw	r3,1288(sp)
 1002268:	d9014317 	ldw	r4,1292(sp)
 100226c:	07000b44 	movi	fp,45
 1002270:	1821883a 	mov	r16,r3
 1002274:	2460003c 	xorhi	r17,r4,32768
 1002278:	003f3106 	br	1001f40 <___vfprintf_internal_r+0x1a34>
 100227c:	9d000044 	addi	r20,r19,1
 1002280:	003f3906 	br	1001f68 <___vfprintf_internal_r+0x1a5c>
 1002284:	983f251e 	bne	r19,zero,1001f1c <___vfprintf_internal_r+0x1a10>
 1002288:	04c00044 	movi	r19,1
 100228c:	003f2306 	br	1001f1c <___vfprintf_internal_r+0x1a10>
 1002290:	04c00184 	movi	r19,6
 1002294:	003f2106 	br	1001f1c <___vfprintf_internal_r+0x1a10>
 1002298:	d8014515 	stw	zero,1300(sp)
 100229c:	003eee06 	br	1001e58 <___vfprintf_internal_r+0x194c>
 10022a0:	200f883a 	mov	r7,r4
 10022a4:	0100370e 	bge	zero,r4,1002384 <___vfprintf_internal_r+0x1e78>
 10022a8:	9800031e 	bne	r19,zero,10022b8 <___vfprintf_internal_r+0x1dac>
 10022ac:	d9814c17 	ldw	r6,1328(sp)
 10022b0:	3080004c 	andi	r2,r6,1
 10022b4:	103fb726 	beq	r2,zero,1002194 <___vfprintf_internal_r+0x1c88>
 10022b8:	20800044 	addi	r2,r4,1
 10022bc:	98a7883a 	add	r19,r19,r2
 10022c0:	dcc14515 	stw	r19,1300(sp)
 10022c4:	980f883a 	mov	r7,r19
 10022c8:	983f800e 	bge	r19,zero,10020cc <___vfprintf_internal_r+0x1bc0>
 10022cc:	003fb306 	br	100219c <___vfprintf_internal_r+0x1c90>
 10022d0:	d9814d17 	ldw	r6,1332(sp)
 10022d4:	31bfff84 	addi	r6,r6,-2
 10022d8:	d9814d15 	stw	r6,1332(sp)
 10022dc:	003f4c06 	br	1002010 <___vfprintf_internal_r+0x1b04>
 10022e0:	0100180e 	bge	zero,r4,1002344 <___vfprintf_internal_r+0x1e38>
 10022e4:	00800044 	movi	r2,1
 10022e8:	1485883a 	add	r2,r2,r18
 10022ec:	d8814515 	stw	r2,1300(sp)
 10022f0:	100f883a 	mov	r7,r2
 10022f4:	103f750e 	bge	r2,zero,10020cc <___vfprintf_internal_r+0x1bc0>
 10022f8:	003fa806 	br	100219c <___vfprintf_internal_r+0x1c90>
 10022fc:	80c00c04 	addi	r3,r16,48
 1002300:	00800c04 	movi	r2,48
 1002304:	d8c008c5 	stb	r3,35(sp)
 1002308:	d9800804 	addi	r6,sp,32
 100230c:	d8c00904 	addi	r3,sp,36
 1002310:	d8800885 	stb	r2,34(sp)
 1002314:	003f6506 	br	10020ac <___vfprintf_internal_r+0x1ba0>
 1002318:	d9014c17 	ldw	r4,1328(sp)
 100231c:	2084703a 	and	r2,r4,r2
 1002320:	103f9c26 	beq	r2,zero,1002194 <___vfprintf_internal_r+0x1c88>
 1002324:	003f6606 	br	10020c0 <___vfprintf_internal_r+0x1bb4>
 1002328:	d9800804 	addi	r6,sp,32
 100232c:	d8c00884 	addi	r3,sp,34
 1002330:	003f5e06 	br	10020ac <___vfprintf_internal_r+0x1ba0>
 1002334:	00800b44 	movi	r2,45
 1002338:	0121c83a 	sub	r16,zero,r4
 100233c:	d8800845 	stb	r2,33(sp)
 1002340:	003f3d06 	br	1002038 <___vfprintf_internal_r+0x1b2c>
 1002344:	00800084 	movi	r2,2
 1002348:	1105c83a 	sub	r2,r2,r4
 100234c:	003fe606 	br	10022e8 <___vfprintf_internal_r+0x1ddc>
 1002350:	d8014515 	stw	zero,1300(sp)
 1002354:	dc814715 	stw	r18,1308(sp)
 1002358:	003fb106 	br	1002220 <___vfprintf_internal_r+0x1d14>
 100235c:	000d883a 	mov	r6,zero
 1002360:	000f883a 	mov	r7,zero
 1002364:	8009883a 	mov	r4,r16
 1002368:	880b883a 	mov	r5,r17
 100236c:	1008fc00 	call	1008fc0 <__nedf2>
 1002370:	103f9f26 	beq	r2,zero,10021f0 <___vfprintf_internal_r+0x1ce4>
 1002374:	00800044 	movi	r2,1
 1002378:	1509c83a 	sub	r4,r2,r20
 100237c:	d9000515 	stw	r4,20(sp)
 1002380:	003f9b06 	br	10021f0 <___vfprintf_internal_r+0x1ce4>
 1002384:	98000d1e 	bne	r19,zero,10023bc <___vfprintf_internal_r+0x1eb0>
 1002388:	d8c14c17 	ldw	r3,1328(sp)
 100238c:	1880004c 	andi	r2,r3,1
 1002390:	10000a1e 	bne	r2,zero,10023bc <___vfprintf_internal_r+0x1eb0>
 1002394:	01000044 	movi	r4,1
 1002398:	200f883a 	mov	r7,r4
 100239c:	d9014515 	stw	r4,1300(sp)
 10023a0:	003f4a06 	br	10020cc <___vfprintf_internal_r+0x1bc0>
 10023a4:	3cc00017 	ldw	r19,0(r7)
 10023a8:	39c00104 	addi	r7,r7,4
 10023ac:	983d0e0e 	bge	r19,zero,10017e8 <___vfprintf_internal_r+0x12dc>
 10023b0:	b8c00007 	ldb	r3,0(r23)
 10023b4:	04ffffc4 	movi	r19,-1
 10023b8:	0038d306 	br	1000708 <___vfprintf_internal_r+0x1fc>
 10023bc:	9cc00084 	addi	r19,r19,2
 10023c0:	dcc14515 	stw	r19,1300(sp)
 10023c4:	980f883a 	mov	r7,r19
 10023c8:	983f400e 	bge	r19,zero,10020cc <___vfprintf_internal_r+0x1bc0>
 10023cc:	003f7306 	br	100219c <___vfprintf_internal_r+0x1c90>

010023d0 <__vfprintf_internal>:
 10023d0:	00804074 	movhi	r2,257
 10023d4:	10922404 	addi	r2,r2,18576
 10023d8:	2013883a 	mov	r9,r4
 10023dc:	11000017 	ldw	r4,0(r2)
 10023e0:	2805883a 	mov	r2,r5
 10023e4:	300f883a 	mov	r7,r6
 10023e8:	480b883a 	mov	r5,r9
 10023ec:	100d883a 	mov	r6,r2
 10023f0:	100050c1 	jmpi	100050c <___vfprintf_internal_r>

010023f4 <__swsetup_r>:
 10023f4:	00804074 	movhi	r2,257
 10023f8:	10922404 	addi	r2,r2,18576
 10023fc:	10c00017 	ldw	r3,0(r2)
 1002400:	defffd04 	addi	sp,sp,-12
 1002404:	dc400115 	stw	r17,4(sp)
 1002408:	dc000015 	stw	r16,0(sp)
 100240c:	dfc00215 	stw	ra,8(sp)
 1002410:	2023883a 	mov	r17,r4
 1002414:	2821883a 	mov	r16,r5
 1002418:	18000226 	beq	r3,zero,1002424 <__swsetup_r+0x30>
 100241c:	18800e17 	ldw	r2,56(r3)
 1002420:	10001f26 	beq	r2,zero,10024a0 <__swsetup_r+0xac>
 1002424:	8100030b 	ldhu	r4,12(r16)
 1002428:	2080020c 	andi	r2,r4,8
 100242c:	10002826 	beq	r2,zero,10024d0 <__swsetup_r+0xdc>
 1002430:	81400417 	ldw	r5,16(r16)
 1002434:	28001d26 	beq	r5,zero,10024ac <__swsetup_r+0xb8>
 1002438:	2080004c 	andi	r2,r4,1
 100243c:	1005003a 	cmpeq	r2,r2,zero
 1002440:	10000b26 	beq	r2,zero,1002470 <__swsetup_r+0x7c>
 1002444:	2080008c 	andi	r2,r4,2
 1002448:	10001226 	beq	r2,zero,1002494 <__swsetup_r+0xa0>
 100244c:	0005883a 	mov	r2,zero
 1002450:	80800215 	stw	r2,8(r16)
 1002454:	28000b26 	beq	r5,zero,1002484 <__swsetup_r+0x90>
 1002458:	0005883a 	mov	r2,zero
 100245c:	dfc00217 	ldw	ra,8(sp)
 1002460:	dc400117 	ldw	r17,4(sp)
 1002464:	dc000017 	ldw	r16,0(sp)
 1002468:	dec00304 	addi	sp,sp,12
 100246c:	f800283a 	ret
 1002470:	80800517 	ldw	r2,20(r16)
 1002474:	80000215 	stw	zero,8(r16)
 1002478:	0085c83a 	sub	r2,zero,r2
 100247c:	80800615 	stw	r2,24(r16)
 1002480:	283ff51e 	bne	r5,zero,1002458 <__swsetup_r+0x64>
 1002484:	2080200c 	andi	r2,r4,128
 1002488:	103ff326 	beq	r2,zero,1002458 <__swsetup_r+0x64>
 100248c:	00bfffc4 	movi	r2,-1
 1002490:	003ff206 	br	100245c <__swsetup_r+0x68>
 1002494:	80800517 	ldw	r2,20(r16)
 1002498:	80800215 	stw	r2,8(r16)
 100249c:	003fed06 	br	1002454 <__swsetup_r+0x60>
 10024a0:	1809883a 	mov	r4,r3
 10024a4:	1003fc00 	call	1003fc0 <__sinit>
 10024a8:	003fde06 	br	1002424 <__swsetup_r+0x30>
 10024ac:	20c0a00c 	andi	r3,r4,640
 10024b0:	00808004 	movi	r2,512
 10024b4:	18bfe026 	beq	r3,r2,1002438 <__swsetup_r+0x44>
 10024b8:	8809883a 	mov	r4,r17
 10024bc:	800b883a 	mov	r5,r16
 10024c0:	1004d6c0 	call	1004d6c <__smakebuf_r>
 10024c4:	8100030b 	ldhu	r4,12(r16)
 10024c8:	81400417 	ldw	r5,16(r16)
 10024cc:	003fda06 	br	1002438 <__swsetup_r+0x44>
 10024d0:	2080040c 	andi	r2,r4,16
 10024d4:	103fed26 	beq	r2,zero,100248c <__swsetup_r+0x98>
 10024d8:	2080010c 	andi	r2,r4,4
 10024dc:	10001226 	beq	r2,zero,1002528 <__swsetup_r+0x134>
 10024e0:	81400c17 	ldw	r5,48(r16)
 10024e4:	28000526 	beq	r5,zero,10024fc <__swsetup_r+0x108>
 10024e8:	80801004 	addi	r2,r16,64
 10024ec:	28800226 	beq	r5,r2,10024f8 <__swsetup_r+0x104>
 10024f0:	8809883a 	mov	r4,r17
 10024f4:	10043780 	call	1004378 <_free_r>
 10024f8:	80000c15 	stw	zero,48(r16)
 10024fc:	8080030b 	ldhu	r2,12(r16)
 1002500:	81400417 	ldw	r5,16(r16)
 1002504:	80000115 	stw	zero,4(r16)
 1002508:	10bff6cc 	andi	r2,r2,65499
 100250c:	8080030d 	sth	r2,12(r16)
 1002510:	81400015 	stw	r5,0(r16)
 1002514:	8080030b 	ldhu	r2,12(r16)
 1002518:	10800214 	ori	r2,r2,8
 100251c:	113fffcc 	andi	r4,r2,65535
 1002520:	8080030d 	sth	r2,12(r16)
 1002524:	003fc306 	br	1002434 <__swsetup_r+0x40>
 1002528:	81400417 	ldw	r5,16(r16)
 100252c:	003ff906 	br	1002514 <__swsetup_r+0x120>

01002530 <quorem>:
 1002530:	28c00417 	ldw	r3,16(r5)
 1002534:	20800417 	ldw	r2,16(r4)
 1002538:	defff104 	addi	sp,sp,-60
 100253c:	dfc00e15 	stw	ra,56(sp)
 1002540:	df000d15 	stw	fp,52(sp)
 1002544:	ddc00c15 	stw	r23,48(sp)
 1002548:	dd800b15 	stw	r22,44(sp)
 100254c:	dd400a15 	stw	r21,40(sp)
 1002550:	dd000915 	stw	r20,36(sp)
 1002554:	dcc00815 	stw	r19,32(sp)
 1002558:	dc800715 	stw	r18,28(sp)
 100255c:	dc400615 	stw	r17,24(sp)
 1002560:	dc000515 	stw	r16,20(sp)
 1002564:	d9000315 	stw	r4,12(sp)
 1002568:	d9400415 	stw	r5,16(sp)
 100256c:	10c07f16 	blt	r2,r3,100276c <quorem+0x23c>
 1002570:	1d3fffc4 	addi	r20,r3,-1
 1002574:	d8c00417 	ldw	r3,16(sp)
 1002578:	d9000317 	ldw	r4,12(sp)
 100257c:	a505883a 	add	r2,r20,r20
 1002580:	1085883a 	add	r2,r2,r2
 1002584:	1cc00504 	addi	r19,r3,20
 1002588:	25c00504 	addi	r23,r4,20
 100258c:	98ad883a 	add	r22,r19,r2
 1002590:	15c7883a 	add	r3,r2,r23
 1002594:	b1400017 	ldw	r5,0(r22)
 1002598:	19000017 	ldw	r4,0(r3)
 100259c:	d8c00015 	stw	r3,0(sp)
 10025a0:	29400044 	addi	r5,r5,1
 10025a4:	d9000215 	stw	r4,8(sp)
 10025a8:	10096800 	call	1009680 <__udivsi3>
 10025ac:	1039883a 	mov	fp,r2
 10025b0:	10003d1e 	bne	r2,zero,10026a8 <quorem+0x178>
 10025b4:	d9400417 	ldw	r5,16(sp)
 10025b8:	d9000317 	ldw	r4,12(sp)
 10025bc:	1005a980 	call	1005a98 <__mcmp>
 10025c0:	10002c16 	blt	r2,zero,1002674 <quorem+0x144>
 10025c4:	e7000044 	addi	fp,fp,1
 10025c8:	b80f883a 	mov	r7,r23
 10025cc:	0011883a 	mov	r8,zero
 10025d0:	0009883a 	mov	r4,zero
 10025d4:	99400017 	ldw	r5,0(r19)
 10025d8:	38c00017 	ldw	r3,0(r7)
 10025dc:	9cc00104 	addi	r19,r19,4
 10025e0:	28bfffcc 	andi	r2,r5,65535
 10025e4:	2085883a 	add	r2,r4,r2
 10025e8:	11bfffcc 	andi	r6,r2,65535
 10025ec:	193fffcc 	andi	r4,r3,65535
 10025f0:	1004d43a 	srli	r2,r2,16
 10025f4:	280ad43a 	srli	r5,r5,16
 10025f8:	2189c83a 	sub	r4,r4,r6
 10025fc:	2209883a 	add	r4,r4,r8
 1002600:	1806d43a 	srli	r3,r3,16
 1002604:	288b883a 	add	r5,r5,r2
 1002608:	200dd43a 	srai	r6,r4,16
 100260c:	28bfffcc 	andi	r2,r5,65535
 1002610:	1887c83a 	sub	r3,r3,r2
 1002614:	1987883a 	add	r3,r3,r6
 1002618:	3900000d 	sth	r4,0(r7)
 100261c:	38c0008d 	sth	r3,2(r7)
 1002620:	2808d43a 	srli	r4,r5,16
 1002624:	39c00104 	addi	r7,r7,4
 1002628:	1811d43a 	srai	r8,r3,16
 100262c:	b4ffe92e 	bgeu	r22,r19,10025d4 <quorem+0xa4>
 1002630:	a505883a 	add	r2,r20,r20
 1002634:	1085883a 	add	r2,r2,r2
 1002638:	b885883a 	add	r2,r23,r2
 100263c:	10c00017 	ldw	r3,0(r2)
 1002640:	18000c1e 	bne	r3,zero,1002674 <quorem+0x144>
 1002644:	113fff04 	addi	r4,r2,-4
 1002648:	b900082e 	bgeu	r23,r4,100266c <quorem+0x13c>
 100264c:	10bfff17 	ldw	r2,-4(r2)
 1002650:	10000326 	beq	r2,zero,1002660 <quorem+0x130>
 1002654:	00000506 	br	100266c <quorem+0x13c>
 1002658:	20800017 	ldw	r2,0(r4)
 100265c:	1000031e 	bne	r2,zero,100266c <quorem+0x13c>
 1002660:	213fff04 	addi	r4,r4,-4
 1002664:	a53fffc4 	addi	r20,r20,-1
 1002668:	b93ffb36 	bltu	r23,r4,1002658 <quorem+0x128>
 100266c:	d9000317 	ldw	r4,12(sp)
 1002670:	25000415 	stw	r20,16(r4)
 1002674:	e005883a 	mov	r2,fp
 1002678:	dfc00e17 	ldw	ra,56(sp)
 100267c:	df000d17 	ldw	fp,52(sp)
 1002680:	ddc00c17 	ldw	r23,48(sp)
 1002684:	dd800b17 	ldw	r22,44(sp)
 1002688:	dd400a17 	ldw	r21,40(sp)
 100268c:	dd000917 	ldw	r20,36(sp)
 1002690:	dcc00817 	ldw	r19,32(sp)
 1002694:	dc800717 	ldw	r18,28(sp)
 1002698:	dc400617 	ldw	r17,24(sp)
 100269c:	dc000517 	ldw	r16,20(sp)
 10026a0:	dec00f04 	addi	sp,sp,60
 10026a4:	f800283a 	ret
 10026a8:	b823883a 	mov	r17,r23
 10026ac:	9825883a 	mov	r18,r19
 10026b0:	d8000115 	stw	zero,4(sp)
 10026b4:	002b883a 	mov	r21,zero
 10026b8:	94000017 	ldw	r16,0(r18)
 10026bc:	e009883a 	mov	r4,fp
 10026c0:	94800104 	addi	r18,r18,4
 10026c4:	817fffcc 	andi	r5,r16,65535
 10026c8:	10096900 	call	1009690 <__mulsi3>
 10026cc:	800ad43a 	srli	r5,r16,16
 10026d0:	e009883a 	mov	r4,fp
 10026d4:	a8a1883a 	add	r16,r21,r2
 10026d8:	10096900 	call	1009690 <__mulsi3>
 10026dc:	89000017 	ldw	r4,0(r17)
 10026e0:	80ffffcc 	andi	r3,r16,65535
 10026e4:	8020d43a 	srli	r16,r16,16
 10026e8:	217fffcc 	andi	r5,r4,65535
 10026ec:	28cbc83a 	sub	r5,r5,r3
 10026f0:	d8c00117 	ldw	r3,4(sp)
 10026f4:	2008d43a 	srli	r4,r4,16
 10026f8:	1405883a 	add	r2,r2,r16
 10026fc:	28cb883a 	add	r5,r5,r3
 1002700:	280dd43a 	srai	r6,r5,16
 1002704:	10ffffcc 	andi	r3,r2,65535
 1002708:	20c9c83a 	sub	r4,r4,r3
 100270c:	2189883a 	add	r4,r4,r6
 1002710:	8900008d 	sth	r4,2(r17)
 1002714:	2009d43a 	srai	r4,r4,16
 1002718:	8940000d 	sth	r5,0(r17)
 100271c:	102ad43a 	srli	r21,r2,16
 1002720:	8c400104 	addi	r17,r17,4
 1002724:	d9000115 	stw	r4,4(sp)
 1002728:	b4bfe32e 	bgeu	r22,r18,10026b8 <quorem+0x188>
 100272c:	d9000217 	ldw	r4,8(sp)
 1002730:	203fa01e 	bne	r4,zero,10025b4 <quorem+0x84>
 1002734:	d8800017 	ldw	r2,0(sp)
 1002738:	10ffff04 	addi	r3,r2,-4
 100273c:	b8c0082e 	bgeu	r23,r3,1002760 <quorem+0x230>
 1002740:	10bfff17 	ldw	r2,-4(r2)
 1002744:	10000326 	beq	r2,zero,1002754 <quorem+0x224>
 1002748:	00000506 	br	1002760 <quorem+0x230>
 100274c:	18800017 	ldw	r2,0(r3)
 1002750:	1000031e 	bne	r2,zero,1002760 <quorem+0x230>
 1002754:	18ffff04 	addi	r3,r3,-4
 1002758:	a53fffc4 	addi	r20,r20,-1
 100275c:	b8fffb36 	bltu	r23,r3,100274c <quorem+0x21c>
 1002760:	d8c00317 	ldw	r3,12(sp)
 1002764:	1d000415 	stw	r20,16(r3)
 1002768:	003f9206 	br	10025b4 <quorem+0x84>
 100276c:	0005883a 	mov	r2,zero
 1002770:	003fc106 	br	1002678 <quorem+0x148>

01002774 <_dtoa_r>:
 1002774:	22001017 	ldw	r8,64(r4)
 1002778:	deffda04 	addi	sp,sp,-152
 100277c:	dd402115 	stw	r21,132(sp)
 1002780:	dd002015 	stw	r20,128(sp)
 1002784:	dc801e15 	stw	r18,120(sp)
 1002788:	dc401d15 	stw	r17,116(sp)
 100278c:	dfc02515 	stw	ra,148(sp)
 1002790:	df002415 	stw	fp,144(sp)
 1002794:	ddc02315 	stw	r23,140(sp)
 1002798:	dd802215 	stw	r22,136(sp)
 100279c:	dcc01f15 	stw	r19,124(sp)
 10027a0:	dc001c15 	stw	r16,112(sp)
 10027a4:	d9001615 	stw	r4,88(sp)
 10027a8:	3023883a 	mov	r17,r6
 10027ac:	2829883a 	mov	r20,r5
 10027b0:	d9c01715 	stw	r7,92(sp)
 10027b4:	dc802817 	ldw	r18,160(sp)
 10027b8:	302b883a 	mov	r21,r6
 10027bc:	40000a26 	beq	r8,zero,10027e8 <_dtoa_r+0x74>
 10027c0:	20801117 	ldw	r2,68(r4)
 10027c4:	400b883a 	mov	r5,r8
 10027c8:	40800115 	stw	r2,4(r8)
 10027cc:	20c01117 	ldw	r3,68(r4)
 10027d0:	00800044 	movi	r2,1
 10027d4:	10c4983a 	sll	r2,r2,r3
 10027d8:	40800215 	stw	r2,8(r8)
 10027dc:	100593c0 	call	100593c <_Bfree>
 10027e0:	d8c01617 	ldw	r3,88(sp)
 10027e4:	18001015 	stw	zero,64(r3)
 10027e8:	8800a316 	blt	r17,zero,1002a78 <_dtoa_r+0x304>
 10027ec:	90000015 	stw	zero,0(r18)
 10027f0:	a8dffc2c 	andhi	r3,r21,32752
 10027f4:	009ffc34 	movhi	r2,32752
 10027f8:	18809126 	beq	r3,r2,1002a40 <_dtoa_r+0x2cc>
 10027fc:	000d883a 	mov	r6,zero
 1002800:	000f883a 	mov	r7,zero
 1002804:	a009883a 	mov	r4,r20
 1002808:	a80b883a 	mov	r5,r21
 100280c:	dd001215 	stw	r20,72(sp)
 1002810:	dd401315 	stw	r21,76(sp)
 1002814:	1008fc00 	call	1008fc0 <__nedf2>
 1002818:	1000171e 	bne	r2,zero,1002878 <_dtoa_r+0x104>
 100281c:	d9802717 	ldw	r6,156(sp)
 1002820:	00800044 	movi	r2,1
 1002824:	30800015 	stw	r2,0(r6)
 1002828:	d8802917 	ldw	r2,164(sp)
 100282c:	10029b26 	beq	r2,zero,100329c <_dtoa_r+0xb28>
 1002830:	d9002917 	ldw	r4,164(sp)
 1002834:	00804074 	movhi	r2,257
 1002838:	108a9444 	addi	r2,r2,10833
 100283c:	10ffffc4 	addi	r3,r2,-1
 1002840:	20800015 	stw	r2,0(r4)
 1002844:	1805883a 	mov	r2,r3
 1002848:	dfc02517 	ldw	ra,148(sp)
 100284c:	df002417 	ldw	fp,144(sp)
 1002850:	ddc02317 	ldw	r23,140(sp)
 1002854:	dd802217 	ldw	r22,136(sp)
 1002858:	dd402117 	ldw	r21,132(sp)
 100285c:	dd002017 	ldw	r20,128(sp)
 1002860:	dcc01f17 	ldw	r19,124(sp)
 1002864:	dc801e17 	ldw	r18,120(sp)
 1002868:	dc401d17 	ldw	r17,116(sp)
 100286c:	dc001c17 	ldw	r16,112(sp)
 1002870:	dec02604 	addi	sp,sp,152
 1002874:	f800283a 	ret
 1002878:	d9001617 	ldw	r4,88(sp)
 100287c:	d9401217 	ldw	r5,72(sp)
 1002880:	d8800104 	addi	r2,sp,4
 1002884:	a80d883a 	mov	r6,r21
 1002888:	d9c00204 	addi	r7,sp,8
 100288c:	d8800015 	stw	r2,0(sp)
 1002890:	1005f780 	call	1005f78 <__d2b>
 1002894:	d8800715 	stw	r2,28(sp)
 1002898:	a804d53a 	srli	r2,r21,20
 100289c:	1101ffcc 	andi	r4,r2,2047
 10028a0:	20008626 	beq	r4,zero,1002abc <_dtoa_r+0x348>
 10028a4:	d8c01217 	ldw	r3,72(sp)
 10028a8:	00800434 	movhi	r2,16
 10028ac:	10bfffc4 	addi	r2,r2,-1
 10028b0:	ddc00117 	ldw	r23,4(sp)
 10028b4:	a884703a 	and	r2,r21,r2
 10028b8:	1811883a 	mov	r8,r3
 10028bc:	124ffc34 	orhi	r9,r2,16368
 10028c0:	25bf0044 	addi	r22,r4,-1023
 10028c4:	d8000815 	stw	zero,32(sp)
 10028c8:	0005883a 	mov	r2,zero
 10028cc:	00cffe34 	movhi	r3,16376
 10028d0:	480b883a 	mov	r5,r9
 10028d4:	4009883a 	mov	r4,r8
 10028d8:	180f883a 	mov	r7,r3
 10028dc:	100d883a 	mov	r6,r2
 10028e0:	10088280 	call	1008828 <__subdf3>
 10028e4:	0218dbf4 	movhi	r8,25455
 10028e8:	4210d844 	addi	r8,r8,17249
 10028ec:	024ff4f4 	movhi	r9,16339
 10028f0:	4a61e9c4 	addi	r9,r9,-30809
 10028f4:	480f883a 	mov	r7,r9
 10028f8:	400d883a 	mov	r6,r8
 10028fc:	180b883a 	mov	r5,r3
 1002900:	1009883a 	mov	r4,r2
 1002904:	100891c0 	call	100891c <__muldf3>
 1002908:	0222d874 	movhi	r8,35681
 100290c:	42322cc4 	addi	r8,r8,-14157
 1002910:	024ff1f4 	movhi	r9,16327
 1002914:	4a628a04 	addi	r9,r9,-30168
 1002918:	480f883a 	mov	r7,r9
 100291c:	400d883a 	mov	r6,r8
 1002920:	180b883a 	mov	r5,r3
 1002924:	1009883a 	mov	r4,r2
 1002928:	10088a80 	call	10088a8 <__adddf3>
 100292c:	b009883a 	mov	r4,r22
 1002930:	1021883a 	mov	r16,r2
 1002934:	1823883a 	mov	r17,r3
 1002938:	10091e00 	call	10091e0 <__floatsidf>
 100293c:	021427f4 	movhi	r8,20639
 1002940:	421e7ec4 	addi	r8,r8,31227
 1002944:	024ff4f4 	movhi	r9,16339
 1002948:	4a5104c4 	addi	r9,r9,17427
 100294c:	480f883a 	mov	r7,r9
 1002950:	400d883a 	mov	r6,r8
 1002954:	180b883a 	mov	r5,r3
 1002958:	1009883a 	mov	r4,r2
 100295c:	100891c0 	call	100891c <__muldf3>
 1002960:	180f883a 	mov	r7,r3
 1002964:	880b883a 	mov	r5,r17
 1002968:	100d883a 	mov	r6,r2
 100296c:	8009883a 	mov	r4,r16
 1002970:	10088a80 	call	10088a8 <__adddf3>
 1002974:	1009883a 	mov	r4,r2
 1002978:	180b883a 	mov	r5,r3
 100297c:	1021883a 	mov	r16,r2
 1002980:	1823883a 	mov	r17,r3
 1002984:	10092d80 	call	10092d8 <__fixdfsi>
 1002988:	000d883a 	mov	r6,zero
 100298c:	000f883a 	mov	r7,zero
 1002990:	8009883a 	mov	r4,r16
 1002994:	880b883a 	mov	r5,r17
 1002998:	d8800d15 	stw	r2,52(sp)
 100299c:	10091580 	call	1009158 <__ltdf2>
 10029a0:	10031716 	blt	r2,zero,1003600 <_dtoa_r+0xe8c>
 10029a4:	d8c00d17 	ldw	r3,52(sp)
 10029a8:	00800584 	movi	r2,22
 10029ac:	10c1482e 	bgeu	r2,r3,1002ed0 <_dtoa_r+0x75c>
 10029b0:	01000044 	movi	r4,1
 10029b4:	d9000c15 	stw	r4,48(sp)
 10029b8:	bd85c83a 	sub	r2,r23,r22
 10029bc:	11bfffc4 	addi	r6,r2,-1
 10029c0:	30030b16 	blt	r6,zero,10035f0 <_dtoa_r+0xe7c>
 10029c4:	d9800a15 	stw	r6,40(sp)
 10029c8:	d8001115 	stw	zero,68(sp)
 10029cc:	d8c00d17 	ldw	r3,52(sp)
 10029d0:	1802ff16 	blt	r3,zero,10035d0 <_dtoa_r+0xe5c>
 10029d4:	d9000a17 	ldw	r4,40(sp)
 10029d8:	d8c00915 	stw	r3,36(sp)
 10029dc:	d8001015 	stw	zero,64(sp)
 10029e0:	20c9883a 	add	r4,r4,r3
 10029e4:	d9000a15 	stw	r4,40(sp)
 10029e8:	d9001717 	ldw	r4,92(sp)
 10029ec:	00800244 	movi	r2,9
 10029f0:	11004636 	bltu	r2,r4,1002b0c <_dtoa_r+0x398>
 10029f4:	00800144 	movi	r2,5
 10029f8:	11020416 	blt	r2,r4,100320c <_dtoa_r+0xa98>
 10029fc:	04400044 	movi	r17,1
 1002a00:	d8c01717 	ldw	r3,92(sp)
 1002a04:	00800144 	movi	r2,5
 1002a08:	10c1ed36 	bltu	r2,r3,10031c0 <_dtoa_r+0xa4c>
 1002a0c:	18c5883a 	add	r2,r3,r3
 1002a10:	1085883a 	add	r2,r2,r2
 1002a14:	00c04034 	movhi	r3,256
 1002a18:	18ca8a04 	addi	r3,r3,10792
 1002a1c:	10c5883a 	add	r2,r2,r3
 1002a20:	11000017 	ldw	r4,0(r2)
 1002a24:	2000683a 	jmp	r4
 1002a28:	01002b14 	movui	r4,172
 1002a2c:	01002b14 	movui	r4,172
 1002a30:	01003514 	movui	r4,212
 1002a34:	010034ec 	andhi	r4,zero,211
 1002a38:	01003530 	cmpltui	r4,zero,212
 1002a3c:	0100353c 	xorhi	r4,zero,212
 1002a40:	d9002717 	ldw	r4,156(sp)
 1002a44:	0089c3c4 	movi	r2,9999
 1002a48:	20800015 	stw	r2,0(r4)
 1002a4c:	a0001026 	beq	r20,zero,1002a90 <_dtoa_r+0x31c>
 1002a50:	00c04074 	movhi	r3,257
 1002a54:	18caa004 	addi	r3,r3,10880
 1002a58:	d9802917 	ldw	r6,164(sp)
 1002a5c:	303f7926 	beq	r6,zero,1002844 <_dtoa_r+0xd0>
 1002a60:	188000c7 	ldb	r2,3(r3)
 1002a64:	190000c4 	addi	r4,r3,3
 1002a68:	1000101e 	bne	r2,zero,1002aac <_dtoa_r+0x338>
 1002a6c:	d8802917 	ldw	r2,164(sp)
 1002a70:	11000015 	stw	r4,0(r2)
 1002a74:	003f7306 	br	1002844 <_dtoa_r+0xd0>
 1002a78:	00a00034 	movhi	r2,32768
 1002a7c:	10bfffc4 	addi	r2,r2,-1
 1002a80:	00c00044 	movi	r3,1
 1002a84:	88aa703a 	and	r21,r17,r2
 1002a88:	90c00015 	stw	r3,0(r18)
 1002a8c:	003f5806 	br	10027f0 <_dtoa_r+0x7c>
 1002a90:	00800434 	movhi	r2,16
 1002a94:	10bfffc4 	addi	r2,r2,-1
 1002a98:	a884703a 	and	r2,r21,r2
 1002a9c:	103fec1e 	bne	r2,zero,1002a50 <_dtoa_r+0x2dc>
 1002aa0:	00c04074 	movhi	r3,257
 1002aa4:	18ca9d04 	addi	r3,r3,10868
 1002aa8:	003feb06 	br	1002a58 <_dtoa_r+0x2e4>
 1002aac:	d8802917 	ldw	r2,164(sp)
 1002ab0:	19000204 	addi	r4,r3,8
 1002ab4:	11000015 	stw	r4,0(r2)
 1002ab8:	003f6206 	br	1002844 <_dtoa_r+0xd0>
 1002abc:	ddc00117 	ldw	r23,4(sp)
 1002ac0:	d8800217 	ldw	r2,8(sp)
 1002ac4:	01000804 	movi	r4,32
 1002ac8:	b8c10c84 	addi	r3,r23,1074
 1002acc:	18a3883a 	add	r17,r3,r2
 1002ad0:	2441b80e 	bge	r4,r17,10031b4 <_dtoa_r+0xa40>
 1002ad4:	00c01004 	movi	r3,64
 1002ad8:	1c47c83a 	sub	r3,r3,r17
 1002adc:	88bff804 	addi	r2,r17,-32
 1002ae0:	a8c6983a 	sll	r3,r21,r3
 1002ae4:	a084d83a 	srl	r2,r20,r2
 1002ae8:	1888b03a 	or	r4,r3,r2
 1002aec:	10093b00 	call	10093b0 <__floatunsidf>
 1002af0:	1011883a 	mov	r8,r2
 1002af4:	00bf8434 	movhi	r2,65040
 1002af8:	01000044 	movi	r4,1
 1002afc:	10d3883a 	add	r9,r2,r3
 1002b00:	8dbef344 	addi	r22,r17,-1075
 1002b04:	d9000815 	stw	r4,32(sp)
 1002b08:	003f6f06 	br	10028c8 <_dtoa_r+0x154>
 1002b0c:	d8001715 	stw	zero,92(sp)
 1002b10:	04400044 	movi	r17,1
 1002b14:	00bfffc4 	movi	r2,-1
 1002b18:	00c00044 	movi	r3,1
 1002b1c:	d8800e15 	stw	r2,56(sp)
 1002b20:	d8002615 	stw	zero,152(sp)
 1002b24:	d8800f15 	stw	r2,60(sp)
 1002b28:	d8c00b15 	stw	r3,44(sp)
 1002b2c:	1021883a 	mov	r16,r2
 1002b30:	d8801617 	ldw	r2,88(sp)
 1002b34:	10001115 	stw	zero,68(r2)
 1002b38:	d8801617 	ldw	r2,88(sp)
 1002b3c:	11401117 	ldw	r5,68(r2)
 1002b40:	1009883a 	mov	r4,r2
 1002b44:	1005ebc0 	call	1005ebc <_Balloc>
 1002b48:	d8c01617 	ldw	r3,88(sp)
 1002b4c:	d8800515 	stw	r2,20(sp)
 1002b50:	18801015 	stw	r2,64(r3)
 1002b54:	00800384 	movi	r2,14
 1002b58:	14006836 	bltu	r2,r16,1002cfc <_dtoa_r+0x588>
 1002b5c:	8805003a 	cmpeq	r2,r17,zero
 1002b60:	1000661e 	bne	r2,zero,1002cfc <_dtoa_r+0x588>
 1002b64:	d9000d17 	ldw	r4,52(sp)
 1002b68:	0102300e 	bge	zero,r4,100342c <_dtoa_r+0xcb8>
 1002b6c:	208003cc 	andi	r2,r4,15
 1002b70:	100490fa 	slli	r2,r2,3
 1002b74:	2025d13a 	srai	r18,r4,4
 1002b78:	00c04074 	movhi	r3,257
 1002b7c:	18cab204 	addi	r3,r3,10952
 1002b80:	10c5883a 	add	r2,r2,r3
 1002b84:	90c0040c 	andi	r3,r18,16
 1002b88:	14000017 	ldw	r16,0(r2)
 1002b8c:	14400117 	ldw	r17,4(r2)
 1002b90:	18036a1e 	bne	r3,zero,100393c <_dtoa_r+0x11c8>
 1002b94:	05800084 	movi	r22,2
 1002b98:	90001026 	beq	r18,zero,1002bdc <_dtoa_r+0x468>
 1002b9c:	04c04074 	movhi	r19,257
 1002ba0:	9ccae404 	addi	r19,r19,11152
 1002ba4:	9080004c 	andi	r2,r18,1
 1002ba8:	1005003a 	cmpeq	r2,r2,zero
 1002bac:	1000081e 	bne	r2,zero,1002bd0 <_dtoa_r+0x45c>
 1002bb0:	99800017 	ldw	r6,0(r19)
 1002bb4:	99c00117 	ldw	r7,4(r19)
 1002bb8:	880b883a 	mov	r5,r17
 1002bbc:	8009883a 	mov	r4,r16
 1002bc0:	100891c0 	call	100891c <__muldf3>
 1002bc4:	1021883a 	mov	r16,r2
 1002bc8:	b5800044 	addi	r22,r22,1
 1002bcc:	1823883a 	mov	r17,r3
 1002bd0:	9025d07a 	srai	r18,r18,1
 1002bd4:	9cc00204 	addi	r19,r19,8
 1002bd8:	903ff21e 	bne	r18,zero,1002ba4 <_dtoa_r+0x430>
 1002bdc:	a80b883a 	mov	r5,r21
 1002be0:	a009883a 	mov	r4,r20
 1002be4:	880f883a 	mov	r7,r17
 1002be8:	800d883a 	mov	r6,r16
 1002bec:	1008ce00 	call	1008ce0 <__divdf3>
 1002bf0:	1029883a 	mov	r20,r2
 1002bf4:	182b883a 	mov	r21,r3
 1002bf8:	d8c00c17 	ldw	r3,48(sp)
 1002bfc:	1805003a 	cmpeq	r2,r3,zero
 1002c00:	1000081e 	bne	r2,zero,1002c24 <_dtoa_r+0x4b0>
 1002c04:	0005883a 	mov	r2,zero
 1002c08:	00cffc34 	movhi	r3,16368
 1002c0c:	180f883a 	mov	r7,r3
 1002c10:	a009883a 	mov	r4,r20
 1002c14:	a80b883a 	mov	r5,r21
 1002c18:	100d883a 	mov	r6,r2
 1002c1c:	10091580 	call	1009158 <__ltdf2>
 1002c20:	1003fe16 	blt	r2,zero,1003c1c <_dtoa_r+0x14a8>
 1002c24:	b009883a 	mov	r4,r22
 1002c28:	10091e00 	call	10091e0 <__floatsidf>
 1002c2c:	180b883a 	mov	r5,r3
 1002c30:	1009883a 	mov	r4,r2
 1002c34:	a00d883a 	mov	r6,r20
 1002c38:	a80f883a 	mov	r7,r21
 1002c3c:	100891c0 	call	100891c <__muldf3>
 1002c40:	0011883a 	mov	r8,zero
 1002c44:	02500734 	movhi	r9,16412
 1002c48:	1009883a 	mov	r4,r2
 1002c4c:	180b883a 	mov	r5,r3
 1002c50:	480f883a 	mov	r7,r9
 1002c54:	400d883a 	mov	r6,r8
 1002c58:	10088a80 	call	10088a8 <__adddf3>
 1002c5c:	d9000f17 	ldw	r4,60(sp)
 1002c60:	102d883a 	mov	r22,r2
 1002c64:	00bf3034 	movhi	r2,64704
 1002c68:	18b9883a 	add	fp,r3,r2
 1002c6c:	e02f883a 	mov	r23,fp
 1002c70:	20028f1e 	bne	r4,zero,10036b0 <_dtoa_r+0xf3c>
 1002c74:	0005883a 	mov	r2,zero
 1002c78:	00d00534 	movhi	r3,16404
 1002c7c:	a009883a 	mov	r4,r20
 1002c80:	a80b883a 	mov	r5,r21
 1002c84:	180f883a 	mov	r7,r3
 1002c88:	100d883a 	mov	r6,r2
 1002c8c:	10088280 	call	1008828 <__subdf3>
 1002c90:	1009883a 	mov	r4,r2
 1002c94:	e00f883a 	mov	r7,fp
 1002c98:	180b883a 	mov	r5,r3
 1002c9c:	b00d883a 	mov	r6,r22
 1002ca0:	1025883a 	mov	r18,r2
 1002ca4:	1827883a 	mov	r19,r3
 1002ca8:	10090480 	call	1009048 <__gtdf2>
 1002cac:	00834f16 	blt	zero,r2,10039ec <_dtoa_r+0x1278>
 1002cb0:	e0e0003c 	xorhi	r3,fp,32768
 1002cb4:	9009883a 	mov	r4,r18
 1002cb8:	980b883a 	mov	r5,r19
 1002cbc:	180f883a 	mov	r7,r3
 1002cc0:	b00d883a 	mov	r6,r22
 1002cc4:	10091580 	call	1009158 <__ltdf2>
 1002cc8:	1000080e 	bge	r2,zero,1002cec <_dtoa_r+0x578>
 1002ccc:	0027883a 	mov	r19,zero
 1002cd0:	0025883a 	mov	r18,zero
 1002cd4:	d8802617 	ldw	r2,152(sp)
 1002cd8:	df000517 	ldw	fp,20(sp)
 1002cdc:	d8000615 	stw	zero,24(sp)
 1002ce0:	0084303a 	nor	r2,zero,r2
 1002ce4:	d8800d15 	stw	r2,52(sp)
 1002ce8:	00019b06 	br	1003358 <_dtoa_r+0xbe4>
 1002cec:	d9801217 	ldw	r6,72(sp)
 1002cf0:	d8801317 	ldw	r2,76(sp)
 1002cf4:	3029883a 	mov	r20,r6
 1002cf8:	102b883a 	mov	r21,r2
 1002cfc:	d8c00217 	ldw	r3,8(sp)
 1002d00:	18008516 	blt	r3,zero,1002f18 <_dtoa_r+0x7a4>
 1002d04:	d9000d17 	ldw	r4,52(sp)
 1002d08:	00800384 	movi	r2,14
 1002d0c:	11008216 	blt	r2,r4,1002f18 <_dtoa_r+0x7a4>
 1002d10:	200490fa 	slli	r2,r4,3
 1002d14:	d9802617 	ldw	r6,152(sp)
 1002d18:	00c04074 	movhi	r3,257
 1002d1c:	18cab204 	addi	r3,r3,10952
 1002d20:	10c5883a 	add	r2,r2,r3
 1002d24:	14800017 	ldw	r18,0(r2)
 1002d28:	14c00117 	ldw	r19,4(r2)
 1002d2c:	30031e16 	blt	r6,zero,10039a8 <_dtoa_r+0x1234>
 1002d30:	d9000517 	ldw	r4,20(sp)
 1002d34:	d8c00f17 	ldw	r3,60(sp)
 1002d38:	a823883a 	mov	r17,r21
 1002d3c:	a021883a 	mov	r16,r20
 1002d40:	192b883a 	add	r21,r3,r4
 1002d44:	2039883a 	mov	fp,r4
 1002d48:	00000f06 	br	1002d88 <_dtoa_r+0x614>
 1002d4c:	0005883a 	mov	r2,zero
 1002d50:	00d00934 	movhi	r3,16420
 1002d54:	5009883a 	mov	r4,r10
 1002d58:	580b883a 	mov	r5,r11
 1002d5c:	180f883a 	mov	r7,r3
 1002d60:	100d883a 	mov	r6,r2
 1002d64:	100891c0 	call	100891c <__muldf3>
 1002d68:	180b883a 	mov	r5,r3
 1002d6c:	000d883a 	mov	r6,zero
 1002d70:	000f883a 	mov	r7,zero
 1002d74:	1009883a 	mov	r4,r2
 1002d78:	1021883a 	mov	r16,r2
 1002d7c:	1823883a 	mov	r17,r3
 1002d80:	1008fc00 	call	1008fc0 <__nedf2>
 1002d84:	10004526 	beq	r2,zero,1002e9c <_dtoa_r+0x728>
 1002d88:	900d883a 	mov	r6,r18
 1002d8c:	980f883a 	mov	r7,r19
 1002d90:	8009883a 	mov	r4,r16
 1002d94:	880b883a 	mov	r5,r17
 1002d98:	1008ce00 	call	1008ce0 <__divdf3>
 1002d9c:	180b883a 	mov	r5,r3
 1002da0:	1009883a 	mov	r4,r2
 1002da4:	10092d80 	call	10092d8 <__fixdfsi>
 1002da8:	1009883a 	mov	r4,r2
 1002dac:	1029883a 	mov	r20,r2
 1002db0:	10091e00 	call	10091e0 <__floatsidf>
 1002db4:	180f883a 	mov	r7,r3
 1002db8:	9009883a 	mov	r4,r18
 1002dbc:	980b883a 	mov	r5,r19
 1002dc0:	100d883a 	mov	r6,r2
 1002dc4:	100891c0 	call	100891c <__muldf3>
 1002dc8:	180f883a 	mov	r7,r3
 1002dcc:	880b883a 	mov	r5,r17
 1002dd0:	8009883a 	mov	r4,r16
 1002dd4:	100d883a 	mov	r6,r2
 1002dd8:	10088280 	call	1008828 <__subdf3>
 1002ddc:	1015883a 	mov	r10,r2
 1002de0:	a0800c04 	addi	r2,r20,48
 1002de4:	e0800005 	stb	r2,0(fp)
 1002de8:	e7000044 	addi	fp,fp,1
 1002dec:	1817883a 	mov	r11,r3
 1002df0:	e57fd61e 	bne	fp,r21,1002d4c <_dtoa_r+0x5d8>
 1002df4:	500d883a 	mov	r6,r10
 1002df8:	180f883a 	mov	r7,r3
 1002dfc:	5009883a 	mov	r4,r10
 1002e00:	180b883a 	mov	r5,r3
 1002e04:	10088a80 	call	10088a8 <__adddf3>
 1002e08:	100d883a 	mov	r6,r2
 1002e0c:	9009883a 	mov	r4,r18
 1002e10:	980b883a 	mov	r5,r19
 1002e14:	180f883a 	mov	r7,r3
 1002e18:	1021883a 	mov	r16,r2
 1002e1c:	1823883a 	mov	r17,r3
 1002e20:	10091580 	call	1009158 <__ltdf2>
 1002e24:	10000816 	blt	r2,zero,1002e48 <_dtoa_r+0x6d4>
 1002e28:	980b883a 	mov	r5,r19
 1002e2c:	800d883a 	mov	r6,r16
 1002e30:	880f883a 	mov	r7,r17
 1002e34:	9009883a 	mov	r4,r18
 1002e38:	1008f380 	call	1008f38 <__eqdf2>
 1002e3c:	1000171e 	bne	r2,zero,1002e9c <_dtoa_r+0x728>
 1002e40:	a080004c 	andi	r2,r20,1
 1002e44:	10001526 	beq	r2,zero,1002e9c <_dtoa_r+0x728>
 1002e48:	d8800d17 	ldw	r2,52(sp)
 1002e4c:	d8800415 	stw	r2,16(sp)
 1002e50:	e009883a 	mov	r4,fp
 1002e54:	213fffc4 	addi	r4,r4,-1
 1002e58:	20c00007 	ldb	r3,0(r4)
 1002e5c:	00800e44 	movi	r2,57
 1002e60:	1880081e 	bne	r3,r2,1002e84 <_dtoa_r+0x710>
 1002e64:	d8800517 	ldw	r2,20(sp)
 1002e68:	113ffa1e 	bne	r2,r4,1002e54 <_dtoa_r+0x6e0>
 1002e6c:	d8c00417 	ldw	r3,16(sp)
 1002e70:	d9800517 	ldw	r6,20(sp)
 1002e74:	00800c04 	movi	r2,48
 1002e78:	18c00044 	addi	r3,r3,1
 1002e7c:	d8c00415 	stw	r3,16(sp)
 1002e80:	30800005 	stb	r2,0(r6)
 1002e84:	20800003 	ldbu	r2,0(r4)
 1002e88:	d8c00417 	ldw	r3,16(sp)
 1002e8c:	27000044 	addi	fp,r4,1
 1002e90:	10800044 	addi	r2,r2,1
 1002e94:	d8c00d15 	stw	r3,52(sp)
 1002e98:	20800005 	stb	r2,0(r4)
 1002e9c:	d9001617 	ldw	r4,88(sp)
 1002ea0:	d9400717 	ldw	r5,28(sp)
 1002ea4:	100593c0 	call	100593c <_Bfree>
 1002ea8:	e0000005 	stb	zero,0(fp)
 1002eac:	d9800d17 	ldw	r6,52(sp)
 1002eb0:	d8c02717 	ldw	r3,156(sp)
 1002eb4:	d9002917 	ldw	r4,164(sp)
 1002eb8:	30800044 	addi	r2,r6,1
 1002ebc:	18800015 	stw	r2,0(r3)
 1002ec0:	20029c26 	beq	r4,zero,1003934 <_dtoa_r+0x11c0>
 1002ec4:	d8c00517 	ldw	r3,20(sp)
 1002ec8:	27000015 	stw	fp,0(r4)
 1002ecc:	003e5d06 	br	1002844 <_dtoa_r+0xd0>
 1002ed0:	d9800d17 	ldw	r6,52(sp)
 1002ed4:	00c04074 	movhi	r3,257
 1002ed8:	18cab204 	addi	r3,r3,10952
 1002edc:	d9001217 	ldw	r4,72(sp)
 1002ee0:	300490fa 	slli	r2,r6,3
 1002ee4:	d9401317 	ldw	r5,76(sp)
 1002ee8:	10c5883a 	add	r2,r2,r3
 1002eec:	12000017 	ldw	r8,0(r2)
 1002ef0:	12400117 	ldw	r9,4(r2)
 1002ef4:	400d883a 	mov	r6,r8
 1002ef8:	480f883a 	mov	r7,r9
 1002efc:	10091580 	call	1009158 <__ltdf2>
 1002f00:	1000030e 	bge	r2,zero,1002f10 <_dtoa_r+0x79c>
 1002f04:	d8800d17 	ldw	r2,52(sp)
 1002f08:	10bfffc4 	addi	r2,r2,-1
 1002f0c:	d8800d15 	stw	r2,52(sp)
 1002f10:	d8000c15 	stw	zero,48(sp)
 1002f14:	003ea806 	br	10029b8 <_dtoa_r+0x244>
 1002f18:	d9000b17 	ldw	r4,44(sp)
 1002f1c:	202cc03a 	cmpne	r22,r4,zero
 1002f20:	b000c71e 	bne	r22,zero,1003240 <_dtoa_r+0xacc>
 1002f24:	dc001117 	ldw	r16,68(sp)
 1002f28:	dc801017 	ldw	r18,64(sp)
 1002f2c:	0027883a 	mov	r19,zero
 1002f30:	04000b0e 	bge	zero,r16,1002f60 <_dtoa_r+0x7ec>
 1002f34:	d8c00a17 	ldw	r3,40(sp)
 1002f38:	00c0090e 	bge	zero,r3,1002f60 <_dtoa_r+0x7ec>
 1002f3c:	8005883a 	mov	r2,r16
 1002f40:	1c011316 	blt	r3,r16,1003390 <_dtoa_r+0xc1c>
 1002f44:	d9000a17 	ldw	r4,40(sp)
 1002f48:	d9801117 	ldw	r6,68(sp)
 1002f4c:	80a1c83a 	sub	r16,r16,r2
 1002f50:	2089c83a 	sub	r4,r4,r2
 1002f54:	308dc83a 	sub	r6,r6,r2
 1002f58:	d9000a15 	stw	r4,40(sp)
 1002f5c:	d9801115 	stw	r6,68(sp)
 1002f60:	d8801017 	ldw	r2,64(sp)
 1002f64:	0080150e 	bge	zero,r2,1002fbc <_dtoa_r+0x848>
 1002f68:	d8c00b17 	ldw	r3,44(sp)
 1002f6c:	1805003a 	cmpeq	r2,r3,zero
 1002f70:	1001c91e 	bne	r2,zero,1003698 <_dtoa_r+0xf24>
 1002f74:	04800e0e 	bge	zero,r18,1002fb0 <_dtoa_r+0x83c>
 1002f78:	d9001617 	ldw	r4,88(sp)
 1002f7c:	980b883a 	mov	r5,r19
 1002f80:	900d883a 	mov	r6,r18
 1002f84:	10067880 	call	1006788 <__pow5mult>
 1002f88:	d9001617 	ldw	r4,88(sp)
 1002f8c:	d9800717 	ldw	r6,28(sp)
 1002f90:	100b883a 	mov	r5,r2
 1002f94:	1027883a 	mov	r19,r2
 1002f98:	10063cc0 	call	10063cc <__multiply>
 1002f9c:	d9001617 	ldw	r4,88(sp)
 1002fa0:	d9400717 	ldw	r5,28(sp)
 1002fa4:	1023883a 	mov	r17,r2
 1002fa8:	100593c0 	call	100593c <_Bfree>
 1002fac:	dc400715 	stw	r17,28(sp)
 1002fb0:	d9001017 	ldw	r4,64(sp)
 1002fb4:	248dc83a 	sub	r6,r4,r18
 1002fb8:	30010e1e 	bne	r6,zero,10033f4 <_dtoa_r+0xc80>
 1002fbc:	d9001617 	ldw	r4,88(sp)
 1002fc0:	04400044 	movi	r17,1
 1002fc4:	880b883a 	mov	r5,r17
 1002fc8:	10066200 	call	1006620 <__i2b>
 1002fcc:	d9800917 	ldw	r6,36(sp)
 1002fd0:	1025883a 	mov	r18,r2
 1002fd4:	0180040e 	bge	zero,r6,1002fe8 <_dtoa_r+0x874>
 1002fd8:	d9001617 	ldw	r4,88(sp)
 1002fdc:	100b883a 	mov	r5,r2
 1002fe0:	10067880 	call	1006788 <__pow5mult>
 1002fe4:	1025883a 	mov	r18,r2
 1002fe8:	d8801717 	ldw	r2,92(sp)
 1002fec:	8880f30e 	bge	r17,r2,10033bc <_dtoa_r+0xc48>
 1002ff0:	0023883a 	mov	r17,zero
 1002ff4:	d9800917 	ldw	r6,36(sp)
 1002ff8:	30019e1e 	bne	r6,zero,1003674 <_dtoa_r+0xf00>
 1002ffc:	00c00044 	movi	r3,1
 1003000:	d9000a17 	ldw	r4,40(sp)
 1003004:	20c5883a 	add	r2,r4,r3
 1003008:	10c007cc 	andi	r3,r2,31
 100300c:	1800841e 	bne	r3,zero,1003220 <_dtoa_r+0xaac>
 1003010:	00800704 	movi	r2,28
 1003014:	d9000a17 	ldw	r4,40(sp)
 1003018:	d9801117 	ldw	r6,68(sp)
 100301c:	80a1883a 	add	r16,r16,r2
 1003020:	2089883a 	add	r4,r4,r2
 1003024:	308d883a 	add	r6,r6,r2
 1003028:	d9000a15 	stw	r4,40(sp)
 100302c:	d9801115 	stw	r6,68(sp)
 1003030:	d8801117 	ldw	r2,68(sp)
 1003034:	0080050e 	bge	zero,r2,100304c <_dtoa_r+0x8d8>
 1003038:	d9400717 	ldw	r5,28(sp)
 100303c:	d9001617 	ldw	r4,88(sp)
 1003040:	100d883a 	mov	r6,r2
 1003044:	10062800 	call	1006280 <__lshift>
 1003048:	d8800715 	stw	r2,28(sp)
 100304c:	d8c00a17 	ldw	r3,40(sp)
 1003050:	00c0050e 	bge	zero,r3,1003068 <_dtoa_r+0x8f4>
 1003054:	d9001617 	ldw	r4,88(sp)
 1003058:	900b883a 	mov	r5,r18
 100305c:	180d883a 	mov	r6,r3
 1003060:	10062800 	call	1006280 <__lshift>
 1003064:	1025883a 	mov	r18,r2
 1003068:	d9000c17 	ldw	r4,48(sp)
 100306c:	2005003a 	cmpeq	r2,r4,zero
 1003070:	10016f26 	beq	r2,zero,1003630 <_dtoa_r+0xebc>
 1003074:	d9000f17 	ldw	r4,60(sp)
 1003078:	0102170e 	bge	zero,r4,10038d8 <_dtoa_r+0x1164>
 100307c:	d9800b17 	ldw	r6,44(sp)
 1003080:	3005003a 	cmpeq	r2,r6,zero
 1003084:	1000881e 	bne	r2,zero,10032a8 <_dtoa_r+0xb34>
 1003088:	0400050e 	bge	zero,r16,10030a0 <_dtoa_r+0x92c>
 100308c:	d9001617 	ldw	r4,88(sp)
 1003090:	980b883a 	mov	r5,r19
 1003094:	800d883a 	mov	r6,r16
 1003098:	10062800 	call	1006280 <__lshift>
 100309c:	1027883a 	mov	r19,r2
 10030a0:	8804c03a 	cmpne	r2,r17,zero
 10030a4:	1002541e 	bne	r2,zero,10039f8 <_dtoa_r+0x1284>
 10030a8:	980b883a 	mov	r5,r19
 10030ac:	dd800517 	ldw	r22,20(sp)
 10030b0:	dcc00615 	stw	r19,24(sp)
 10030b4:	a700004c 	andi	fp,r20,1
 10030b8:	2827883a 	mov	r19,r5
 10030bc:	d9000717 	ldw	r4,28(sp)
 10030c0:	900b883a 	mov	r5,r18
 10030c4:	10025300 	call	1002530 <quorem>
 10030c8:	d9000717 	ldw	r4,28(sp)
 10030cc:	d9400617 	ldw	r5,24(sp)
 10030d0:	1023883a 	mov	r17,r2
 10030d4:	8dc00c04 	addi	r23,r17,48
 10030d8:	1005a980 	call	1005a98 <__mcmp>
 10030dc:	d9001617 	ldw	r4,88(sp)
 10030e0:	900b883a 	mov	r5,r18
 10030e4:	980d883a 	mov	r6,r19
 10030e8:	1029883a 	mov	r20,r2
 10030ec:	10060f40 	call	10060f4 <__mdiff>
 10030f0:	102b883a 	mov	r21,r2
 10030f4:	10800317 	ldw	r2,12(r2)
 10030f8:	1001281e 	bne	r2,zero,100359c <_dtoa_r+0xe28>
 10030fc:	d9000717 	ldw	r4,28(sp)
 1003100:	a80b883a 	mov	r5,r21
 1003104:	1005a980 	call	1005a98 <__mcmp>
 1003108:	d9001617 	ldw	r4,88(sp)
 100310c:	1021883a 	mov	r16,r2
 1003110:	a80b883a 	mov	r5,r21
 1003114:	100593c0 	call	100593c <_Bfree>
 1003118:	8000041e 	bne	r16,zero,100312c <_dtoa_r+0x9b8>
 100311c:	d8801717 	ldw	r2,92(sp)
 1003120:	1000021e 	bne	r2,zero,100312c <_dtoa_r+0x9b8>
 1003124:	e004c03a 	cmpne	r2,fp,zero
 1003128:	10011726 	beq	r2,zero,1003588 <_dtoa_r+0xe14>
 100312c:	a0010616 	blt	r20,zero,1003548 <_dtoa_r+0xdd4>
 1003130:	a000041e 	bne	r20,zero,1003144 <_dtoa_r+0x9d0>
 1003134:	d8c01717 	ldw	r3,92(sp)
 1003138:	1800021e 	bne	r3,zero,1003144 <_dtoa_r+0x9d0>
 100313c:	e004c03a 	cmpne	r2,fp,zero
 1003140:	10010126 	beq	r2,zero,1003548 <_dtoa_r+0xdd4>
 1003144:	04023d16 	blt	zero,r16,1003a3c <_dtoa_r+0x12c8>
 1003148:	b5c00005 	stb	r23,0(r22)
 100314c:	d9800517 	ldw	r6,20(sp)
 1003150:	d9000f17 	ldw	r4,60(sp)
 1003154:	b5800044 	addi	r22,r22,1
 1003158:	3105883a 	add	r2,r6,r4
 100315c:	b0806526 	beq	r22,r2,10032f4 <_dtoa_r+0xb80>
 1003160:	d9400717 	ldw	r5,28(sp)
 1003164:	d9001617 	ldw	r4,88(sp)
 1003168:	01800284 	movi	r6,10
 100316c:	000f883a 	mov	r7,zero
 1003170:	100665c0 	call	100665c <__multadd>
 1003174:	d8800715 	stw	r2,28(sp)
 1003178:	d8800617 	ldw	r2,24(sp)
 100317c:	14c10c26 	beq	r2,r19,10035b0 <_dtoa_r+0xe3c>
 1003180:	d9400617 	ldw	r5,24(sp)
 1003184:	d9001617 	ldw	r4,88(sp)
 1003188:	01800284 	movi	r6,10
 100318c:	000f883a 	mov	r7,zero
 1003190:	100665c0 	call	100665c <__multadd>
 1003194:	d9001617 	ldw	r4,88(sp)
 1003198:	980b883a 	mov	r5,r19
 100319c:	01800284 	movi	r6,10
 10031a0:	000f883a 	mov	r7,zero
 10031a4:	d8800615 	stw	r2,24(sp)
 10031a8:	100665c0 	call	100665c <__multadd>
 10031ac:	1027883a 	mov	r19,r2
 10031b0:	003fc206 	br	10030bc <_dtoa_r+0x948>
 10031b4:	2445c83a 	sub	r2,r4,r17
 10031b8:	a088983a 	sll	r4,r20,r2
 10031bc:	003e4b06 	br	1002aec <_dtoa_r+0x378>
 10031c0:	01bfffc4 	movi	r6,-1
 10031c4:	00800044 	movi	r2,1
 10031c8:	d9800e15 	stw	r6,56(sp)
 10031cc:	d9800f15 	stw	r6,60(sp)
 10031d0:	d8800b15 	stw	r2,44(sp)
 10031d4:	d8c01617 	ldw	r3,88(sp)
 10031d8:	008005c4 	movi	r2,23
 10031dc:	18001115 	stw	zero,68(r3)
 10031e0:	1580082e 	bgeu	r2,r22,1003204 <_dtoa_r+0xa90>
 10031e4:	00c00104 	movi	r3,4
 10031e8:	0009883a 	mov	r4,zero
 10031ec:	18c7883a 	add	r3,r3,r3
 10031f0:	18800504 	addi	r2,r3,20
 10031f4:	21000044 	addi	r4,r4,1
 10031f8:	b0bffc2e 	bgeu	r22,r2,10031ec <_dtoa_r+0xa78>
 10031fc:	d9801617 	ldw	r6,88(sp)
 1003200:	31001115 	stw	r4,68(r6)
 1003204:	dc000f17 	ldw	r16,60(sp)
 1003208:	003e4b06 	br	1002b38 <_dtoa_r+0x3c4>
 100320c:	d9801717 	ldw	r6,92(sp)
 1003210:	0023883a 	mov	r17,zero
 1003214:	31bfff04 	addi	r6,r6,-4
 1003218:	d9801715 	stw	r6,92(sp)
 100321c:	003df806 	br	1002a00 <_dtoa_r+0x28c>
 1003220:	00800804 	movi	r2,32
 1003224:	10c9c83a 	sub	r4,r2,r3
 1003228:	00c00104 	movi	r3,4
 100322c:	19005a16 	blt	r3,r4,1003398 <_dtoa_r+0xc24>
 1003230:	008000c4 	movi	r2,3
 1003234:	113f7e16 	blt	r2,r4,1003030 <_dtoa_r+0x8bc>
 1003238:	20800704 	addi	r2,r4,28
 100323c:	003f7506 	br	1003014 <_dtoa_r+0x8a0>
 1003240:	d9801717 	ldw	r6,92(sp)
 1003244:	00800044 	movi	r2,1
 1003248:	1180a10e 	bge	r2,r6,10034d0 <_dtoa_r+0xd5c>
 100324c:	d9800f17 	ldw	r6,60(sp)
 1003250:	d8c01017 	ldw	r3,64(sp)
 1003254:	30bfffc4 	addi	r2,r6,-1
 1003258:	1881c616 	blt	r3,r2,1003974 <_dtoa_r+0x1200>
 100325c:	18a5c83a 	sub	r18,r3,r2
 1003260:	d8800f17 	ldw	r2,60(sp)
 1003264:	10026216 	blt	r2,zero,1003bf0 <_dtoa_r+0x147c>
 1003268:	dc001117 	ldw	r16,68(sp)
 100326c:	1007883a 	mov	r3,r2
 1003270:	d9800a17 	ldw	r6,40(sp)
 1003274:	d8801117 	ldw	r2,68(sp)
 1003278:	d9001617 	ldw	r4,88(sp)
 100327c:	30cd883a 	add	r6,r6,r3
 1003280:	10c5883a 	add	r2,r2,r3
 1003284:	01400044 	movi	r5,1
 1003288:	d9800a15 	stw	r6,40(sp)
 100328c:	d8801115 	stw	r2,68(sp)
 1003290:	10066200 	call	1006620 <__i2b>
 1003294:	1027883a 	mov	r19,r2
 1003298:	003f2506 	br	1002f30 <_dtoa_r+0x7bc>
 100329c:	00c04074 	movhi	r3,257
 10032a0:	18ca9404 	addi	r3,r3,10832
 10032a4:	003d6706 	br	1002844 <_dtoa_r+0xd0>
 10032a8:	dd800517 	ldw	r22,20(sp)
 10032ac:	04000044 	movi	r16,1
 10032b0:	00000706 	br	10032d0 <_dtoa_r+0xb5c>
 10032b4:	d9400717 	ldw	r5,28(sp)
 10032b8:	d9001617 	ldw	r4,88(sp)
 10032bc:	01800284 	movi	r6,10
 10032c0:	000f883a 	mov	r7,zero
 10032c4:	100665c0 	call	100665c <__multadd>
 10032c8:	d8800715 	stw	r2,28(sp)
 10032cc:	84000044 	addi	r16,r16,1
 10032d0:	d9000717 	ldw	r4,28(sp)
 10032d4:	900b883a 	mov	r5,r18
 10032d8:	10025300 	call	1002530 <quorem>
 10032dc:	15c00c04 	addi	r23,r2,48
 10032e0:	b5c00005 	stb	r23,0(r22)
 10032e4:	d8c00f17 	ldw	r3,60(sp)
 10032e8:	b5800044 	addi	r22,r22,1
 10032ec:	80fff116 	blt	r16,r3,10032b4 <_dtoa_r+0xb40>
 10032f0:	d8000615 	stw	zero,24(sp)
 10032f4:	d9400717 	ldw	r5,28(sp)
 10032f8:	d9001617 	ldw	r4,88(sp)
 10032fc:	01800044 	movi	r6,1
 1003300:	10062800 	call	1006280 <__lshift>
 1003304:	1009883a 	mov	r4,r2
 1003308:	900b883a 	mov	r5,r18
 100330c:	d8800715 	stw	r2,28(sp)
 1003310:	1005a980 	call	1005a98 <__mcmp>
 1003314:	00803c0e 	bge	zero,r2,1003408 <_dtoa_r+0xc94>
 1003318:	b009883a 	mov	r4,r22
 100331c:	213fffc4 	addi	r4,r4,-1
 1003320:	21400003 	ldbu	r5,0(r4)
 1003324:	00800e44 	movi	r2,57
 1003328:	28c03fcc 	andi	r3,r5,255
 100332c:	18c0201c 	xori	r3,r3,128
 1003330:	18ffe004 	addi	r3,r3,-128
 1003334:	1881981e 	bne	r3,r2,1003998 <_dtoa_r+0x1224>
 1003338:	d9800517 	ldw	r6,20(sp)
 100333c:	21bff71e 	bne	r4,r6,100331c <_dtoa_r+0xba8>
 1003340:	d8800d17 	ldw	r2,52(sp)
 1003344:	37000044 	addi	fp,r6,1
 1003348:	10800044 	addi	r2,r2,1
 100334c:	d8800d15 	stw	r2,52(sp)
 1003350:	00800c44 	movi	r2,49
 1003354:	30800005 	stb	r2,0(r6)
 1003358:	d9001617 	ldw	r4,88(sp)
 100335c:	900b883a 	mov	r5,r18
 1003360:	100593c0 	call	100593c <_Bfree>
 1003364:	983ecd26 	beq	r19,zero,1002e9c <_dtoa_r+0x728>
 1003368:	d8c00617 	ldw	r3,24(sp)
 100336c:	18000426 	beq	r3,zero,1003380 <_dtoa_r+0xc0c>
 1003370:	1cc00326 	beq	r3,r19,1003380 <_dtoa_r+0xc0c>
 1003374:	d9001617 	ldw	r4,88(sp)
 1003378:	180b883a 	mov	r5,r3
 100337c:	100593c0 	call	100593c <_Bfree>
 1003380:	d9001617 	ldw	r4,88(sp)
 1003384:	980b883a 	mov	r5,r19
 1003388:	100593c0 	call	100593c <_Bfree>
 100338c:	003ec306 	br	1002e9c <_dtoa_r+0x728>
 1003390:	1805883a 	mov	r2,r3
 1003394:	003eeb06 	br	1002f44 <_dtoa_r+0x7d0>
 1003398:	d9800a17 	ldw	r6,40(sp)
 100339c:	d8c01117 	ldw	r3,68(sp)
 10033a0:	20bfff04 	addi	r2,r4,-4
 10033a4:	308d883a 	add	r6,r6,r2
 10033a8:	1887883a 	add	r3,r3,r2
 10033ac:	80a1883a 	add	r16,r16,r2
 10033b0:	d9800a15 	stw	r6,40(sp)
 10033b4:	d8c01115 	stw	r3,68(sp)
 10033b8:	003f1d06 	br	1003030 <_dtoa_r+0x8bc>
 10033bc:	a03f0c1e 	bne	r20,zero,1002ff0 <_dtoa_r+0x87c>
 10033c0:	00800434 	movhi	r2,16
 10033c4:	10bfffc4 	addi	r2,r2,-1
 10033c8:	a884703a 	and	r2,r21,r2
 10033cc:	103f081e 	bne	r2,zero,1002ff0 <_dtoa_r+0x87c>
 10033d0:	a89ffc2c 	andhi	r2,r21,32752
 10033d4:	103f0626 	beq	r2,zero,1002ff0 <_dtoa_r+0x87c>
 10033d8:	d8c01117 	ldw	r3,68(sp)
 10033dc:	d9000a17 	ldw	r4,40(sp)
 10033e0:	18c00044 	addi	r3,r3,1
 10033e4:	21000044 	addi	r4,r4,1
 10033e8:	d8c01115 	stw	r3,68(sp)
 10033ec:	d9000a15 	stw	r4,40(sp)
 10033f0:	003f0006 	br	1002ff4 <_dtoa_r+0x880>
 10033f4:	d9400717 	ldw	r5,28(sp)
 10033f8:	d9001617 	ldw	r4,88(sp)
 10033fc:	10067880 	call	1006788 <__pow5mult>
 1003400:	d8800715 	stw	r2,28(sp)
 1003404:	003eed06 	br	1002fbc <_dtoa_r+0x848>
 1003408:	1000021e 	bne	r2,zero,1003414 <_dtoa_r+0xca0>
 100340c:	b880004c 	andi	r2,r23,1
 1003410:	103fc11e 	bne	r2,zero,1003318 <_dtoa_r+0xba4>
 1003414:	b5bfffc4 	addi	r22,r22,-1
 1003418:	b0c00007 	ldb	r3,0(r22)
 100341c:	00800c04 	movi	r2,48
 1003420:	18bffc26 	beq	r3,r2,1003414 <_dtoa_r+0xca0>
 1003424:	b7000044 	addi	fp,r22,1
 1003428:	003fcb06 	br	1003358 <_dtoa_r+0xbe4>
 100342c:	d9800d17 	ldw	r6,52(sp)
 1003430:	018fc83a 	sub	r7,zero,r6
 1003434:	3801f726 	beq	r7,zero,1003c14 <_dtoa_r+0x14a0>
 1003438:	398003cc 	andi	r6,r7,15
 100343c:	300c90fa 	slli	r6,r6,3
 1003440:	01404074 	movhi	r5,257
 1003444:	294ab204 	addi	r5,r5,10952
 1003448:	d9001217 	ldw	r4,72(sp)
 100344c:	314d883a 	add	r6,r6,r5
 1003450:	30c00117 	ldw	r3,4(r6)
 1003454:	30800017 	ldw	r2,0(r6)
 1003458:	d9401317 	ldw	r5,76(sp)
 100345c:	3821d13a 	srai	r16,r7,4
 1003460:	100d883a 	mov	r6,r2
 1003464:	180f883a 	mov	r7,r3
 1003468:	100891c0 	call	100891c <__muldf3>
 100346c:	1011883a 	mov	r8,r2
 1003470:	1813883a 	mov	r9,r3
 1003474:	1029883a 	mov	r20,r2
 1003478:	182b883a 	mov	r21,r3
 100347c:	8001e526 	beq	r16,zero,1003c14 <_dtoa_r+0x14a0>
 1003480:	05800084 	movi	r22,2
 1003484:	04404074 	movhi	r17,257
 1003488:	8c4ae404 	addi	r17,r17,11152
 100348c:	8080004c 	andi	r2,r16,1
 1003490:	1005003a 	cmpeq	r2,r2,zero
 1003494:	1000081e 	bne	r2,zero,10034b8 <_dtoa_r+0xd44>
 1003498:	89800017 	ldw	r6,0(r17)
 100349c:	89c00117 	ldw	r7,4(r17)
 10034a0:	480b883a 	mov	r5,r9
 10034a4:	4009883a 	mov	r4,r8
 10034a8:	100891c0 	call	100891c <__muldf3>
 10034ac:	1011883a 	mov	r8,r2
 10034b0:	b5800044 	addi	r22,r22,1
 10034b4:	1813883a 	mov	r9,r3
 10034b8:	8021d07a 	srai	r16,r16,1
 10034bc:	8c400204 	addi	r17,r17,8
 10034c0:	803ff21e 	bne	r16,zero,100348c <_dtoa_r+0xd18>
 10034c4:	4029883a 	mov	r20,r8
 10034c8:	482b883a 	mov	r21,r9
 10034cc:	003dca06 	br	1002bf8 <_dtoa_r+0x484>
 10034d0:	d9000817 	ldw	r4,32(sp)
 10034d4:	2005003a 	cmpeq	r2,r4,zero
 10034d8:	1001f61e 	bne	r2,zero,1003cb4 <_dtoa_r+0x1540>
 10034dc:	dc001117 	ldw	r16,68(sp)
 10034e0:	dc801017 	ldw	r18,64(sp)
 10034e4:	18c10cc4 	addi	r3,r3,1075
 10034e8:	003f6106 	br	1003270 <_dtoa_r+0xafc>
 10034ec:	d8000b15 	stw	zero,44(sp)
 10034f0:	d9802617 	ldw	r6,152(sp)
 10034f4:	d8c00d17 	ldw	r3,52(sp)
 10034f8:	30800044 	addi	r2,r6,1
 10034fc:	18ad883a 	add	r22,r3,r2
 1003500:	b13fffc4 	addi	r4,r22,-1
 1003504:	d9000e15 	stw	r4,56(sp)
 1003508:	0581f60e 	bge	zero,r22,1003ce4 <_dtoa_r+0x1570>
 100350c:	dd800f15 	stw	r22,60(sp)
 1003510:	003f3006 	br	10031d4 <_dtoa_r+0xa60>
 1003514:	d8000b15 	stw	zero,44(sp)
 1003518:	d9002617 	ldw	r4,152(sp)
 100351c:	0101eb0e 	bge	zero,r4,1003ccc <_dtoa_r+0x1558>
 1003520:	202d883a 	mov	r22,r4
 1003524:	d9000e15 	stw	r4,56(sp)
 1003528:	d9000f15 	stw	r4,60(sp)
 100352c:	003f2906 	br	10031d4 <_dtoa_r+0xa60>
 1003530:	01800044 	movi	r6,1
 1003534:	d9800b15 	stw	r6,44(sp)
 1003538:	003ff706 	br	1003518 <_dtoa_r+0xda4>
 100353c:	01000044 	movi	r4,1
 1003540:	d9000b15 	stw	r4,44(sp)
 1003544:	003fea06 	br	10034f0 <_dtoa_r+0xd7c>
 1003548:	04000c0e 	bge	zero,r16,100357c <_dtoa_r+0xe08>
 100354c:	d9400717 	ldw	r5,28(sp)
 1003550:	d9001617 	ldw	r4,88(sp)
 1003554:	01800044 	movi	r6,1
 1003558:	10062800 	call	1006280 <__lshift>
 100355c:	1009883a 	mov	r4,r2
 1003560:	900b883a 	mov	r5,r18
 1003564:	d8800715 	stw	r2,28(sp)
 1003568:	1005a980 	call	1005a98 <__mcmp>
 100356c:	0081e00e 	bge	zero,r2,1003cf0 <_dtoa_r+0x157c>
 1003570:	bdc00044 	addi	r23,r23,1
 1003574:	00800e84 	movi	r2,58
 1003578:	b881a226 	beq	r23,r2,1003c04 <_dtoa_r+0x1490>
 100357c:	b7000044 	addi	fp,r22,1
 1003580:	b5c00005 	stb	r23,0(r22)
 1003584:	003f7406 	br	1003358 <_dtoa_r+0xbe4>
 1003588:	00800e44 	movi	r2,57
 100358c:	b8819d26 	beq	r23,r2,1003c04 <_dtoa_r+0x1490>
 1003590:	053ffa0e 	bge	zero,r20,100357c <_dtoa_r+0xe08>
 1003594:	8dc00c44 	addi	r23,r17,49
 1003598:	003ff806 	br	100357c <_dtoa_r+0xe08>
 100359c:	d9001617 	ldw	r4,88(sp)
 10035a0:	a80b883a 	mov	r5,r21
 10035a4:	04000044 	movi	r16,1
 10035a8:	100593c0 	call	100593c <_Bfree>
 10035ac:	003edf06 	br	100312c <_dtoa_r+0x9b8>
 10035b0:	d9001617 	ldw	r4,88(sp)
 10035b4:	980b883a 	mov	r5,r19
 10035b8:	01800284 	movi	r6,10
 10035bc:	000f883a 	mov	r7,zero
 10035c0:	100665c0 	call	100665c <__multadd>
 10035c4:	1027883a 	mov	r19,r2
 10035c8:	d8800615 	stw	r2,24(sp)
 10035cc:	003ebb06 	br	10030bc <_dtoa_r+0x948>
 10035d0:	d9801117 	ldw	r6,68(sp)
 10035d4:	d8800d17 	ldw	r2,52(sp)
 10035d8:	d8000915 	stw	zero,36(sp)
 10035dc:	308dc83a 	sub	r6,r6,r2
 10035e0:	0087c83a 	sub	r3,zero,r2
 10035e4:	d9801115 	stw	r6,68(sp)
 10035e8:	d8c01015 	stw	r3,64(sp)
 10035ec:	003cfe06 	br	10029e8 <_dtoa_r+0x274>
 10035f0:	018dc83a 	sub	r6,zero,r6
 10035f4:	d9801115 	stw	r6,68(sp)
 10035f8:	d8000a15 	stw	zero,40(sp)
 10035fc:	003cf306 	br	10029cc <_dtoa_r+0x258>
 1003600:	d9000d17 	ldw	r4,52(sp)
 1003604:	10091e00 	call	10091e0 <__floatsidf>
 1003608:	880b883a 	mov	r5,r17
 100360c:	8009883a 	mov	r4,r16
 1003610:	180f883a 	mov	r7,r3
 1003614:	100d883a 	mov	r6,r2
 1003618:	1008fc00 	call	1008fc0 <__nedf2>
 100361c:	103ce126 	beq	r2,zero,10029a4 <_dtoa_r+0x230>
 1003620:	d9800d17 	ldw	r6,52(sp)
 1003624:	31bfffc4 	addi	r6,r6,-1
 1003628:	d9800d15 	stw	r6,52(sp)
 100362c:	003cdd06 	br	10029a4 <_dtoa_r+0x230>
 1003630:	d9000717 	ldw	r4,28(sp)
 1003634:	900b883a 	mov	r5,r18
 1003638:	1005a980 	call	1005a98 <__mcmp>
 100363c:	103e8d0e 	bge	r2,zero,1003074 <_dtoa_r+0x900>
 1003640:	d9400717 	ldw	r5,28(sp)
 1003644:	d9001617 	ldw	r4,88(sp)
 1003648:	01800284 	movi	r6,10
 100364c:	000f883a 	mov	r7,zero
 1003650:	100665c0 	call	100665c <__multadd>
 1003654:	d9800d17 	ldw	r6,52(sp)
 1003658:	d8800715 	stw	r2,28(sp)
 100365c:	31bfffc4 	addi	r6,r6,-1
 1003660:	d9800d15 	stw	r6,52(sp)
 1003664:	b001a71e 	bne	r22,zero,1003d04 <_dtoa_r+0x1590>
 1003668:	d8800e17 	ldw	r2,56(sp)
 100366c:	d8800f15 	stw	r2,60(sp)
 1003670:	003e8006 	br	1003074 <_dtoa_r+0x900>
 1003674:	90800417 	ldw	r2,16(r18)
 1003678:	1085883a 	add	r2,r2,r2
 100367c:	1085883a 	add	r2,r2,r2
 1003680:	1485883a 	add	r2,r2,r18
 1003684:	11000417 	ldw	r4,16(r2)
 1003688:	10059640 	call	1005964 <__hi0bits>
 100368c:	00c00804 	movi	r3,32
 1003690:	1887c83a 	sub	r3,r3,r2
 1003694:	003e5a06 	br	1003000 <_dtoa_r+0x88c>
 1003698:	d9400717 	ldw	r5,28(sp)
 100369c:	d9801017 	ldw	r6,64(sp)
 10036a0:	d9001617 	ldw	r4,88(sp)
 10036a4:	10067880 	call	1006788 <__pow5mult>
 10036a8:	d8800715 	stw	r2,28(sp)
 10036ac:	003e4306 	br	1002fbc <_dtoa_r+0x848>
 10036b0:	d9800f17 	ldw	r6,60(sp)
 10036b4:	d8800d17 	ldw	r2,52(sp)
 10036b8:	d9800315 	stw	r6,12(sp)
 10036bc:	d8800415 	stw	r2,16(sp)
 10036c0:	d8c00b17 	ldw	r3,44(sp)
 10036c4:	1805003a 	cmpeq	r2,r3,zero
 10036c8:	1000e21e 	bne	r2,zero,1003a54 <_dtoa_r+0x12e0>
 10036cc:	d9000317 	ldw	r4,12(sp)
 10036d0:	0005883a 	mov	r2,zero
 10036d4:	00cff834 	movhi	r3,16352
 10036d8:	200c90fa 	slli	r6,r4,3
 10036dc:	01004074 	movhi	r4,257
 10036e0:	210ab204 	addi	r4,r4,10952
 10036e4:	180b883a 	mov	r5,r3
 10036e8:	310d883a 	add	r6,r6,r4
 10036ec:	327fff17 	ldw	r9,-4(r6)
 10036f0:	323ffe17 	ldw	r8,-8(r6)
 10036f4:	1009883a 	mov	r4,r2
 10036f8:	480f883a 	mov	r7,r9
 10036fc:	400d883a 	mov	r6,r8
 1003700:	1008ce00 	call	1008ce0 <__divdf3>
 1003704:	180b883a 	mov	r5,r3
 1003708:	b00d883a 	mov	r6,r22
 100370c:	b80f883a 	mov	r7,r23
 1003710:	1009883a 	mov	r4,r2
 1003714:	10088280 	call	1008828 <__subdf3>
 1003718:	a80b883a 	mov	r5,r21
 100371c:	a009883a 	mov	r4,r20
 1003720:	d8c01915 	stw	r3,100(sp)
 1003724:	d8801815 	stw	r2,96(sp)
 1003728:	10092d80 	call	10092d8 <__fixdfsi>
 100372c:	1009883a 	mov	r4,r2
 1003730:	1027883a 	mov	r19,r2
 1003734:	10091e00 	call	10091e0 <__floatsidf>
 1003738:	a80b883a 	mov	r5,r21
 100373c:	a009883a 	mov	r4,r20
 1003740:	180f883a 	mov	r7,r3
 1003744:	100d883a 	mov	r6,r2
 1003748:	10088280 	call	1008828 <__subdf3>
 100374c:	d9801817 	ldw	r6,96(sp)
 1003750:	1823883a 	mov	r17,r3
 1003754:	d8801415 	stw	r2,80(sp)
 1003758:	302d883a 	mov	r22,r6
 100375c:	d9800517 	ldw	r6,20(sp)
 1003760:	9cc00c04 	addi	r19,r19,48
 1003764:	dc401515 	stw	r17,84(sp)
 1003768:	d8c01917 	ldw	r3,100(sp)
 100376c:	34c00005 	stb	r19,0(r6)
 1003770:	d8800517 	ldw	r2,20(sp)
 1003774:	d9401917 	ldw	r5,100(sp)
 1003778:	d9801417 	ldw	r6,80(sp)
 100377c:	b009883a 	mov	r4,r22
 1003780:	880f883a 	mov	r7,r17
 1003784:	182f883a 	mov	r23,r3
 1003788:	17000044 	addi	fp,r2,1
 100378c:	10090480 	call	1009048 <__gtdf2>
 1003790:	00804e16 	blt	zero,r2,10038cc <_dtoa_r+0x1158>
 1003794:	d9801417 	ldw	r6,80(sp)
 1003798:	0005883a 	mov	r2,zero
 100379c:	00cffc34 	movhi	r3,16368
 10037a0:	180b883a 	mov	r5,r3
 10037a4:	880f883a 	mov	r7,r17
 10037a8:	1009883a 	mov	r4,r2
 10037ac:	10088280 	call	1008828 <__subdf3>
 10037b0:	d9401917 	ldw	r5,100(sp)
 10037b4:	180f883a 	mov	r7,r3
 10037b8:	b009883a 	mov	r4,r22
 10037bc:	100d883a 	mov	r6,r2
 10037c0:	10090480 	call	1009048 <__gtdf2>
 10037c4:	00bda216 	blt	zero,r2,1002e50 <_dtoa_r+0x6dc>
 10037c8:	d8c00317 	ldw	r3,12(sp)
 10037cc:	00800044 	movi	r2,1
 10037d0:	10c01216 	blt	r2,r3,100381c <_dtoa_r+0x10a8>
 10037d4:	003d4506 	br	1002cec <_dtoa_r+0x578>
 10037d8:	d9801417 	ldw	r6,80(sp)
 10037dc:	0005883a 	mov	r2,zero
 10037e0:	00cffc34 	movhi	r3,16368
 10037e4:	180b883a 	mov	r5,r3
 10037e8:	880f883a 	mov	r7,r17
 10037ec:	1009883a 	mov	r4,r2
 10037f0:	10088280 	call	1008828 <__subdf3>
 10037f4:	d9c01b17 	ldw	r7,108(sp)
 10037f8:	180b883a 	mov	r5,r3
 10037fc:	1009883a 	mov	r4,r2
 1003800:	b00d883a 	mov	r6,r22
 1003804:	10091580 	call	1009158 <__ltdf2>
 1003808:	103d9116 	blt	r2,zero,1002e50 <_dtoa_r+0x6dc>
 100380c:	d9800517 	ldw	r6,20(sp)
 1003810:	d9000317 	ldw	r4,12(sp)
 1003814:	3105883a 	add	r2,r6,r4
 1003818:	e0bd3426 	beq	fp,r2,1002cec <_dtoa_r+0x578>
 100381c:	04500934 	movhi	r17,16420
 1003820:	0021883a 	mov	r16,zero
 1003824:	b80b883a 	mov	r5,r23
 1003828:	b009883a 	mov	r4,r22
 100382c:	800d883a 	mov	r6,r16
 1003830:	880f883a 	mov	r7,r17
 1003834:	100891c0 	call	100891c <__muldf3>
 1003838:	d9401517 	ldw	r5,84(sp)
 100383c:	d9001417 	ldw	r4,80(sp)
 1003840:	880f883a 	mov	r7,r17
 1003844:	000d883a 	mov	r6,zero
 1003848:	d8801a15 	stw	r2,104(sp)
 100384c:	d8c01b15 	stw	r3,108(sp)
 1003850:	100891c0 	call	100891c <__muldf3>
 1003854:	180b883a 	mov	r5,r3
 1003858:	1009883a 	mov	r4,r2
 100385c:	1823883a 	mov	r17,r3
 1003860:	1021883a 	mov	r16,r2
 1003864:	10092d80 	call	10092d8 <__fixdfsi>
 1003868:	1009883a 	mov	r4,r2
 100386c:	102b883a 	mov	r21,r2
 1003870:	10091e00 	call	10091e0 <__floatsidf>
 1003874:	880b883a 	mov	r5,r17
 1003878:	8009883a 	mov	r4,r16
 100387c:	180f883a 	mov	r7,r3
 1003880:	100d883a 	mov	r6,r2
 1003884:	10088280 	call	1008828 <__subdf3>
 1003888:	1021883a 	mov	r16,r2
 100388c:	d9001b17 	ldw	r4,108(sp)
 1003890:	1823883a 	mov	r17,r3
 1003894:	dc001415 	stw	r16,80(sp)
 1003898:	ad400c04 	addi	r21,r21,48
 100389c:	dc401515 	stw	r17,84(sp)
 10038a0:	d8801a17 	ldw	r2,104(sp)
 10038a4:	e5400005 	stb	r21,0(fp)
 10038a8:	202f883a 	mov	r23,r4
 10038ac:	d9c01b17 	ldw	r7,108(sp)
 10038b0:	d9001417 	ldw	r4,80(sp)
 10038b4:	880b883a 	mov	r5,r17
 10038b8:	100d883a 	mov	r6,r2
 10038bc:	102d883a 	mov	r22,r2
 10038c0:	e7000044 	addi	fp,fp,1
 10038c4:	10091580 	call	1009158 <__ltdf2>
 10038c8:	103fc30e 	bge	r2,zero,10037d8 <_dtoa_r+0x1064>
 10038cc:	d9000417 	ldw	r4,16(sp)
 10038d0:	d9000d15 	stw	r4,52(sp)
 10038d4:	003d7106 	br	1002e9c <_dtoa_r+0x728>
 10038d8:	d9801717 	ldw	r6,92(sp)
 10038dc:	00800084 	movi	r2,2
 10038e0:	11bde60e 	bge	r2,r6,100307c <_dtoa_r+0x908>
 10038e4:	203cfb1e 	bne	r4,zero,1002cd4 <_dtoa_r+0x560>
 10038e8:	d9001617 	ldw	r4,88(sp)
 10038ec:	900b883a 	mov	r5,r18
 10038f0:	01800144 	movi	r6,5
 10038f4:	000f883a 	mov	r7,zero
 10038f8:	100665c0 	call	100665c <__multadd>
 10038fc:	d9000717 	ldw	r4,28(sp)
 1003900:	100b883a 	mov	r5,r2
 1003904:	1025883a 	mov	r18,r2
 1003908:	1005a980 	call	1005a98 <__mcmp>
 100390c:	00bcf10e 	bge	zero,r2,1002cd4 <_dtoa_r+0x560>
 1003910:	d8c00d17 	ldw	r3,52(sp)
 1003914:	d9000517 	ldw	r4,20(sp)
 1003918:	d8000615 	stw	zero,24(sp)
 100391c:	18c00044 	addi	r3,r3,1
 1003920:	d8c00d15 	stw	r3,52(sp)
 1003924:	00800c44 	movi	r2,49
 1003928:	27000044 	addi	fp,r4,1
 100392c:	20800005 	stb	r2,0(r4)
 1003930:	003e8906 	br	1003358 <_dtoa_r+0xbe4>
 1003934:	d8c00517 	ldw	r3,20(sp)
 1003938:	003bc206 	br	1002844 <_dtoa_r+0xd0>
 100393c:	01804074 	movhi	r6,257
 1003940:	318ae404 	addi	r6,r6,11152
 1003944:	30c00917 	ldw	r3,36(r6)
 1003948:	30800817 	ldw	r2,32(r6)
 100394c:	d9001217 	ldw	r4,72(sp)
 1003950:	d9401317 	ldw	r5,76(sp)
 1003954:	180f883a 	mov	r7,r3
 1003958:	100d883a 	mov	r6,r2
 100395c:	1008ce00 	call	1008ce0 <__divdf3>
 1003960:	948003cc 	andi	r18,r18,15
 1003964:	058000c4 	movi	r22,3
 1003968:	1029883a 	mov	r20,r2
 100396c:	182b883a 	mov	r21,r3
 1003970:	003c8906 	br	1002b98 <_dtoa_r+0x424>
 1003974:	d9001017 	ldw	r4,64(sp)
 1003978:	d9800917 	ldw	r6,36(sp)
 100397c:	0025883a 	mov	r18,zero
 1003980:	1105c83a 	sub	r2,r2,r4
 1003984:	2089883a 	add	r4,r4,r2
 1003988:	308d883a 	add	r6,r6,r2
 100398c:	d9001015 	stw	r4,64(sp)
 1003990:	d9800915 	stw	r6,36(sp)
 1003994:	003e3206 	br	1003260 <_dtoa_r+0xaec>
 1003998:	28800044 	addi	r2,r5,1
 100399c:	27000044 	addi	fp,r4,1
 10039a0:	20800005 	stb	r2,0(r4)
 10039a4:	003e6c06 	br	1003358 <_dtoa_r+0xbe4>
 10039a8:	d8800f17 	ldw	r2,60(sp)
 10039ac:	00bce016 	blt	zero,r2,1002d30 <_dtoa_r+0x5bc>
 10039b0:	d9800f17 	ldw	r6,60(sp)
 10039b4:	303cc51e 	bne	r6,zero,1002ccc <_dtoa_r+0x558>
 10039b8:	0005883a 	mov	r2,zero
 10039bc:	00d00534 	movhi	r3,16404
 10039c0:	980b883a 	mov	r5,r19
 10039c4:	180f883a 	mov	r7,r3
 10039c8:	9009883a 	mov	r4,r18
 10039cc:	100d883a 	mov	r6,r2
 10039d0:	100891c0 	call	100891c <__muldf3>
 10039d4:	180b883a 	mov	r5,r3
 10039d8:	a80f883a 	mov	r7,r21
 10039dc:	1009883a 	mov	r4,r2
 10039e0:	a00d883a 	mov	r6,r20
 10039e4:	10090d00 	call	10090d0 <__gedf2>
 10039e8:	103cb80e 	bge	r2,zero,1002ccc <_dtoa_r+0x558>
 10039ec:	0027883a 	mov	r19,zero
 10039f0:	0025883a 	mov	r18,zero
 10039f4:	003fc606 	br	1003910 <_dtoa_r+0x119c>
 10039f8:	99400117 	ldw	r5,4(r19)
 10039fc:	d9001617 	ldw	r4,88(sp)
 1003a00:	1005ebc0 	call	1005ebc <_Balloc>
 1003a04:	99800417 	ldw	r6,16(r19)
 1003a08:	11000304 	addi	r4,r2,12
 1003a0c:	99400304 	addi	r5,r19,12
 1003a10:	318d883a 	add	r6,r6,r6
 1003a14:	318d883a 	add	r6,r6,r6
 1003a18:	31800204 	addi	r6,r6,8
 1003a1c:	1023883a 	mov	r17,r2
 1003a20:	10057240 	call	1005724 <memcpy>
 1003a24:	d9001617 	ldw	r4,88(sp)
 1003a28:	880b883a 	mov	r5,r17
 1003a2c:	01800044 	movi	r6,1
 1003a30:	10062800 	call	1006280 <__lshift>
 1003a34:	100b883a 	mov	r5,r2
 1003a38:	003d9c06 	br	10030ac <_dtoa_r+0x938>
 1003a3c:	00800e44 	movi	r2,57
 1003a40:	b8807026 	beq	r23,r2,1003c04 <_dtoa_r+0x1490>
 1003a44:	b8800044 	addi	r2,r23,1
 1003a48:	b7000044 	addi	fp,r22,1
 1003a4c:	b0800005 	stb	r2,0(r22)
 1003a50:	003e4106 	br	1003358 <_dtoa_r+0xbe4>
 1003a54:	d8800317 	ldw	r2,12(sp)
 1003a58:	01804074 	movhi	r6,257
 1003a5c:	318ab204 	addi	r6,r6,10952
 1003a60:	b009883a 	mov	r4,r22
 1003a64:	100e90fa 	slli	r7,r2,3
 1003a68:	b80b883a 	mov	r5,r23
 1003a6c:	398f883a 	add	r7,r7,r6
 1003a70:	38bffe17 	ldw	r2,-8(r7)
 1003a74:	d9800517 	ldw	r6,20(sp)
 1003a78:	38ffff17 	ldw	r3,-4(r7)
 1003a7c:	37000044 	addi	fp,r6,1
 1003a80:	180f883a 	mov	r7,r3
 1003a84:	100d883a 	mov	r6,r2
 1003a88:	100891c0 	call	100891c <__muldf3>
 1003a8c:	a80b883a 	mov	r5,r21
 1003a90:	a009883a 	mov	r4,r20
 1003a94:	182f883a 	mov	r23,r3
 1003a98:	102d883a 	mov	r22,r2
 1003a9c:	10092d80 	call	10092d8 <__fixdfsi>
 1003aa0:	1009883a 	mov	r4,r2
 1003aa4:	1027883a 	mov	r19,r2
 1003aa8:	10091e00 	call	10091e0 <__floatsidf>
 1003aac:	a80b883a 	mov	r5,r21
 1003ab0:	a009883a 	mov	r4,r20
 1003ab4:	180f883a 	mov	r7,r3
 1003ab8:	100d883a 	mov	r6,r2
 1003abc:	10088280 	call	1008828 <__subdf3>
 1003ac0:	180b883a 	mov	r5,r3
 1003ac4:	d8c00517 	ldw	r3,20(sp)
 1003ac8:	9cc00c04 	addi	r19,r19,48
 1003acc:	1009883a 	mov	r4,r2
 1003ad0:	1cc00005 	stb	r19,0(r3)
 1003ad4:	2021883a 	mov	r16,r4
 1003ad8:	d9000317 	ldw	r4,12(sp)
 1003adc:	00800044 	movi	r2,1
 1003ae0:	2823883a 	mov	r17,r5
 1003ae4:	20802226 	beq	r4,r2,1003b70 <_dtoa_r+0x13fc>
 1003ae8:	1029883a 	mov	r20,r2
 1003aec:	0005883a 	mov	r2,zero
 1003af0:	00d00934 	movhi	r3,16420
 1003af4:	180f883a 	mov	r7,r3
 1003af8:	100d883a 	mov	r6,r2
 1003afc:	880b883a 	mov	r5,r17
 1003b00:	8009883a 	mov	r4,r16
 1003b04:	100891c0 	call	100891c <__muldf3>
 1003b08:	180b883a 	mov	r5,r3
 1003b0c:	1009883a 	mov	r4,r2
 1003b10:	1823883a 	mov	r17,r3
 1003b14:	1021883a 	mov	r16,r2
 1003b18:	10092d80 	call	10092d8 <__fixdfsi>
 1003b1c:	1009883a 	mov	r4,r2
 1003b20:	102b883a 	mov	r21,r2
 1003b24:	10091e00 	call	10091e0 <__floatsidf>
 1003b28:	880b883a 	mov	r5,r17
 1003b2c:	8009883a 	mov	r4,r16
 1003b30:	180f883a 	mov	r7,r3
 1003b34:	100d883a 	mov	r6,r2
 1003b38:	10088280 	call	1008828 <__subdf3>
 1003b3c:	180b883a 	mov	r5,r3
 1003b40:	d8c00517 	ldw	r3,20(sp)
 1003b44:	1009883a 	mov	r4,r2
 1003b48:	ad400c04 	addi	r21,r21,48
 1003b4c:	1d05883a 	add	r2,r3,r20
 1003b50:	15400005 	stb	r21,0(r2)
 1003b54:	2021883a 	mov	r16,r4
 1003b58:	d9000317 	ldw	r4,12(sp)
 1003b5c:	a5000044 	addi	r20,r20,1
 1003b60:	2823883a 	mov	r17,r5
 1003b64:	a13fe11e 	bne	r20,r4,1003aec <_dtoa_r+0x1378>
 1003b68:	e505883a 	add	r2,fp,r20
 1003b6c:	173fffc4 	addi	fp,r2,-1
 1003b70:	0025883a 	mov	r18,zero
 1003b74:	04cff834 	movhi	r19,16352
 1003b78:	b009883a 	mov	r4,r22
 1003b7c:	b80b883a 	mov	r5,r23
 1003b80:	900d883a 	mov	r6,r18
 1003b84:	980f883a 	mov	r7,r19
 1003b88:	10088a80 	call	10088a8 <__adddf3>
 1003b8c:	180b883a 	mov	r5,r3
 1003b90:	1009883a 	mov	r4,r2
 1003b94:	800d883a 	mov	r6,r16
 1003b98:	880f883a 	mov	r7,r17
 1003b9c:	10091580 	call	1009158 <__ltdf2>
 1003ba0:	103cab16 	blt	r2,zero,1002e50 <_dtoa_r+0x6dc>
 1003ba4:	0009883a 	mov	r4,zero
 1003ba8:	980b883a 	mov	r5,r19
 1003bac:	b80f883a 	mov	r7,r23
 1003bb0:	b00d883a 	mov	r6,r22
 1003bb4:	10088280 	call	1008828 <__subdf3>
 1003bb8:	180b883a 	mov	r5,r3
 1003bbc:	880f883a 	mov	r7,r17
 1003bc0:	1009883a 	mov	r4,r2
 1003bc4:	800d883a 	mov	r6,r16
 1003bc8:	10090480 	call	1009048 <__gtdf2>
 1003bcc:	00bc470e 	bge	zero,r2,1002cec <_dtoa_r+0x578>
 1003bd0:	00c00c04 	movi	r3,48
 1003bd4:	e73fffc4 	addi	fp,fp,-1
 1003bd8:	e0800007 	ldb	r2,0(fp)
 1003bdc:	10fffd26 	beq	r2,r3,1003bd4 <_dtoa_r+0x1460>
 1003be0:	d9800417 	ldw	r6,16(sp)
 1003be4:	e7000044 	addi	fp,fp,1
 1003be8:	d9800d15 	stw	r6,52(sp)
 1003bec:	003cab06 	br	1002e9c <_dtoa_r+0x728>
 1003bf0:	d8c00f17 	ldw	r3,60(sp)
 1003bf4:	d9001117 	ldw	r4,68(sp)
 1003bf8:	20e1c83a 	sub	r16,r4,r3
 1003bfc:	0007883a 	mov	r3,zero
 1003c00:	003d9b06 	br	1003270 <_dtoa_r+0xafc>
 1003c04:	00800e44 	movi	r2,57
 1003c08:	b0800005 	stb	r2,0(r22)
 1003c0c:	b5800044 	addi	r22,r22,1
 1003c10:	003dc106 	br	1003318 <_dtoa_r+0xba4>
 1003c14:	05800084 	movi	r22,2
 1003c18:	003bf706 	br	1002bf8 <_dtoa_r+0x484>
 1003c1c:	d9000f17 	ldw	r4,60(sp)
 1003c20:	013c000e 	bge	zero,r4,1002c24 <_dtoa_r+0x4b0>
 1003c24:	d9800e17 	ldw	r6,56(sp)
 1003c28:	01bc300e 	bge	zero,r6,1002cec <_dtoa_r+0x578>
 1003c2c:	0005883a 	mov	r2,zero
 1003c30:	00d00934 	movhi	r3,16420
 1003c34:	a80b883a 	mov	r5,r21
 1003c38:	180f883a 	mov	r7,r3
 1003c3c:	a009883a 	mov	r4,r20
 1003c40:	100d883a 	mov	r6,r2
 1003c44:	100891c0 	call	100891c <__muldf3>
 1003c48:	b1000044 	addi	r4,r22,1
 1003c4c:	1021883a 	mov	r16,r2
 1003c50:	1823883a 	mov	r17,r3
 1003c54:	10091e00 	call	10091e0 <__floatsidf>
 1003c58:	880b883a 	mov	r5,r17
 1003c5c:	8009883a 	mov	r4,r16
 1003c60:	180f883a 	mov	r7,r3
 1003c64:	100d883a 	mov	r6,r2
 1003c68:	100891c0 	call	100891c <__muldf3>
 1003c6c:	0011883a 	mov	r8,zero
 1003c70:	02500734 	movhi	r9,16412
 1003c74:	180b883a 	mov	r5,r3
 1003c78:	480f883a 	mov	r7,r9
 1003c7c:	1009883a 	mov	r4,r2
 1003c80:	400d883a 	mov	r6,r8
 1003c84:	10088a80 	call	10088a8 <__adddf3>
 1003c88:	102d883a 	mov	r22,r2
 1003c8c:	00bf3034 	movhi	r2,64704
 1003c90:	10ef883a 	add	r23,r2,r3
 1003c94:	d8800d17 	ldw	r2,52(sp)
 1003c98:	d8c00e17 	ldw	r3,56(sp)
 1003c9c:	8029883a 	mov	r20,r16
 1003ca0:	10bfffc4 	addi	r2,r2,-1
 1003ca4:	882b883a 	mov	r21,r17
 1003ca8:	d8800415 	stw	r2,16(sp)
 1003cac:	d8c00315 	stw	r3,12(sp)
 1003cb0:	003e8306 	br	10036c0 <_dtoa_r+0xf4c>
 1003cb4:	d8800117 	ldw	r2,4(sp)
 1003cb8:	dc001117 	ldw	r16,68(sp)
 1003cbc:	dc801017 	ldw	r18,64(sp)
 1003cc0:	00c00d84 	movi	r3,54
 1003cc4:	1887c83a 	sub	r3,r3,r2
 1003cc8:	003d6906 	br	1003270 <_dtoa_r+0xafc>
 1003ccc:	01800044 	movi	r6,1
 1003cd0:	3021883a 	mov	r16,r6
 1003cd4:	d9800f15 	stw	r6,60(sp)
 1003cd8:	d9802615 	stw	r6,152(sp)
 1003cdc:	d9800e15 	stw	r6,56(sp)
 1003ce0:	003b9306 	br	1002b30 <_dtoa_r+0x3bc>
 1003ce4:	b021883a 	mov	r16,r22
 1003ce8:	dd800f15 	stw	r22,60(sp)
 1003cec:	003b9006 	br	1002b30 <_dtoa_r+0x3bc>
 1003cf0:	103e221e 	bne	r2,zero,100357c <_dtoa_r+0xe08>
 1003cf4:	b880004c 	andi	r2,r23,1
 1003cf8:	1005003a 	cmpeq	r2,r2,zero
 1003cfc:	103e1f1e 	bne	r2,zero,100357c <_dtoa_r+0xe08>
 1003d00:	003e1b06 	br	1003570 <_dtoa_r+0xdfc>
 1003d04:	d9001617 	ldw	r4,88(sp)
 1003d08:	980b883a 	mov	r5,r19
 1003d0c:	01800284 	movi	r6,10
 1003d10:	000f883a 	mov	r7,zero
 1003d14:	100665c0 	call	100665c <__multadd>
 1003d18:	d8c00e17 	ldw	r3,56(sp)
 1003d1c:	1027883a 	mov	r19,r2
 1003d20:	d8c00f15 	stw	r3,60(sp)
 1003d24:	003cd306 	br	1003074 <_dtoa_r+0x900>

01003d28 <_fflush_r>:
 1003d28:	defffb04 	addi	sp,sp,-20
 1003d2c:	dcc00315 	stw	r19,12(sp)
 1003d30:	dc800215 	stw	r18,8(sp)
 1003d34:	dfc00415 	stw	ra,16(sp)
 1003d38:	dc400115 	stw	r17,4(sp)
 1003d3c:	dc000015 	stw	r16,0(sp)
 1003d40:	2027883a 	mov	r19,r4
 1003d44:	2825883a 	mov	r18,r5
 1003d48:	20000226 	beq	r4,zero,1003d54 <_fflush_r+0x2c>
 1003d4c:	20800e17 	ldw	r2,56(r4)
 1003d50:	10005626 	beq	r2,zero,1003eac <_fflush_r+0x184>
 1003d54:	9100030b 	ldhu	r4,12(r18)
 1003d58:	20ffffcc 	andi	r3,r4,65535
 1003d5c:	18e0001c 	xori	r3,r3,32768
 1003d60:	18e00004 	addi	r3,r3,-32768
 1003d64:	1880020c 	andi	r2,r3,8
 1003d68:	1000261e 	bne	r2,zero,1003e04 <_fflush_r+0xdc>
 1003d6c:	90c00117 	ldw	r3,4(r18)
 1003d70:	20820014 	ori	r2,r4,2048
 1003d74:	9080030d 	sth	r2,12(r18)
 1003d78:	1009883a 	mov	r4,r2
 1003d7c:	00c0400e 	bge	zero,r3,1003e80 <_fflush_r+0x158>
 1003d80:	92000a17 	ldw	r8,40(r18)
 1003d84:	40004026 	beq	r8,zero,1003e88 <_fflush_r+0x160>
 1003d88:	2084000c 	andi	r2,r4,4096
 1003d8c:	10005326 	beq	r2,zero,1003edc <_fflush_r+0x1b4>
 1003d90:	94001417 	ldw	r16,80(r18)
 1003d94:	9080030b 	ldhu	r2,12(r18)
 1003d98:	1080010c 	andi	r2,r2,4
 1003d9c:	1000481e 	bne	r2,zero,1003ec0 <_fflush_r+0x198>
 1003da0:	91400717 	ldw	r5,28(r18)
 1003da4:	9809883a 	mov	r4,r19
 1003da8:	800d883a 	mov	r6,r16
 1003dac:	000f883a 	mov	r7,zero
 1003db0:	403ee83a 	callr	r8
 1003db4:	8080261e 	bne	r16,r2,1003e50 <_fflush_r+0x128>
 1003db8:	9080030b 	ldhu	r2,12(r18)
 1003dbc:	91000417 	ldw	r4,16(r18)
 1003dc0:	90000115 	stw	zero,4(r18)
 1003dc4:	10bdffcc 	andi	r2,r2,63487
 1003dc8:	10ffffcc 	andi	r3,r2,65535
 1003dcc:	18c4000c 	andi	r3,r3,4096
 1003dd0:	9080030d 	sth	r2,12(r18)
 1003dd4:	91000015 	stw	r4,0(r18)
 1003dd8:	18002b26 	beq	r3,zero,1003e88 <_fflush_r+0x160>
 1003ddc:	0007883a 	mov	r3,zero
 1003de0:	1805883a 	mov	r2,r3
 1003de4:	94001415 	stw	r16,80(r18)
 1003de8:	dfc00417 	ldw	ra,16(sp)
 1003dec:	dcc00317 	ldw	r19,12(sp)
 1003df0:	dc800217 	ldw	r18,8(sp)
 1003df4:	dc400117 	ldw	r17,4(sp)
 1003df8:	dc000017 	ldw	r16,0(sp)
 1003dfc:	dec00504 	addi	sp,sp,20
 1003e00:	f800283a 	ret
 1003e04:	94400417 	ldw	r17,16(r18)
 1003e08:	88001f26 	beq	r17,zero,1003e88 <_fflush_r+0x160>
 1003e0c:	90800017 	ldw	r2,0(r18)
 1003e10:	18c000cc 	andi	r3,r3,3
 1003e14:	94400015 	stw	r17,0(r18)
 1003e18:	1461c83a 	sub	r16,r2,r17
 1003e1c:	18002526 	beq	r3,zero,1003eb4 <_fflush_r+0x18c>
 1003e20:	0005883a 	mov	r2,zero
 1003e24:	90800215 	stw	r2,8(r18)
 1003e28:	0400170e 	bge	zero,r16,1003e88 <_fflush_r+0x160>
 1003e2c:	90c00917 	ldw	r3,36(r18)
 1003e30:	91400717 	ldw	r5,28(r18)
 1003e34:	880d883a 	mov	r6,r17
 1003e38:	800f883a 	mov	r7,r16
 1003e3c:	9809883a 	mov	r4,r19
 1003e40:	183ee83a 	callr	r3
 1003e44:	88a3883a 	add	r17,r17,r2
 1003e48:	80a1c83a 	sub	r16,r16,r2
 1003e4c:	00bff616 	blt	zero,r2,1003e28 <_fflush_r+0x100>
 1003e50:	9080030b 	ldhu	r2,12(r18)
 1003e54:	00ffffc4 	movi	r3,-1
 1003e58:	10801014 	ori	r2,r2,64
 1003e5c:	9080030d 	sth	r2,12(r18)
 1003e60:	1805883a 	mov	r2,r3
 1003e64:	dfc00417 	ldw	ra,16(sp)
 1003e68:	dcc00317 	ldw	r19,12(sp)
 1003e6c:	dc800217 	ldw	r18,8(sp)
 1003e70:	dc400117 	ldw	r17,4(sp)
 1003e74:	dc000017 	ldw	r16,0(sp)
 1003e78:	dec00504 	addi	sp,sp,20
 1003e7c:	f800283a 	ret
 1003e80:	90800f17 	ldw	r2,60(r18)
 1003e84:	00bfbe16 	blt	zero,r2,1003d80 <_fflush_r+0x58>
 1003e88:	0007883a 	mov	r3,zero
 1003e8c:	1805883a 	mov	r2,r3
 1003e90:	dfc00417 	ldw	ra,16(sp)
 1003e94:	dcc00317 	ldw	r19,12(sp)
 1003e98:	dc800217 	ldw	r18,8(sp)
 1003e9c:	dc400117 	ldw	r17,4(sp)
 1003ea0:	dc000017 	ldw	r16,0(sp)
 1003ea4:	dec00504 	addi	sp,sp,20
 1003ea8:	f800283a 	ret
 1003eac:	1003fc00 	call	1003fc0 <__sinit>
 1003eb0:	003fa806 	br	1003d54 <_fflush_r+0x2c>
 1003eb4:	90800517 	ldw	r2,20(r18)
 1003eb8:	90800215 	stw	r2,8(r18)
 1003ebc:	003fda06 	br	1003e28 <_fflush_r+0x100>
 1003ec0:	90800117 	ldw	r2,4(r18)
 1003ec4:	90c00c17 	ldw	r3,48(r18)
 1003ec8:	80a1c83a 	sub	r16,r16,r2
 1003ecc:	183fb426 	beq	r3,zero,1003da0 <_fflush_r+0x78>
 1003ed0:	90800f17 	ldw	r2,60(r18)
 1003ed4:	80a1c83a 	sub	r16,r16,r2
 1003ed8:	003fb106 	br	1003da0 <_fflush_r+0x78>
 1003edc:	91400717 	ldw	r5,28(r18)
 1003ee0:	9809883a 	mov	r4,r19
 1003ee4:	000d883a 	mov	r6,zero
 1003ee8:	01c00044 	movi	r7,1
 1003eec:	403ee83a 	callr	r8
 1003ef0:	1021883a 	mov	r16,r2
 1003ef4:	00bfffc4 	movi	r2,-1
 1003ef8:	80800226 	beq	r16,r2,1003f04 <_fflush_r+0x1dc>
 1003efc:	92000a17 	ldw	r8,40(r18)
 1003f00:	003fa406 	br	1003d94 <_fflush_r+0x6c>
 1003f04:	98c00017 	ldw	r3,0(r19)
 1003f08:	00800744 	movi	r2,29
 1003f0c:	18bfde26 	beq	r3,r2,1003e88 <_fflush_r+0x160>
 1003f10:	9080030b 	ldhu	r2,12(r18)
 1003f14:	8007883a 	mov	r3,r16
 1003f18:	10801014 	ori	r2,r2,64
 1003f1c:	9080030d 	sth	r2,12(r18)
 1003f20:	003fcf06 	br	1003e60 <_fflush_r+0x138>

01003f24 <fflush>:
 1003f24:	01404034 	movhi	r5,256
 1003f28:	294f4a04 	addi	r5,r5,15656
 1003f2c:	2007883a 	mov	r3,r4
 1003f30:	20000526 	beq	r4,zero,1003f48 <fflush+0x24>
 1003f34:	00804074 	movhi	r2,257
 1003f38:	10922404 	addi	r2,r2,18576
 1003f3c:	11000017 	ldw	r4,0(r2)
 1003f40:	180b883a 	mov	r5,r3
 1003f44:	1003d281 	jmpi	1003d28 <_fflush_r>
 1003f48:	00804074 	movhi	r2,257
 1003f4c:	10922504 	addi	r2,r2,18580
 1003f50:	11000017 	ldw	r4,0(r2)
 1003f54:	1004b281 	jmpi	1004b28 <_fwalk_reent>

01003f58 <std>:
 1003f58:	00804034 	movhi	r2,256
 1003f5c:	109c2704 	addi	r2,r2,28828
 1003f60:	20800b15 	stw	r2,44(r4)
 1003f64:	00804034 	movhi	r2,256
 1003f68:	109c6204 	addi	r2,r2,29064
 1003f6c:	20800815 	stw	r2,32(r4)
 1003f70:	00c04034 	movhi	r3,256
 1003f74:	18dc4304 	addi	r3,r3,28940
 1003f78:	00804034 	movhi	r2,256
 1003f7c:	109c2904 	addi	r2,r2,28836
 1003f80:	2140030d 	sth	r5,12(r4)
 1003f84:	2180038d 	sth	r6,14(r4)
 1003f88:	20c00915 	stw	r3,36(r4)
 1003f8c:	20800a15 	stw	r2,40(r4)
 1003f90:	20000015 	stw	zero,0(r4)
 1003f94:	20000115 	stw	zero,4(r4)
 1003f98:	20000215 	stw	zero,8(r4)
 1003f9c:	20000415 	stw	zero,16(r4)
 1003fa0:	20000515 	stw	zero,20(r4)
 1003fa4:	20000615 	stw	zero,24(r4)
 1003fa8:	21000715 	stw	r4,28(r4)
 1003fac:	f800283a 	ret

01003fb0 <__sfp_lock_acquire>:
 1003fb0:	f800283a 	ret

01003fb4 <__sfp_lock_release>:
 1003fb4:	f800283a 	ret

01003fb8 <__sinit_lock_acquire>:
 1003fb8:	f800283a 	ret

01003fbc <__sinit_lock_release>:
 1003fbc:	f800283a 	ret

01003fc0 <__sinit>:
 1003fc0:	20800e17 	ldw	r2,56(r4)
 1003fc4:	defffd04 	addi	sp,sp,-12
 1003fc8:	dc400115 	stw	r17,4(sp)
 1003fcc:	dc000015 	stw	r16,0(sp)
 1003fd0:	dfc00215 	stw	ra,8(sp)
 1003fd4:	04400044 	movi	r17,1
 1003fd8:	01400104 	movi	r5,4
 1003fdc:	000d883a 	mov	r6,zero
 1003fe0:	2021883a 	mov	r16,r4
 1003fe4:	2200bb04 	addi	r8,r4,748
 1003fe8:	200f883a 	mov	r7,r4
 1003fec:	10000526 	beq	r2,zero,1004004 <__sinit+0x44>
 1003ff0:	dfc00217 	ldw	ra,8(sp)
 1003ff4:	dc400117 	ldw	r17,4(sp)
 1003ff8:	dc000017 	ldw	r16,0(sp)
 1003ffc:	dec00304 	addi	sp,sp,12
 1004000:	f800283a 	ret
 1004004:	21000117 	ldw	r4,4(r4)
 1004008:	00804034 	movhi	r2,256
 100400c:	10902904 	addi	r2,r2,16548
 1004010:	00c000c4 	movi	r3,3
 1004014:	80800f15 	stw	r2,60(r16)
 1004018:	80c0b915 	stw	r3,740(r16)
 100401c:	8200ba15 	stw	r8,744(r16)
 1004020:	84400e15 	stw	r17,56(r16)
 1004024:	8000b815 	stw	zero,736(r16)
 1004028:	1003f580 	call	1003f58 <std>
 100402c:	81000217 	ldw	r4,8(r16)
 1004030:	880d883a 	mov	r6,r17
 1004034:	800f883a 	mov	r7,r16
 1004038:	01400284 	movi	r5,10
 100403c:	1003f580 	call	1003f58 <std>
 1004040:	81000317 	ldw	r4,12(r16)
 1004044:	800f883a 	mov	r7,r16
 1004048:	01400484 	movi	r5,18
 100404c:	01800084 	movi	r6,2
 1004050:	dfc00217 	ldw	ra,8(sp)
 1004054:	dc400117 	ldw	r17,4(sp)
 1004058:	dc000017 	ldw	r16,0(sp)
 100405c:	dec00304 	addi	sp,sp,12
 1004060:	1003f581 	jmpi	1003f58 <std>

01004064 <__fp_lock>:
 1004064:	0005883a 	mov	r2,zero
 1004068:	f800283a 	ret

0100406c <__fp_unlock>:
 100406c:	0005883a 	mov	r2,zero
 1004070:	f800283a 	ret

01004074 <__fp_unlock_all>:
 1004074:	00804074 	movhi	r2,257
 1004078:	10922404 	addi	r2,r2,18576
 100407c:	11000017 	ldw	r4,0(r2)
 1004080:	01404034 	movhi	r5,256
 1004084:	29501b04 	addi	r5,r5,16492
 1004088:	1004bf01 	jmpi	1004bf0 <_fwalk>

0100408c <__fp_lock_all>:
 100408c:	00804074 	movhi	r2,257
 1004090:	10922404 	addi	r2,r2,18576
 1004094:	11000017 	ldw	r4,0(r2)
 1004098:	01404034 	movhi	r5,256
 100409c:	29501904 	addi	r5,r5,16484
 10040a0:	1004bf01 	jmpi	1004bf0 <_fwalk>

010040a4 <_cleanup_r>:
 10040a4:	01404034 	movhi	r5,256
 10040a8:	295d5904 	addi	r5,r5,30052
 10040ac:	1004bf01 	jmpi	1004bf0 <_fwalk>

010040b0 <_cleanup>:
 10040b0:	00804074 	movhi	r2,257
 10040b4:	10922504 	addi	r2,r2,18580
 10040b8:	11000017 	ldw	r4,0(r2)
 10040bc:	10040a41 	jmpi	10040a4 <_cleanup_r>

010040c0 <__sfmoreglue>:
 10040c0:	defffc04 	addi	sp,sp,-16
 10040c4:	dc000015 	stw	r16,0(sp)
 10040c8:	2821883a 	mov	r16,r5
 10040cc:	dc400115 	stw	r17,4(sp)
 10040d0:	01401704 	movi	r5,92
 10040d4:	2023883a 	mov	r17,r4
 10040d8:	8009883a 	mov	r4,r16
 10040dc:	dfc00315 	stw	ra,12(sp)
 10040e0:	dcc00215 	stw	r19,8(sp)
 10040e4:	10096900 	call	1009690 <__mulsi3>
 10040e8:	11400304 	addi	r5,r2,12
 10040ec:	8809883a 	mov	r4,r17
 10040f0:	1027883a 	mov	r19,r2
 10040f4:	1004f000 	call	1004f00 <_malloc_r>
 10040f8:	10c00304 	addi	r3,r2,12
 10040fc:	1023883a 	mov	r17,r2
 1004100:	1809883a 	mov	r4,r3
 1004104:	980d883a 	mov	r6,r19
 1004108:	000b883a 	mov	r5,zero
 100410c:	10000b26 	beq	r2,zero,100413c <__sfmoreglue+0x7c>
 1004110:	14000115 	stw	r16,4(r2)
 1004114:	10c00215 	stw	r3,8(r2)
 1004118:	10000015 	stw	zero,0(r2)
 100411c:	10058a40 	call	10058a4 <memset>
 1004120:	8805883a 	mov	r2,r17
 1004124:	dfc00317 	ldw	ra,12(sp)
 1004128:	dcc00217 	ldw	r19,8(sp)
 100412c:	dc400117 	ldw	r17,4(sp)
 1004130:	dc000017 	ldw	r16,0(sp)
 1004134:	dec00404 	addi	sp,sp,16
 1004138:	f800283a 	ret
 100413c:	0023883a 	mov	r17,zero
 1004140:	8805883a 	mov	r2,r17
 1004144:	dfc00317 	ldw	ra,12(sp)
 1004148:	dcc00217 	ldw	r19,8(sp)
 100414c:	dc400117 	ldw	r17,4(sp)
 1004150:	dc000017 	ldw	r16,0(sp)
 1004154:	dec00404 	addi	sp,sp,16
 1004158:	f800283a 	ret

0100415c <__sfp>:
 100415c:	defffd04 	addi	sp,sp,-12
 1004160:	00804074 	movhi	r2,257
 1004164:	10922504 	addi	r2,r2,18580
 1004168:	dc000015 	stw	r16,0(sp)
 100416c:	14000017 	ldw	r16,0(r2)
 1004170:	dc400115 	stw	r17,4(sp)
 1004174:	dfc00215 	stw	ra,8(sp)
 1004178:	80800e17 	ldw	r2,56(r16)
 100417c:	2023883a 	mov	r17,r4
 1004180:	10002626 	beq	r2,zero,100421c <__sfp+0xc0>
 1004184:	8400b804 	addi	r16,r16,736
 1004188:	80800117 	ldw	r2,4(r16)
 100418c:	81000217 	ldw	r4,8(r16)
 1004190:	10ffffc4 	addi	r3,r2,-1
 1004194:	18000916 	blt	r3,zero,10041bc <__sfp+0x60>
 1004198:	2080030f 	ldh	r2,12(r4)
 100419c:	10000b26 	beq	r2,zero,10041cc <__sfp+0x70>
 10041a0:	017fffc4 	movi	r5,-1
 10041a4:	00000206 	br	10041b0 <__sfp+0x54>
 10041a8:	2080030f 	ldh	r2,12(r4)
 10041ac:	10000726 	beq	r2,zero,10041cc <__sfp+0x70>
 10041b0:	18ffffc4 	addi	r3,r3,-1
 10041b4:	21001704 	addi	r4,r4,92
 10041b8:	197ffb1e 	bne	r3,r5,10041a8 <__sfp+0x4c>
 10041bc:	80800017 	ldw	r2,0(r16)
 10041c0:	10001926 	beq	r2,zero,1004228 <__sfp+0xcc>
 10041c4:	1021883a 	mov	r16,r2
 10041c8:	003fef06 	br	1004188 <__sfp+0x2c>
 10041cc:	00bfffc4 	movi	r2,-1
 10041d0:	00c00044 	movi	r3,1
 10041d4:	2080038d 	sth	r2,14(r4)
 10041d8:	20c0030d 	sth	r3,12(r4)
 10041dc:	20000015 	stw	zero,0(r4)
 10041e0:	20000215 	stw	zero,8(r4)
 10041e4:	20000115 	stw	zero,4(r4)
 10041e8:	20000415 	stw	zero,16(r4)
 10041ec:	20000515 	stw	zero,20(r4)
 10041f0:	20000615 	stw	zero,24(r4)
 10041f4:	20000c15 	stw	zero,48(r4)
 10041f8:	20000d15 	stw	zero,52(r4)
 10041fc:	20001115 	stw	zero,68(r4)
 1004200:	20001215 	stw	zero,72(r4)
 1004204:	2005883a 	mov	r2,r4
 1004208:	dfc00217 	ldw	ra,8(sp)
 100420c:	dc400117 	ldw	r17,4(sp)
 1004210:	dc000017 	ldw	r16,0(sp)
 1004214:	dec00304 	addi	sp,sp,12
 1004218:	f800283a 	ret
 100421c:	8009883a 	mov	r4,r16
 1004220:	1003fc00 	call	1003fc0 <__sinit>
 1004224:	003fd706 	br	1004184 <__sfp+0x28>
 1004228:	8809883a 	mov	r4,r17
 100422c:	01400104 	movi	r5,4
 1004230:	10040c00 	call	10040c0 <__sfmoreglue>
 1004234:	80800015 	stw	r2,0(r16)
 1004238:	103fe21e 	bne	r2,zero,10041c4 <__sfp+0x68>
 100423c:	00800304 	movi	r2,12
 1004240:	0009883a 	mov	r4,zero
 1004244:	88800015 	stw	r2,0(r17)
 1004248:	003fee06 	br	1004204 <__sfp+0xa8>

0100424c <_malloc_trim_r>:
 100424c:	defffb04 	addi	sp,sp,-20
 1004250:	dcc00315 	stw	r19,12(sp)
 1004254:	04c04074 	movhi	r19,257
 1004258:	9ccc8a04 	addi	r19,r19,12840
 100425c:	dc800215 	stw	r18,8(sp)
 1004260:	dc400115 	stw	r17,4(sp)
 1004264:	dc000015 	stw	r16,0(sp)
 1004268:	2823883a 	mov	r17,r5
 100426c:	2025883a 	mov	r18,r4
 1004270:	dfc00415 	stw	ra,16(sp)
 1004274:	100a4140 	call	100a414 <__malloc_lock>
 1004278:	98800217 	ldw	r2,8(r19)
 100427c:	9009883a 	mov	r4,r18
 1004280:	000b883a 	mov	r5,zero
 1004284:	10c00117 	ldw	r3,4(r2)
 1004288:	00bfff04 	movi	r2,-4
 100428c:	18a0703a 	and	r16,r3,r2
 1004290:	8463c83a 	sub	r17,r16,r17
 1004294:	8c43fbc4 	addi	r17,r17,4079
 1004298:	8822d33a 	srli	r17,r17,12
 100429c:	0083ffc4 	movi	r2,4095
 10042a0:	8c7fffc4 	addi	r17,r17,-1
 10042a4:	8822933a 	slli	r17,r17,12
 10042a8:	1440060e 	bge	r2,r17,10042c4 <_malloc_trim_r+0x78>
 10042ac:	100702c0 	call	100702c <_sbrk_r>
 10042b0:	98c00217 	ldw	r3,8(r19)
 10042b4:	9009883a 	mov	r4,r18
 10042b8:	044bc83a 	sub	r5,zero,r17
 10042bc:	80c7883a 	add	r3,r16,r3
 10042c0:	10c00926 	beq	r2,r3,10042e8 <_malloc_trim_r+0x9c>
 10042c4:	100a4340 	call	100a434 <__malloc_unlock>
 10042c8:	0005883a 	mov	r2,zero
 10042cc:	dfc00417 	ldw	ra,16(sp)
 10042d0:	dcc00317 	ldw	r19,12(sp)
 10042d4:	dc800217 	ldw	r18,8(sp)
 10042d8:	dc400117 	ldw	r17,4(sp)
 10042dc:	dc000017 	ldw	r16,0(sp)
 10042e0:	dec00504 	addi	sp,sp,20
 10042e4:	f800283a 	ret
 10042e8:	9009883a 	mov	r4,r18
 10042ec:	100702c0 	call	100702c <_sbrk_r>
 10042f0:	844dc83a 	sub	r6,r16,r17
 10042f4:	00ffffc4 	movi	r3,-1
 10042f8:	9009883a 	mov	r4,r18
 10042fc:	000b883a 	mov	r5,zero
 1004300:	01c04074 	movhi	r7,257
 1004304:	39d8fb04 	addi	r7,r7,25580
 1004308:	31800054 	ori	r6,r6,1
 100430c:	10c00926 	beq	r2,r3,1004334 <_malloc_trim_r+0xe8>
 1004310:	38800017 	ldw	r2,0(r7)
 1004314:	98c00217 	ldw	r3,8(r19)
 1004318:	9009883a 	mov	r4,r18
 100431c:	1445c83a 	sub	r2,r2,r17
 1004320:	38800015 	stw	r2,0(r7)
 1004324:	19800115 	stw	r6,4(r3)
 1004328:	100a4340 	call	100a434 <__malloc_unlock>
 100432c:	00800044 	movi	r2,1
 1004330:	003fe606 	br	10042cc <_malloc_trim_r+0x80>
 1004334:	100702c0 	call	100702c <_sbrk_r>
 1004338:	99800217 	ldw	r6,8(r19)
 100433c:	100f883a 	mov	r7,r2
 1004340:	9009883a 	mov	r4,r18
 1004344:	1187c83a 	sub	r3,r2,r6
 1004348:	008003c4 	movi	r2,15
 100434c:	19400054 	ori	r5,r3,1
 1004350:	10ffdc0e 	bge	r2,r3,10042c4 <_malloc_trim_r+0x78>
 1004354:	00804074 	movhi	r2,257
 1004358:	10922904 	addi	r2,r2,18596
 100435c:	10c00017 	ldw	r3,0(r2)
 1004360:	00804074 	movhi	r2,257
 1004364:	1098fb04 	addi	r2,r2,25580
 1004368:	31400115 	stw	r5,4(r6)
 100436c:	38c7c83a 	sub	r3,r7,r3
 1004370:	10c00015 	stw	r3,0(r2)
 1004374:	003fd306 	br	10042c4 <_malloc_trim_r+0x78>

01004378 <_free_r>:
 1004378:	defffd04 	addi	sp,sp,-12
 100437c:	dc400115 	stw	r17,4(sp)
 1004380:	dc000015 	stw	r16,0(sp)
 1004384:	dfc00215 	stw	ra,8(sp)
 1004388:	2821883a 	mov	r16,r5
 100438c:	2023883a 	mov	r17,r4
 1004390:	28005a26 	beq	r5,zero,10044fc <_free_r+0x184>
 1004394:	100a4140 	call	100a414 <__malloc_lock>
 1004398:	823ffe04 	addi	r8,r16,-8
 100439c:	41400117 	ldw	r5,4(r8)
 10043a0:	00bfff84 	movi	r2,-2
 10043a4:	02804074 	movhi	r10,257
 10043a8:	528c8a04 	addi	r10,r10,12840
 10043ac:	288e703a 	and	r7,r5,r2
 10043b0:	41cd883a 	add	r6,r8,r7
 10043b4:	30c00117 	ldw	r3,4(r6)
 10043b8:	51000217 	ldw	r4,8(r10)
 10043bc:	00bfff04 	movi	r2,-4
 10043c0:	1892703a 	and	r9,r3,r2
 10043c4:	5017883a 	mov	r11,r10
 10043c8:	31006726 	beq	r6,r4,1004568 <_free_r+0x1f0>
 10043cc:	2880004c 	andi	r2,r5,1
 10043d0:	1005003a 	cmpeq	r2,r2,zero
 10043d4:	32400115 	stw	r9,4(r6)
 10043d8:	10001a1e 	bne	r2,zero,1004444 <_free_r+0xcc>
 10043dc:	000b883a 	mov	r5,zero
 10043e0:	3247883a 	add	r3,r6,r9
 10043e4:	18800117 	ldw	r2,4(r3)
 10043e8:	1080004c 	andi	r2,r2,1
 10043ec:	1000231e 	bne	r2,zero,100447c <_free_r+0x104>
 10043f0:	280ac03a 	cmpne	r5,r5,zero
 10043f4:	3a4f883a 	add	r7,r7,r9
 10043f8:	2800451e 	bne	r5,zero,1004510 <_free_r+0x198>
 10043fc:	31000217 	ldw	r4,8(r6)
 1004400:	00804074 	movhi	r2,257
 1004404:	108c8c04 	addi	r2,r2,12848
 1004408:	20807b26 	beq	r4,r2,10045f8 <_free_r+0x280>
 100440c:	30800317 	ldw	r2,12(r6)
 1004410:	3a07883a 	add	r3,r7,r8
 1004414:	19c00015 	stw	r7,0(r3)
 1004418:	11000215 	stw	r4,8(r2)
 100441c:	20800315 	stw	r2,12(r4)
 1004420:	38800054 	ori	r2,r7,1
 1004424:	40800115 	stw	r2,4(r8)
 1004428:	28001a26 	beq	r5,zero,1004494 <_free_r+0x11c>
 100442c:	8809883a 	mov	r4,r17
 1004430:	dfc00217 	ldw	ra,8(sp)
 1004434:	dc400117 	ldw	r17,4(sp)
 1004438:	dc000017 	ldw	r16,0(sp)
 100443c:	dec00304 	addi	sp,sp,12
 1004440:	100a4341 	jmpi	100a434 <__malloc_unlock>
 1004444:	80bffe17 	ldw	r2,-8(r16)
 1004448:	50c00204 	addi	r3,r10,8
 100444c:	4091c83a 	sub	r8,r8,r2
 1004450:	41000217 	ldw	r4,8(r8)
 1004454:	388f883a 	add	r7,r7,r2
 1004458:	20c06126 	beq	r4,r3,10045e0 <_free_r+0x268>
 100445c:	40800317 	ldw	r2,12(r8)
 1004460:	3247883a 	add	r3,r6,r9
 1004464:	000b883a 	mov	r5,zero
 1004468:	11000215 	stw	r4,8(r2)
 100446c:	20800315 	stw	r2,12(r4)
 1004470:	18800117 	ldw	r2,4(r3)
 1004474:	1080004c 	andi	r2,r2,1
 1004478:	103fdd26 	beq	r2,zero,10043f0 <_free_r+0x78>
 100447c:	38800054 	ori	r2,r7,1
 1004480:	3a07883a 	add	r3,r7,r8
 1004484:	280ac03a 	cmpne	r5,r5,zero
 1004488:	40800115 	stw	r2,4(r8)
 100448c:	19c00015 	stw	r7,0(r3)
 1004490:	283fe61e 	bne	r5,zero,100442c <_free_r+0xb4>
 1004494:	00807fc4 	movi	r2,511
 1004498:	11c01f2e 	bgeu	r2,r7,1004518 <_free_r+0x1a0>
 100449c:	3806d27a 	srli	r3,r7,9
 10044a0:	1800481e 	bne	r3,zero,10045c4 <_free_r+0x24c>
 10044a4:	3804d0fa 	srli	r2,r7,3
 10044a8:	100690fa 	slli	r3,r2,3
 10044ac:	1acd883a 	add	r6,r3,r11
 10044b0:	31400217 	ldw	r5,8(r6)
 10044b4:	31405926 	beq	r6,r5,100461c <_free_r+0x2a4>
 10044b8:	28800117 	ldw	r2,4(r5)
 10044bc:	00ffff04 	movi	r3,-4
 10044c0:	10c4703a 	and	r2,r2,r3
 10044c4:	3880022e 	bgeu	r7,r2,10044d0 <_free_r+0x158>
 10044c8:	29400217 	ldw	r5,8(r5)
 10044cc:	317ffa1e 	bne	r6,r5,10044b8 <_free_r+0x140>
 10044d0:	29800317 	ldw	r6,12(r5)
 10044d4:	41800315 	stw	r6,12(r8)
 10044d8:	41400215 	stw	r5,8(r8)
 10044dc:	8809883a 	mov	r4,r17
 10044e0:	2a000315 	stw	r8,12(r5)
 10044e4:	32000215 	stw	r8,8(r6)
 10044e8:	dfc00217 	ldw	ra,8(sp)
 10044ec:	dc400117 	ldw	r17,4(sp)
 10044f0:	dc000017 	ldw	r16,0(sp)
 10044f4:	dec00304 	addi	sp,sp,12
 10044f8:	100a4341 	jmpi	100a434 <__malloc_unlock>
 10044fc:	dfc00217 	ldw	ra,8(sp)
 1004500:	dc400117 	ldw	r17,4(sp)
 1004504:	dc000017 	ldw	r16,0(sp)
 1004508:	dec00304 	addi	sp,sp,12
 100450c:	f800283a 	ret
 1004510:	31000217 	ldw	r4,8(r6)
 1004514:	003fbd06 	br	100440c <_free_r+0x94>
 1004518:	3806d0fa 	srli	r3,r7,3
 100451c:	00800044 	movi	r2,1
 1004520:	51400117 	ldw	r5,4(r10)
 1004524:	180890fa 	slli	r4,r3,3
 1004528:	1807d0ba 	srai	r3,r3,2
 100452c:	22c9883a 	add	r4,r4,r11
 1004530:	21800217 	ldw	r6,8(r4)
 1004534:	10c4983a 	sll	r2,r2,r3
 1004538:	41000315 	stw	r4,12(r8)
 100453c:	41800215 	stw	r6,8(r8)
 1004540:	288ab03a 	or	r5,r5,r2
 1004544:	22000215 	stw	r8,8(r4)
 1004548:	8809883a 	mov	r4,r17
 100454c:	51400115 	stw	r5,4(r10)
 1004550:	32000315 	stw	r8,12(r6)
 1004554:	dfc00217 	ldw	ra,8(sp)
 1004558:	dc400117 	ldw	r17,4(sp)
 100455c:	dc000017 	ldw	r16,0(sp)
 1004560:	dec00304 	addi	sp,sp,12
 1004564:	100a4341 	jmpi	100a434 <__malloc_unlock>
 1004568:	2880004c 	andi	r2,r5,1
 100456c:	3a4d883a 	add	r6,r7,r9
 1004570:	1000071e 	bne	r2,zero,1004590 <_free_r+0x218>
 1004574:	80bffe17 	ldw	r2,-8(r16)
 1004578:	4091c83a 	sub	r8,r8,r2
 100457c:	41000317 	ldw	r4,12(r8)
 1004580:	40c00217 	ldw	r3,8(r8)
 1004584:	308d883a 	add	r6,r6,r2
 1004588:	20c00215 	stw	r3,8(r4)
 100458c:	19000315 	stw	r4,12(r3)
 1004590:	00804074 	movhi	r2,257
 1004594:	10922804 	addi	r2,r2,18592
 1004598:	11000017 	ldw	r4,0(r2)
 100459c:	30c00054 	ori	r3,r6,1
 10045a0:	52000215 	stw	r8,8(r10)
 10045a4:	40c00115 	stw	r3,4(r8)
 10045a8:	313fa036 	bltu	r6,r4,100442c <_free_r+0xb4>
 10045ac:	00804074 	movhi	r2,257
 10045b0:	1098e404 	addi	r2,r2,25488
 10045b4:	11400017 	ldw	r5,0(r2)
 10045b8:	8809883a 	mov	r4,r17
 10045bc:	100424c0 	call	100424c <_malloc_trim_r>
 10045c0:	003f9a06 	br	100442c <_free_r+0xb4>
 10045c4:	00800104 	movi	r2,4
 10045c8:	10c0072e 	bgeu	r2,r3,10045e8 <_free_r+0x270>
 10045cc:	00800504 	movi	r2,20
 10045d0:	10c01936 	bltu	r2,r3,1004638 <_free_r+0x2c0>
 10045d4:	188016c4 	addi	r2,r3,91
 10045d8:	100690fa 	slli	r3,r2,3
 10045dc:	003fb306 	br	10044ac <_free_r+0x134>
 10045e0:	01400044 	movi	r5,1
 10045e4:	003f7e06 	br	10043e0 <_free_r+0x68>
 10045e8:	3804d1ba 	srli	r2,r7,6
 10045ec:	10800e04 	addi	r2,r2,56
 10045f0:	100690fa 	slli	r3,r2,3
 10045f4:	003fad06 	br	10044ac <_free_r+0x134>
 10045f8:	22000315 	stw	r8,12(r4)
 10045fc:	22000215 	stw	r8,8(r4)
 1004600:	3a05883a 	add	r2,r7,r8
 1004604:	38c00054 	ori	r3,r7,1
 1004608:	11c00015 	stw	r7,0(r2)
 100460c:	41000215 	stw	r4,8(r8)
 1004610:	40c00115 	stw	r3,4(r8)
 1004614:	41000315 	stw	r4,12(r8)
 1004618:	003f8406 	br	100442c <_free_r+0xb4>
 100461c:	1005d0ba 	srai	r2,r2,2
 1004620:	00c00044 	movi	r3,1
 1004624:	51000117 	ldw	r4,4(r10)
 1004628:	1886983a 	sll	r3,r3,r2
 100462c:	20c8b03a 	or	r4,r4,r3
 1004630:	51000115 	stw	r4,4(r10)
 1004634:	003fa706 	br	10044d4 <_free_r+0x15c>
 1004638:	00801504 	movi	r2,84
 100463c:	10c00436 	bltu	r2,r3,1004650 <_free_r+0x2d8>
 1004640:	3804d33a 	srli	r2,r7,12
 1004644:	10801b84 	addi	r2,r2,110
 1004648:	100690fa 	slli	r3,r2,3
 100464c:	003f9706 	br	10044ac <_free_r+0x134>
 1004650:	00805504 	movi	r2,340
 1004654:	10c00436 	bltu	r2,r3,1004668 <_free_r+0x2f0>
 1004658:	3804d3fa 	srli	r2,r7,15
 100465c:	10801dc4 	addi	r2,r2,119
 1004660:	100690fa 	slli	r3,r2,3
 1004664:	003f9106 	br	10044ac <_free_r+0x134>
 1004668:	00815504 	movi	r2,1364
 100466c:	10c0032e 	bgeu	r2,r3,100467c <_free_r+0x304>
 1004670:	00801f84 	movi	r2,126
 1004674:	00c0fc04 	movi	r3,1008
 1004678:	003f8c06 	br	10044ac <_free_r+0x134>
 100467c:	3804d4ba 	srli	r2,r7,18
 1004680:	10801f04 	addi	r2,r2,124
 1004684:	100690fa 	slli	r3,r2,3
 1004688:	003f8806 	br	10044ac <_free_r+0x134>

0100468c <__sfvwrite_r>:
 100468c:	30800217 	ldw	r2,8(r6)
 1004690:	defff504 	addi	sp,sp,-44
 1004694:	df000915 	stw	fp,36(sp)
 1004698:	dd800715 	stw	r22,28(sp)
 100469c:	dc800315 	stw	r18,12(sp)
 10046a0:	dfc00a15 	stw	ra,40(sp)
 10046a4:	ddc00815 	stw	r23,32(sp)
 10046a8:	dd400615 	stw	r21,24(sp)
 10046ac:	dd000515 	stw	r20,20(sp)
 10046b0:	dcc00415 	stw	r19,16(sp)
 10046b4:	dc400215 	stw	r17,8(sp)
 10046b8:	dc000115 	stw	r16,4(sp)
 10046bc:	302d883a 	mov	r22,r6
 10046c0:	2039883a 	mov	fp,r4
 10046c4:	2825883a 	mov	r18,r5
 10046c8:	10001c26 	beq	r2,zero,100473c <__sfvwrite_r+0xb0>
 10046cc:	29c0030b 	ldhu	r7,12(r5)
 10046d0:	3880020c 	andi	r2,r7,8
 10046d4:	10002726 	beq	r2,zero,1004774 <__sfvwrite_r+0xe8>
 10046d8:	28800417 	ldw	r2,16(r5)
 10046dc:	10002526 	beq	r2,zero,1004774 <__sfvwrite_r+0xe8>
 10046e0:	3880008c 	andi	r2,r7,2
 10046e4:	b5400017 	ldw	r21,0(r22)
 10046e8:	10002826 	beq	r2,zero,100478c <__sfvwrite_r+0x100>
 10046ec:	0021883a 	mov	r16,zero
 10046f0:	0023883a 	mov	r17,zero
 10046f4:	880d883a 	mov	r6,r17
 10046f8:	e009883a 	mov	r4,fp
 10046fc:	00810004 	movi	r2,1024
 1004700:	80006e26 	beq	r16,zero,10048bc <__sfvwrite_r+0x230>
 1004704:	800f883a 	mov	r7,r16
 1004708:	91400717 	ldw	r5,28(r18)
 100470c:	1400012e 	bgeu	r2,r16,1004714 <__sfvwrite_r+0x88>
 1004710:	100f883a 	mov	r7,r2
 1004714:	90c00917 	ldw	r3,36(r18)
 1004718:	183ee83a 	callr	r3
 100471c:	1007883a 	mov	r3,r2
 1004720:	80a1c83a 	sub	r16,r16,r2
 1004724:	88a3883a 	add	r17,r17,r2
 1004728:	00806d0e 	bge	zero,r2,10048e0 <__sfvwrite_r+0x254>
 100472c:	b0800217 	ldw	r2,8(r22)
 1004730:	10c5c83a 	sub	r2,r2,r3
 1004734:	b0800215 	stw	r2,8(r22)
 1004738:	103fee1e 	bne	r2,zero,10046f4 <__sfvwrite_r+0x68>
 100473c:	0009883a 	mov	r4,zero
 1004740:	2005883a 	mov	r2,r4
 1004744:	dfc00a17 	ldw	ra,40(sp)
 1004748:	df000917 	ldw	fp,36(sp)
 100474c:	ddc00817 	ldw	r23,32(sp)
 1004750:	dd800717 	ldw	r22,28(sp)
 1004754:	dd400617 	ldw	r21,24(sp)
 1004758:	dd000517 	ldw	r20,20(sp)
 100475c:	dcc00417 	ldw	r19,16(sp)
 1004760:	dc800317 	ldw	r18,12(sp)
 1004764:	dc400217 	ldw	r17,8(sp)
 1004768:	dc000117 	ldw	r16,4(sp)
 100476c:	dec00b04 	addi	sp,sp,44
 1004770:	f800283a 	ret
 1004774:	10023f40 	call	10023f4 <__swsetup_r>
 1004778:	1000e41e 	bne	r2,zero,1004b0c <__sfvwrite_r+0x480>
 100477c:	91c0030b 	ldhu	r7,12(r18)
 1004780:	b5400017 	ldw	r21,0(r22)
 1004784:	3880008c 	andi	r2,r7,2
 1004788:	103fd81e 	bne	r2,zero,10046ec <__sfvwrite_r+0x60>
 100478c:	3880004c 	andi	r2,r7,1
 1004790:	1005003a 	cmpeq	r2,r2,zero
 1004794:	10005726 	beq	r2,zero,10048f4 <__sfvwrite_r+0x268>
 1004798:	0029883a 	mov	r20,zero
 100479c:	002f883a 	mov	r23,zero
 10047a0:	a0004226 	beq	r20,zero,10048ac <__sfvwrite_r+0x220>
 10047a4:	3880800c 	andi	r2,r7,512
 10047a8:	94000217 	ldw	r16,8(r18)
 10047ac:	10008b26 	beq	r2,zero,10049dc <__sfvwrite_r+0x350>
 10047b0:	800d883a 	mov	r6,r16
 10047b4:	a400a536 	bltu	r20,r16,1004a4c <__sfvwrite_r+0x3c0>
 10047b8:	3881200c 	andi	r2,r7,1152
 10047bc:	10002726 	beq	r2,zero,100485c <__sfvwrite_r+0x1d0>
 10047c0:	90800517 	ldw	r2,20(r18)
 10047c4:	92000417 	ldw	r8,16(r18)
 10047c8:	91400017 	ldw	r5,0(r18)
 10047cc:	1087883a 	add	r3,r2,r2
 10047d0:	1887883a 	add	r3,r3,r2
 10047d4:	1808d7fa 	srli	r4,r3,31
 10047d8:	2a21c83a 	sub	r16,r5,r8
 10047dc:	80800044 	addi	r2,r16,1
 10047e0:	20c9883a 	add	r4,r4,r3
 10047e4:	2027d07a 	srai	r19,r4,1
 10047e8:	a085883a 	add	r2,r20,r2
 10047ec:	980d883a 	mov	r6,r19
 10047f0:	9880022e 	bgeu	r19,r2,10047fc <__sfvwrite_r+0x170>
 10047f4:	1027883a 	mov	r19,r2
 10047f8:	100d883a 	mov	r6,r2
 10047fc:	3881000c 	andi	r2,r7,1024
 1004800:	1000b826 	beq	r2,zero,1004ae4 <__sfvwrite_r+0x458>
 1004804:	300b883a 	mov	r5,r6
 1004808:	e009883a 	mov	r4,fp
 100480c:	1004f000 	call	1004f00 <_malloc_r>
 1004810:	10003126 	beq	r2,zero,10048d8 <__sfvwrite_r+0x24c>
 1004814:	91400417 	ldw	r5,16(r18)
 1004818:	1009883a 	mov	r4,r2
 100481c:	800d883a 	mov	r6,r16
 1004820:	1023883a 	mov	r17,r2
 1004824:	10057240 	call	1005724 <memcpy>
 1004828:	90c0030b 	ldhu	r3,12(r18)
 100482c:	00beffc4 	movi	r2,-1025
 1004830:	1886703a 	and	r3,r3,r2
 1004834:	18c02014 	ori	r3,r3,128
 1004838:	90c0030d 	sth	r3,12(r18)
 100483c:	9c07c83a 	sub	r3,r19,r16
 1004840:	8c05883a 	add	r2,r17,r16
 1004844:	a00d883a 	mov	r6,r20
 1004848:	a021883a 	mov	r16,r20
 100484c:	90800015 	stw	r2,0(r18)
 1004850:	90c00215 	stw	r3,8(r18)
 1004854:	94400415 	stw	r17,16(r18)
 1004858:	94c00515 	stw	r19,20(r18)
 100485c:	91000017 	ldw	r4,0(r18)
 1004860:	b80b883a 	mov	r5,r23
 1004864:	a023883a 	mov	r17,r20
 1004868:	10057c40 	call	10057c4 <memmove>
 100486c:	90c00217 	ldw	r3,8(r18)
 1004870:	90800017 	ldw	r2,0(r18)
 1004874:	a027883a 	mov	r19,r20
 1004878:	1c07c83a 	sub	r3,r3,r16
 100487c:	1405883a 	add	r2,r2,r16
 1004880:	90c00215 	stw	r3,8(r18)
 1004884:	a021883a 	mov	r16,r20
 1004888:	90800015 	stw	r2,0(r18)
 100488c:	b0800217 	ldw	r2,8(r22)
 1004890:	1405c83a 	sub	r2,r2,r16
 1004894:	b0800215 	stw	r2,8(r22)
 1004898:	103fa826 	beq	r2,zero,100473c <__sfvwrite_r+0xb0>
 100489c:	a469c83a 	sub	r20,r20,r17
 10048a0:	91c0030b 	ldhu	r7,12(r18)
 10048a4:	bcef883a 	add	r23,r23,r19
 10048a8:	a03fbe1e 	bne	r20,zero,10047a4 <__sfvwrite_r+0x118>
 10048ac:	adc00017 	ldw	r23,0(r21)
 10048b0:	ad000117 	ldw	r20,4(r21)
 10048b4:	ad400204 	addi	r21,r21,8
 10048b8:	003fb906 	br	10047a0 <__sfvwrite_r+0x114>
 10048bc:	ac400017 	ldw	r17,0(r21)
 10048c0:	ac000117 	ldw	r16,4(r21)
 10048c4:	ad400204 	addi	r21,r21,8
 10048c8:	003f8a06 	br	10046f4 <__sfvwrite_r+0x68>
 10048cc:	91400417 	ldw	r5,16(r18)
 10048d0:	e009883a 	mov	r4,fp
 10048d4:	10043780 	call	1004378 <_free_r>
 10048d8:	00800304 	movi	r2,12
 10048dc:	e0800015 	stw	r2,0(fp)
 10048e0:	9080030b 	ldhu	r2,12(r18)
 10048e4:	013fffc4 	movi	r4,-1
 10048e8:	10801014 	ori	r2,r2,64
 10048ec:	9080030d 	sth	r2,12(r18)
 10048f0:	003f9306 	br	1004740 <__sfvwrite_r+0xb4>
 10048f4:	0027883a 	mov	r19,zero
 10048f8:	002f883a 	mov	r23,zero
 10048fc:	d8000015 	stw	zero,0(sp)
 1004900:	0029883a 	mov	r20,zero
 1004904:	98001e26 	beq	r19,zero,1004980 <__sfvwrite_r+0x2f4>
 1004908:	d8c00017 	ldw	r3,0(sp)
 100490c:	1804c03a 	cmpne	r2,r3,zero
 1004910:	10005e26 	beq	r2,zero,1004a8c <__sfvwrite_r+0x400>
 1004914:	9821883a 	mov	r16,r19
 1004918:	a4c0012e 	bgeu	r20,r19,1004920 <__sfvwrite_r+0x294>
 100491c:	a021883a 	mov	r16,r20
 1004920:	91000017 	ldw	r4,0(r18)
 1004924:	90800417 	ldw	r2,16(r18)
 1004928:	91800217 	ldw	r6,8(r18)
 100492c:	91c00517 	ldw	r7,20(r18)
 1004930:	1100022e 	bgeu	r2,r4,100493c <__sfvwrite_r+0x2b0>
 1004934:	31e3883a 	add	r17,r6,r7
 1004938:	8c001616 	blt	r17,r16,1004994 <__sfvwrite_r+0x308>
 100493c:	81c03816 	blt	r16,r7,1004a20 <__sfvwrite_r+0x394>
 1004940:	90c00917 	ldw	r3,36(r18)
 1004944:	91400717 	ldw	r5,28(r18)
 1004948:	e009883a 	mov	r4,fp
 100494c:	b80d883a 	mov	r6,r23
 1004950:	183ee83a 	callr	r3
 1004954:	1023883a 	mov	r17,r2
 1004958:	00bfe10e 	bge	zero,r2,10048e0 <__sfvwrite_r+0x254>
 100495c:	a469c83a 	sub	r20,r20,r17
 1004960:	a0001826 	beq	r20,zero,10049c4 <__sfvwrite_r+0x338>
 1004964:	b0800217 	ldw	r2,8(r22)
 1004968:	1445c83a 	sub	r2,r2,r17
 100496c:	b0800215 	stw	r2,8(r22)
 1004970:	103f7226 	beq	r2,zero,100473c <__sfvwrite_r+0xb0>
 1004974:	9c67c83a 	sub	r19,r19,r17
 1004978:	bc6f883a 	add	r23,r23,r17
 100497c:	983fe21e 	bne	r19,zero,1004908 <__sfvwrite_r+0x27c>
 1004980:	adc00017 	ldw	r23,0(r21)
 1004984:	acc00117 	ldw	r19,4(r21)
 1004988:	ad400204 	addi	r21,r21,8
 100498c:	d8000015 	stw	zero,0(sp)
 1004990:	003fdc06 	br	1004904 <__sfvwrite_r+0x278>
 1004994:	b80b883a 	mov	r5,r23
 1004998:	880d883a 	mov	r6,r17
 100499c:	10057c40 	call	10057c4 <memmove>
 10049a0:	90c00017 	ldw	r3,0(r18)
 10049a4:	e009883a 	mov	r4,fp
 10049a8:	900b883a 	mov	r5,r18
 10049ac:	1c47883a 	add	r3,r3,r17
 10049b0:	90c00015 	stw	r3,0(r18)
 10049b4:	1003d280 	call	1003d28 <_fflush_r>
 10049b8:	103fc91e 	bne	r2,zero,10048e0 <__sfvwrite_r+0x254>
 10049bc:	a469c83a 	sub	r20,r20,r17
 10049c0:	a03fe81e 	bne	r20,zero,1004964 <__sfvwrite_r+0x2d8>
 10049c4:	e009883a 	mov	r4,fp
 10049c8:	900b883a 	mov	r5,r18
 10049cc:	1003d280 	call	1003d28 <_fflush_r>
 10049d0:	103fc31e 	bne	r2,zero,10048e0 <__sfvwrite_r+0x254>
 10049d4:	d8000015 	stw	zero,0(sp)
 10049d8:	003fe206 	br	1004964 <__sfvwrite_r+0x2d8>
 10049dc:	91000017 	ldw	r4,0(r18)
 10049e0:	90800417 	ldw	r2,16(r18)
 10049e4:	1100022e 	bgeu	r2,r4,10049f0 <__sfvwrite_r+0x364>
 10049e8:	8023883a 	mov	r17,r16
 10049ec:	85003136 	bltu	r16,r20,1004ab4 <__sfvwrite_r+0x428>
 10049f0:	91c00517 	ldw	r7,20(r18)
 10049f4:	a1c01836 	bltu	r20,r7,1004a58 <__sfvwrite_r+0x3cc>
 10049f8:	90c00917 	ldw	r3,36(r18)
 10049fc:	91400717 	ldw	r5,28(r18)
 1004a00:	e009883a 	mov	r4,fp
 1004a04:	b80d883a 	mov	r6,r23
 1004a08:	183ee83a 	callr	r3
 1004a0c:	1021883a 	mov	r16,r2
 1004a10:	00bfb30e 	bge	zero,r2,10048e0 <__sfvwrite_r+0x254>
 1004a14:	1023883a 	mov	r17,r2
 1004a18:	1027883a 	mov	r19,r2
 1004a1c:	003f9b06 	br	100488c <__sfvwrite_r+0x200>
 1004a20:	b80b883a 	mov	r5,r23
 1004a24:	800d883a 	mov	r6,r16
 1004a28:	10057c40 	call	10057c4 <memmove>
 1004a2c:	90c00217 	ldw	r3,8(r18)
 1004a30:	90800017 	ldw	r2,0(r18)
 1004a34:	8023883a 	mov	r17,r16
 1004a38:	1c07c83a 	sub	r3,r3,r16
 1004a3c:	1405883a 	add	r2,r2,r16
 1004a40:	90c00215 	stw	r3,8(r18)
 1004a44:	90800015 	stw	r2,0(r18)
 1004a48:	003fc406 	br	100495c <__sfvwrite_r+0x2d0>
 1004a4c:	a00d883a 	mov	r6,r20
 1004a50:	a021883a 	mov	r16,r20
 1004a54:	003f8106 	br	100485c <__sfvwrite_r+0x1d0>
 1004a58:	b80b883a 	mov	r5,r23
 1004a5c:	a00d883a 	mov	r6,r20
 1004a60:	10057c40 	call	10057c4 <memmove>
 1004a64:	90c00217 	ldw	r3,8(r18)
 1004a68:	90800017 	ldw	r2,0(r18)
 1004a6c:	a021883a 	mov	r16,r20
 1004a70:	1d07c83a 	sub	r3,r3,r20
 1004a74:	1505883a 	add	r2,r2,r20
 1004a78:	a023883a 	mov	r17,r20
 1004a7c:	a027883a 	mov	r19,r20
 1004a80:	90c00215 	stw	r3,8(r18)
 1004a84:	90800015 	stw	r2,0(r18)
 1004a88:	003f8006 	br	100488c <__sfvwrite_r+0x200>
 1004a8c:	b809883a 	mov	r4,r23
 1004a90:	01400284 	movi	r5,10
 1004a94:	980d883a 	mov	r6,r19
 1004a98:	10056400 	call	1005640 <memchr>
 1004a9c:	10001726 	beq	r2,zero,1004afc <__sfvwrite_r+0x470>
 1004aa0:	15c5c83a 	sub	r2,r2,r23
 1004aa4:	15000044 	addi	r20,r2,1
 1004aa8:	00800044 	movi	r2,1
 1004aac:	d8800015 	stw	r2,0(sp)
 1004ab0:	003f9806 	br	1004914 <__sfvwrite_r+0x288>
 1004ab4:	b80b883a 	mov	r5,r23
 1004ab8:	800d883a 	mov	r6,r16
 1004abc:	10057c40 	call	10057c4 <memmove>
 1004ac0:	90c00017 	ldw	r3,0(r18)
 1004ac4:	e009883a 	mov	r4,fp
 1004ac8:	900b883a 	mov	r5,r18
 1004acc:	1c07883a 	add	r3,r3,r16
 1004ad0:	90c00015 	stw	r3,0(r18)
 1004ad4:	8027883a 	mov	r19,r16
 1004ad8:	1003d280 	call	1003d28 <_fflush_r>
 1004adc:	103f6b26 	beq	r2,zero,100488c <__sfvwrite_r+0x200>
 1004ae0:	003f7f06 	br	10048e0 <__sfvwrite_r+0x254>
 1004ae4:	400b883a 	mov	r5,r8
 1004ae8:	e009883a 	mov	r4,fp
 1004aec:	10069c80 	call	10069c8 <_realloc_r>
 1004af0:	103f7626 	beq	r2,zero,10048cc <__sfvwrite_r+0x240>
 1004af4:	1023883a 	mov	r17,r2
 1004af8:	003f5006 	br	100483c <__sfvwrite_r+0x1b0>
 1004afc:	00c00044 	movi	r3,1
 1004b00:	9d000044 	addi	r20,r19,1
 1004b04:	d8c00015 	stw	r3,0(sp)
 1004b08:	003f8206 	br	1004914 <__sfvwrite_r+0x288>
 1004b0c:	9080030b 	ldhu	r2,12(r18)
 1004b10:	00c00244 	movi	r3,9
 1004b14:	013fffc4 	movi	r4,-1
 1004b18:	10801014 	ori	r2,r2,64
 1004b1c:	9080030d 	sth	r2,12(r18)
 1004b20:	e0c00015 	stw	r3,0(fp)
 1004b24:	003f0606 	br	1004740 <__sfvwrite_r+0xb4>

01004b28 <_fwalk_reent>:
 1004b28:	defff704 	addi	sp,sp,-36
 1004b2c:	dcc00315 	stw	r19,12(sp)
 1004b30:	24c0b804 	addi	r19,r4,736
 1004b34:	dd800615 	stw	r22,24(sp)
 1004b38:	dd400515 	stw	r21,20(sp)
 1004b3c:	dfc00815 	stw	ra,32(sp)
 1004b40:	ddc00715 	stw	r23,28(sp)
 1004b44:	dd000415 	stw	r20,16(sp)
 1004b48:	dc800215 	stw	r18,8(sp)
 1004b4c:	dc400115 	stw	r17,4(sp)
 1004b50:	dc000015 	stw	r16,0(sp)
 1004b54:	202b883a 	mov	r21,r4
 1004b58:	282d883a 	mov	r22,r5
 1004b5c:	1003fb00 	call	1003fb0 <__sfp_lock_acquire>
 1004b60:	98002126 	beq	r19,zero,1004be8 <_fwalk_reent+0xc0>
 1004b64:	002f883a 	mov	r23,zero
 1004b68:	9c800117 	ldw	r18,4(r19)
 1004b6c:	9c000217 	ldw	r16,8(r19)
 1004b70:	90bfffc4 	addi	r2,r18,-1
 1004b74:	10000d16 	blt	r2,zero,1004bac <_fwalk_reent+0x84>
 1004b78:	0023883a 	mov	r17,zero
 1004b7c:	053fffc4 	movi	r20,-1
 1004b80:	8080030f 	ldh	r2,12(r16)
 1004b84:	8c400044 	addi	r17,r17,1
 1004b88:	10000626 	beq	r2,zero,1004ba4 <_fwalk_reent+0x7c>
 1004b8c:	8080038f 	ldh	r2,14(r16)
 1004b90:	800b883a 	mov	r5,r16
 1004b94:	a809883a 	mov	r4,r21
 1004b98:	15000226 	beq	r2,r20,1004ba4 <_fwalk_reent+0x7c>
 1004b9c:	b03ee83a 	callr	r22
 1004ba0:	b8aeb03a 	or	r23,r23,r2
 1004ba4:	84001704 	addi	r16,r16,92
 1004ba8:	947ff51e 	bne	r18,r17,1004b80 <_fwalk_reent+0x58>
 1004bac:	9cc00017 	ldw	r19,0(r19)
 1004bb0:	983fed1e 	bne	r19,zero,1004b68 <_fwalk_reent+0x40>
 1004bb4:	1003fb40 	call	1003fb4 <__sfp_lock_release>
 1004bb8:	b805883a 	mov	r2,r23
 1004bbc:	dfc00817 	ldw	ra,32(sp)
 1004bc0:	ddc00717 	ldw	r23,28(sp)
 1004bc4:	dd800617 	ldw	r22,24(sp)
 1004bc8:	dd400517 	ldw	r21,20(sp)
 1004bcc:	dd000417 	ldw	r20,16(sp)
 1004bd0:	dcc00317 	ldw	r19,12(sp)
 1004bd4:	dc800217 	ldw	r18,8(sp)
 1004bd8:	dc400117 	ldw	r17,4(sp)
 1004bdc:	dc000017 	ldw	r16,0(sp)
 1004be0:	dec00904 	addi	sp,sp,36
 1004be4:	f800283a 	ret
 1004be8:	002f883a 	mov	r23,zero
 1004bec:	003ff106 	br	1004bb4 <_fwalk_reent+0x8c>

01004bf0 <_fwalk>:
 1004bf0:	defff804 	addi	sp,sp,-32
 1004bf4:	dcc00315 	stw	r19,12(sp)
 1004bf8:	24c0b804 	addi	r19,r4,736
 1004bfc:	dd400515 	stw	r21,20(sp)
 1004c00:	dfc00715 	stw	ra,28(sp)
 1004c04:	dd800615 	stw	r22,24(sp)
 1004c08:	dd000415 	stw	r20,16(sp)
 1004c0c:	dc800215 	stw	r18,8(sp)
 1004c10:	dc400115 	stw	r17,4(sp)
 1004c14:	dc000015 	stw	r16,0(sp)
 1004c18:	282b883a 	mov	r21,r5
 1004c1c:	1003fb00 	call	1003fb0 <__sfp_lock_acquire>
 1004c20:	98001f26 	beq	r19,zero,1004ca0 <_fwalk+0xb0>
 1004c24:	002d883a 	mov	r22,zero
 1004c28:	9c800117 	ldw	r18,4(r19)
 1004c2c:	9c000217 	ldw	r16,8(r19)
 1004c30:	90bfffc4 	addi	r2,r18,-1
 1004c34:	10000c16 	blt	r2,zero,1004c68 <_fwalk+0x78>
 1004c38:	0023883a 	mov	r17,zero
 1004c3c:	053fffc4 	movi	r20,-1
 1004c40:	8080030f 	ldh	r2,12(r16)
 1004c44:	8c400044 	addi	r17,r17,1
 1004c48:	10000526 	beq	r2,zero,1004c60 <_fwalk+0x70>
 1004c4c:	8080038f 	ldh	r2,14(r16)
 1004c50:	8009883a 	mov	r4,r16
 1004c54:	15000226 	beq	r2,r20,1004c60 <_fwalk+0x70>
 1004c58:	a83ee83a 	callr	r21
 1004c5c:	b0acb03a 	or	r22,r22,r2
 1004c60:	84001704 	addi	r16,r16,92
 1004c64:	947ff61e 	bne	r18,r17,1004c40 <_fwalk+0x50>
 1004c68:	9cc00017 	ldw	r19,0(r19)
 1004c6c:	983fee1e 	bne	r19,zero,1004c28 <_fwalk+0x38>
 1004c70:	1003fb40 	call	1003fb4 <__sfp_lock_release>
 1004c74:	b005883a 	mov	r2,r22
 1004c78:	dfc00717 	ldw	ra,28(sp)
 1004c7c:	dd800617 	ldw	r22,24(sp)
 1004c80:	dd400517 	ldw	r21,20(sp)
 1004c84:	dd000417 	ldw	r20,16(sp)
 1004c88:	dcc00317 	ldw	r19,12(sp)
 1004c8c:	dc800217 	ldw	r18,8(sp)
 1004c90:	dc400117 	ldw	r17,4(sp)
 1004c94:	dc000017 	ldw	r16,0(sp)
 1004c98:	dec00804 	addi	sp,sp,32
 1004c9c:	f800283a 	ret
 1004ca0:	002d883a 	mov	r22,zero
 1004ca4:	003ff206 	br	1004c70 <_fwalk+0x80>

01004ca8 <__locale_charset>:
 1004ca8:	d0a00317 	ldw	r2,-32756(gp)
 1004cac:	f800283a 	ret

01004cb0 <_localeconv_r>:
 1004cb0:	00804074 	movhi	r2,257
 1004cb4:	108aa604 	addi	r2,r2,10904
 1004cb8:	f800283a 	ret

01004cbc <localeconv>:
 1004cbc:	00804074 	movhi	r2,257
 1004cc0:	10922404 	addi	r2,r2,18576
 1004cc4:	11000017 	ldw	r4,0(r2)
 1004cc8:	1004cb01 	jmpi	1004cb0 <_localeconv_r>

01004ccc <_setlocale_r>:
 1004ccc:	defffc04 	addi	sp,sp,-16
 1004cd0:	00c04074 	movhi	r3,257
 1004cd4:	18caa104 	addi	r3,r3,10884
 1004cd8:	dc800215 	stw	r18,8(sp)
 1004cdc:	dc400115 	stw	r17,4(sp)
 1004ce0:	dc000015 	stw	r16,0(sp)
 1004ce4:	2023883a 	mov	r17,r4
 1004ce8:	2825883a 	mov	r18,r5
 1004cec:	dfc00315 	stw	ra,12(sp)
 1004cf0:	3021883a 	mov	r16,r6
 1004cf4:	3009883a 	mov	r4,r6
 1004cf8:	180b883a 	mov	r5,r3
 1004cfc:	30000926 	beq	r6,zero,1004d24 <_setlocale_r+0x58>
 1004d00:	10071e80 	call	10071e8 <strcmp>
 1004d04:	8009883a 	mov	r4,r16
 1004d08:	01404074 	movhi	r5,257
 1004d0c:	294b7e04 	addi	r5,r5,11768
 1004d10:	10000b1e 	bne	r2,zero,1004d40 <_setlocale_r+0x74>
 1004d14:	8c000d15 	stw	r16,52(r17)
 1004d18:	8c800c15 	stw	r18,48(r17)
 1004d1c:	00c04074 	movhi	r3,257
 1004d20:	18caa104 	addi	r3,r3,10884
 1004d24:	1805883a 	mov	r2,r3
 1004d28:	dfc00317 	ldw	ra,12(sp)
 1004d2c:	dc800217 	ldw	r18,8(sp)
 1004d30:	dc400117 	ldw	r17,4(sp)
 1004d34:	dc000017 	ldw	r16,0(sp)
 1004d38:	dec00404 	addi	sp,sp,16
 1004d3c:	f800283a 	ret
 1004d40:	10071e80 	call	10071e8 <strcmp>
 1004d44:	0007883a 	mov	r3,zero
 1004d48:	103ff226 	beq	r2,zero,1004d14 <_setlocale_r+0x48>
 1004d4c:	003ff506 	br	1004d24 <_setlocale_r+0x58>

01004d50 <setlocale>:
 1004d50:	01804074 	movhi	r6,257
 1004d54:	31922404 	addi	r6,r6,18576
 1004d58:	2007883a 	mov	r3,r4
 1004d5c:	31000017 	ldw	r4,0(r6)
 1004d60:	280d883a 	mov	r6,r5
 1004d64:	180b883a 	mov	r5,r3
 1004d68:	1004ccc1 	jmpi	1004ccc <_setlocale_r>

01004d6c <__smakebuf_r>:
 1004d6c:	2880030b 	ldhu	r2,12(r5)
 1004d70:	deffed04 	addi	sp,sp,-76
 1004d74:	dc401015 	stw	r17,64(sp)
 1004d78:	1080008c 	andi	r2,r2,2
 1004d7c:	dc000f15 	stw	r16,60(sp)
 1004d80:	dfc01215 	stw	ra,72(sp)
 1004d84:	dc801115 	stw	r18,68(sp)
 1004d88:	2821883a 	mov	r16,r5
 1004d8c:	2023883a 	mov	r17,r4
 1004d90:	10000b26 	beq	r2,zero,1004dc0 <__smakebuf_r+0x54>
 1004d94:	28c010c4 	addi	r3,r5,67
 1004d98:	00800044 	movi	r2,1
 1004d9c:	28800515 	stw	r2,20(r5)
 1004da0:	28c00415 	stw	r3,16(r5)
 1004da4:	28c00015 	stw	r3,0(r5)
 1004da8:	dfc01217 	ldw	ra,72(sp)
 1004dac:	dc801117 	ldw	r18,68(sp)
 1004db0:	dc401017 	ldw	r17,64(sp)
 1004db4:	dc000f17 	ldw	r16,60(sp)
 1004db8:	dec01304 	addi	sp,sp,76
 1004dbc:	f800283a 	ret
 1004dc0:	2940038f 	ldh	r5,14(r5)
 1004dc4:	28002116 	blt	r5,zero,1004e4c <__smakebuf_r+0xe0>
 1004dc8:	d80d883a 	mov	r6,sp
 1004dcc:	10075780 	call	1007578 <_fstat_r>
 1004dd0:	10001e16 	blt	r2,zero,1004e4c <__smakebuf_r+0xe0>
 1004dd4:	d8800117 	ldw	r2,4(sp)
 1004dd8:	00e00014 	movui	r3,32768
 1004ddc:	113c000c 	andi	r4,r2,61440
 1004de0:	20c03126 	beq	r4,r3,1004ea8 <__smakebuf_r+0x13c>
 1004de4:	8080030b 	ldhu	r2,12(r16)
 1004de8:	00c80004 	movi	r3,8192
 1004dec:	10820014 	ori	r2,r2,2048
 1004df0:	8080030d 	sth	r2,12(r16)
 1004df4:	20c01e26 	beq	r4,r3,1004e70 <__smakebuf_r+0x104>
 1004df8:	04810004 	movi	r18,1024
 1004dfc:	8809883a 	mov	r4,r17
 1004e00:	900b883a 	mov	r5,r18
 1004e04:	1004f000 	call	1004f00 <_malloc_r>
 1004e08:	1009883a 	mov	r4,r2
 1004e0c:	10003126 	beq	r2,zero,1004ed4 <__smakebuf_r+0x168>
 1004e10:	80c0030b 	ldhu	r3,12(r16)
 1004e14:	00804034 	movhi	r2,256
 1004e18:	10902904 	addi	r2,r2,16548
 1004e1c:	88800f15 	stw	r2,60(r17)
 1004e20:	18c02014 	ori	r3,r3,128
 1004e24:	84800515 	stw	r18,20(r16)
 1004e28:	80c0030d 	sth	r3,12(r16)
 1004e2c:	81000415 	stw	r4,16(r16)
 1004e30:	81000015 	stw	r4,0(r16)
 1004e34:	dfc01217 	ldw	ra,72(sp)
 1004e38:	dc801117 	ldw	r18,68(sp)
 1004e3c:	dc401017 	ldw	r17,64(sp)
 1004e40:	dc000f17 	ldw	r16,60(sp)
 1004e44:	dec01304 	addi	sp,sp,76
 1004e48:	f800283a 	ret
 1004e4c:	80c0030b 	ldhu	r3,12(r16)
 1004e50:	1880200c 	andi	r2,r3,128
 1004e54:	10000426 	beq	r2,zero,1004e68 <__smakebuf_r+0xfc>
 1004e58:	04801004 	movi	r18,64
 1004e5c:	18820014 	ori	r2,r3,2048
 1004e60:	8080030d 	sth	r2,12(r16)
 1004e64:	003fe506 	br	1004dfc <__smakebuf_r+0x90>
 1004e68:	04810004 	movi	r18,1024
 1004e6c:	003ffb06 	br	1004e5c <__smakebuf_r+0xf0>
 1004e70:	8140038f 	ldh	r5,14(r16)
 1004e74:	8809883a 	mov	r4,r17
 1004e78:	10075ec0 	call	10075ec <_isatty_r>
 1004e7c:	103fde26 	beq	r2,zero,1004df8 <__smakebuf_r+0x8c>
 1004e80:	8080030b 	ldhu	r2,12(r16)
 1004e84:	80c010c4 	addi	r3,r16,67
 1004e88:	04810004 	movi	r18,1024
 1004e8c:	10800054 	ori	r2,r2,1
 1004e90:	8080030d 	sth	r2,12(r16)
 1004e94:	00800044 	movi	r2,1
 1004e98:	80c00415 	stw	r3,16(r16)
 1004e9c:	80800515 	stw	r2,20(r16)
 1004ea0:	80c00015 	stw	r3,0(r16)
 1004ea4:	003fd506 	br	1004dfc <__smakebuf_r+0x90>
 1004ea8:	80c00a17 	ldw	r3,40(r16)
 1004eac:	00804034 	movhi	r2,256
 1004eb0:	109c2904 	addi	r2,r2,28836
 1004eb4:	18bfcb1e 	bne	r3,r2,1004de4 <__smakebuf_r+0x78>
 1004eb8:	8080030b 	ldhu	r2,12(r16)
 1004ebc:	00c10004 	movi	r3,1024
 1004ec0:	1825883a 	mov	r18,r3
 1004ec4:	10c4b03a 	or	r2,r2,r3
 1004ec8:	8080030d 	sth	r2,12(r16)
 1004ecc:	80c01315 	stw	r3,76(r16)
 1004ed0:	003fca06 	br	1004dfc <__smakebuf_r+0x90>
 1004ed4:	8100030b 	ldhu	r4,12(r16)
 1004ed8:	2080800c 	andi	r2,r4,512
 1004edc:	103fb21e 	bne	r2,zero,1004da8 <__smakebuf_r+0x3c>
 1004ee0:	80c010c4 	addi	r3,r16,67
 1004ee4:	21000094 	ori	r4,r4,2
 1004ee8:	00800044 	movi	r2,1
 1004eec:	80800515 	stw	r2,20(r16)
 1004ef0:	8100030d 	sth	r4,12(r16)
 1004ef4:	80c00415 	stw	r3,16(r16)
 1004ef8:	80c00015 	stw	r3,0(r16)
 1004efc:	003faa06 	br	1004da8 <__smakebuf_r+0x3c>

01004f00 <_malloc_r>:
 1004f00:	defff604 	addi	sp,sp,-40
 1004f04:	28c002c4 	addi	r3,r5,11
 1004f08:	00800584 	movi	r2,22
 1004f0c:	dc800215 	stw	r18,8(sp)
 1004f10:	dfc00915 	stw	ra,36(sp)
 1004f14:	df000815 	stw	fp,32(sp)
 1004f18:	ddc00715 	stw	r23,28(sp)
 1004f1c:	dd800615 	stw	r22,24(sp)
 1004f20:	dd400515 	stw	r21,20(sp)
 1004f24:	dd000415 	stw	r20,16(sp)
 1004f28:	dcc00315 	stw	r19,12(sp)
 1004f2c:	dc400115 	stw	r17,4(sp)
 1004f30:	dc000015 	stw	r16,0(sp)
 1004f34:	2025883a 	mov	r18,r4
 1004f38:	10c01236 	bltu	r2,r3,1004f84 <_malloc_r+0x84>
 1004f3c:	04400404 	movi	r17,16
 1004f40:	8940142e 	bgeu	r17,r5,1004f94 <_malloc_r+0x94>
 1004f44:	00800304 	movi	r2,12
 1004f48:	0007883a 	mov	r3,zero
 1004f4c:	90800015 	stw	r2,0(r18)
 1004f50:	1805883a 	mov	r2,r3
 1004f54:	dfc00917 	ldw	ra,36(sp)
 1004f58:	df000817 	ldw	fp,32(sp)
 1004f5c:	ddc00717 	ldw	r23,28(sp)
 1004f60:	dd800617 	ldw	r22,24(sp)
 1004f64:	dd400517 	ldw	r21,20(sp)
 1004f68:	dd000417 	ldw	r20,16(sp)
 1004f6c:	dcc00317 	ldw	r19,12(sp)
 1004f70:	dc800217 	ldw	r18,8(sp)
 1004f74:	dc400117 	ldw	r17,4(sp)
 1004f78:	dc000017 	ldw	r16,0(sp)
 1004f7c:	dec00a04 	addi	sp,sp,40
 1004f80:	f800283a 	ret
 1004f84:	00bffe04 	movi	r2,-8
 1004f88:	18a2703a 	and	r17,r3,r2
 1004f8c:	883fed16 	blt	r17,zero,1004f44 <_malloc_r+0x44>
 1004f90:	897fec36 	bltu	r17,r5,1004f44 <_malloc_r+0x44>
 1004f94:	9009883a 	mov	r4,r18
 1004f98:	100a4140 	call	100a414 <__malloc_lock>
 1004f9c:	00807dc4 	movi	r2,503
 1004fa0:	14402b2e 	bgeu	r2,r17,1005050 <_malloc_r+0x150>
 1004fa4:	8806d27a 	srli	r3,r17,9
 1004fa8:	18003f1e 	bne	r3,zero,10050a8 <_malloc_r+0x1a8>
 1004fac:	880cd0fa 	srli	r6,r17,3
 1004fb0:	300490fa 	slli	r2,r6,3
 1004fb4:	02c04074 	movhi	r11,257
 1004fb8:	5acc8a04 	addi	r11,r11,12840
 1004fbc:	12cb883a 	add	r5,r2,r11
 1004fc0:	2c000317 	ldw	r16,12(r5)
 1004fc4:	580f883a 	mov	r7,r11
 1004fc8:	2c00041e 	bne	r5,r16,1004fdc <_malloc_r+0xdc>
 1004fcc:	00000a06 	br	1004ff8 <_malloc_r+0xf8>
 1004fd0:	1800860e 	bge	r3,zero,10051ec <_malloc_r+0x2ec>
 1004fd4:	84000317 	ldw	r16,12(r16)
 1004fd8:	2c000726 	beq	r5,r16,1004ff8 <_malloc_r+0xf8>
 1004fdc:	80800117 	ldw	r2,4(r16)
 1004fe0:	00ffff04 	movi	r3,-4
 1004fe4:	10c8703a 	and	r4,r2,r3
 1004fe8:	2447c83a 	sub	r3,r4,r17
 1004fec:	008003c4 	movi	r2,15
 1004ff0:	10fff70e 	bge	r2,r3,1004fd0 <_malloc_r+0xd0>
 1004ff4:	31bfffc4 	addi	r6,r6,-1
 1004ff8:	32400044 	addi	r9,r6,1
 1004ffc:	02804074 	movhi	r10,257
 1005000:	528c8c04 	addi	r10,r10,12848
 1005004:	54000217 	ldw	r16,8(r10)
 1005008:	8280a026 	beq	r16,r10,100528c <_malloc_r+0x38c>
 100500c:	80800117 	ldw	r2,4(r16)
 1005010:	00ffff04 	movi	r3,-4
 1005014:	10ca703a 	and	r5,r2,r3
 1005018:	2c4dc83a 	sub	r6,r5,r17
 100501c:	008003c4 	movi	r2,15
 1005020:	11808316 	blt	r2,r6,1005230 <_malloc_r+0x330>
 1005024:	52800315 	stw	r10,12(r10)
 1005028:	52800215 	stw	r10,8(r10)
 100502c:	30002916 	blt	r6,zero,10050d4 <_malloc_r+0x1d4>
 1005030:	8147883a 	add	r3,r16,r5
 1005034:	18800117 	ldw	r2,4(r3)
 1005038:	9009883a 	mov	r4,r18
 100503c:	10800054 	ori	r2,r2,1
 1005040:	18800115 	stw	r2,4(r3)
 1005044:	100a4340 	call	100a434 <__malloc_unlock>
 1005048:	80c00204 	addi	r3,r16,8
 100504c:	003fc006 	br	1004f50 <_malloc_r+0x50>
 1005050:	02c04074 	movhi	r11,257
 1005054:	5acc8a04 	addi	r11,r11,12840
 1005058:	8ac5883a 	add	r2,r17,r11
 100505c:	14000317 	ldw	r16,12(r2)
 1005060:	580f883a 	mov	r7,r11
 1005064:	8806d0fa 	srli	r3,r17,3
 1005068:	14006c26 	beq	r2,r16,100521c <_malloc_r+0x31c>
 100506c:	80c00117 	ldw	r3,4(r16)
 1005070:	00bfff04 	movi	r2,-4
 1005074:	81800317 	ldw	r6,12(r16)
 1005078:	1886703a 	and	r3,r3,r2
 100507c:	80c7883a 	add	r3,r16,r3
 1005080:	18800117 	ldw	r2,4(r3)
 1005084:	81400217 	ldw	r5,8(r16)
 1005088:	9009883a 	mov	r4,r18
 100508c:	10800054 	ori	r2,r2,1
 1005090:	18800115 	stw	r2,4(r3)
 1005094:	31400215 	stw	r5,8(r6)
 1005098:	29800315 	stw	r6,12(r5)
 100509c:	100a4340 	call	100a434 <__malloc_unlock>
 10050a0:	80c00204 	addi	r3,r16,8
 10050a4:	003faa06 	br	1004f50 <_malloc_r+0x50>
 10050a8:	00800104 	movi	r2,4
 10050ac:	10c0052e 	bgeu	r2,r3,10050c4 <_malloc_r+0x1c4>
 10050b0:	00800504 	movi	r2,20
 10050b4:	10c07836 	bltu	r2,r3,1005298 <_malloc_r+0x398>
 10050b8:	198016c4 	addi	r6,r3,91
 10050bc:	300490fa 	slli	r2,r6,3
 10050c0:	003fbc06 	br	1004fb4 <_malloc_r+0xb4>
 10050c4:	8804d1ba 	srli	r2,r17,6
 10050c8:	11800e04 	addi	r6,r2,56
 10050cc:	300490fa 	slli	r2,r6,3
 10050d0:	003fb806 	br	1004fb4 <_malloc_r+0xb4>
 10050d4:	00807fc4 	movi	r2,511
 10050d8:	1140bb36 	bltu	r2,r5,10053c8 <_malloc_r+0x4c8>
 10050dc:	2806d0fa 	srli	r3,r5,3
 10050e0:	573ffe04 	addi	fp,r10,-8
 10050e4:	00800044 	movi	r2,1
 10050e8:	180890fa 	slli	r4,r3,3
 10050ec:	1807d0ba 	srai	r3,r3,2
 10050f0:	e1c00117 	ldw	r7,4(fp)
 10050f4:	5909883a 	add	r4,r11,r4
 10050f8:	21400217 	ldw	r5,8(r4)
 10050fc:	10c4983a 	sll	r2,r2,r3
 1005100:	81000315 	stw	r4,12(r16)
 1005104:	81400215 	stw	r5,8(r16)
 1005108:	388eb03a 	or	r7,r7,r2
 100510c:	2c000315 	stw	r16,12(r5)
 1005110:	24000215 	stw	r16,8(r4)
 1005114:	e1c00115 	stw	r7,4(fp)
 1005118:	4807883a 	mov	r3,r9
 100511c:	4800cd16 	blt	r9,zero,1005454 <_malloc_r+0x554>
 1005120:	1807d0ba 	srai	r3,r3,2
 1005124:	00800044 	movi	r2,1
 1005128:	10c8983a 	sll	r4,r2,r3
 100512c:	39004436 	bltu	r7,r4,1005240 <_malloc_r+0x340>
 1005130:	21c4703a 	and	r2,r4,r7
 1005134:	10000a1e 	bne	r2,zero,1005160 <_malloc_r+0x260>
 1005138:	2109883a 	add	r4,r4,r4
 100513c:	00bfff04 	movi	r2,-4
 1005140:	4884703a 	and	r2,r9,r2
 1005144:	3906703a 	and	r3,r7,r4
 1005148:	12400104 	addi	r9,r2,4
 100514c:	1800041e 	bne	r3,zero,1005160 <_malloc_r+0x260>
 1005150:	2109883a 	add	r4,r4,r4
 1005154:	3904703a 	and	r2,r7,r4
 1005158:	4a400104 	addi	r9,r9,4
 100515c:	103ffc26 	beq	r2,zero,1005150 <_malloc_r+0x250>
 1005160:	480490fa 	slli	r2,r9,3
 1005164:	4819883a 	mov	r12,r9
 1005168:	023fff04 	movi	r8,-4
 100516c:	589b883a 	add	r13,r11,r2
 1005170:	6807883a 	mov	r3,r13
 1005174:	014003c4 	movi	r5,15
 1005178:	1c000317 	ldw	r16,12(r3)
 100517c:	1c00041e 	bne	r3,r16,1005190 <_malloc_r+0x290>
 1005180:	0000a706 	br	1005420 <_malloc_r+0x520>
 1005184:	3000ab0e 	bge	r6,zero,1005434 <_malloc_r+0x534>
 1005188:	84000317 	ldw	r16,12(r16)
 100518c:	1c00a426 	beq	r3,r16,1005420 <_malloc_r+0x520>
 1005190:	80800117 	ldw	r2,4(r16)
 1005194:	1204703a 	and	r2,r2,r8
 1005198:	144dc83a 	sub	r6,r2,r17
 100519c:	29bff90e 	bge	r5,r6,1005184 <_malloc_r+0x284>
 10051a0:	81000317 	ldw	r4,12(r16)
 10051a4:	80c00217 	ldw	r3,8(r16)
 10051a8:	89400054 	ori	r5,r17,1
 10051ac:	8445883a 	add	r2,r16,r17
 10051b0:	20c00215 	stw	r3,8(r4)
 10051b4:	19000315 	stw	r4,12(r3)
 10051b8:	81400115 	stw	r5,4(r16)
 10051bc:	1187883a 	add	r3,r2,r6
 10051c0:	31000054 	ori	r4,r6,1
 10051c4:	50800315 	stw	r2,12(r10)
 10051c8:	50800215 	stw	r2,8(r10)
 10051cc:	19800015 	stw	r6,0(r3)
 10051d0:	11000115 	stw	r4,4(r2)
 10051d4:	12800215 	stw	r10,8(r2)
 10051d8:	12800315 	stw	r10,12(r2)
 10051dc:	9009883a 	mov	r4,r18
 10051e0:	100a4340 	call	100a434 <__malloc_unlock>
 10051e4:	80c00204 	addi	r3,r16,8
 10051e8:	003f5906 	br	1004f50 <_malloc_r+0x50>
 10051ec:	8109883a 	add	r4,r16,r4
 10051f0:	20800117 	ldw	r2,4(r4)
 10051f4:	80c00217 	ldw	r3,8(r16)
 10051f8:	81400317 	ldw	r5,12(r16)
 10051fc:	10800054 	ori	r2,r2,1
 1005200:	20800115 	stw	r2,4(r4)
 1005204:	28c00215 	stw	r3,8(r5)
 1005208:	19400315 	stw	r5,12(r3)
 100520c:	9009883a 	mov	r4,r18
 1005210:	100a4340 	call	100a434 <__malloc_unlock>
 1005214:	80c00204 	addi	r3,r16,8
 1005218:	003f4d06 	br	1004f50 <_malloc_r+0x50>
 100521c:	80800204 	addi	r2,r16,8
 1005220:	14000317 	ldw	r16,12(r2)
 1005224:	143f911e 	bne	r2,r16,100506c <_malloc_r+0x16c>
 1005228:	1a400084 	addi	r9,r3,2
 100522c:	003f7306 	br	1004ffc <_malloc_r+0xfc>
 1005230:	88c00054 	ori	r3,r17,1
 1005234:	8445883a 	add	r2,r16,r17
 1005238:	80c00115 	stw	r3,4(r16)
 100523c:	003fdf06 	br	10051bc <_malloc_r+0x2bc>
 1005240:	e4000217 	ldw	r16,8(fp)
 1005244:	00bfff04 	movi	r2,-4
 1005248:	80c00117 	ldw	r3,4(r16)
 100524c:	802d883a 	mov	r22,r16
 1005250:	18aa703a 	and	r21,r3,r2
 1005254:	ac401636 	bltu	r21,r17,10052b0 <_malloc_r+0x3b0>
 1005258:	ac49c83a 	sub	r4,r21,r17
 100525c:	008003c4 	movi	r2,15
 1005260:	1100130e 	bge	r2,r4,10052b0 <_malloc_r+0x3b0>
 1005264:	88800054 	ori	r2,r17,1
 1005268:	8447883a 	add	r3,r16,r17
 100526c:	80800115 	stw	r2,4(r16)
 1005270:	20800054 	ori	r2,r4,1
 1005274:	18800115 	stw	r2,4(r3)
 1005278:	e0c00215 	stw	r3,8(fp)
 100527c:	9009883a 	mov	r4,r18
 1005280:	100a4340 	call	100a434 <__malloc_unlock>
 1005284:	80c00204 	addi	r3,r16,8
 1005288:	003f3106 	br	1004f50 <_malloc_r+0x50>
 100528c:	39c00117 	ldw	r7,4(r7)
 1005290:	573ffe04 	addi	fp,r10,-8
 1005294:	003fa006 	br	1005118 <_malloc_r+0x218>
 1005298:	00801504 	movi	r2,84
 100529c:	10c06736 	bltu	r2,r3,100543c <_malloc_r+0x53c>
 10052a0:	8804d33a 	srli	r2,r17,12
 10052a4:	11801b84 	addi	r6,r2,110
 10052a8:	300490fa 	slli	r2,r6,3
 10052ac:	003f4106 	br	1004fb4 <_malloc_r+0xb4>
 10052b0:	d0a6c017 	ldw	r2,-25856(gp)
 10052b4:	d0e00517 	ldw	r3,-32748(gp)
 10052b8:	053fffc4 	movi	r20,-1
 10052bc:	10800404 	addi	r2,r2,16
 10052c0:	88a7883a 	add	r19,r17,r2
 10052c4:	1d000326 	beq	r3,r20,10052d4 <_malloc_r+0x3d4>
 10052c8:	98c3ffc4 	addi	r3,r19,4095
 10052cc:	00bc0004 	movi	r2,-4096
 10052d0:	18a6703a 	and	r19,r3,r2
 10052d4:	9009883a 	mov	r4,r18
 10052d8:	980b883a 	mov	r5,r19
 10052dc:	100702c0 	call	100702c <_sbrk_r>
 10052e0:	1009883a 	mov	r4,r2
 10052e4:	15000426 	beq	r2,r20,10052f8 <_malloc_r+0x3f8>
 10052e8:	854b883a 	add	r5,r16,r21
 10052ec:	1029883a 	mov	r20,r2
 10052f0:	11405a2e 	bgeu	r2,r5,100545c <_malloc_r+0x55c>
 10052f4:	87000c26 	beq	r16,fp,1005328 <_malloc_r+0x428>
 10052f8:	e4000217 	ldw	r16,8(fp)
 10052fc:	80c00117 	ldw	r3,4(r16)
 1005300:	00bfff04 	movi	r2,-4
 1005304:	1884703a 	and	r2,r3,r2
 1005308:	14400336 	bltu	r2,r17,1005318 <_malloc_r+0x418>
 100530c:	1449c83a 	sub	r4,r2,r17
 1005310:	008003c4 	movi	r2,15
 1005314:	113fd316 	blt	r2,r4,1005264 <_malloc_r+0x364>
 1005318:	9009883a 	mov	r4,r18
 100531c:	100a4340 	call	100a434 <__malloc_unlock>
 1005320:	0007883a 	mov	r3,zero
 1005324:	003f0a06 	br	1004f50 <_malloc_r+0x50>
 1005328:	05c04074 	movhi	r23,257
 100532c:	bdd8fb04 	addi	r23,r23,25580
 1005330:	b8800017 	ldw	r2,0(r23)
 1005334:	988d883a 	add	r6,r19,r2
 1005338:	b9800015 	stw	r6,0(r23)
 100533c:	d0e00517 	ldw	r3,-32748(gp)
 1005340:	00bfffc4 	movi	r2,-1
 1005344:	18808e26 	beq	r3,r2,1005580 <_malloc_r+0x680>
 1005348:	2145c83a 	sub	r2,r4,r5
 100534c:	3085883a 	add	r2,r6,r2
 1005350:	b8800015 	stw	r2,0(r23)
 1005354:	20c001cc 	andi	r3,r4,7
 1005358:	18005f1e 	bne	r3,zero,10054d8 <_malloc_r+0x5d8>
 100535c:	000b883a 	mov	r5,zero
 1005360:	a4c5883a 	add	r2,r20,r19
 1005364:	1083ffcc 	andi	r2,r2,4095
 1005368:	00c40004 	movi	r3,4096
 100536c:	1887c83a 	sub	r3,r3,r2
 1005370:	28e7883a 	add	r19,r5,r3
 1005374:	9009883a 	mov	r4,r18
 1005378:	980b883a 	mov	r5,r19
 100537c:	100702c0 	call	100702c <_sbrk_r>
 1005380:	1007883a 	mov	r3,r2
 1005384:	00bfffc4 	movi	r2,-1
 1005388:	18807a26 	beq	r3,r2,1005574 <_malloc_r+0x674>
 100538c:	1d05c83a 	sub	r2,r3,r20
 1005390:	9885883a 	add	r2,r19,r2
 1005394:	10c00054 	ori	r3,r2,1
 1005398:	b8800017 	ldw	r2,0(r23)
 100539c:	a021883a 	mov	r16,r20
 10053a0:	a0c00115 	stw	r3,4(r20)
 10053a4:	9885883a 	add	r2,r19,r2
 10053a8:	b8800015 	stw	r2,0(r23)
 10053ac:	e5000215 	stw	r20,8(fp)
 10053b0:	b7003626 	beq	r22,fp,100548c <_malloc_r+0x58c>
 10053b4:	018003c4 	movi	r6,15
 10053b8:	35404b36 	bltu	r6,r21,10054e8 <_malloc_r+0x5e8>
 10053bc:	00800044 	movi	r2,1
 10053c0:	a0800115 	stw	r2,4(r20)
 10053c4:	003fcd06 	br	10052fc <_malloc_r+0x3fc>
 10053c8:	2808d27a 	srli	r4,r5,9
 10053cc:	2000371e 	bne	r4,zero,10054ac <_malloc_r+0x5ac>
 10053d0:	2808d0fa 	srli	r4,r5,3
 10053d4:	200690fa 	slli	r3,r4,3
 10053d8:	1ad1883a 	add	r8,r3,r11
 10053dc:	41800217 	ldw	r6,8(r8)
 10053e0:	41805b26 	beq	r8,r6,1005550 <_malloc_r+0x650>
 10053e4:	30800117 	ldw	r2,4(r6)
 10053e8:	00ffff04 	movi	r3,-4
 10053ec:	10c4703a 	and	r2,r2,r3
 10053f0:	2880022e 	bgeu	r5,r2,10053fc <_malloc_r+0x4fc>
 10053f4:	31800217 	ldw	r6,8(r6)
 10053f8:	41bffa1e 	bne	r8,r6,10053e4 <_malloc_r+0x4e4>
 10053fc:	32000317 	ldw	r8,12(r6)
 1005400:	39c00117 	ldw	r7,4(r7)
 1005404:	82000315 	stw	r8,12(r16)
 1005408:	81800215 	stw	r6,8(r16)
 100540c:	07004074 	movhi	fp,257
 1005410:	e70c8a04 	addi	fp,fp,12840
 1005414:	34000315 	stw	r16,12(r6)
 1005418:	44000215 	stw	r16,8(r8)
 100541c:	003f3e06 	br	1005118 <_malloc_r+0x218>
 1005420:	63000044 	addi	r12,r12,1
 1005424:	608000cc 	andi	r2,r12,3
 1005428:	10005d26 	beq	r2,zero,10055a0 <_malloc_r+0x6a0>
 100542c:	18c00204 	addi	r3,r3,8
 1005430:	003f5106 	br	1005178 <_malloc_r+0x278>
 1005434:	8089883a 	add	r4,r16,r2
 1005438:	003f6d06 	br	10051f0 <_malloc_r+0x2f0>
 100543c:	00805504 	movi	r2,340
 1005440:	10c02036 	bltu	r2,r3,10054c4 <_malloc_r+0x5c4>
 1005444:	8804d3fa 	srli	r2,r17,15
 1005448:	11801dc4 	addi	r6,r2,119
 100544c:	300490fa 	slli	r2,r6,3
 1005450:	003ed806 	br	1004fb4 <_malloc_r+0xb4>
 1005454:	48c000c4 	addi	r3,r9,3
 1005458:	003f3106 	br	1005120 <_malloc_r+0x220>
 100545c:	05c04074 	movhi	r23,257
 1005460:	bdd8fb04 	addi	r23,r23,25580
 1005464:	b8800017 	ldw	r2,0(r23)
 1005468:	988d883a 	add	r6,r19,r2
 100546c:	b9800015 	stw	r6,0(r23)
 1005470:	293fb21e 	bne	r5,r4,100533c <_malloc_r+0x43c>
 1005474:	2083ffcc 	andi	r2,r4,4095
 1005478:	103fb01e 	bne	r2,zero,100533c <_malloc_r+0x43c>
 100547c:	e4000217 	ldw	r16,8(fp)
 1005480:	9d45883a 	add	r2,r19,r21
 1005484:	10800054 	ori	r2,r2,1
 1005488:	80800115 	stw	r2,4(r16)
 100548c:	b8c00017 	ldw	r3,0(r23)
 1005490:	d0a6c117 	ldw	r2,-25852(gp)
 1005494:	10c0012e 	bgeu	r2,r3,100549c <_malloc_r+0x59c>
 1005498:	d0e6c115 	stw	r3,-25852(gp)
 100549c:	d0a6c217 	ldw	r2,-25848(gp)
 10054a0:	10ff962e 	bgeu	r2,r3,10052fc <_malloc_r+0x3fc>
 10054a4:	d0e6c215 	stw	r3,-25848(gp)
 10054a8:	003f9406 	br	10052fc <_malloc_r+0x3fc>
 10054ac:	00800104 	movi	r2,4
 10054b0:	11001e36 	bltu	r2,r4,100552c <_malloc_r+0x62c>
 10054b4:	2804d1ba 	srli	r2,r5,6
 10054b8:	11000e04 	addi	r4,r2,56
 10054bc:	200690fa 	slli	r3,r4,3
 10054c0:	003fc506 	br	10053d8 <_malloc_r+0x4d8>
 10054c4:	00815504 	movi	r2,1364
 10054c8:	10c01d2e 	bgeu	r2,r3,1005540 <_malloc_r+0x640>
 10054cc:	01801f84 	movi	r6,126
 10054d0:	0080fc04 	movi	r2,1008
 10054d4:	003eb706 	br	1004fb4 <_malloc_r+0xb4>
 10054d8:	00800204 	movi	r2,8
 10054dc:	10cbc83a 	sub	r5,r2,r3
 10054e0:	2169883a 	add	r20,r4,r5
 10054e4:	003f9e06 	br	1005360 <_malloc_r+0x460>
 10054e8:	00bffe04 	movi	r2,-8
 10054ec:	a93ffd04 	addi	r4,r21,-12
 10054f0:	2088703a 	and	r4,r4,r2
 10054f4:	b10b883a 	add	r5,r22,r4
 10054f8:	00c00144 	movi	r3,5
 10054fc:	28c00215 	stw	r3,8(r5)
 1005500:	28c00115 	stw	r3,4(r5)
 1005504:	b0800117 	ldw	r2,4(r22)
 1005508:	1080004c 	andi	r2,r2,1
 100550c:	2084b03a 	or	r2,r4,r2
 1005510:	b0800115 	stw	r2,4(r22)
 1005514:	313fdd2e 	bgeu	r6,r4,100548c <_malloc_r+0x58c>
 1005518:	b1400204 	addi	r5,r22,8
 100551c:	9009883a 	mov	r4,r18
 1005520:	10043780 	call	1004378 <_free_r>
 1005524:	e4000217 	ldw	r16,8(fp)
 1005528:	003fd806 	br	100548c <_malloc_r+0x58c>
 100552c:	00800504 	movi	r2,20
 1005530:	11001536 	bltu	r2,r4,1005588 <_malloc_r+0x688>
 1005534:	210016c4 	addi	r4,r4,91
 1005538:	200690fa 	slli	r3,r4,3
 100553c:	003fa606 	br	10053d8 <_malloc_r+0x4d8>
 1005540:	8804d4ba 	srli	r2,r17,18
 1005544:	11801f04 	addi	r6,r2,124
 1005548:	300490fa 	slli	r2,r6,3
 100554c:	003e9906 	br	1004fb4 <_malloc_r+0xb4>
 1005550:	2009d0ba 	srai	r4,r4,2
 1005554:	01404074 	movhi	r5,257
 1005558:	294c8a04 	addi	r5,r5,12840
 100555c:	00c00044 	movi	r3,1
 1005560:	28800117 	ldw	r2,4(r5)
 1005564:	1906983a 	sll	r3,r3,r4
 1005568:	10c4b03a 	or	r2,r2,r3
 100556c:	28800115 	stw	r2,4(r5)
 1005570:	003fa306 	br	1005400 <_malloc_r+0x500>
 1005574:	0027883a 	mov	r19,zero
 1005578:	00c00044 	movi	r3,1
 100557c:	003f8606 	br	1005398 <_malloc_r+0x498>
 1005580:	d1200515 	stw	r4,-32748(gp)
 1005584:	003f7306 	br	1005354 <_malloc_r+0x454>
 1005588:	00801504 	movi	r2,84
 100558c:	11001936 	bltu	r2,r4,10055f4 <_malloc_r+0x6f4>
 1005590:	2804d33a 	srli	r2,r5,12
 1005594:	11001b84 	addi	r4,r2,110
 1005598:	200690fa 	slli	r3,r4,3
 100559c:	003f8e06 	br	10053d8 <_malloc_r+0x4d8>
 10055a0:	480b883a 	mov	r5,r9
 10055a4:	6807883a 	mov	r3,r13
 10055a8:	288000cc 	andi	r2,r5,3
 10055ac:	18fffe04 	addi	r3,r3,-8
 10055b0:	297fffc4 	addi	r5,r5,-1
 10055b4:	10001526 	beq	r2,zero,100560c <_malloc_r+0x70c>
 10055b8:	18800217 	ldw	r2,8(r3)
 10055bc:	10fffa26 	beq	r2,r3,10055a8 <_malloc_r+0x6a8>
 10055c0:	2109883a 	add	r4,r4,r4
 10055c4:	393f1e36 	bltu	r7,r4,1005240 <_malloc_r+0x340>
 10055c8:	203f1d26 	beq	r4,zero,1005240 <_malloc_r+0x340>
 10055cc:	21c4703a 	and	r2,r4,r7
 10055d0:	10000226 	beq	r2,zero,10055dc <_malloc_r+0x6dc>
 10055d4:	6013883a 	mov	r9,r12
 10055d8:	003ee106 	br	1005160 <_malloc_r+0x260>
 10055dc:	2109883a 	add	r4,r4,r4
 10055e0:	3904703a 	and	r2,r7,r4
 10055e4:	63000104 	addi	r12,r12,4
 10055e8:	103ffc26 	beq	r2,zero,10055dc <_malloc_r+0x6dc>
 10055ec:	6013883a 	mov	r9,r12
 10055f0:	003edb06 	br	1005160 <_malloc_r+0x260>
 10055f4:	00805504 	movi	r2,340
 10055f8:	11000836 	bltu	r2,r4,100561c <_malloc_r+0x71c>
 10055fc:	2804d3fa 	srli	r2,r5,15
 1005600:	11001dc4 	addi	r4,r2,119
 1005604:	200690fa 	slli	r3,r4,3
 1005608:	003f7306 	br	10053d8 <_malloc_r+0x4d8>
 100560c:	0104303a 	nor	r2,zero,r4
 1005610:	388e703a 	and	r7,r7,r2
 1005614:	e1c00115 	stw	r7,4(fp)
 1005618:	003fe906 	br	10055c0 <_malloc_r+0x6c0>
 100561c:	00815504 	movi	r2,1364
 1005620:	1100032e 	bgeu	r2,r4,1005630 <_malloc_r+0x730>
 1005624:	01001f84 	movi	r4,126
 1005628:	00c0fc04 	movi	r3,1008
 100562c:	003f6a06 	br	10053d8 <_malloc_r+0x4d8>
 1005630:	2804d4ba 	srli	r2,r5,18
 1005634:	11001f04 	addi	r4,r2,124
 1005638:	200690fa 	slli	r3,r4,3
 100563c:	003f6606 	br	10053d8 <_malloc_r+0x4d8>

01005640 <memchr>:
 1005640:	008000c4 	movi	r2,3
 1005644:	29403fcc 	andi	r5,r5,255
 1005648:	2007883a 	mov	r3,r4
 100564c:	1180022e 	bgeu	r2,r6,1005658 <memchr+0x18>
 1005650:	2084703a 	and	r2,r4,r2
 1005654:	10000b26 	beq	r2,zero,1005684 <memchr+0x44>
 1005658:	313fffc4 	addi	r4,r6,-1
 100565c:	3000051e 	bne	r6,zero,1005674 <memchr+0x34>
 1005660:	00002c06 	br	1005714 <memchr+0xd4>
 1005664:	213fffc4 	addi	r4,r4,-1
 1005668:	00bfffc4 	movi	r2,-1
 100566c:	18c00044 	addi	r3,r3,1
 1005670:	20802826 	beq	r4,r2,1005714 <memchr+0xd4>
 1005674:	18800003 	ldbu	r2,0(r3)
 1005678:	28bffa1e 	bne	r5,r2,1005664 <memchr+0x24>
 100567c:	1805883a 	mov	r2,r3
 1005680:	f800283a 	ret
 1005684:	0011883a 	mov	r8,zero
 1005688:	0007883a 	mov	r3,zero
 100568c:	01c00104 	movi	r7,4
 1005690:	4004923a 	slli	r2,r8,8
 1005694:	18c00044 	addi	r3,r3,1
 1005698:	1151883a 	add	r8,r2,r5
 100569c:	19fffc1e 	bne	r3,r7,1005690 <memchr+0x50>
 10056a0:	02bfbff4 	movhi	r10,65279
 10056a4:	52bfbfc4 	addi	r10,r10,-257
 10056a8:	02602074 	movhi	r9,32897
 10056ac:	4a602004 	addi	r9,r9,-32640
 10056b0:	02c000c4 	movi	r11,3
 10056b4:	20800017 	ldw	r2,0(r4)
 10056b8:	31bfff04 	addi	r6,r6,-4
 10056bc:	200f883a 	mov	r7,r4
 10056c0:	1204f03a 	xor	r2,r2,r8
 10056c4:	1287883a 	add	r3,r2,r10
 10056c8:	1a46703a 	and	r3,r3,r9
 10056cc:	0084303a 	nor	r2,zero,r2
 10056d0:	10c4703a 	and	r2,r2,r3
 10056d4:	10000b26 	beq	r2,zero,1005704 <memchr+0xc4>
 10056d8:	20800003 	ldbu	r2,0(r4)
 10056dc:	28800f26 	beq	r5,r2,100571c <memchr+0xdc>
 10056e0:	20800043 	ldbu	r2,1(r4)
 10056e4:	21c00044 	addi	r7,r4,1
 10056e8:	28800c26 	beq	r5,r2,100571c <memchr+0xdc>
 10056ec:	20800083 	ldbu	r2,2(r4)
 10056f0:	21c00084 	addi	r7,r4,2
 10056f4:	28800926 	beq	r5,r2,100571c <memchr+0xdc>
 10056f8:	208000c3 	ldbu	r2,3(r4)
 10056fc:	21c000c4 	addi	r7,r4,3
 1005700:	28800626 	beq	r5,r2,100571c <memchr+0xdc>
 1005704:	21000104 	addi	r4,r4,4
 1005708:	59bfea36 	bltu	r11,r6,10056b4 <memchr+0x74>
 100570c:	2007883a 	mov	r3,r4
 1005710:	003fd106 	br	1005658 <memchr+0x18>
 1005714:	0005883a 	mov	r2,zero
 1005718:	f800283a 	ret
 100571c:	3805883a 	mov	r2,r7
 1005720:	f800283a 	ret

01005724 <memcpy>:
 1005724:	01c003c4 	movi	r7,15
 1005728:	2007883a 	mov	r3,r4
 100572c:	3980032e 	bgeu	r7,r6,100573c <memcpy+0x18>
 1005730:	2904b03a 	or	r2,r5,r4
 1005734:	108000cc 	andi	r2,r2,3
 1005738:	10000926 	beq	r2,zero,1005760 <memcpy+0x3c>
 100573c:	30000626 	beq	r6,zero,1005758 <memcpy+0x34>
 1005740:	30cd883a 	add	r6,r6,r3
 1005744:	28800003 	ldbu	r2,0(r5)
 1005748:	29400044 	addi	r5,r5,1
 100574c:	18800005 	stb	r2,0(r3)
 1005750:	18c00044 	addi	r3,r3,1
 1005754:	30fffb1e 	bne	r6,r3,1005744 <memcpy+0x20>
 1005758:	2005883a 	mov	r2,r4
 100575c:	f800283a 	ret
 1005760:	3811883a 	mov	r8,r7
 1005764:	200f883a 	mov	r7,r4
 1005768:	28c00017 	ldw	r3,0(r5)
 100576c:	31bffc04 	addi	r6,r6,-16
 1005770:	38c00015 	stw	r3,0(r7)
 1005774:	28800117 	ldw	r2,4(r5)
 1005778:	38800115 	stw	r2,4(r7)
 100577c:	28c00217 	ldw	r3,8(r5)
 1005780:	38c00215 	stw	r3,8(r7)
 1005784:	28800317 	ldw	r2,12(r5)
 1005788:	29400404 	addi	r5,r5,16
 100578c:	38800315 	stw	r2,12(r7)
 1005790:	39c00404 	addi	r7,r7,16
 1005794:	41bff436 	bltu	r8,r6,1005768 <memcpy+0x44>
 1005798:	008000c4 	movi	r2,3
 100579c:	1180072e 	bgeu	r2,r6,10057bc <memcpy+0x98>
 10057a0:	1007883a 	mov	r3,r2
 10057a4:	28800017 	ldw	r2,0(r5)
 10057a8:	31bfff04 	addi	r6,r6,-4
 10057ac:	29400104 	addi	r5,r5,4
 10057b0:	38800015 	stw	r2,0(r7)
 10057b4:	39c00104 	addi	r7,r7,4
 10057b8:	19bffa36 	bltu	r3,r6,10057a4 <memcpy+0x80>
 10057bc:	3807883a 	mov	r3,r7
 10057c0:	003fde06 	br	100573c <memcpy+0x18>

010057c4 <memmove>:
 10057c4:	2807883a 	mov	r3,r5
 10057c8:	2011883a 	mov	r8,r4
 10057cc:	29000c2e 	bgeu	r5,r4,1005800 <memmove+0x3c>
 10057d0:	298f883a 	add	r7,r5,r6
 10057d4:	21c00a2e 	bgeu	r4,r7,1005800 <memmove+0x3c>
 10057d8:	30000726 	beq	r6,zero,10057f8 <memmove+0x34>
 10057dc:	2187883a 	add	r3,r4,r6
 10057e0:	198dc83a 	sub	r6,r3,r6
 10057e4:	39ffffc4 	addi	r7,r7,-1
 10057e8:	38800003 	ldbu	r2,0(r7)
 10057ec:	18ffffc4 	addi	r3,r3,-1
 10057f0:	18800005 	stb	r2,0(r3)
 10057f4:	19bffb1e 	bne	r3,r6,10057e4 <memmove+0x20>
 10057f8:	2005883a 	mov	r2,r4
 10057fc:	f800283a 	ret
 1005800:	01c003c4 	movi	r7,15
 1005804:	39800a36 	bltu	r7,r6,1005830 <memmove+0x6c>
 1005808:	303ffb26 	beq	r6,zero,10057f8 <memmove+0x34>
 100580c:	400f883a 	mov	r7,r8
 1005810:	320d883a 	add	r6,r6,r8
 1005814:	28800003 	ldbu	r2,0(r5)
 1005818:	29400044 	addi	r5,r5,1
 100581c:	38800005 	stb	r2,0(r7)
 1005820:	39c00044 	addi	r7,r7,1
 1005824:	39bffb1e 	bne	r7,r6,1005814 <memmove+0x50>
 1005828:	2005883a 	mov	r2,r4
 100582c:	f800283a 	ret
 1005830:	1904b03a 	or	r2,r3,r4
 1005834:	108000cc 	andi	r2,r2,3
 1005838:	103ff31e 	bne	r2,zero,1005808 <memmove+0x44>
 100583c:	3811883a 	mov	r8,r7
 1005840:	180b883a 	mov	r5,r3
 1005844:	200f883a 	mov	r7,r4
 1005848:	28c00017 	ldw	r3,0(r5)
 100584c:	31bffc04 	addi	r6,r6,-16
 1005850:	38c00015 	stw	r3,0(r7)
 1005854:	28800117 	ldw	r2,4(r5)
 1005858:	38800115 	stw	r2,4(r7)
 100585c:	28c00217 	ldw	r3,8(r5)
 1005860:	38c00215 	stw	r3,8(r7)
 1005864:	28800317 	ldw	r2,12(r5)
 1005868:	29400404 	addi	r5,r5,16
 100586c:	38800315 	stw	r2,12(r7)
 1005870:	39c00404 	addi	r7,r7,16
 1005874:	41bff436 	bltu	r8,r6,1005848 <memmove+0x84>
 1005878:	008000c4 	movi	r2,3
 100587c:	1180072e 	bgeu	r2,r6,100589c <memmove+0xd8>
 1005880:	1007883a 	mov	r3,r2
 1005884:	28800017 	ldw	r2,0(r5)
 1005888:	31bfff04 	addi	r6,r6,-4
 100588c:	29400104 	addi	r5,r5,4
 1005890:	38800015 	stw	r2,0(r7)
 1005894:	39c00104 	addi	r7,r7,4
 1005898:	19bffa36 	bltu	r3,r6,1005884 <memmove+0xc0>
 100589c:	3811883a 	mov	r8,r7
 10058a0:	003fd906 	br	1005808 <memmove+0x44>

010058a4 <memset>:
 10058a4:	008000c4 	movi	r2,3
 10058a8:	29403fcc 	andi	r5,r5,255
 10058ac:	2007883a 	mov	r3,r4
 10058b0:	1180022e 	bgeu	r2,r6,10058bc <memset+0x18>
 10058b4:	2084703a 	and	r2,r4,r2
 10058b8:	10000826 	beq	r2,zero,10058dc <memset+0x38>
 10058bc:	30000526 	beq	r6,zero,10058d4 <memset+0x30>
 10058c0:	2805883a 	mov	r2,r5
 10058c4:	30cd883a 	add	r6,r6,r3
 10058c8:	18800005 	stb	r2,0(r3)
 10058cc:	18c00044 	addi	r3,r3,1
 10058d0:	19bffd1e 	bne	r3,r6,10058c8 <memset+0x24>
 10058d4:	2005883a 	mov	r2,r4
 10058d8:	f800283a 	ret
 10058dc:	2804923a 	slli	r2,r5,8
 10058e0:	020003c4 	movi	r8,15
 10058e4:	200f883a 	mov	r7,r4
 10058e8:	2884b03a 	or	r2,r5,r2
 10058ec:	1006943a 	slli	r3,r2,16
 10058f0:	10c6b03a 	or	r3,r2,r3
 10058f4:	41800a2e 	bgeu	r8,r6,1005920 <memset+0x7c>
 10058f8:	4005883a 	mov	r2,r8
 10058fc:	31bffc04 	addi	r6,r6,-16
 1005900:	38c00015 	stw	r3,0(r7)
 1005904:	38c00115 	stw	r3,4(r7)
 1005908:	38c00215 	stw	r3,8(r7)
 100590c:	38c00315 	stw	r3,12(r7)
 1005910:	39c00404 	addi	r7,r7,16
 1005914:	11bff936 	bltu	r2,r6,10058fc <memset+0x58>
 1005918:	008000c4 	movi	r2,3
 100591c:	1180052e 	bgeu	r2,r6,1005934 <memset+0x90>
 1005920:	31bfff04 	addi	r6,r6,-4
 1005924:	008000c4 	movi	r2,3
 1005928:	38c00015 	stw	r3,0(r7)
 100592c:	39c00104 	addi	r7,r7,4
 1005930:	11bffb36 	bltu	r2,r6,1005920 <memset+0x7c>
 1005934:	3807883a 	mov	r3,r7
 1005938:	003fe006 	br	10058bc <memset+0x18>

0100593c <_Bfree>:
 100593c:	28000826 	beq	r5,zero,1005960 <_Bfree+0x24>
 1005940:	28800117 	ldw	r2,4(r5)
 1005944:	21001317 	ldw	r4,76(r4)
 1005948:	1085883a 	add	r2,r2,r2
 100594c:	1085883a 	add	r2,r2,r2
 1005950:	1105883a 	add	r2,r2,r4
 1005954:	10c00017 	ldw	r3,0(r2)
 1005958:	28c00015 	stw	r3,0(r5)
 100595c:	11400015 	stw	r5,0(r2)
 1005960:	f800283a 	ret

01005964 <__hi0bits>:
 1005964:	20bfffec 	andhi	r2,r4,65535
 1005968:	10001426 	beq	r2,zero,10059bc <__hi0bits+0x58>
 100596c:	0007883a 	mov	r3,zero
 1005970:	20bfc02c 	andhi	r2,r4,65280
 1005974:	1000021e 	bne	r2,zero,1005980 <__hi0bits+0x1c>
 1005978:	2008923a 	slli	r4,r4,8
 100597c:	18c00204 	addi	r3,r3,8
 1005980:	20bc002c 	andhi	r2,r4,61440
 1005984:	1000021e 	bne	r2,zero,1005990 <__hi0bits+0x2c>
 1005988:	2008913a 	slli	r4,r4,4
 100598c:	18c00104 	addi	r3,r3,4
 1005990:	20b0002c 	andhi	r2,r4,49152
 1005994:	1000031e 	bne	r2,zero,10059a4 <__hi0bits+0x40>
 1005998:	2105883a 	add	r2,r4,r4
 100599c:	18c00084 	addi	r3,r3,2
 10059a0:	1089883a 	add	r4,r2,r2
 10059a4:	20000316 	blt	r4,zero,10059b4 <__hi0bits+0x50>
 10059a8:	2090002c 	andhi	r2,r4,16384
 10059ac:	10000626 	beq	r2,zero,10059c8 <__hi0bits+0x64>
 10059b0:	18c00044 	addi	r3,r3,1
 10059b4:	1805883a 	mov	r2,r3
 10059b8:	f800283a 	ret
 10059bc:	2008943a 	slli	r4,r4,16
 10059c0:	00c00404 	movi	r3,16
 10059c4:	003fea06 	br	1005970 <__hi0bits+0xc>
 10059c8:	00c00804 	movi	r3,32
 10059cc:	1805883a 	mov	r2,r3
 10059d0:	f800283a 	ret

010059d4 <__lo0bits>:
 10059d4:	20c00017 	ldw	r3,0(r4)
 10059d8:	188001cc 	andi	r2,r3,7
 10059dc:	10000a26 	beq	r2,zero,1005a08 <__lo0bits+0x34>
 10059e0:	1880004c 	andi	r2,r3,1
 10059e4:	1005003a 	cmpeq	r2,r2,zero
 10059e8:	10002126 	beq	r2,zero,1005a70 <__lo0bits+0x9c>
 10059ec:	1880008c 	andi	r2,r3,2
 10059f0:	1000251e 	bne	r2,zero,1005a88 <__lo0bits+0xb4>
 10059f4:	1804d0ba 	srli	r2,r3,2
 10059f8:	01400084 	movi	r5,2
 10059fc:	20800015 	stw	r2,0(r4)
 1005a00:	2805883a 	mov	r2,r5
 1005a04:	f800283a 	ret
 1005a08:	18bfffcc 	andi	r2,r3,65535
 1005a0c:	10001526 	beq	r2,zero,1005a64 <__lo0bits+0x90>
 1005a10:	000b883a 	mov	r5,zero
 1005a14:	18803fcc 	andi	r2,r3,255
 1005a18:	1000021e 	bne	r2,zero,1005a24 <__lo0bits+0x50>
 1005a1c:	1806d23a 	srli	r3,r3,8
 1005a20:	29400204 	addi	r5,r5,8
 1005a24:	188003cc 	andi	r2,r3,15
 1005a28:	1000021e 	bne	r2,zero,1005a34 <__lo0bits+0x60>
 1005a2c:	1806d13a 	srli	r3,r3,4
 1005a30:	29400104 	addi	r5,r5,4
 1005a34:	188000cc 	andi	r2,r3,3
 1005a38:	1000021e 	bne	r2,zero,1005a44 <__lo0bits+0x70>
 1005a3c:	1806d0ba 	srli	r3,r3,2
 1005a40:	29400084 	addi	r5,r5,2
 1005a44:	1880004c 	andi	r2,r3,1
 1005a48:	1000031e 	bne	r2,zero,1005a58 <__lo0bits+0x84>
 1005a4c:	1806d07a 	srli	r3,r3,1
 1005a50:	18000a26 	beq	r3,zero,1005a7c <__lo0bits+0xa8>
 1005a54:	29400044 	addi	r5,r5,1
 1005a58:	2805883a 	mov	r2,r5
 1005a5c:	20c00015 	stw	r3,0(r4)
 1005a60:	f800283a 	ret
 1005a64:	1806d43a 	srli	r3,r3,16
 1005a68:	01400404 	movi	r5,16
 1005a6c:	003fe906 	br	1005a14 <__lo0bits+0x40>
 1005a70:	000b883a 	mov	r5,zero
 1005a74:	2805883a 	mov	r2,r5
 1005a78:	f800283a 	ret
 1005a7c:	01400804 	movi	r5,32
 1005a80:	2805883a 	mov	r2,r5
 1005a84:	f800283a 	ret
 1005a88:	1804d07a 	srli	r2,r3,1
 1005a8c:	01400044 	movi	r5,1
 1005a90:	20800015 	stw	r2,0(r4)
 1005a94:	003fda06 	br	1005a00 <__lo0bits+0x2c>

01005a98 <__mcmp>:
 1005a98:	20800417 	ldw	r2,16(r4)
 1005a9c:	28c00417 	ldw	r3,16(r5)
 1005aa0:	10cfc83a 	sub	r7,r2,r3
 1005aa4:	38000c1e 	bne	r7,zero,1005ad8 <__mcmp+0x40>
 1005aa8:	18c5883a 	add	r2,r3,r3
 1005aac:	1085883a 	add	r2,r2,r2
 1005ab0:	10c00504 	addi	r3,r2,20
 1005ab4:	21000504 	addi	r4,r4,20
 1005ab8:	28cb883a 	add	r5,r5,r3
 1005abc:	2085883a 	add	r2,r4,r2
 1005ac0:	10bfff04 	addi	r2,r2,-4
 1005ac4:	297fff04 	addi	r5,r5,-4
 1005ac8:	11800017 	ldw	r6,0(r2)
 1005acc:	28c00017 	ldw	r3,0(r5)
 1005ad0:	30c0031e 	bne	r6,r3,1005ae0 <__mcmp+0x48>
 1005ad4:	20bffa36 	bltu	r4,r2,1005ac0 <__mcmp+0x28>
 1005ad8:	3805883a 	mov	r2,r7
 1005adc:	f800283a 	ret
 1005ae0:	30c00336 	bltu	r6,r3,1005af0 <__mcmp+0x58>
 1005ae4:	01c00044 	movi	r7,1
 1005ae8:	3805883a 	mov	r2,r7
 1005aec:	f800283a 	ret
 1005af0:	01ffffc4 	movi	r7,-1
 1005af4:	003ff806 	br	1005ad8 <__mcmp+0x40>

01005af8 <__ulp>:
 1005af8:	295ffc2c 	andhi	r5,r5,32752
 1005afc:	013f3034 	movhi	r4,64704
 1005b00:	290b883a 	add	r5,r5,r4
 1005b04:	0145c83a 	sub	r2,zero,r5
 1005b08:	1007d53a 	srai	r3,r2,20
 1005b0c:	000d883a 	mov	r6,zero
 1005b10:	0140040e 	bge	zero,r5,1005b24 <__ulp+0x2c>
 1005b14:	280f883a 	mov	r7,r5
 1005b18:	3807883a 	mov	r3,r7
 1005b1c:	3005883a 	mov	r2,r6
 1005b20:	f800283a 	ret
 1005b24:	008004c4 	movi	r2,19
 1005b28:	193ffb04 	addi	r4,r3,-20
 1005b2c:	10c00c0e 	bge	r2,r3,1005b60 <__ulp+0x68>
 1005b30:	008007c4 	movi	r2,31
 1005b34:	1107c83a 	sub	r3,r2,r4
 1005b38:	00800784 	movi	r2,30
 1005b3c:	01400044 	movi	r5,1
 1005b40:	11000216 	blt	r2,r4,1005b4c <__ulp+0x54>
 1005b44:	00800044 	movi	r2,1
 1005b48:	10ca983a 	sll	r5,r2,r3
 1005b4c:	000f883a 	mov	r7,zero
 1005b50:	280d883a 	mov	r6,r5
 1005b54:	3807883a 	mov	r3,r7
 1005b58:	3005883a 	mov	r2,r6
 1005b5c:	f800283a 	ret
 1005b60:	00800234 	movhi	r2,8
 1005b64:	10cfd83a 	sra	r7,r2,r3
 1005b68:	000d883a 	mov	r6,zero
 1005b6c:	3005883a 	mov	r2,r6
 1005b70:	3807883a 	mov	r3,r7
 1005b74:	f800283a 	ret

01005b78 <__b2d>:
 1005b78:	20800417 	ldw	r2,16(r4)
 1005b7c:	defff904 	addi	sp,sp,-28
 1005b80:	dd000415 	stw	r20,16(sp)
 1005b84:	1085883a 	add	r2,r2,r2
 1005b88:	25000504 	addi	r20,r4,20
 1005b8c:	1085883a 	add	r2,r2,r2
 1005b90:	dc000015 	stw	r16,0(sp)
 1005b94:	a0a1883a 	add	r16,r20,r2
 1005b98:	dd400515 	stw	r21,20(sp)
 1005b9c:	857fff17 	ldw	r21,-4(r16)
 1005ba0:	dc400115 	stw	r17,4(sp)
 1005ba4:	dfc00615 	stw	ra,24(sp)
 1005ba8:	a809883a 	mov	r4,r21
 1005bac:	2823883a 	mov	r17,r5
 1005bb0:	dcc00315 	stw	r19,12(sp)
 1005bb4:	dc800215 	stw	r18,8(sp)
 1005bb8:	10059640 	call	1005964 <__hi0bits>
 1005bbc:	100b883a 	mov	r5,r2
 1005bc0:	00800804 	movi	r2,32
 1005bc4:	1145c83a 	sub	r2,r2,r5
 1005bc8:	88800015 	stw	r2,0(r17)
 1005bcc:	00800284 	movi	r2,10
 1005bd0:	80ffff04 	addi	r3,r16,-4
 1005bd4:	11401416 	blt	r2,r5,1005c28 <__b2d+0xb0>
 1005bd8:	008002c4 	movi	r2,11
 1005bdc:	1149c83a 	sub	r4,r2,r5
 1005be0:	a0c02736 	bltu	r20,r3,1005c80 <__b2d+0x108>
 1005be4:	000d883a 	mov	r6,zero
 1005be8:	28800544 	addi	r2,r5,21
 1005bec:	a906d83a 	srl	r3,r21,r4
 1005bf0:	a884983a 	sll	r2,r21,r2
 1005bf4:	1ccffc34 	orhi	r19,r3,16368
 1005bf8:	11a4b03a 	or	r18,r2,r6
 1005bfc:	9005883a 	mov	r2,r18
 1005c00:	9807883a 	mov	r3,r19
 1005c04:	dfc00617 	ldw	ra,24(sp)
 1005c08:	dd400517 	ldw	r21,20(sp)
 1005c0c:	dd000417 	ldw	r20,16(sp)
 1005c10:	dcc00317 	ldw	r19,12(sp)
 1005c14:	dc800217 	ldw	r18,8(sp)
 1005c18:	dc400117 	ldw	r17,4(sp)
 1005c1c:	dc000017 	ldw	r16,0(sp)
 1005c20:	dec00704 	addi	sp,sp,28
 1005c24:	f800283a 	ret
 1005c28:	a0c00e36 	bltu	r20,r3,1005c64 <__b2d+0xec>
 1005c2c:	293ffd44 	addi	r4,r5,-11
 1005c30:	000d883a 	mov	r6,zero
 1005c34:	20000f26 	beq	r4,zero,1005c74 <__b2d+0xfc>
 1005c38:	00800804 	movi	r2,32
 1005c3c:	110bc83a 	sub	r5,r2,r4
 1005c40:	a0c01236 	bltu	r20,r3,1005c8c <__b2d+0x114>
 1005c44:	000f883a 	mov	r7,zero
 1005c48:	a904983a 	sll	r2,r21,r4
 1005c4c:	3146d83a 	srl	r3,r6,r5
 1005c50:	3108983a 	sll	r4,r6,r4
 1005c54:	108ffc34 	orhi	r2,r2,16368
 1005c58:	18a6b03a 	or	r19,r3,r2
 1005c5c:	3924b03a 	or	r18,r7,r4
 1005c60:	003fe606 	br	1005bfc <__b2d+0x84>
 1005c64:	293ffd44 	addi	r4,r5,-11
 1005c68:	81bffe17 	ldw	r6,-8(r16)
 1005c6c:	80fffe04 	addi	r3,r16,-8
 1005c70:	203ff11e 	bne	r4,zero,1005c38 <__b2d+0xc0>
 1005c74:	accffc34 	orhi	r19,r21,16368
 1005c78:	3025883a 	mov	r18,r6
 1005c7c:	003fdf06 	br	1005bfc <__b2d+0x84>
 1005c80:	18bfff17 	ldw	r2,-4(r3)
 1005c84:	110cd83a 	srl	r6,r2,r4
 1005c88:	003fd706 	br	1005be8 <__b2d+0x70>
 1005c8c:	18bfff17 	ldw	r2,-4(r3)
 1005c90:	114ed83a 	srl	r7,r2,r5
 1005c94:	003fec06 	br	1005c48 <__b2d+0xd0>

01005c98 <__ratio>:
 1005c98:	defff904 	addi	sp,sp,-28
 1005c9c:	dc400215 	stw	r17,8(sp)
 1005ca0:	2823883a 	mov	r17,r5
 1005ca4:	d80b883a 	mov	r5,sp
 1005ca8:	dfc00615 	stw	ra,24(sp)
 1005cac:	dd000515 	stw	r20,20(sp)
 1005cb0:	dcc00415 	stw	r19,16(sp)
 1005cb4:	dc800315 	stw	r18,12(sp)
 1005cb8:	2025883a 	mov	r18,r4
 1005cbc:	1005b780 	call	1005b78 <__b2d>
 1005cc0:	8809883a 	mov	r4,r17
 1005cc4:	d9400104 	addi	r5,sp,4
 1005cc8:	1027883a 	mov	r19,r2
 1005ccc:	1829883a 	mov	r20,r3
 1005cd0:	1005b780 	call	1005b78 <__b2d>
 1005cd4:	89000417 	ldw	r4,16(r17)
 1005cd8:	91c00417 	ldw	r7,16(r18)
 1005cdc:	d9800117 	ldw	r6,4(sp)
 1005ce0:	180b883a 	mov	r5,r3
 1005ce4:	390fc83a 	sub	r7,r7,r4
 1005ce8:	1009883a 	mov	r4,r2
 1005cec:	d8800017 	ldw	r2,0(sp)
 1005cf0:	380e917a 	slli	r7,r7,5
 1005cf4:	2011883a 	mov	r8,r4
 1005cf8:	1185c83a 	sub	r2,r2,r6
 1005cfc:	11c5883a 	add	r2,r2,r7
 1005d00:	1006953a 	slli	r3,r2,20
 1005d04:	2813883a 	mov	r9,r5
 1005d08:	00800d0e 	bge	zero,r2,1005d40 <__ratio+0xa8>
 1005d0c:	1d29883a 	add	r20,r3,r20
 1005d10:	a00b883a 	mov	r5,r20
 1005d14:	480f883a 	mov	r7,r9
 1005d18:	9809883a 	mov	r4,r19
 1005d1c:	400d883a 	mov	r6,r8
 1005d20:	1008ce00 	call	1008ce0 <__divdf3>
 1005d24:	dfc00617 	ldw	ra,24(sp)
 1005d28:	dd000517 	ldw	r20,20(sp)
 1005d2c:	dcc00417 	ldw	r19,16(sp)
 1005d30:	dc800317 	ldw	r18,12(sp)
 1005d34:	dc400217 	ldw	r17,8(sp)
 1005d38:	dec00704 	addi	sp,sp,28
 1005d3c:	f800283a 	ret
 1005d40:	28d3c83a 	sub	r9,r5,r3
 1005d44:	003ff206 	br	1005d10 <__ratio+0x78>

01005d48 <_mprec_log10>:
 1005d48:	defffe04 	addi	sp,sp,-8
 1005d4c:	008005c4 	movi	r2,23
 1005d50:	dc000015 	stw	r16,0(sp)
 1005d54:	dfc00115 	stw	ra,4(sp)
 1005d58:	2021883a 	mov	r16,r4
 1005d5c:	11000c16 	blt	r2,r4,1005d90 <_mprec_log10+0x48>
 1005d60:	200490fa 	slli	r2,r4,3
 1005d64:	00c04074 	movhi	r3,257
 1005d68:	18cab204 	addi	r3,r3,10952
 1005d6c:	10c5883a 	add	r2,r2,r3
 1005d70:	12400117 	ldw	r9,4(r2)
 1005d74:	12000017 	ldw	r8,0(r2)
 1005d78:	4807883a 	mov	r3,r9
 1005d7c:	4005883a 	mov	r2,r8
 1005d80:	dfc00117 	ldw	ra,4(sp)
 1005d84:	dc000017 	ldw	r16,0(sp)
 1005d88:	dec00204 	addi	sp,sp,8
 1005d8c:	f800283a 	ret
 1005d90:	0011883a 	mov	r8,zero
 1005d94:	024ffc34 	movhi	r9,16368
 1005d98:	0005883a 	mov	r2,zero
 1005d9c:	00d00934 	movhi	r3,16420
 1005da0:	480b883a 	mov	r5,r9
 1005da4:	4009883a 	mov	r4,r8
 1005da8:	180f883a 	mov	r7,r3
 1005dac:	100d883a 	mov	r6,r2
 1005db0:	100891c0 	call	100891c <__muldf3>
 1005db4:	843fffc4 	addi	r16,r16,-1
 1005db8:	1011883a 	mov	r8,r2
 1005dbc:	1813883a 	mov	r9,r3
 1005dc0:	803ff51e 	bne	r16,zero,1005d98 <_mprec_log10+0x50>
 1005dc4:	4005883a 	mov	r2,r8
 1005dc8:	4807883a 	mov	r3,r9
 1005dcc:	dfc00117 	ldw	ra,4(sp)
 1005dd0:	dc000017 	ldw	r16,0(sp)
 1005dd4:	dec00204 	addi	sp,sp,8
 1005dd8:	f800283a 	ret

01005ddc <__copybits>:
 1005ddc:	297fffc4 	addi	r5,r5,-1
 1005de0:	30800417 	ldw	r2,16(r6)
 1005de4:	280bd17a 	srai	r5,r5,5
 1005de8:	31800504 	addi	r6,r6,20
 1005dec:	1085883a 	add	r2,r2,r2
 1005df0:	294b883a 	add	r5,r5,r5
 1005df4:	294b883a 	add	r5,r5,r5
 1005df8:	1085883a 	add	r2,r2,r2
 1005dfc:	290b883a 	add	r5,r5,r4
 1005e00:	3087883a 	add	r3,r6,r2
 1005e04:	29400104 	addi	r5,r5,4
 1005e08:	30c0052e 	bgeu	r6,r3,1005e20 <__copybits+0x44>
 1005e0c:	30800017 	ldw	r2,0(r6)
 1005e10:	31800104 	addi	r6,r6,4
 1005e14:	20800015 	stw	r2,0(r4)
 1005e18:	21000104 	addi	r4,r4,4
 1005e1c:	30fffb36 	bltu	r6,r3,1005e0c <__copybits+0x30>
 1005e20:	2140032e 	bgeu	r4,r5,1005e30 <__copybits+0x54>
 1005e24:	20000015 	stw	zero,0(r4)
 1005e28:	21000104 	addi	r4,r4,4
 1005e2c:	217ffd36 	bltu	r4,r5,1005e24 <__copybits+0x48>
 1005e30:	f800283a 	ret

01005e34 <__any_on>:
 1005e34:	20800417 	ldw	r2,16(r4)
 1005e38:	2807d17a 	srai	r3,r5,5
 1005e3c:	21000504 	addi	r4,r4,20
 1005e40:	10c00d0e 	bge	r2,r3,1005e78 <__any_on+0x44>
 1005e44:	1085883a 	add	r2,r2,r2
 1005e48:	1085883a 	add	r2,r2,r2
 1005e4c:	208d883a 	add	r6,r4,r2
 1005e50:	2180182e 	bgeu	r4,r6,1005eb4 <__any_on+0x80>
 1005e54:	30bfff17 	ldw	r2,-4(r6)
 1005e58:	30ffff04 	addi	r3,r6,-4
 1005e5c:	1000041e 	bne	r2,zero,1005e70 <__any_on+0x3c>
 1005e60:	20c0142e 	bgeu	r4,r3,1005eb4 <__any_on+0x80>
 1005e64:	18ffff04 	addi	r3,r3,-4
 1005e68:	18800017 	ldw	r2,0(r3)
 1005e6c:	103ffc26 	beq	r2,zero,1005e60 <__any_on+0x2c>
 1005e70:	00800044 	movi	r2,1
 1005e74:	f800283a 	ret
 1005e78:	18800a0e 	bge	r3,r2,1005ea4 <__any_on+0x70>
 1005e7c:	294007cc 	andi	r5,r5,31
 1005e80:	28000826 	beq	r5,zero,1005ea4 <__any_on+0x70>
 1005e84:	18c5883a 	add	r2,r3,r3
 1005e88:	1085883a 	add	r2,r2,r2
 1005e8c:	208d883a 	add	r6,r4,r2
 1005e90:	30c00017 	ldw	r3,0(r6)
 1005e94:	1944d83a 	srl	r2,r3,r5
 1005e98:	1144983a 	sll	r2,r2,r5
 1005e9c:	18bff41e 	bne	r3,r2,1005e70 <__any_on+0x3c>
 1005ea0:	003feb06 	br	1005e50 <__any_on+0x1c>
 1005ea4:	18c5883a 	add	r2,r3,r3
 1005ea8:	1085883a 	add	r2,r2,r2
 1005eac:	208d883a 	add	r6,r4,r2
 1005eb0:	003fe706 	br	1005e50 <__any_on+0x1c>
 1005eb4:	0005883a 	mov	r2,zero
 1005eb8:	f800283a 	ret

01005ebc <_Balloc>:
 1005ebc:	20c01317 	ldw	r3,76(r4)
 1005ec0:	defffb04 	addi	sp,sp,-20
 1005ec4:	dcc00315 	stw	r19,12(sp)
 1005ec8:	dc800215 	stw	r18,8(sp)
 1005ecc:	dfc00415 	stw	ra,16(sp)
 1005ed0:	2825883a 	mov	r18,r5
 1005ed4:	dc400115 	stw	r17,4(sp)
 1005ed8:	dc000015 	stw	r16,0(sp)
 1005edc:	2027883a 	mov	r19,r4
 1005ee0:	01800404 	movi	r6,16
 1005ee4:	01400104 	movi	r5,4
 1005ee8:	18001726 	beq	r3,zero,1005f48 <_Balloc+0x8c>
 1005eec:	01400044 	movi	r5,1
 1005ef0:	9485883a 	add	r2,r18,r18
 1005ef4:	2ca2983a 	sll	r17,r5,r18
 1005ef8:	1085883a 	add	r2,r2,r2
 1005efc:	10c7883a 	add	r3,r2,r3
 1005f00:	1c000017 	ldw	r16,0(r3)
 1005f04:	8c4d883a 	add	r6,r17,r17
 1005f08:	318d883a 	add	r6,r6,r6
 1005f0c:	9809883a 	mov	r4,r19
 1005f10:	31800504 	addi	r6,r6,20
 1005f14:	80001226 	beq	r16,zero,1005f60 <_Balloc+0xa4>
 1005f18:	80800017 	ldw	r2,0(r16)
 1005f1c:	18800015 	stw	r2,0(r3)
 1005f20:	80000415 	stw	zero,16(r16)
 1005f24:	80000315 	stw	zero,12(r16)
 1005f28:	8005883a 	mov	r2,r16
 1005f2c:	dfc00417 	ldw	ra,16(sp)
 1005f30:	dcc00317 	ldw	r19,12(sp)
 1005f34:	dc800217 	ldw	r18,8(sp)
 1005f38:	dc400117 	ldw	r17,4(sp)
 1005f3c:	dc000017 	ldw	r16,0(sp)
 1005f40:	dec00504 	addi	sp,sp,20
 1005f44:	f800283a 	ret
 1005f48:	100731c0 	call	100731c <_calloc_r>
 1005f4c:	1007883a 	mov	r3,r2
 1005f50:	0021883a 	mov	r16,zero
 1005f54:	98801315 	stw	r2,76(r19)
 1005f58:	103fe41e 	bne	r2,zero,1005eec <_Balloc+0x30>
 1005f5c:	003ff206 	br	1005f28 <_Balloc+0x6c>
 1005f60:	100731c0 	call	100731c <_calloc_r>
 1005f64:	103ff026 	beq	r2,zero,1005f28 <_Balloc+0x6c>
 1005f68:	1021883a 	mov	r16,r2
 1005f6c:	14800115 	stw	r18,4(r2)
 1005f70:	14400215 	stw	r17,8(r2)
 1005f74:	003fea06 	br	1005f20 <_Balloc+0x64>

01005f78 <__d2b>:
 1005f78:	defff504 	addi	sp,sp,-44
 1005f7c:	dcc00515 	stw	r19,20(sp)
 1005f80:	04c00044 	movi	r19,1
 1005f84:	dc000215 	stw	r16,8(sp)
 1005f88:	2821883a 	mov	r16,r5
 1005f8c:	980b883a 	mov	r5,r19
 1005f90:	ddc00915 	stw	r23,36(sp)
 1005f94:	dd800815 	stw	r22,32(sp)
 1005f98:	dd400715 	stw	r21,28(sp)
 1005f9c:	dd000615 	stw	r20,24(sp)
 1005fa0:	dc800415 	stw	r18,16(sp)
 1005fa4:	dc400315 	stw	r17,12(sp)
 1005fa8:	dfc00a15 	stw	ra,40(sp)
 1005fac:	3023883a 	mov	r17,r6
 1005fb0:	382d883a 	mov	r22,r7
 1005fb4:	ddc00b17 	ldw	r23,44(sp)
 1005fb8:	1005ebc0 	call	1005ebc <_Balloc>
 1005fbc:	1025883a 	mov	r18,r2
 1005fc0:	00a00034 	movhi	r2,32768
 1005fc4:	10bfffc4 	addi	r2,r2,-1
 1005fc8:	8888703a 	and	r4,r17,r2
 1005fcc:	202ad53a 	srli	r21,r4,20
 1005fd0:	00800434 	movhi	r2,16
 1005fd4:	10bfffc4 	addi	r2,r2,-1
 1005fd8:	8886703a 	and	r3,r17,r2
 1005fdc:	a829003a 	cmpeq	r20,r21,zero
 1005fe0:	800b883a 	mov	r5,r16
 1005fe4:	d8c00115 	stw	r3,4(sp)
 1005fe8:	94000504 	addi	r16,r18,20
 1005fec:	a000021e 	bne	r20,zero,1005ff8 <__d2b+0x80>
 1005ff0:	18c00434 	orhi	r3,r3,16
 1005ff4:	d8c00115 	stw	r3,4(sp)
 1005ff8:	28002726 	beq	r5,zero,1006098 <__d2b+0x120>
 1005ffc:	d809883a 	mov	r4,sp
 1006000:	d9400015 	stw	r5,0(sp)
 1006004:	10059d40 	call	10059d4 <__lo0bits>
 1006008:	100d883a 	mov	r6,r2
 100600c:	10003526 	beq	r2,zero,10060e4 <__d2b+0x16c>
 1006010:	d8c00117 	ldw	r3,4(sp)
 1006014:	00800804 	movi	r2,32
 1006018:	1185c83a 	sub	r2,r2,r6
 100601c:	d9000017 	ldw	r4,0(sp)
 1006020:	1886983a 	sll	r3,r3,r2
 1006024:	1906b03a 	or	r3,r3,r4
 1006028:	90c00515 	stw	r3,20(r18)
 100602c:	d8c00117 	ldw	r3,4(sp)
 1006030:	1986d83a 	srl	r3,r3,r6
 1006034:	d8c00115 	stw	r3,4(sp)
 1006038:	180b003a 	cmpeq	r5,r3,zero
 100603c:	00800084 	movi	r2,2
 1006040:	114bc83a 	sub	r5,r2,r5
 1006044:	80c00115 	stw	r3,4(r16)
 1006048:	91400415 	stw	r5,16(r18)
 100604c:	a0001a1e 	bne	r20,zero,10060b8 <__d2b+0x140>
 1006050:	3545883a 	add	r2,r6,r21
 1006054:	10bef344 	addi	r2,r2,-1075
 1006058:	00c00d44 	movi	r3,53
 100605c:	b0800015 	stw	r2,0(r22)
 1006060:	1987c83a 	sub	r3,r3,r6
 1006064:	b8c00015 	stw	r3,0(r23)
 1006068:	9005883a 	mov	r2,r18
 100606c:	dfc00a17 	ldw	ra,40(sp)
 1006070:	ddc00917 	ldw	r23,36(sp)
 1006074:	dd800817 	ldw	r22,32(sp)
 1006078:	dd400717 	ldw	r21,28(sp)
 100607c:	dd000617 	ldw	r20,24(sp)
 1006080:	dcc00517 	ldw	r19,20(sp)
 1006084:	dc800417 	ldw	r18,16(sp)
 1006088:	dc400317 	ldw	r17,12(sp)
 100608c:	dc000217 	ldw	r16,8(sp)
 1006090:	dec00b04 	addi	sp,sp,44
 1006094:	f800283a 	ret
 1006098:	d9000104 	addi	r4,sp,4
 100609c:	10059d40 	call	10059d4 <__lo0bits>
 10060a0:	11800804 	addi	r6,r2,32
 10060a4:	d8800117 	ldw	r2,4(sp)
 10060a8:	94c00415 	stw	r19,16(r18)
 10060ac:	980b883a 	mov	r5,r19
 10060b0:	90800515 	stw	r2,20(r18)
 10060b4:	a03fe626 	beq	r20,zero,1006050 <__d2b+0xd8>
 10060b8:	2945883a 	add	r2,r5,r5
 10060bc:	1085883a 	add	r2,r2,r2
 10060c0:	1405883a 	add	r2,r2,r16
 10060c4:	113fff17 	ldw	r4,-4(r2)
 10060c8:	30fef384 	addi	r3,r6,-1074
 10060cc:	2820917a 	slli	r16,r5,5
 10060d0:	b0c00015 	stw	r3,0(r22)
 10060d4:	10059640 	call	1005964 <__hi0bits>
 10060d8:	80a1c83a 	sub	r16,r16,r2
 10060dc:	bc000015 	stw	r16,0(r23)
 10060e0:	003fe106 	br	1006068 <__d2b+0xf0>
 10060e4:	d8800017 	ldw	r2,0(sp)
 10060e8:	90800515 	stw	r2,20(r18)
 10060ec:	d8c00117 	ldw	r3,4(sp)
 10060f0:	003fd106 	br	1006038 <__d2b+0xc0>

010060f4 <__mdiff>:
 10060f4:	defffb04 	addi	sp,sp,-20
 10060f8:	dc000015 	stw	r16,0(sp)
 10060fc:	2821883a 	mov	r16,r5
 1006100:	dc800215 	stw	r18,8(sp)
 1006104:	300b883a 	mov	r5,r6
 1006108:	2025883a 	mov	r18,r4
 100610c:	8009883a 	mov	r4,r16
 1006110:	dc400115 	stw	r17,4(sp)
 1006114:	dfc00415 	stw	ra,16(sp)
 1006118:	dcc00315 	stw	r19,12(sp)
 100611c:	3023883a 	mov	r17,r6
 1006120:	1005a980 	call	1005a98 <__mcmp>
 1006124:	10004226 	beq	r2,zero,1006230 <__mdiff+0x13c>
 1006128:	10005016 	blt	r2,zero,100626c <__mdiff+0x178>
 100612c:	0027883a 	mov	r19,zero
 1006130:	81400117 	ldw	r5,4(r16)
 1006134:	9009883a 	mov	r4,r18
 1006138:	1005ebc0 	call	1005ebc <_Balloc>
 100613c:	1019883a 	mov	r12,r2
 1006140:	82800417 	ldw	r10,16(r16)
 1006144:	88800417 	ldw	r2,16(r17)
 1006148:	81800504 	addi	r6,r16,20
 100614c:	5287883a 	add	r3,r10,r10
 1006150:	1085883a 	add	r2,r2,r2
 1006154:	18c7883a 	add	r3,r3,r3
 1006158:	1085883a 	add	r2,r2,r2
 100615c:	8a000504 	addi	r8,r17,20
 1006160:	64c00315 	stw	r19,12(r12)
 1006164:	30db883a 	add	r13,r6,r3
 1006168:	4097883a 	add	r11,r8,r2
 100616c:	61c00504 	addi	r7,r12,20
 1006170:	0013883a 	mov	r9,zero
 1006174:	31000017 	ldw	r4,0(r6)
 1006178:	41400017 	ldw	r5,0(r8)
 100617c:	42000104 	addi	r8,r8,4
 1006180:	20bfffcc 	andi	r2,r4,65535
 1006184:	28ffffcc 	andi	r3,r5,65535
 1006188:	10c5c83a 	sub	r2,r2,r3
 100618c:	1245883a 	add	r2,r2,r9
 1006190:	2008d43a 	srli	r4,r4,16
 1006194:	280ad43a 	srli	r5,r5,16
 1006198:	1007d43a 	srai	r3,r2,16
 100619c:	3880000d 	sth	r2,0(r7)
 10061a0:	2149c83a 	sub	r4,r4,r5
 10061a4:	20c9883a 	add	r4,r4,r3
 10061a8:	3900008d 	sth	r4,2(r7)
 10061ac:	31800104 	addi	r6,r6,4
 10061b0:	39c00104 	addi	r7,r7,4
 10061b4:	2013d43a 	srai	r9,r4,16
 10061b8:	42ffee36 	bltu	r8,r11,1006174 <__mdiff+0x80>
 10061bc:	33400c2e 	bgeu	r6,r13,10061f0 <__mdiff+0xfc>
 10061c0:	30800017 	ldw	r2,0(r6)
 10061c4:	31800104 	addi	r6,r6,4
 10061c8:	10ffffcc 	andi	r3,r2,65535
 10061cc:	1a47883a 	add	r3,r3,r9
 10061d0:	1004d43a 	srli	r2,r2,16
 10061d4:	1809d43a 	srai	r4,r3,16
 10061d8:	38c0000d 	sth	r3,0(r7)
 10061dc:	1105883a 	add	r2,r2,r4
 10061e0:	3880008d 	sth	r2,2(r7)
 10061e4:	1013d43a 	srai	r9,r2,16
 10061e8:	39c00104 	addi	r7,r7,4
 10061ec:	337ff436 	bltu	r6,r13,10061c0 <__mdiff+0xcc>
 10061f0:	38bfff17 	ldw	r2,-4(r7)
 10061f4:	38ffff04 	addi	r3,r7,-4
 10061f8:	1000041e 	bne	r2,zero,100620c <__mdiff+0x118>
 10061fc:	18ffff04 	addi	r3,r3,-4
 1006200:	18800017 	ldw	r2,0(r3)
 1006204:	52bfffc4 	addi	r10,r10,-1
 1006208:	103ffc26 	beq	r2,zero,10061fc <__mdiff+0x108>
 100620c:	6005883a 	mov	r2,r12
 1006210:	62800415 	stw	r10,16(r12)
 1006214:	dfc00417 	ldw	ra,16(sp)
 1006218:	dcc00317 	ldw	r19,12(sp)
 100621c:	dc800217 	ldw	r18,8(sp)
 1006220:	dc400117 	ldw	r17,4(sp)
 1006224:	dc000017 	ldw	r16,0(sp)
 1006228:	dec00504 	addi	sp,sp,20
 100622c:	f800283a 	ret
 1006230:	9009883a 	mov	r4,r18
 1006234:	000b883a 	mov	r5,zero
 1006238:	1005ebc0 	call	1005ebc <_Balloc>
 100623c:	1019883a 	mov	r12,r2
 1006240:	00800044 	movi	r2,1
 1006244:	60800415 	stw	r2,16(r12)
 1006248:	6005883a 	mov	r2,r12
 100624c:	60000515 	stw	zero,20(r12)
 1006250:	dfc00417 	ldw	ra,16(sp)
 1006254:	dcc00317 	ldw	r19,12(sp)
 1006258:	dc800217 	ldw	r18,8(sp)
 100625c:	dc400117 	ldw	r17,4(sp)
 1006260:	dc000017 	ldw	r16,0(sp)
 1006264:	dec00504 	addi	sp,sp,20
 1006268:	f800283a 	ret
 100626c:	880d883a 	mov	r6,r17
 1006270:	04c00044 	movi	r19,1
 1006274:	8023883a 	mov	r17,r16
 1006278:	3021883a 	mov	r16,r6
 100627c:	003fac06 	br	1006130 <__mdiff+0x3c>

01006280 <__lshift>:
 1006280:	defff904 	addi	sp,sp,-28
 1006284:	28800417 	ldw	r2,16(r5)
 1006288:	dc000015 	stw	r16,0(sp)
 100628c:	3021d17a 	srai	r16,r6,5
 1006290:	28c00217 	ldw	r3,8(r5)
 1006294:	10800044 	addi	r2,r2,1
 1006298:	dc400115 	stw	r17,4(sp)
 100629c:	80a3883a 	add	r17,r16,r2
 10062a0:	dd400515 	stw	r21,20(sp)
 10062a4:	dd000415 	stw	r20,16(sp)
 10062a8:	dc800215 	stw	r18,8(sp)
 10062ac:	dfc00615 	stw	ra,24(sp)
 10062b0:	2825883a 	mov	r18,r5
 10062b4:	dcc00315 	stw	r19,12(sp)
 10062b8:	3029883a 	mov	r20,r6
 10062bc:	202b883a 	mov	r21,r4
 10062c0:	29400117 	ldw	r5,4(r5)
 10062c4:	1c40030e 	bge	r3,r17,10062d4 <__lshift+0x54>
 10062c8:	18c7883a 	add	r3,r3,r3
 10062cc:	29400044 	addi	r5,r5,1
 10062d0:	1c7ffd16 	blt	r3,r17,10062c8 <__lshift+0x48>
 10062d4:	a809883a 	mov	r4,r21
 10062d8:	1005ebc0 	call	1005ebc <_Balloc>
 10062dc:	1027883a 	mov	r19,r2
 10062e0:	11400504 	addi	r5,r2,20
 10062e4:	0400090e 	bge	zero,r16,100630c <__lshift+0x8c>
 10062e8:	2805883a 	mov	r2,r5
 10062ec:	0007883a 	mov	r3,zero
 10062f0:	18c00044 	addi	r3,r3,1
 10062f4:	10000015 	stw	zero,0(r2)
 10062f8:	10800104 	addi	r2,r2,4
 10062fc:	80fffc1e 	bne	r16,r3,10062f0 <__lshift+0x70>
 1006300:	8405883a 	add	r2,r16,r16
 1006304:	1085883a 	add	r2,r2,r2
 1006308:	288b883a 	add	r5,r5,r2
 100630c:	90800417 	ldw	r2,16(r18)
 1006310:	91000504 	addi	r4,r18,20
 1006314:	a18007cc 	andi	r6,r20,31
 1006318:	1085883a 	add	r2,r2,r2
 100631c:	1085883a 	add	r2,r2,r2
 1006320:	208f883a 	add	r7,r4,r2
 1006324:	30001e26 	beq	r6,zero,10063a0 <__lshift+0x120>
 1006328:	00800804 	movi	r2,32
 100632c:	1191c83a 	sub	r8,r2,r6
 1006330:	0007883a 	mov	r3,zero
 1006334:	20800017 	ldw	r2,0(r4)
 1006338:	1184983a 	sll	r2,r2,r6
 100633c:	1884b03a 	or	r2,r3,r2
 1006340:	28800015 	stw	r2,0(r5)
 1006344:	20c00017 	ldw	r3,0(r4)
 1006348:	21000104 	addi	r4,r4,4
 100634c:	29400104 	addi	r5,r5,4
 1006350:	1a06d83a 	srl	r3,r3,r8
 1006354:	21fff736 	bltu	r4,r7,1006334 <__lshift+0xb4>
 1006358:	28c00015 	stw	r3,0(r5)
 100635c:	18000126 	beq	r3,zero,1006364 <__lshift+0xe4>
 1006360:	8c400044 	addi	r17,r17,1
 1006364:	88bfffc4 	addi	r2,r17,-1
 1006368:	98800415 	stw	r2,16(r19)
 100636c:	a809883a 	mov	r4,r21
 1006370:	900b883a 	mov	r5,r18
 1006374:	100593c0 	call	100593c <_Bfree>
 1006378:	9805883a 	mov	r2,r19
 100637c:	dfc00617 	ldw	ra,24(sp)
 1006380:	dd400517 	ldw	r21,20(sp)
 1006384:	dd000417 	ldw	r20,16(sp)
 1006388:	dcc00317 	ldw	r19,12(sp)
 100638c:	dc800217 	ldw	r18,8(sp)
 1006390:	dc400117 	ldw	r17,4(sp)
 1006394:	dc000017 	ldw	r16,0(sp)
 1006398:	dec00704 	addi	sp,sp,28
 100639c:	f800283a 	ret
 10063a0:	20800017 	ldw	r2,0(r4)
 10063a4:	21000104 	addi	r4,r4,4
 10063a8:	28800015 	stw	r2,0(r5)
 10063ac:	29400104 	addi	r5,r5,4
 10063b0:	21ffec2e 	bgeu	r4,r7,1006364 <__lshift+0xe4>
 10063b4:	20800017 	ldw	r2,0(r4)
 10063b8:	21000104 	addi	r4,r4,4
 10063bc:	28800015 	stw	r2,0(r5)
 10063c0:	29400104 	addi	r5,r5,4
 10063c4:	21fff636 	bltu	r4,r7,10063a0 <__lshift+0x120>
 10063c8:	003fe606 	br	1006364 <__lshift+0xe4>

010063cc <__multiply>:
 10063cc:	defff004 	addi	sp,sp,-64
 10063d0:	dc800815 	stw	r18,32(sp)
 10063d4:	dc400715 	stw	r17,28(sp)
 10063d8:	2c800417 	ldw	r18,16(r5)
 10063dc:	34400417 	ldw	r17,16(r6)
 10063e0:	dcc00915 	stw	r19,36(sp)
 10063e4:	dc000615 	stw	r16,24(sp)
 10063e8:	dfc00f15 	stw	ra,60(sp)
 10063ec:	df000e15 	stw	fp,56(sp)
 10063f0:	ddc00d15 	stw	r23,52(sp)
 10063f4:	dd800c15 	stw	r22,48(sp)
 10063f8:	dd400b15 	stw	r21,44(sp)
 10063fc:	dd000a15 	stw	r20,40(sp)
 1006400:	2821883a 	mov	r16,r5
 1006404:	3027883a 	mov	r19,r6
 1006408:	9440040e 	bge	r18,r17,100641c <__multiply+0x50>
 100640c:	8825883a 	mov	r18,r17
 1006410:	2c400417 	ldw	r17,16(r5)
 1006414:	2827883a 	mov	r19,r5
 1006418:	3021883a 	mov	r16,r6
 100641c:	80800217 	ldw	r2,8(r16)
 1006420:	9447883a 	add	r3,r18,r17
 1006424:	d8c00415 	stw	r3,16(sp)
 1006428:	81400117 	ldw	r5,4(r16)
 100642c:	10c0010e 	bge	r2,r3,1006434 <__multiply+0x68>
 1006430:	29400044 	addi	r5,r5,1
 1006434:	1005ebc0 	call	1005ebc <_Balloc>
 1006438:	d8800515 	stw	r2,20(sp)
 100643c:	d9000417 	ldw	r4,16(sp)
 1006440:	d8c00517 	ldw	r3,20(sp)
 1006444:	2105883a 	add	r2,r4,r4
 1006448:	1085883a 	add	r2,r2,r2
 100644c:	19000504 	addi	r4,r3,20
 1006450:	2085883a 	add	r2,r4,r2
 1006454:	d8800315 	stw	r2,12(sp)
 1006458:	2080052e 	bgeu	r4,r2,1006470 <__multiply+0xa4>
 100645c:	2005883a 	mov	r2,r4
 1006460:	d8c00317 	ldw	r3,12(sp)
 1006464:	10000015 	stw	zero,0(r2)
 1006468:	10800104 	addi	r2,r2,4
 100646c:	10fffc36 	bltu	r2,r3,1006460 <__multiply+0x94>
 1006470:	8c45883a 	add	r2,r17,r17
 1006474:	9487883a 	add	r3,r18,r18
 1006478:	9dc00504 	addi	r23,r19,20
 100647c:	1085883a 	add	r2,r2,r2
 1006480:	84000504 	addi	r16,r16,20
 1006484:	18c7883a 	add	r3,r3,r3
 1006488:	b885883a 	add	r2,r23,r2
 100648c:	dc000015 	stw	r16,0(sp)
 1006490:	d8800215 	stw	r2,8(sp)
 1006494:	80f9883a 	add	fp,r16,r3
 1006498:	b880432e 	bgeu	r23,r2,10065a8 <__multiply+0x1dc>
 100649c:	d9000115 	stw	r4,4(sp)
 10064a0:	b9000017 	ldw	r4,0(r23)
 10064a4:	253fffcc 	andi	r20,r4,65535
 10064a8:	a0001a26 	beq	r20,zero,1006514 <__multiply+0x148>
 10064ac:	dcc00017 	ldw	r19,0(sp)
 10064b0:	dc800117 	ldw	r18,4(sp)
 10064b4:	002b883a 	mov	r21,zero
 10064b8:	9c400017 	ldw	r17,0(r19)
 10064bc:	94000017 	ldw	r16,0(r18)
 10064c0:	a009883a 	mov	r4,r20
 10064c4:	897fffcc 	andi	r5,r17,65535
 10064c8:	10096900 	call	1009690 <__mulsi3>
 10064cc:	880ad43a 	srli	r5,r17,16
 10064d0:	80ffffcc 	andi	r3,r16,65535
 10064d4:	a8c7883a 	add	r3,r21,r3
 10064d8:	a009883a 	mov	r4,r20
 10064dc:	10e3883a 	add	r17,r2,r3
 10064e0:	8020d43a 	srli	r16,r16,16
 10064e4:	10096900 	call	1009690 <__mulsi3>
 10064e8:	8806d43a 	srli	r3,r17,16
 10064ec:	1405883a 	add	r2,r2,r16
 10064f0:	9cc00104 	addi	r19,r19,4
 10064f4:	1887883a 	add	r3,r3,r2
 10064f8:	90c0008d 	sth	r3,2(r18)
 10064fc:	9440000d 	sth	r17,0(r18)
 1006500:	182ad43a 	srli	r21,r3,16
 1006504:	94800104 	addi	r18,r18,4
 1006508:	9f3feb36 	bltu	r19,fp,10064b8 <__multiply+0xec>
 100650c:	95400015 	stw	r21,0(r18)
 1006510:	b9000017 	ldw	r4,0(r23)
 1006514:	202ad43a 	srli	r21,r4,16
 1006518:	a8001c26 	beq	r21,zero,100658c <__multiply+0x1c0>
 100651c:	d9000117 	ldw	r4,4(sp)
 1006520:	dd000017 	ldw	r20,0(sp)
 1006524:	002d883a 	mov	r22,zero
 1006528:	24c00017 	ldw	r19,0(r4)
 100652c:	2025883a 	mov	r18,r4
 1006530:	9823883a 	mov	r17,r19
 1006534:	a4000017 	ldw	r16,0(r20)
 1006538:	a809883a 	mov	r4,r21
 100653c:	a5000104 	addi	r20,r20,4
 1006540:	817fffcc 	andi	r5,r16,65535
 1006544:	10096900 	call	1009690 <__mulsi3>
 1006548:	8806d43a 	srli	r3,r17,16
 100654c:	800ad43a 	srli	r5,r16,16
 1006550:	94c0000d 	sth	r19,0(r18)
 1006554:	b0c7883a 	add	r3,r22,r3
 1006558:	10e1883a 	add	r16,r2,r3
 100655c:	9400008d 	sth	r16,2(r18)
 1006560:	a809883a 	mov	r4,r21
 1006564:	94800104 	addi	r18,r18,4
 1006568:	10096900 	call	1009690 <__mulsi3>
 100656c:	94400017 	ldw	r17,0(r18)
 1006570:	8020d43a 	srli	r16,r16,16
 1006574:	88ffffcc 	andi	r3,r17,65535
 1006578:	10c5883a 	add	r2,r2,r3
 100657c:	80a7883a 	add	r19,r16,r2
 1006580:	982cd43a 	srli	r22,r19,16
 1006584:	a73feb36 	bltu	r20,fp,1006534 <__multiply+0x168>
 1006588:	94c00015 	stw	r19,0(r18)
 100658c:	d8800217 	ldw	r2,8(sp)
 1006590:	bdc00104 	addi	r23,r23,4
 1006594:	b880042e 	bgeu	r23,r2,10065a8 <__multiply+0x1dc>
 1006598:	d8c00117 	ldw	r3,4(sp)
 100659c:	18c00104 	addi	r3,r3,4
 10065a0:	d8c00115 	stw	r3,4(sp)
 10065a4:	003fbe06 	br	10064a0 <__multiply+0xd4>
 10065a8:	d9000417 	ldw	r4,16(sp)
 10065ac:	01000c0e 	bge	zero,r4,10065e0 <__multiply+0x214>
 10065b0:	d8c00317 	ldw	r3,12(sp)
 10065b4:	18bfff17 	ldw	r2,-4(r3)
 10065b8:	18ffff04 	addi	r3,r3,-4
 10065bc:	10000326 	beq	r2,zero,10065cc <__multiply+0x200>
 10065c0:	00000706 	br	10065e0 <__multiply+0x214>
 10065c4:	18800017 	ldw	r2,0(r3)
 10065c8:	1000051e 	bne	r2,zero,10065e0 <__multiply+0x214>
 10065cc:	d9000417 	ldw	r4,16(sp)
 10065d0:	18ffff04 	addi	r3,r3,-4
 10065d4:	213fffc4 	addi	r4,r4,-1
 10065d8:	d9000415 	stw	r4,16(sp)
 10065dc:	203ff91e 	bne	r4,zero,10065c4 <__multiply+0x1f8>
 10065e0:	d8800417 	ldw	r2,16(sp)
 10065e4:	d8c00517 	ldw	r3,20(sp)
 10065e8:	18800415 	stw	r2,16(r3)
 10065ec:	1805883a 	mov	r2,r3
 10065f0:	dfc00f17 	ldw	ra,60(sp)
 10065f4:	df000e17 	ldw	fp,56(sp)
 10065f8:	ddc00d17 	ldw	r23,52(sp)
 10065fc:	dd800c17 	ldw	r22,48(sp)
 1006600:	dd400b17 	ldw	r21,44(sp)
 1006604:	dd000a17 	ldw	r20,40(sp)
 1006608:	dcc00917 	ldw	r19,36(sp)
 100660c:	dc800817 	ldw	r18,32(sp)
 1006610:	dc400717 	ldw	r17,28(sp)
 1006614:	dc000617 	ldw	r16,24(sp)
 1006618:	dec01004 	addi	sp,sp,64
 100661c:	f800283a 	ret

01006620 <__i2b>:
 1006620:	defffd04 	addi	sp,sp,-12
 1006624:	dc000015 	stw	r16,0(sp)
 1006628:	04000044 	movi	r16,1
 100662c:	dc800115 	stw	r18,4(sp)
 1006630:	2825883a 	mov	r18,r5
 1006634:	800b883a 	mov	r5,r16
 1006638:	dfc00215 	stw	ra,8(sp)
 100663c:	1005ebc0 	call	1005ebc <_Balloc>
 1006640:	14000415 	stw	r16,16(r2)
 1006644:	14800515 	stw	r18,20(r2)
 1006648:	dfc00217 	ldw	ra,8(sp)
 100664c:	dc800117 	ldw	r18,4(sp)
 1006650:	dc000017 	ldw	r16,0(sp)
 1006654:	dec00304 	addi	sp,sp,12
 1006658:	f800283a 	ret

0100665c <__multadd>:
 100665c:	defff604 	addi	sp,sp,-40
 1006660:	dd800615 	stw	r22,24(sp)
 1006664:	2d800417 	ldw	r22,16(r5)
 1006668:	df000815 	stw	fp,32(sp)
 100666c:	ddc00715 	stw	r23,28(sp)
 1006670:	dd400515 	stw	r21,20(sp)
 1006674:	dd000415 	stw	r20,16(sp)
 1006678:	dcc00315 	stw	r19,12(sp)
 100667c:	dc800215 	stw	r18,8(sp)
 1006680:	dfc00915 	stw	ra,36(sp)
 1006684:	dc400115 	stw	r17,4(sp)
 1006688:	dc000015 	stw	r16,0(sp)
 100668c:	282f883a 	mov	r23,r5
 1006690:	2039883a 	mov	fp,r4
 1006694:	302b883a 	mov	r21,r6
 1006698:	3829883a 	mov	r20,r7
 100669c:	2c800504 	addi	r18,r5,20
 10066a0:	0027883a 	mov	r19,zero
 10066a4:	94400017 	ldw	r17,0(r18)
 10066a8:	a80b883a 	mov	r5,r21
 10066ac:	9cc00044 	addi	r19,r19,1
 10066b0:	893fffcc 	andi	r4,r17,65535
 10066b4:	10096900 	call	1009690 <__mulsi3>
 10066b8:	8808d43a 	srli	r4,r17,16
 10066bc:	1521883a 	add	r16,r2,r20
 10066c0:	a80b883a 	mov	r5,r21
 10066c4:	10096900 	call	1009690 <__mulsi3>
 10066c8:	8008d43a 	srli	r4,r16,16
 10066cc:	843fffcc 	andi	r16,r16,65535
 10066d0:	1105883a 	add	r2,r2,r4
 10066d4:	1006943a 	slli	r3,r2,16
 10066d8:	1028d43a 	srli	r20,r2,16
 10066dc:	1c07883a 	add	r3,r3,r16
 10066e0:	90c00015 	stw	r3,0(r18)
 10066e4:	94800104 	addi	r18,r18,4
 10066e8:	9dbfee16 	blt	r19,r22,10066a4 <__multadd+0x48>
 10066ec:	a0000826 	beq	r20,zero,1006710 <__multadd+0xb4>
 10066f0:	b8800217 	ldw	r2,8(r23)
 10066f4:	b080130e 	bge	r22,r2,1006744 <__multadd+0xe8>
 10066f8:	b585883a 	add	r2,r22,r22
 10066fc:	1085883a 	add	r2,r2,r2
 1006700:	15c5883a 	add	r2,r2,r23
 1006704:	b0c00044 	addi	r3,r22,1
 1006708:	15000515 	stw	r20,20(r2)
 100670c:	b8c00415 	stw	r3,16(r23)
 1006710:	b805883a 	mov	r2,r23
 1006714:	dfc00917 	ldw	ra,36(sp)
 1006718:	df000817 	ldw	fp,32(sp)
 100671c:	ddc00717 	ldw	r23,28(sp)
 1006720:	dd800617 	ldw	r22,24(sp)
 1006724:	dd400517 	ldw	r21,20(sp)
 1006728:	dd000417 	ldw	r20,16(sp)
 100672c:	dcc00317 	ldw	r19,12(sp)
 1006730:	dc800217 	ldw	r18,8(sp)
 1006734:	dc400117 	ldw	r17,4(sp)
 1006738:	dc000017 	ldw	r16,0(sp)
 100673c:	dec00a04 	addi	sp,sp,40
 1006740:	f800283a 	ret
 1006744:	b9400117 	ldw	r5,4(r23)
 1006748:	e009883a 	mov	r4,fp
 100674c:	29400044 	addi	r5,r5,1
 1006750:	1005ebc0 	call	1005ebc <_Balloc>
 1006754:	b9800417 	ldw	r6,16(r23)
 1006758:	b9400304 	addi	r5,r23,12
 100675c:	11000304 	addi	r4,r2,12
 1006760:	318d883a 	add	r6,r6,r6
 1006764:	318d883a 	add	r6,r6,r6
 1006768:	31800204 	addi	r6,r6,8
 100676c:	1023883a 	mov	r17,r2
 1006770:	10057240 	call	1005724 <memcpy>
 1006774:	b80b883a 	mov	r5,r23
 1006778:	e009883a 	mov	r4,fp
 100677c:	100593c0 	call	100593c <_Bfree>
 1006780:	882f883a 	mov	r23,r17
 1006784:	003fdc06 	br	10066f8 <__multadd+0x9c>

01006788 <__pow5mult>:
 1006788:	defffa04 	addi	sp,sp,-24
 100678c:	308000cc 	andi	r2,r6,3
 1006790:	dd000415 	stw	r20,16(sp)
 1006794:	dcc00315 	stw	r19,12(sp)
 1006798:	dc000015 	stw	r16,0(sp)
 100679c:	dfc00515 	stw	ra,20(sp)
 10067a0:	dc800215 	stw	r18,8(sp)
 10067a4:	dc400115 	stw	r17,4(sp)
 10067a8:	3021883a 	mov	r16,r6
 10067ac:	2027883a 	mov	r19,r4
 10067b0:	2829883a 	mov	r20,r5
 10067b4:	10002b1e 	bne	r2,zero,1006864 <__pow5mult+0xdc>
 10067b8:	8025d0ba 	srai	r18,r16,2
 10067bc:	90001b26 	beq	r18,zero,100682c <__pow5mult+0xa4>
 10067c0:	9c001217 	ldw	r16,72(r19)
 10067c4:	8000081e 	bne	r16,zero,10067e8 <__pow5mult+0x60>
 10067c8:	00003006 	br	100688c <__pow5mult+0x104>
 10067cc:	800b883a 	mov	r5,r16
 10067d0:	800d883a 	mov	r6,r16
 10067d4:	9809883a 	mov	r4,r19
 10067d8:	90001426 	beq	r18,zero,100682c <__pow5mult+0xa4>
 10067dc:	80800017 	ldw	r2,0(r16)
 10067e0:	10001b26 	beq	r2,zero,1006850 <__pow5mult+0xc8>
 10067e4:	1021883a 	mov	r16,r2
 10067e8:	9080004c 	andi	r2,r18,1
 10067ec:	1005003a 	cmpeq	r2,r2,zero
 10067f0:	9025d07a 	srai	r18,r18,1
 10067f4:	800d883a 	mov	r6,r16
 10067f8:	9809883a 	mov	r4,r19
 10067fc:	a00b883a 	mov	r5,r20
 1006800:	103ff21e 	bne	r2,zero,10067cc <__pow5mult+0x44>
 1006804:	10063cc0 	call	10063cc <__multiply>
 1006808:	a00b883a 	mov	r5,r20
 100680c:	9809883a 	mov	r4,r19
 1006810:	1023883a 	mov	r17,r2
 1006814:	100593c0 	call	100593c <_Bfree>
 1006818:	8829883a 	mov	r20,r17
 100681c:	800b883a 	mov	r5,r16
 1006820:	800d883a 	mov	r6,r16
 1006824:	9809883a 	mov	r4,r19
 1006828:	903fec1e 	bne	r18,zero,10067dc <__pow5mult+0x54>
 100682c:	a005883a 	mov	r2,r20
 1006830:	dfc00517 	ldw	ra,20(sp)
 1006834:	dd000417 	ldw	r20,16(sp)
 1006838:	dcc00317 	ldw	r19,12(sp)
 100683c:	dc800217 	ldw	r18,8(sp)
 1006840:	dc400117 	ldw	r17,4(sp)
 1006844:	dc000017 	ldw	r16,0(sp)
 1006848:	dec00604 	addi	sp,sp,24
 100684c:	f800283a 	ret
 1006850:	10063cc0 	call	10063cc <__multiply>
 1006854:	80800015 	stw	r2,0(r16)
 1006858:	1021883a 	mov	r16,r2
 100685c:	10000015 	stw	zero,0(r2)
 1006860:	003fe106 	br	10067e8 <__pow5mult+0x60>
 1006864:	1085883a 	add	r2,r2,r2
 1006868:	00c04074 	movhi	r3,257
 100686c:	18caf804 	addi	r3,r3,11232
 1006870:	1085883a 	add	r2,r2,r2
 1006874:	10c5883a 	add	r2,r2,r3
 1006878:	11bfff17 	ldw	r6,-4(r2)
 100687c:	000f883a 	mov	r7,zero
 1006880:	100665c0 	call	100665c <__multadd>
 1006884:	1029883a 	mov	r20,r2
 1006888:	003fcb06 	br	10067b8 <__pow5mult+0x30>
 100688c:	9809883a 	mov	r4,r19
 1006890:	01409c44 	movi	r5,625
 1006894:	10066200 	call	1006620 <__i2b>
 1006898:	98801215 	stw	r2,72(r19)
 100689c:	1021883a 	mov	r16,r2
 10068a0:	10000015 	stw	zero,0(r2)
 10068a4:	003fd006 	br	10067e8 <__pow5mult+0x60>

010068a8 <__s2b>:
 10068a8:	defff904 	addi	sp,sp,-28
 10068ac:	dcc00315 	stw	r19,12(sp)
 10068b0:	dc800215 	stw	r18,8(sp)
 10068b4:	2827883a 	mov	r19,r5
 10068b8:	2025883a 	mov	r18,r4
 10068bc:	01400244 	movi	r5,9
 10068c0:	39000204 	addi	r4,r7,8
 10068c4:	dd000415 	stw	r20,16(sp)
 10068c8:	dc400115 	stw	r17,4(sp)
 10068cc:	dfc00615 	stw	ra,24(sp)
 10068d0:	dd400515 	stw	r21,20(sp)
 10068d4:	dc000015 	stw	r16,0(sp)
 10068d8:	3829883a 	mov	r20,r7
 10068dc:	3023883a 	mov	r17,r6
 10068e0:	10095c00 	call	10095c0 <__divsi3>
 10068e4:	00c00044 	movi	r3,1
 10068e8:	1880350e 	bge	r3,r2,10069c0 <__s2b+0x118>
 10068ec:	000b883a 	mov	r5,zero
 10068f0:	18c7883a 	add	r3,r3,r3
 10068f4:	29400044 	addi	r5,r5,1
 10068f8:	18bffd16 	blt	r3,r2,10068f0 <__s2b+0x48>
 10068fc:	9009883a 	mov	r4,r18
 1006900:	1005ebc0 	call	1005ebc <_Balloc>
 1006904:	1011883a 	mov	r8,r2
 1006908:	d8800717 	ldw	r2,28(sp)
 100690c:	00c00044 	movi	r3,1
 1006910:	01800244 	movi	r6,9
 1006914:	40800515 	stw	r2,20(r8)
 1006918:	40c00415 	stw	r3,16(r8)
 100691c:	3440260e 	bge	r6,r17,10069b8 <__s2b+0x110>
 1006920:	3021883a 	mov	r16,r6
 1006924:	99ab883a 	add	r21,r19,r6
 1006928:	9c05883a 	add	r2,r19,r16
 100692c:	11c00007 	ldb	r7,0(r2)
 1006930:	400b883a 	mov	r5,r8
 1006934:	9009883a 	mov	r4,r18
 1006938:	39fff404 	addi	r7,r7,-48
 100693c:	01800284 	movi	r6,10
 1006940:	100665c0 	call	100665c <__multadd>
 1006944:	84000044 	addi	r16,r16,1
 1006948:	1011883a 	mov	r8,r2
 100694c:	8c3ff61e 	bne	r17,r16,1006928 <__s2b+0x80>
 1006950:	ac45883a 	add	r2,r21,r17
 1006954:	117ffe04 	addi	r5,r2,-8
 1006958:	880d883a 	mov	r6,r17
 100695c:	35000c0e 	bge	r6,r20,1006990 <__s2b+0xe8>
 1006960:	a185c83a 	sub	r2,r20,r6
 1006964:	2821883a 	mov	r16,r5
 1006968:	28a3883a 	add	r17,r5,r2
 100696c:	81c00007 	ldb	r7,0(r16)
 1006970:	400b883a 	mov	r5,r8
 1006974:	9009883a 	mov	r4,r18
 1006978:	39fff404 	addi	r7,r7,-48
 100697c:	01800284 	movi	r6,10
 1006980:	100665c0 	call	100665c <__multadd>
 1006984:	84000044 	addi	r16,r16,1
 1006988:	1011883a 	mov	r8,r2
 100698c:	847ff71e 	bne	r16,r17,100696c <__s2b+0xc4>
 1006990:	4005883a 	mov	r2,r8
 1006994:	dfc00617 	ldw	ra,24(sp)
 1006998:	dd400517 	ldw	r21,20(sp)
 100699c:	dd000417 	ldw	r20,16(sp)
 10069a0:	dcc00317 	ldw	r19,12(sp)
 10069a4:	dc800217 	ldw	r18,8(sp)
 10069a8:	dc400117 	ldw	r17,4(sp)
 10069ac:	dc000017 	ldw	r16,0(sp)
 10069b0:	dec00704 	addi	sp,sp,28
 10069b4:	f800283a 	ret
 10069b8:	99400284 	addi	r5,r19,10
 10069bc:	003fe706 	br	100695c <__s2b+0xb4>
 10069c0:	000b883a 	mov	r5,zero
 10069c4:	003fcd06 	br	10068fc <__s2b+0x54>

010069c8 <_realloc_r>:
 10069c8:	defff404 	addi	sp,sp,-48
 10069cc:	dd800815 	stw	r22,32(sp)
 10069d0:	dc800415 	stw	r18,16(sp)
 10069d4:	dc400315 	stw	r17,12(sp)
 10069d8:	dfc00b15 	stw	ra,44(sp)
 10069dc:	df000a15 	stw	fp,40(sp)
 10069e0:	ddc00915 	stw	r23,36(sp)
 10069e4:	dd400715 	stw	r21,28(sp)
 10069e8:	dd000615 	stw	r20,24(sp)
 10069ec:	dcc00515 	stw	r19,20(sp)
 10069f0:	dc000215 	stw	r16,8(sp)
 10069f4:	2825883a 	mov	r18,r5
 10069f8:	3023883a 	mov	r17,r6
 10069fc:	202d883a 	mov	r22,r4
 1006a00:	2800c926 	beq	r5,zero,1006d28 <_realloc_r+0x360>
 1006a04:	100a4140 	call	100a414 <__malloc_lock>
 1006a08:	943ffe04 	addi	r16,r18,-8
 1006a0c:	88c002c4 	addi	r3,r17,11
 1006a10:	00800584 	movi	r2,22
 1006a14:	82000117 	ldw	r8,4(r16)
 1006a18:	10c01b2e 	bgeu	r2,r3,1006a88 <_realloc_r+0xc0>
 1006a1c:	00bffe04 	movi	r2,-8
 1006a20:	188e703a 	and	r7,r3,r2
 1006a24:	3839883a 	mov	fp,r7
 1006a28:	38001a16 	blt	r7,zero,1006a94 <_realloc_r+0xcc>
 1006a2c:	e4401936 	bltu	fp,r17,1006a94 <_realloc_r+0xcc>
 1006a30:	013fff04 	movi	r4,-4
 1006a34:	4126703a 	and	r19,r8,r4
 1006a38:	99c02616 	blt	r19,r7,1006ad4 <_realloc_r+0x10c>
 1006a3c:	802b883a 	mov	r21,r16
 1006a40:	9829883a 	mov	r20,r19
 1006a44:	84000204 	addi	r16,r16,8
 1006a48:	a80f883a 	mov	r7,r21
 1006a4c:	a70dc83a 	sub	r6,r20,fp
 1006a50:	008003c4 	movi	r2,15
 1006a54:	1180c136 	bltu	r2,r6,1006d5c <_realloc_r+0x394>
 1006a58:	38800117 	ldw	r2,4(r7)
 1006a5c:	a549883a 	add	r4,r20,r21
 1006a60:	1080004c 	andi	r2,r2,1
 1006a64:	a084b03a 	or	r2,r20,r2
 1006a68:	38800115 	stw	r2,4(r7)
 1006a6c:	20c00117 	ldw	r3,4(r4)
 1006a70:	18c00054 	ori	r3,r3,1
 1006a74:	20c00115 	stw	r3,4(r4)
 1006a78:	b009883a 	mov	r4,r22
 1006a7c:	100a4340 	call	100a434 <__malloc_unlock>
 1006a80:	8023883a 	mov	r17,r16
 1006a84:	00000606 	br	1006aa0 <_realloc_r+0xd8>
 1006a88:	01c00404 	movi	r7,16
 1006a8c:	3839883a 	mov	fp,r7
 1006a90:	e47fe72e 	bgeu	fp,r17,1006a30 <_realloc_r+0x68>
 1006a94:	00800304 	movi	r2,12
 1006a98:	0023883a 	mov	r17,zero
 1006a9c:	b0800015 	stw	r2,0(r22)
 1006aa0:	8805883a 	mov	r2,r17
 1006aa4:	dfc00b17 	ldw	ra,44(sp)
 1006aa8:	df000a17 	ldw	fp,40(sp)
 1006aac:	ddc00917 	ldw	r23,36(sp)
 1006ab0:	dd800817 	ldw	r22,32(sp)
 1006ab4:	dd400717 	ldw	r21,28(sp)
 1006ab8:	dd000617 	ldw	r20,24(sp)
 1006abc:	dcc00517 	ldw	r19,20(sp)
 1006ac0:	dc800417 	ldw	r18,16(sp)
 1006ac4:	dc400317 	ldw	r17,12(sp)
 1006ac8:	dc000217 	ldw	r16,8(sp)
 1006acc:	dec00c04 	addi	sp,sp,48
 1006ad0:	f800283a 	ret
 1006ad4:	00804074 	movhi	r2,257
 1006ad8:	108c8a04 	addi	r2,r2,12840
 1006adc:	12400217 	ldw	r9,8(r2)
 1006ae0:	84cd883a 	add	r6,r16,r19
 1006ae4:	802b883a 	mov	r21,r16
 1006ae8:	3240b926 	beq	r6,r9,1006dd0 <_realloc_r+0x408>
 1006aec:	31400117 	ldw	r5,4(r6)
 1006af0:	00bfff84 	movi	r2,-2
 1006af4:	2884703a 	and	r2,r5,r2
 1006af8:	1185883a 	add	r2,r2,r6
 1006afc:	10c00117 	ldw	r3,4(r2)
 1006b00:	18c0004c 	andi	r3,r3,1
 1006b04:	1807003a 	cmpeq	r3,r3,zero
 1006b08:	1800a326 	beq	r3,zero,1006d98 <_realloc_r+0x3d0>
 1006b0c:	2908703a 	and	r4,r5,r4
 1006b10:	9929883a 	add	r20,r19,r4
 1006b14:	a1c0a30e 	bge	r20,r7,1006da4 <_realloc_r+0x3dc>
 1006b18:	4080004c 	andi	r2,r8,1
 1006b1c:	1000551e 	bne	r2,zero,1006c74 <_realloc_r+0x2ac>
 1006b20:	80800017 	ldw	r2,0(r16)
 1006b24:	80afc83a 	sub	r23,r16,r2
 1006b28:	b8c00117 	ldw	r3,4(r23)
 1006b2c:	00bfff04 	movi	r2,-4
 1006b30:	1884703a 	and	r2,r3,r2
 1006b34:	30002e26 	beq	r6,zero,1006bf0 <_realloc_r+0x228>
 1006b38:	3240b926 	beq	r6,r9,1006e20 <_realloc_r+0x458>
 1006b3c:	98a9883a 	add	r20,r19,r2
 1006b40:	2509883a 	add	r4,r4,r20
 1006b44:	d9000015 	stw	r4,0(sp)
 1006b48:	21c02a16 	blt	r4,r7,1006bf4 <_realloc_r+0x22c>
 1006b4c:	30800317 	ldw	r2,12(r6)
 1006b50:	30c00217 	ldw	r3,8(r6)
 1006b54:	01400904 	movi	r5,36
 1006b58:	99bfff04 	addi	r6,r19,-4
 1006b5c:	18800315 	stw	r2,12(r3)
 1006b60:	10c00215 	stw	r3,8(r2)
 1006b64:	b9000317 	ldw	r4,12(r23)
 1006b68:	b8800217 	ldw	r2,8(r23)
 1006b6c:	b82b883a 	mov	r21,r23
 1006b70:	bc000204 	addi	r16,r23,8
 1006b74:	20800215 	stw	r2,8(r4)
 1006b78:	11000315 	stw	r4,12(r2)
 1006b7c:	2980e436 	bltu	r5,r6,1006f10 <_realloc_r+0x548>
 1006b80:	008004c4 	movi	r2,19
 1006b84:	9009883a 	mov	r4,r18
 1006b88:	8011883a 	mov	r8,r16
 1006b8c:	11800f2e 	bgeu	r2,r6,1006bcc <_realloc_r+0x204>
 1006b90:	90800017 	ldw	r2,0(r18)
 1006b94:	ba000404 	addi	r8,r23,16
 1006b98:	91000204 	addi	r4,r18,8
 1006b9c:	b8800215 	stw	r2,8(r23)
 1006ba0:	90c00117 	ldw	r3,4(r18)
 1006ba4:	008006c4 	movi	r2,27
 1006ba8:	b8c00315 	stw	r3,12(r23)
 1006bac:	1180072e 	bgeu	r2,r6,1006bcc <_realloc_r+0x204>
 1006bb0:	90c00217 	ldw	r3,8(r18)
 1006bb4:	ba000604 	addi	r8,r23,24
 1006bb8:	91000404 	addi	r4,r18,16
 1006bbc:	b8c00415 	stw	r3,16(r23)
 1006bc0:	90800317 	ldw	r2,12(r18)
 1006bc4:	b8800515 	stw	r2,20(r23)
 1006bc8:	3140e726 	beq	r6,r5,1006f68 <_realloc_r+0x5a0>
 1006bcc:	20800017 	ldw	r2,0(r4)
 1006bd0:	dd000017 	ldw	r20,0(sp)
 1006bd4:	b80f883a 	mov	r7,r23
 1006bd8:	40800015 	stw	r2,0(r8)
 1006bdc:	20c00117 	ldw	r3,4(r4)
 1006be0:	40c00115 	stw	r3,4(r8)
 1006be4:	20800217 	ldw	r2,8(r4)
 1006be8:	40800215 	stw	r2,8(r8)
 1006bec:	003f9706 	br	1006a4c <_realloc_r+0x84>
 1006bf0:	98a9883a 	add	r20,r19,r2
 1006bf4:	a1c01f16 	blt	r20,r7,1006c74 <_realloc_r+0x2ac>
 1006bf8:	b8c00317 	ldw	r3,12(r23)
 1006bfc:	b8800217 	ldw	r2,8(r23)
 1006c00:	99bfff04 	addi	r6,r19,-4
 1006c04:	01400904 	movi	r5,36
 1006c08:	b82b883a 	mov	r21,r23
 1006c0c:	18800215 	stw	r2,8(r3)
 1006c10:	10c00315 	stw	r3,12(r2)
 1006c14:	bc000204 	addi	r16,r23,8
 1006c18:	2980c336 	bltu	r5,r6,1006f28 <_realloc_r+0x560>
 1006c1c:	008004c4 	movi	r2,19
 1006c20:	9009883a 	mov	r4,r18
 1006c24:	8011883a 	mov	r8,r16
 1006c28:	11800f2e 	bgeu	r2,r6,1006c68 <_realloc_r+0x2a0>
 1006c2c:	90800017 	ldw	r2,0(r18)
 1006c30:	ba000404 	addi	r8,r23,16
 1006c34:	91000204 	addi	r4,r18,8
 1006c38:	b8800215 	stw	r2,8(r23)
 1006c3c:	90c00117 	ldw	r3,4(r18)
 1006c40:	008006c4 	movi	r2,27
 1006c44:	b8c00315 	stw	r3,12(r23)
 1006c48:	1180072e 	bgeu	r2,r6,1006c68 <_realloc_r+0x2a0>
 1006c4c:	90c00217 	ldw	r3,8(r18)
 1006c50:	ba000604 	addi	r8,r23,24
 1006c54:	91000404 	addi	r4,r18,16
 1006c58:	b8c00415 	stw	r3,16(r23)
 1006c5c:	90800317 	ldw	r2,12(r18)
 1006c60:	b8800515 	stw	r2,20(r23)
 1006c64:	3140c726 	beq	r6,r5,1006f84 <_realloc_r+0x5bc>
 1006c68:	20800017 	ldw	r2,0(r4)
 1006c6c:	b80f883a 	mov	r7,r23
 1006c70:	003fd906 	br	1006bd8 <_realloc_r+0x210>
 1006c74:	880b883a 	mov	r5,r17
 1006c78:	b009883a 	mov	r4,r22
 1006c7c:	1004f000 	call	1004f00 <_malloc_r>
 1006c80:	1023883a 	mov	r17,r2
 1006c84:	10002526 	beq	r2,zero,1006d1c <_realloc_r+0x354>
 1006c88:	80800117 	ldw	r2,4(r16)
 1006c8c:	00ffff84 	movi	r3,-2
 1006c90:	893ffe04 	addi	r4,r17,-8
 1006c94:	10c4703a 	and	r2,r2,r3
 1006c98:	8085883a 	add	r2,r16,r2
 1006c9c:	20809526 	beq	r4,r2,1006ef4 <_realloc_r+0x52c>
 1006ca0:	99bfff04 	addi	r6,r19,-4
 1006ca4:	01c00904 	movi	r7,36
 1006ca8:	39804536 	bltu	r7,r6,1006dc0 <_realloc_r+0x3f8>
 1006cac:	008004c4 	movi	r2,19
 1006cb0:	9009883a 	mov	r4,r18
 1006cb4:	880b883a 	mov	r5,r17
 1006cb8:	11800f2e 	bgeu	r2,r6,1006cf8 <_realloc_r+0x330>
 1006cbc:	90800017 	ldw	r2,0(r18)
 1006cc0:	89400204 	addi	r5,r17,8
 1006cc4:	91000204 	addi	r4,r18,8
 1006cc8:	88800015 	stw	r2,0(r17)
 1006ccc:	90c00117 	ldw	r3,4(r18)
 1006cd0:	008006c4 	movi	r2,27
 1006cd4:	88c00115 	stw	r3,4(r17)
 1006cd8:	1180072e 	bgeu	r2,r6,1006cf8 <_realloc_r+0x330>
 1006cdc:	90c00217 	ldw	r3,8(r18)
 1006ce0:	89400404 	addi	r5,r17,16
 1006ce4:	91000404 	addi	r4,r18,16
 1006ce8:	88c00215 	stw	r3,8(r17)
 1006cec:	90800317 	ldw	r2,12(r18)
 1006cf0:	88800315 	stw	r2,12(r17)
 1006cf4:	31c09126 	beq	r6,r7,1006f3c <_realloc_r+0x574>
 1006cf8:	20800017 	ldw	r2,0(r4)
 1006cfc:	28800015 	stw	r2,0(r5)
 1006d00:	20c00117 	ldw	r3,4(r4)
 1006d04:	28c00115 	stw	r3,4(r5)
 1006d08:	20800217 	ldw	r2,8(r4)
 1006d0c:	28800215 	stw	r2,8(r5)
 1006d10:	900b883a 	mov	r5,r18
 1006d14:	b009883a 	mov	r4,r22
 1006d18:	10043780 	call	1004378 <_free_r>
 1006d1c:	b009883a 	mov	r4,r22
 1006d20:	100a4340 	call	100a434 <__malloc_unlock>
 1006d24:	003f5e06 	br	1006aa0 <_realloc_r+0xd8>
 1006d28:	300b883a 	mov	r5,r6
 1006d2c:	dfc00b17 	ldw	ra,44(sp)
 1006d30:	df000a17 	ldw	fp,40(sp)
 1006d34:	ddc00917 	ldw	r23,36(sp)
 1006d38:	dd800817 	ldw	r22,32(sp)
 1006d3c:	dd400717 	ldw	r21,28(sp)
 1006d40:	dd000617 	ldw	r20,24(sp)
 1006d44:	dcc00517 	ldw	r19,20(sp)
 1006d48:	dc800417 	ldw	r18,16(sp)
 1006d4c:	dc400317 	ldw	r17,12(sp)
 1006d50:	dc000217 	ldw	r16,8(sp)
 1006d54:	dec00c04 	addi	sp,sp,48
 1006d58:	1004f001 	jmpi	1004f00 <_malloc_r>
 1006d5c:	38800117 	ldw	r2,4(r7)
 1006d60:	e54b883a 	add	r5,fp,r21
 1006d64:	31000054 	ori	r4,r6,1
 1006d68:	1080004c 	andi	r2,r2,1
 1006d6c:	1704b03a 	or	r2,r2,fp
 1006d70:	38800115 	stw	r2,4(r7)
 1006d74:	29000115 	stw	r4,4(r5)
 1006d78:	2987883a 	add	r3,r5,r6
 1006d7c:	18800117 	ldw	r2,4(r3)
 1006d80:	29400204 	addi	r5,r5,8
 1006d84:	b009883a 	mov	r4,r22
 1006d88:	10800054 	ori	r2,r2,1
 1006d8c:	18800115 	stw	r2,4(r3)
 1006d90:	10043780 	call	1004378 <_free_r>
 1006d94:	003f3806 	br	1006a78 <_realloc_r+0xb0>
 1006d98:	000d883a 	mov	r6,zero
 1006d9c:	0009883a 	mov	r4,zero
 1006da0:	003f5d06 	br	1006b18 <_realloc_r+0x150>
 1006da4:	30c00217 	ldw	r3,8(r6)
 1006da8:	30800317 	ldw	r2,12(r6)
 1006dac:	800f883a 	mov	r7,r16
 1006db0:	84000204 	addi	r16,r16,8
 1006db4:	10c00215 	stw	r3,8(r2)
 1006db8:	18800315 	stw	r2,12(r3)
 1006dbc:	003f2306 	br	1006a4c <_realloc_r+0x84>
 1006dc0:	8809883a 	mov	r4,r17
 1006dc4:	900b883a 	mov	r5,r18
 1006dc8:	10057c40 	call	10057c4 <memmove>
 1006dcc:	003fd006 	br	1006d10 <_realloc_r+0x348>
 1006dd0:	30800117 	ldw	r2,4(r6)
 1006dd4:	e0c00404 	addi	r3,fp,16
 1006dd8:	1108703a 	and	r4,r2,r4
 1006ddc:	9905883a 	add	r2,r19,r4
 1006de0:	10ff4d16 	blt	r2,r3,1006b18 <_realloc_r+0x150>
 1006de4:	1705c83a 	sub	r2,r2,fp
 1006de8:	870b883a 	add	r5,r16,fp
 1006dec:	10800054 	ori	r2,r2,1
 1006df0:	28800115 	stw	r2,4(r5)
 1006df4:	80c00117 	ldw	r3,4(r16)
 1006df8:	00804074 	movhi	r2,257
 1006dfc:	108c8a04 	addi	r2,r2,12840
 1006e00:	b009883a 	mov	r4,r22
 1006e04:	18c0004c 	andi	r3,r3,1
 1006e08:	e0c6b03a 	or	r3,fp,r3
 1006e0c:	11400215 	stw	r5,8(r2)
 1006e10:	80c00115 	stw	r3,4(r16)
 1006e14:	100a4340 	call	100a434 <__malloc_unlock>
 1006e18:	84400204 	addi	r17,r16,8
 1006e1c:	003f2006 	br	1006aa0 <_realloc_r+0xd8>
 1006e20:	98a9883a 	add	r20,r19,r2
 1006e24:	2509883a 	add	r4,r4,r20
 1006e28:	e0800404 	addi	r2,fp,16
 1006e2c:	d9000115 	stw	r4,4(sp)
 1006e30:	20bf7016 	blt	r4,r2,1006bf4 <_realloc_r+0x22c>
 1006e34:	b8c00317 	ldw	r3,12(r23)
 1006e38:	b8800217 	ldw	r2,8(r23)
 1006e3c:	99bfff04 	addi	r6,r19,-4
 1006e40:	01400904 	movi	r5,36
 1006e44:	18800215 	stw	r2,8(r3)
 1006e48:	10c00315 	stw	r3,12(r2)
 1006e4c:	bc400204 	addi	r17,r23,8
 1006e50:	29804136 	bltu	r5,r6,1006f58 <_realloc_r+0x590>
 1006e54:	008004c4 	movi	r2,19
 1006e58:	9009883a 	mov	r4,r18
 1006e5c:	880f883a 	mov	r7,r17
 1006e60:	11800f2e 	bgeu	r2,r6,1006ea0 <_realloc_r+0x4d8>
 1006e64:	90800017 	ldw	r2,0(r18)
 1006e68:	b9c00404 	addi	r7,r23,16
 1006e6c:	91000204 	addi	r4,r18,8
 1006e70:	b8800215 	stw	r2,8(r23)
 1006e74:	90c00117 	ldw	r3,4(r18)
 1006e78:	008006c4 	movi	r2,27
 1006e7c:	b8c00315 	stw	r3,12(r23)
 1006e80:	1180072e 	bgeu	r2,r6,1006ea0 <_realloc_r+0x4d8>
 1006e84:	90c00217 	ldw	r3,8(r18)
 1006e88:	b9c00604 	addi	r7,r23,24
 1006e8c:	91000404 	addi	r4,r18,16
 1006e90:	b8c00415 	stw	r3,16(r23)
 1006e94:	90800317 	ldw	r2,12(r18)
 1006e98:	b8800515 	stw	r2,20(r23)
 1006e9c:	31404026 	beq	r6,r5,1006fa0 <_realloc_r+0x5d8>
 1006ea0:	20800017 	ldw	r2,0(r4)
 1006ea4:	38800015 	stw	r2,0(r7)
 1006ea8:	20c00117 	ldw	r3,4(r4)
 1006eac:	38c00115 	stw	r3,4(r7)
 1006eb0:	20800217 	ldw	r2,8(r4)
 1006eb4:	38800215 	stw	r2,8(r7)
 1006eb8:	d8c00117 	ldw	r3,4(sp)
 1006ebc:	bf0b883a 	add	r5,r23,fp
 1006ec0:	b009883a 	mov	r4,r22
 1006ec4:	1f05c83a 	sub	r2,r3,fp
 1006ec8:	10800054 	ori	r2,r2,1
 1006ecc:	28800115 	stw	r2,4(r5)
 1006ed0:	b8c00117 	ldw	r3,4(r23)
 1006ed4:	00804074 	movhi	r2,257
 1006ed8:	108c8a04 	addi	r2,r2,12840
 1006edc:	11400215 	stw	r5,8(r2)
 1006ee0:	18c0004c 	andi	r3,r3,1
 1006ee4:	e0c6b03a 	or	r3,fp,r3
 1006ee8:	b8c00115 	stw	r3,4(r23)
 1006eec:	100a4340 	call	100a434 <__malloc_unlock>
 1006ef0:	003eeb06 	br	1006aa0 <_realloc_r+0xd8>
 1006ef4:	20800117 	ldw	r2,4(r4)
 1006ef8:	00ffff04 	movi	r3,-4
 1006efc:	800f883a 	mov	r7,r16
 1006f00:	10c4703a 	and	r2,r2,r3
 1006f04:	98a9883a 	add	r20,r19,r2
 1006f08:	84000204 	addi	r16,r16,8
 1006f0c:	003ecf06 	br	1006a4c <_realloc_r+0x84>
 1006f10:	900b883a 	mov	r5,r18
 1006f14:	8009883a 	mov	r4,r16
 1006f18:	10057c40 	call	10057c4 <memmove>
 1006f1c:	dd000017 	ldw	r20,0(sp)
 1006f20:	b80f883a 	mov	r7,r23
 1006f24:	003ec906 	br	1006a4c <_realloc_r+0x84>
 1006f28:	900b883a 	mov	r5,r18
 1006f2c:	8009883a 	mov	r4,r16
 1006f30:	10057c40 	call	10057c4 <memmove>
 1006f34:	b80f883a 	mov	r7,r23
 1006f38:	003ec406 	br	1006a4c <_realloc_r+0x84>
 1006f3c:	90c00417 	ldw	r3,16(r18)
 1006f40:	89400604 	addi	r5,r17,24
 1006f44:	91000604 	addi	r4,r18,24
 1006f48:	88c00415 	stw	r3,16(r17)
 1006f4c:	90800517 	ldw	r2,20(r18)
 1006f50:	88800515 	stw	r2,20(r17)
 1006f54:	003f6806 	br	1006cf8 <_realloc_r+0x330>
 1006f58:	900b883a 	mov	r5,r18
 1006f5c:	8809883a 	mov	r4,r17
 1006f60:	10057c40 	call	10057c4 <memmove>
 1006f64:	003fd406 	br	1006eb8 <_realloc_r+0x4f0>
 1006f68:	90c00417 	ldw	r3,16(r18)
 1006f6c:	91000604 	addi	r4,r18,24
 1006f70:	ba000804 	addi	r8,r23,32
 1006f74:	b8c00615 	stw	r3,24(r23)
 1006f78:	90800517 	ldw	r2,20(r18)
 1006f7c:	b8800715 	stw	r2,28(r23)
 1006f80:	003f1206 	br	1006bcc <_realloc_r+0x204>
 1006f84:	90c00417 	ldw	r3,16(r18)
 1006f88:	91000604 	addi	r4,r18,24
 1006f8c:	ba000804 	addi	r8,r23,32
 1006f90:	b8c00615 	stw	r3,24(r23)
 1006f94:	90800517 	ldw	r2,20(r18)
 1006f98:	b8800715 	stw	r2,28(r23)
 1006f9c:	003f3206 	br	1006c68 <_realloc_r+0x2a0>
 1006fa0:	90c00417 	ldw	r3,16(r18)
 1006fa4:	91000604 	addi	r4,r18,24
 1006fa8:	b9c00804 	addi	r7,r23,32
 1006fac:	b8c00615 	stw	r3,24(r23)
 1006fb0:	90800517 	ldw	r2,20(r18)
 1006fb4:	b8800715 	stw	r2,28(r23)
 1006fb8:	003fb906 	br	1006ea0 <_realloc_r+0x4d8>

01006fbc <__isinfd>:
 1006fbc:	200d883a 	mov	r6,r4
 1006fc0:	0109c83a 	sub	r4,zero,r4
 1006fc4:	2188b03a 	or	r4,r4,r6
 1006fc8:	2008d7fa 	srli	r4,r4,31
 1006fcc:	00a00034 	movhi	r2,32768
 1006fd0:	10bfffc4 	addi	r2,r2,-1
 1006fd4:	1144703a 	and	r2,r2,r5
 1006fd8:	2088b03a 	or	r4,r4,r2
 1006fdc:	009ffc34 	movhi	r2,32752
 1006fe0:	1105c83a 	sub	r2,r2,r4
 1006fe4:	0087c83a 	sub	r3,zero,r2
 1006fe8:	10c4b03a 	or	r2,r2,r3
 1006fec:	1004d7fa 	srli	r2,r2,31
 1006ff0:	00c00044 	movi	r3,1
 1006ff4:	1885c83a 	sub	r2,r3,r2
 1006ff8:	f800283a 	ret

01006ffc <__isnand>:
 1006ffc:	200d883a 	mov	r6,r4
 1007000:	0109c83a 	sub	r4,zero,r4
 1007004:	2188b03a 	or	r4,r4,r6
 1007008:	2008d7fa 	srli	r4,r4,31
 100700c:	00a00034 	movhi	r2,32768
 1007010:	10bfffc4 	addi	r2,r2,-1
 1007014:	1144703a 	and	r2,r2,r5
 1007018:	2088b03a 	or	r4,r4,r2
 100701c:	009ffc34 	movhi	r2,32752
 1007020:	1105c83a 	sub	r2,r2,r4
 1007024:	1004d7fa 	srli	r2,r2,31
 1007028:	f800283a 	ret

0100702c <_sbrk_r>:
 100702c:	defffd04 	addi	sp,sp,-12
 1007030:	dc000015 	stw	r16,0(sp)
 1007034:	04004074 	movhi	r16,257
 1007038:	8418e704 	addi	r16,r16,25500
 100703c:	dc400115 	stw	r17,4(sp)
 1007040:	80000015 	stw	zero,0(r16)
 1007044:	2023883a 	mov	r17,r4
 1007048:	2809883a 	mov	r4,r5
 100704c:	dfc00215 	stw	ra,8(sp)
 1007050:	100a6500 	call	100a650 <sbrk>
 1007054:	1007883a 	mov	r3,r2
 1007058:	00bfffc4 	movi	r2,-1
 100705c:	18800626 	beq	r3,r2,1007078 <_sbrk_r+0x4c>
 1007060:	1805883a 	mov	r2,r3
 1007064:	dfc00217 	ldw	ra,8(sp)
 1007068:	dc400117 	ldw	r17,4(sp)
 100706c:	dc000017 	ldw	r16,0(sp)
 1007070:	dec00304 	addi	sp,sp,12
 1007074:	f800283a 	ret
 1007078:	80800017 	ldw	r2,0(r16)
 100707c:	103ff826 	beq	r2,zero,1007060 <_sbrk_r+0x34>
 1007080:	88800015 	stw	r2,0(r17)
 1007084:	1805883a 	mov	r2,r3
 1007088:	dfc00217 	ldw	ra,8(sp)
 100708c:	dc400117 	ldw	r17,4(sp)
 1007090:	dc000017 	ldw	r16,0(sp)
 1007094:	dec00304 	addi	sp,sp,12
 1007098:	f800283a 	ret

0100709c <__sclose>:
 100709c:	2940038f 	ldh	r5,14(r5)
 10070a0:	10073e41 	jmpi	10073e4 <_close_r>

010070a4 <__sseek>:
 10070a4:	defffe04 	addi	sp,sp,-8
 10070a8:	dc000015 	stw	r16,0(sp)
 10070ac:	2821883a 	mov	r16,r5
 10070b0:	2940038f 	ldh	r5,14(r5)
 10070b4:	dfc00115 	stw	ra,4(sp)
 10070b8:	100765c0 	call	100765c <_lseek_r>
 10070bc:	1007883a 	mov	r3,r2
 10070c0:	00bfffc4 	movi	r2,-1
 10070c4:	18800926 	beq	r3,r2,10070ec <__sseek+0x48>
 10070c8:	8080030b 	ldhu	r2,12(r16)
 10070cc:	80c01415 	stw	r3,80(r16)
 10070d0:	10840014 	ori	r2,r2,4096
 10070d4:	8080030d 	sth	r2,12(r16)
 10070d8:	1805883a 	mov	r2,r3
 10070dc:	dfc00117 	ldw	ra,4(sp)
 10070e0:	dc000017 	ldw	r16,0(sp)
 10070e4:	dec00204 	addi	sp,sp,8
 10070e8:	f800283a 	ret
 10070ec:	8080030b 	ldhu	r2,12(r16)
 10070f0:	10bbffcc 	andi	r2,r2,61439
 10070f4:	8080030d 	sth	r2,12(r16)
 10070f8:	1805883a 	mov	r2,r3
 10070fc:	dfc00117 	ldw	ra,4(sp)
 1007100:	dc000017 	ldw	r16,0(sp)
 1007104:	dec00204 	addi	sp,sp,8
 1007108:	f800283a 	ret

0100710c <__swrite>:
 100710c:	2880030b 	ldhu	r2,12(r5)
 1007110:	defffb04 	addi	sp,sp,-20
 1007114:	dcc00315 	stw	r19,12(sp)
 1007118:	1080400c 	andi	r2,r2,256
 100711c:	dc800215 	stw	r18,8(sp)
 1007120:	dc400115 	stw	r17,4(sp)
 1007124:	dc000015 	stw	r16,0(sp)
 1007128:	3027883a 	mov	r19,r6
 100712c:	3825883a 	mov	r18,r7
 1007130:	dfc00415 	stw	ra,16(sp)
 1007134:	2821883a 	mov	r16,r5
 1007138:	000d883a 	mov	r6,zero
 100713c:	01c00084 	movi	r7,2
 1007140:	2023883a 	mov	r17,r4
 1007144:	10000226 	beq	r2,zero,1007150 <__swrite+0x44>
 1007148:	2940038f 	ldh	r5,14(r5)
 100714c:	100765c0 	call	100765c <_lseek_r>
 1007150:	8080030b 	ldhu	r2,12(r16)
 1007154:	8140038f 	ldh	r5,14(r16)
 1007158:	8809883a 	mov	r4,r17
 100715c:	10bbffcc 	andi	r2,r2,61439
 1007160:	980d883a 	mov	r6,r19
 1007164:	900f883a 	mov	r7,r18
 1007168:	8080030d 	sth	r2,12(r16)
 100716c:	dfc00417 	ldw	ra,16(sp)
 1007170:	dcc00317 	ldw	r19,12(sp)
 1007174:	dc800217 	ldw	r18,8(sp)
 1007178:	dc400117 	ldw	r17,4(sp)
 100717c:	dc000017 	ldw	r16,0(sp)
 1007180:	dec00504 	addi	sp,sp,20
 1007184:	10072a41 	jmpi	10072a4 <_write_r>

01007188 <__sread>:
 1007188:	defffe04 	addi	sp,sp,-8
 100718c:	dc000015 	stw	r16,0(sp)
 1007190:	2821883a 	mov	r16,r5
 1007194:	2940038f 	ldh	r5,14(r5)
 1007198:	dfc00115 	stw	ra,4(sp)
 100719c:	10076d40 	call	10076d4 <_read_r>
 10071a0:	1007883a 	mov	r3,r2
 10071a4:	10000816 	blt	r2,zero,10071c8 <__sread+0x40>
 10071a8:	80801417 	ldw	r2,80(r16)
 10071ac:	10c5883a 	add	r2,r2,r3
 10071b0:	80801415 	stw	r2,80(r16)
 10071b4:	1805883a 	mov	r2,r3
 10071b8:	dfc00117 	ldw	ra,4(sp)
 10071bc:	dc000017 	ldw	r16,0(sp)
 10071c0:	dec00204 	addi	sp,sp,8
 10071c4:	f800283a 	ret
 10071c8:	8080030b 	ldhu	r2,12(r16)
 10071cc:	10bbffcc 	andi	r2,r2,61439
 10071d0:	8080030d 	sth	r2,12(r16)
 10071d4:	1805883a 	mov	r2,r3
 10071d8:	dfc00117 	ldw	ra,4(sp)
 10071dc:	dc000017 	ldw	r16,0(sp)
 10071e0:	dec00204 	addi	sp,sp,8
 10071e4:	f800283a 	ret

010071e8 <strcmp>:
 10071e8:	2144b03a 	or	r2,r4,r5
 10071ec:	108000cc 	andi	r2,r2,3
 10071f0:	10001d1e 	bne	r2,zero,1007268 <strcmp+0x80>
 10071f4:	200f883a 	mov	r7,r4
 10071f8:	28800017 	ldw	r2,0(r5)
 10071fc:	21000017 	ldw	r4,0(r4)
 1007200:	280d883a 	mov	r6,r5
 1007204:	2080161e 	bne	r4,r2,1007260 <strcmp+0x78>
 1007208:	023fbff4 	movhi	r8,65279
 100720c:	423fbfc4 	addi	r8,r8,-257
 1007210:	2207883a 	add	r3,r4,r8
 1007214:	01602074 	movhi	r5,32897
 1007218:	29602004 	addi	r5,r5,-32640
 100721c:	1946703a 	and	r3,r3,r5
 1007220:	0104303a 	nor	r2,zero,r4
 1007224:	10c4703a 	and	r2,r2,r3
 1007228:	10001c1e 	bne	r2,zero,100729c <strcmp+0xb4>
 100722c:	4013883a 	mov	r9,r8
 1007230:	2811883a 	mov	r8,r5
 1007234:	00000106 	br	100723c <strcmp+0x54>
 1007238:	1800181e 	bne	r3,zero,100729c <strcmp+0xb4>
 100723c:	39c00104 	addi	r7,r7,4
 1007240:	39000017 	ldw	r4,0(r7)
 1007244:	31800104 	addi	r6,r6,4
 1007248:	31400017 	ldw	r5,0(r6)
 100724c:	2245883a 	add	r2,r4,r9
 1007250:	1204703a 	and	r2,r2,r8
 1007254:	0106303a 	nor	r3,zero,r4
 1007258:	1886703a 	and	r3,r3,r2
 100725c:	217ff626 	beq	r4,r5,1007238 <strcmp+0x50>
 1007260:	3809883a 	mov	r4,r7
 1007264:	300b883a 	mov	r5,r6
 1007268:	20c00007 	ldb	r3,0(r4)
 100726c:	1800051e 	bne	r3,zero,1007284 <strcmp+0x9c>
 1007270:	00000606 	br	100728c <strcmp+0xa4>
 1007274:	21000044 	addi	r4,r4,1
 1007278:	20c00007 	ldb	r3,0(r4)
 100727c:	29400044 	addi	r5,r5,1
 1007280:	18000226 	beq	r3,zero,100728c <strcmp+0xa4>
 1007284:	28800007 	ldb	r2,0(r5)
 1007288:	18bffa26 	beq	r3,r2,1007274 <strcmp+0x8c>
 100728c:	20c00003 	ldbu	r3,0(r4)
 1007290:	28800003 	ldbu	r2,0(r5)
 1007294:	1885c83a 	sub	r2,r3,r2
 1007298:	f800283a 	ret
 100729c:	0005883a 	mov	r2,zero
 10072a0:	f800283a 	ret

010072a4 <_write_r>:
 10072a4:	defffd04 	addi	sp,sp,-12
 10072a8:	dc000015 	stw	r16,0(sp)
 10072ac:	04004074 	movhi	r16,257
 10072b0:	8418e704 	addi	r16,r16,25500
 10072b4:	dc400115 	stw	r17,4(sp)
 10072b8:	80000015 	stw	zero,0(r16)
 10072bc:	2023883a 	mov	r17,r4
 10072c0:	2809883a 	mov	r4,r5
 10072c4:	300b883a 	mov	r5,r6
 10072c8:	380d883a 	mov	r6,r7
 10072cc:	dfc00215 	stw	ra,8(sp)
 10072d0:	100a70c0 	call	100a70c <write>
 10072d4:	1007883a 	mov	r3,r2
 10072d8:	00bfffc4 	movi	r2,-1
 10072dc:	18800626 	beq	r3,r2,10072f8 <_write_r+0x54>
 10072e0:	1805883a 	mov	r2,r3
 10072e4:	dfc00217 	ldw	ra,8(sp)
 10072e8:	dc400117 	ldw	r17,4(sp)
 10072ec:	dc000017 	ldw	r16,0(sp)
 10072f0:	dec00304 	addi	sp,sp,12
 10072f4:	f800283a 	ret
 10072f8:	80800017 	ldw	r2,0(r16)
 10072fc:	103ff826 	beq	r2,zero,10072e0 <_write_r+0x3c>
 1007300:	88800015 	stw	r2,0(r17)
 1007304:	1805883a 	mov	r2,r3
 1007308:	dfc00217 	ldw	ra,8(sp)
 100730c:	dc400117 	ldw	r17,4(sp)
 1007310:	dc000017 	ldw	r16,0(sp)
 1007314:	dec00304 	addi	sp,sp,12
 1007318:	f800283a 	ret

0100731c <_calloc_r>:
 100731c:	defffe04 	addi	sp,sp,-8
 1007320:	dc400015 	stw	r17,0(sp)
 1007324:	2023883a 	mov	r17,r4
 1007328:	2809883a 	mov	r4,r5
 100732c:	300b883a 	mov	r5,r6
 1007330:	dfc00115 	stw	ra,4(sp)
 1007334:	10096900 	call	1009690 <__mulsi3>
 1007338:	100b883a 	mov	r5,r2
 100733c:	8809883a 	mov	r4,r17
 1007340:	1004f000 	call	1004f00 <_malloc_r>
 1007344:	1023883a 	mov	r17,r2
 1007348:	01c00904 	movi	r7,36
 100734c:	10000d26 	beq	r2,zero,1007384 <_calloc_r+0x68>
 1007350:	10ffff17 	ldw	r3,-4(r2)
 1007354:	1009883a 	mov	r4,r2
 1007358:	00bfff04 	movi	r2,-4
 100735c:	1886703a 	and	r3,r3,r2
 1007360:	1887883a 	add	r3,r3,r2
 1007364:	180d883a 	mov	r6,r3
 1007368:	000b883a 	mov	r5,zero
 100736c:	38c01736 	bltu	r7,r3,10073cc <_calloc_r+0xb0>
 1007370:	008004c4 	movi	r2,19
 1007374:	10c00836 	bltu	r2,r3,1007398 <_calloc_r+0x7c>
 1007378:	20000215 	stw	zero,8(r4)
 100737c:	20000015 	stw	zero,0(r4)
 1007380:	20000115 	stw	zero,4(r4)
 1007384:	8805883a 	mov	r2,r17
 1007388:	dfc00117 	ldw	ra,4(sp)
 100738c:	dc400017 	ldw	r17,0(sp)
 1007390:	dec00204 	addi	sp,sp,8
 1007394:	f800283a 	ret
 1007398:	008006c4 	movi	r2,27
 100739c:	88000015 	stw	zero,0(r17)
 10073a0:	88000115 	stw	zero,4(r17)
 10073a4:	89000204 	addi	r4,r17,8
 10073a8:	10fff32e 	bgeu	r2,r3,1007378 <_calloc_r+0x5c>
 10073ac:	88000215 	stw	zero,8(r17)
 10073b0:	88000315 	stw	zero,12(r17)
 10073b4:	89000404 	addi	r4,r17,16
 10073b8:	19ffef1e 	bne	r3,r7,1007378 <_calloc_r+0x5c>
 10073bc:	89000604 	addi	r4,r17,24
 10073c0:	88000415 	stw	zero,16(r17)
 10073c4:	88000515 	stw	zero,20(r17)
 10073c8:	003feb06 	br	1007378 <_calloc_r+0x5c>
 10073cc:	10058a40 	call	10058a4 <memset>
 10073d0:	8805883a 	mov	r2,r17
 10073d4:	dfc00117 	ldw	ra,4(sp)
 10073d8:	dc400017 	ldw	r17,0(sp)
 10073dc:	dec00204 	addi	sp,sp,8
 10073e0:	f800283a 	ret

010073e4 <_close_r>:
 10073e4:	defffd04 	addi	sp,sp,-12
 10073e8:	dc000015 	stw	r16,0(sp)
 10073ec:	04004074 	movhi	r16,257
 10073f0:	8418e704 	addi	r16,r16,25500
 10073f4:	dc400115 	stw	r17,4(sp)
 10073f8:	80000015 	stw	zero,0(r16)
 10073fc:	2023883a 	mov	r17,r4
 1007400:	2809883a 	mov	r4,r5
 1007404:	dfc00215 	stw	ra,8(sp)
 1007408:	1009d800 	call	1009d80 <close>
 100740c:	1007883a 	mov	r3,r2
 1007410:	00bfffc4 	movi	r2,-1
 1007414:	18800626 	beq	r3,r2,1007430 <_close_r+0x4c>
 1007418:	1805883a 	mov	r2,r3
 100741c:	dfc00217 	ldw	ra,8(sp)
 1007420:	dc400117 	ldw	r17,4(sp)
 1007424:	dc000017 	ldw	r16,0(sp)
 1007428:	dec00304 	addi	sp,sp,12
 100742c:	f800283a 	ret
 1007430:	80800017 	ldw	r2,0(r16)
 1007434:	103ff826 	beq	r2,zero,1007418 <_close_r+0x34>
 1007438:	88800015 	stw	r2,0(r17)
 100743c:	1805883a 	mov	r2,r3
 1007440:	dfc00217 	ldw	ra,8(sp)
 1007444:	dc400117 	ldw	r17,4(sp)
 1007448:	dc000017 	ldw	r16,0(sp)
 100744c:	dec00304 	addi	sp,sp,12
 1007450:	f800283a 	ret

01007454 <_fclose_r>:
 1007454:	defffc04 	addi	sp,sp,-16
 1007458:	dc400115 	stw	r17,4(sp)
 100745c:	dc000015 	stw	r16,0(sp)
 1007460:	dfc00315 	stw	ra,12(sp)
 1007464:	dc800215 	stw	r18,8(sp)
 1007468:	2821883a 	mov	r16,r5
 100746c:	2023883a 	mov	r17,r4
 1007470:	28002926 	beq	r5,zero,1007518 <_fclose_r+0xc4>
 1007474:	1003fb00 	call	1003fb0 <__sfp_lock_acquire>
 1007478:	88000226 	beq	r17,zero,1007484 <_fclose_r+0x30>
 100747c:	88800e17 	ldw	r2,56(r17)
 1007480:	10002d26 	beq	r2,zero,1007538 <_fclose_r+0xe4>
 1007484:	8080030f 	ldh	r2,12(r16)
 1007488:	10002226 	beq	r2,zero,1007514 <_fclose_r+0xc0>
 100748c:	8809883a 	mov	r4,r17
 1007490:	800b883a 	mov	r5,r16
 1007494:	1003d280 	call	1003d28 <_fflush_r>
 1007498:	1025883a 	mov	r18,r2
 100749c:	80800b17 	ldw	r2,44(r16)
 10074a0:	10000426 	beq	r2,zero,10074b4 <_fclose_r+0x60>
 10074a4:	81400717 	ldw	r5,28(r16)
 10074a8:	8809883a 	mov	r4,r17
 10074ac:	103ee83a 	callr	r2
 10074b0:	10002a16 	blt	r2,zero,100755c <_fclose_r+0x108>
 10074b4:	8080030b 	ldhu	r2,12(r16)
 10074b8:	1080200c 	andi	r2,r2,128
 10074bc:	1000231e 	bne	r2,zero,100754c <_fclose_r+0xf8>
 10074c0:	81400c17 	ldw	r5,48(r16)
 10074c4:	28000526 	beq	r5,zero,10074dc <_fclose_r+0x88>
 10074c8:	80801004 	addi	r2,r16,64
 10074cc:	28800226 	beq	r5,r2,10074d8 <_fclose_r+0x84>
 10074d0:	8809883a 	mov	r4,r17
 10074d4:	10043780 	call	1004378 <_free_r>
 10074d8:	80000c15 	stw	zero,48(r16)
 10074dc:	81401117 	ldw	r5,68(r16)
 10074e0:	28000326 	beq	r5,zero,10074f0 <_fclose_r+0x9c>
 10074e4:	8809883a 	mov	r4,r17
 10074e8:	10043780 	call	1004378 <_free_r>
 10074ec:	80001115 	stw	zero,68(r16)
 10074f0:	8000030d 	sth	zero,12(r16)
 10074f4:	1003fb40 	call	1003fb4 <__sfp_lock_release>
 10074f8:	9005883a 	mov	r2,r18
 10074fc:	dfc00317 	ldw	ra,12(sp)
 1007500:	dc800217 	ldw	r18,8(sp)
 1007504:	dc400117 	ldw	r17,4(sp)
 1007508:	dc000017 	ldw	r16,0(sp)
 100750c:	dec00404 	addi	sp,sp,16
 1007510:	f800283a 	ret
 1007514:	1003fb40 	call	1003fb4 <__sfp_lock_release>
 1007518:	0025883a 	mov	r18,zero
 100751c:	9005883a 	mov	r2,r18
 1007520:	dfc00317 	ldw	ra,12(sp)
 1007524:	dc800217 	ldw	r18,8(sp)
 1007528:	dc400117 	ldw	r17,4(sp)
 100752c:	dc000017 	ldw	r16,0(sp)
 1007530:	dec00404 	addi	sp,sp,16
 1007534:	f800283a 	ret
 1007538:	8809883a 	mov	r4,r17
 100753c:	1003fc00 	call	1003fc0 <__sinit>
 1007540:	8080030f 	ldh	r2,12(r16)
 1007544:	103fd11e 	bne	r2,zero,100748c <_fclose_r+0x38>
 1007548:	003ff206 	br	1007514 <_fclose_r+0xc0>
 100754c:	81400417 	ldw	r5,16(r16)
 1007550:	8809883a 	mov	r4,r17
 1007554:	10043780 	call	1004378 <_free_r>
 1007558:	003fd906 	br	10074c0 <_fclose_r+0x6c>
 100755c:	04bfffc4 	movi	r18,-1
 1007560:	003fd406 	br	10074b4 <_fclose_r+0x60>

01007564 <fclose>:
 1007564:	00804074 	movhi	r2,257
 1007568:	10922404 	addi	r2,r2,18576
 100756c:	200b883a 	mov	r5,r4
 1007570:	11000017 	ldw	r4,0(r2)
 1007574:	10074541 	jmpi	1007454 <_fclose_r>

01007578 <_fstat_r>:
 1007578:	defffd04 	addi	sp,sp,-12
 100757c:	dc000015 	stw	r16,0(sp)
 1007580:	04004074 	movhi	r16,257
 1007584:	8418e704 	addi	r16,r16,25500
 1007588:	dc400115 	stw	r17,4(sp)
 100758c:	80000015 	stw	zero,0(r16)
 1007590:	2023883a 	mov	r17,r4
 1007594:	2809883a 	mov	r4,r5
 1007598:	300b883a 	mov	r5,r6
 100759c:	dfc00215 	stw	ra,8(sp)
 10075a0:	1009f0c0 	call	1009f0c <fstat>
 10075a4:	1007883a 	mov	r3,r2
 10075a8:	00bfffc4 	movi	r2,-1
 10075ac:	18800626 	beq	r3,r2,10075c8 <_fstat_r+0x50>
 10075b0:	1805883a 	mov	r2,r3
 10075b4:	dfc00217 	ldw	ra,8(sp)
 10075b8:	dc400117 	ldw	r17,4(sp)
 10075bc:	dc000017 	ldw	r16,0(sp)
 10075c0:	dec00304 	addi	sp,sp,12
 10075c4:	f800283a 	ret
 10075c8:	80800017 	ldw	r2,0(r16)
 10075cc:	103ff826 	beq	r2,zero,10075b0 <_fstat_r+0x38>
 10075d0:	88800015 	stw	r2,0(r17)
 10075d4:	1805883a 	mov	r2,r3
 10075d8:	dfc00217 	ldw	ra,8(sp)
 10075dc:	dc400117 	ldw	r17,4(sp)
 10075e0:	dc000017 	ldw	r16,0(sp)
 10075e4:	dec00304 	addi	sp,sp,12
 10075e8:	f800283a 	ret

010075ec <_isatty_r>:
 10075ec:	defffd04 	addi	sp,sp,-12
 10075f0:	dc000015 	stw	r16,0(sp)
 10075f4:	04004074 	movhi	r16,257
 10075f8:	8418e704 	addi	r16,r16,25500
 10075fc:	dc400115 	stw	r17,4(sp)
 1007600:	80000015 	stw	zero,0(r16)
 1007604:	2023883a 	mov	r17,r4
 1007608:	2809883a 	mov	r4,r5
 100760c:	dfc00215 	stw	ra,8(sp)
 1007610:	100a0440 	call	100a044 <isatty>
 1007614:	1007883a 	mov	r3,r2
 1007618:	00bfffc4 	movi	r2,-1
 100761c:	18800626 	beq	r3,r2,1007638 <_isatty_r+0x4c>
 1007620:	1805883a 	mov	r2,r3
 1007624:	dfc00217 	ldw	ra,8(sp)
 1007628:	dc400117 	ldw	r17,4(sp)
 100762c:	dc000017 	ldw	r16,0(sp)
 1007630:	dec00304 	addi	sp,sp,12
 1007634:	f800283a 	ret
 1007638:	80800017 	ldw	r2,0(r16)
 100763c:	103ff826 	beq	r2,zero,1007620 <_isatty_r+0x34>
 1007640:	88800015 	stw	r2,0(r17)
 1007644:	1805883a 	mov	r2,r3
 1007648:	dfc00217 	ldw	ra,8(sp)
 100764c:	dc400117 	ldw	r17,4(sp)
 1007650:	dc000017 	ldw	r16,0(sp)
 1007654:	dec00304 	addi	sp,sp,12
 1007658:	f800283a 	ret

0100765c <_lseek_r>:
 100765c:	defffd04 	addi	sp,sp,-12
 1007660:	dc000015 	stw	r16,0(sp)
 1007664:	04004074 	movhi	r16,257
 1007668:	8418e704 	addi	r16,r16,25500
 100766c:	dc400115 	stw	r17,4(sp)
 1007670:	80000015 	stw	zero,0(r16)
 1007674:	2023883a 	mov	r17,r4
 1007678:	2809883a 	mov	r4,r5
 100767c:	300b883a 	mov	r5,r6
 1007680:	380d883a 	mov	r6,r7
 1007684:	dfc00215 	stw	ra,8(sp)
 1007688:	100a2540 	call	100a254 <lseek>
 100768c:	1007883a 	mov	r3,r2
 1007690:	00bfffc4 	movi	r2,-1
 1007694:	18800626 	beq	r3,r2,10076b0 <_lseek_r+0x54>
 1007698:	1805883a 	mov	r2,r3
 100769c:	dfc00217 	ldw	ra,8(sp)
 10076a0:	dc400117 	ldw	r17,4(sp)
 10076a4:	dc000017 	ldw	r16,0(sp)
 10076a8:	dec00304 	addi	sp,sp,12
 10076ac:	f800283a 	ret
 10076b0:	80800017 	ldw	r2,0(r16)
 10076b4:	103ff826 	beq	r2,zero,1007698 <_lseek_r+0x3c>
 10076b8:	88800015 	stw	r2,0(r17)
 10076bc:	1805883a 	mov	r2,r3
 10076c0:	dfc00217 	ldw	ra,8(sp)
 10076c4:	dc400117 	ldw	r17,4(sp)
 10076c8:	dc000017 	ldw	r16,0(sp)
 10076cc:	dec00304 	addi	sp,sp,12
 10076d0:	f800283a 	ret

010076d4 <_read_r>:
 10076d4:	defffd04 	addi	sp,sp,-12
 10076d8:	dc000015 	stw	r16,0(sp)
 10076dc:	04004074 	movhi	r16,257
 10076e0:	8418e704 	addi	r16,r16,25500
 10076e4:	dc400115 	stw	r17,4(sp)
 10076e8:	80000015 	stw	zero,0(r16)
 10076ec:	2023883a 	mov	r17,r4
 10076f0:	2809883a 	mov	r4,r5
 10076f4:	300b883a 	mov	r5,r6
 10076f8:	380d883a 	mov	r6,r7
 10076fc:	dfc00215 	stw	ra,8(sp)
 1007700:	100a4540 	call	100a454 <read>
 1007704:	1007883a 	mov	r3,r2
 1007708:	00bfffc4 	movi	r2,-1
 100770c:	18800626 	beq	r3,r2,1007728 <_read_r+0x54>
 1007710:	1805883a 	mov	r2,r3
 1007714:	dfc00217 	ldw	ra,8(sp)
 1007718:	dc400117 	ldw	r17,4(sp)
 100771c:	dc000017 	ldw	r16,0(sp)
 1007720:	dec00304 	addi	sp,sp,12
 1007724:	f800283a 	ret
 1007728:	80800017 	ldw	r2,0(r16)
 100772c:	103ff826 	beq	r2,zero,1007710 <_read_r+0x3c>
 1007730:	88800015 	stw	r2,0(r17)
 1007734:	1805883a 	mov	r2,r3
 1007738:	dfc00217 	ldw	ra,8(sp)
 100773c:	dc400117 	ldw	r17,4(sp)
 1007740:	dc000017 	ldw	r16,0(sp)
 1007744:	dec00304 	addi	sp,sp,12
 1007748:	f800283a 	ret

0100774c <__udivdi3>:
 100774c:	defff104 	addi	sp,sp,-60
 1007750:	0015883a 	mov	r10,zero
 1007754:	2005883a 	mov	r2,r4
 1007758:	3011883a 	mov	r8,r6
 100775c:	df000d15 	stw	fp,52(sp)
 1007760:	dd400a15 	stw	r21,40(sp)
 1007764:	dcc00815 	stw	r19,32(sp)
 1007768:	dfc00e15 	stw	ra,56(sp)
 100776c:	ddc00c15 	stw	r23,48(sp)
 1007770:	dd800b15 	stw	r22,44(sp)
 1007774:	dd000915 	stw	r20,36(sp)
 1007778:	dc800715 	stw	r18,28(sp)
 100777c:	dc400615 	stw	r17,24(sp)
 1007780:	dc000515 	stw	r16,20(sp)
 1007784:	da800315 	stw	r10,12(sp)
 1007788:	4027883a 	mov	r19,r8
 100778c:	1039883a 	mov	fp,r2
 1007790:	282b883a 	mov	r21,r5
 1007794:	da800415 	stw	r10,16(sp)
 1007798:	3800401e 	bne	r7,zero,100789c <__udivdi3+0x150>
 100779c:	2a006536 	bltu	r5,r8,1007934 <__udivdi3+0x1e8>
 10077a0:	4000b526 	beq	r8,zero,1007a78 <__udivdi3+0x32c>
 10077a4:	00bfffd4 	movui	r2,65535
 10077a8:	14c0ad36 	bltu	r2,r19,1007a60 <__udivdi3+0x314>
 10077ac:	00803fc4 	movi	r2,255
 10077b0:	14c15e36 	bltu	r2,r19,1007d2c <__udivdi3+0x5e0>
 10077b4:	000b883a 	mov	r5,zero
 10077b8:	0005883a 	mov	r2,zero
 10077bc:	9884d83a 	srl	r2,r19,r2
 10077c0:	01004074 	movhi	r4,257
 10077c4:	210b0004 	addi	r4,r4,11264
 10077c8:	01800804 	movi	r6,32
 10077cc:	1105883a 	add	r2,r2,r4
 10077d0:	10c00003 	ldbu	r3,0(r2)
 10077d4:	28c7883a 	add	r3,r5,r3
 10077d8:	30e9c83a 	sub	r20,r6,r3
 10077dc:	a0010a1e 	bne	r20,zero,1007c08 <__udivdi3+0x4bc>
 10077e0:	982ed43a 	srli	r23,r19,16
 10077e4:	acebc83a 	sub	r21,r21,r19
 10077e8:	9dbfffcc 	andi	r22,r19,65535
 10077ec:	05000044 	movi	r20,1
 10077f0:	a809883a 	mov	r4,r21
 10077f4:	b80b883a 	mov	r5,r23
 10077f8:	10096800 	call	1009680 <__udivsi3>
 10077fc:	100b883a 	mov	r5,r2
 1007800:	b009883a 	mov	r4,r22
 1007804:	1021883a 	mov	r16,r2
 1007808:	10096900 	call	1009690 <__mulsi3>
 100780c:	a809883a 	mov	r4,r21
 1007810:	b80b883a 	mov	r5,r23
 1007814:	1023883a 	mov	r17,r2
 1007818:	10096880 	call	1009688 <__umodsi3>
 100781c:	1004943a 	slli	r2,r2,16
 1007820:	e006d43a 	srli	r3,fp,16
 1007824:	10c4b03a 	or	r2,r2,r3
 1007828:	1440042e 	bgeu	r2,r17,100783c <__udivdi3+0xf0>
 100782c:	14c5883a 	add	r2,r2,r19
 1007830:	843fffc4 	addi	r16,r16,-1
 1007834:	14c00136 	bltu	r2,r19,100783c <__udivdi3+0xf0>
 1007838:	14415c36 	bltu	r2,r17,1007dac <__udivdi3+0x660>
 100783c:	1463c83a 	sub	r17,r2,r17
 1007840:	8809883a 	mov	r4,r17
 1007844:	b80b883a 	mov	r5,r23
 1007848:	10096800 	call	1009680 <__udivsi3>
 100784c:	100b883a 	mov	r5,r2
 1007850:	b009883a 	mov	r4,r22
 1007854:	102b883a 	mov	r21,r2
 1007858:	10096900 	call	1009690 <__mulsi3>
 100785c:	8809883a 	mov	r4,r17
 1007860:	b80b883a 	mov	r5,r23
 1007864:	1025883a 	mov	r18,r2
 1007868:	10096880 	call	1009688 <__umodsi3>
 100786c:	1004943a 	slli	r2,r2,16
 1007870:	e0ffffcc 	andi	r3,fp,65535
 1007874:	10c4b03a 	or	r2,r2,r3
 1007878:	1480042e 	bgeu	r2,r18,100788c <__udivdi3+0x140>
 100787c:	9885883a 	add	r2,r19,r2
 1007880:	ad7fffc4 	addi	r21,r21,-1
 1007884:	14c00136 	bltu	r2,r19,100788c <__udivdi3+0x140>
 1007888:	14813c36 	bltu	r2,r18,1007d7c <__udivdi3+0x630>
 100788c:	8004943a 	slli	r2,r16,16
 1007890:	a009883a 	mov	r4,r20
 1007894:	a884b03a 	or	r2,r21,r2
 1007898:	00001506 	br	10078f0 <__udivdi3+0x1a4>
 100789c:	380d883a 	mov	r6,r7
 10078a0:	29c06c36 	bltu	r5,r7,1007a54 <__udivdi3+0x308>
 10078a4:	00bfffd4 	movui	r2,65535
 10078a8:	11c06436 	bltu	r2,r7,1007a3c <__udivdi3+0x2f0>
 10078ac:	00803fc4 	movi	r2,255
 10078b0:	11c11836 	bltu	r2,r7,1007d14 <__udivdi3+0x5c8>
 10078b4:	000b883a 	mov	r5,zero
 10078b8:	0005883a 	mov	r2,zero
 10078bc:	3084d83a 	srl	r2,r6,r2
 10078c0:	01004074 	movhi	r4,257
 10078c4:	210b0004 	addi	r4,r4,11264
 10078c8:	01c00804 	movi	r7,32
 10078cc:	1105883a 	add	r2,r2,r4
 10078d0:	10c00003 	ldbu	r3,0(r2)
 10078d4:	28c7883a 	add	r3,r5,r3
 10078d8:	38edc83a 	sub	r22,r7,r3
 10078dc:	b000731e 	bne	r22,zero,1007aac <__udivdi3+0x360>
 10078e0:	35400136 	bltu	r6,r21,10078e8 <__udivdi3+0x19c>
 10078e4:	e4c05b36 	bltu	fp,r19,1007a54 <__udivdi3+0x308>
 10078e8:	00800044 	movi	r2,1
 10078ec:	0009883a 	mov	r4,zero
 10078f0:	d8800315 	stw	r2,12(sp)
 10078f4:	d9400317 	ldw	r5,12(sp)
 10078f8:	2007883a 	mov	r3,r4
 10078fc:	d9000415 	stw	r4,16(sp)
 1007900:	2805883a 	mov	r2,r5
 1007904:	dfc00e17 	ldw	ra,56(sp)
 1007908:	df000d17 	ldw	fp,52(sp)
 100790c:	ddc00c17 	ldw	r23,48(sp)
 1007910:	dd800b17 	ldw	r22,44(sp)
 1007914:	dd400a17 	ldw	r21,40(sp)
 1007918:	dd000917 	ldw	r20,36(sp)
 100791c:	dcc00817 	ldw	r19,32(sp)
 1007920:	dc800717 	ldw	r18,28(sp)
 1007924:	dc400617 	ldw	r17,24(sp)
 1007928:	dc000517 	ldw	r16,20(sp)
 100792c:	dec00f04 	addi	sp,sp,60
 1007930:	f800283a 	ret
 1007934:	00bfffd4 	movui	r2,65535
 1007938:	12005636 	bltu	r2,r8,1007a94 <__udivdi3+0x348>
 100793c:	00803fc4 	movi	r2,255
 1007940:	12010036 	bltu	r2,r8,1007d44 <__udivdi3+0x5f8>
 1007944:	000b883a 	mov	r5,zero
 1007948:	0005883a 	mov	r2,zero
 100794c:	9884d83a 	srl	r2,r19,r2
 1007950:	01004074 	movhi	r4,257
 1007954:	210b0004 	addi	r4,r4,11264
 1007958:	01800804 	movi	r6,32
 100795c:	1105883a 	add	r2,r2,r4
 1007960:	10c00003 	ldbu	r3,0(r2)
 1007964:	28c7883a 	add	r3,r5,r3
 1007968:	30cbc83a 	sub	r5,r6,r3
 100796c:	28000626 	beq	r5,zero,1007988 <__udivdi3+0x23c>
 1007970:	3145c83a 	sub	r2,r6,r5
 1007974:	e084d83a 	srl	r2,fp,r2
 1007978:	a946983a 	sll	r3,r21,r5
 100797c:	e178983a 	sll	fp,fp,r5
 1007980:	9966983a 	sll	r19,r19,r5
 1007984:	18aab03a 	or	r21,r3,r2
 1007988:	982ed43a 	srli	r23,r19,16
 100798c:	a809883a 	mov	r4,r21
 1007990:	9cbfffcc 	andi	r18,r19,65535
 1007994:	b80b883a 	mov	r5,r23
 1007998:	10096800 	call	1009680 <__udivsi3>
 100799c:	100b883a 	mov	r5,r2
 10079a0:	9009883a 	mov	r4,r18
 10079a4:	1021883a 	mov	r16,r2
 10079a8:	10096900 	call	1009690 <__mulsi3>
 10079ac:	a809883a 	mov	r4,r21
 10079b0:	b80b883a 	mov	r5,r23
 10079b4:	1023883a 	mov	r17,r2
 10079b8:	10096880 	call	1009688 <__umodsi3>
 10079bc:	1004943a 	slli	r2,r2,16
 10079c0:	e006d43a 	srli	r3,fp,16
 10079c4:	10c4b03a 	or	r2,r2,r3
 10079c8:	1440042e 	bgeu	r2,r17,10079dc <__udivdi3+0x290>
 10079cc:	14c5883a 	add	r2,r2,r19
 10079d0:	843fffc4 	addi	r16,r16,-1
 10079d4:	14c00136 	bltu	r2,r19,10079dc <__udivdi3+0x290>
 10079d8:	1440ea36 	bltu	r2,r17,1007d84 <__udivdi3+0x638>
 10079dc:	1463c83a 	sub	r17,r2,r17
 10079e0:	8809883a 	mov	r4,r17
 10079e4:	b80b883a 	mov	r5,r23
 10079e8:	10096800 	call	1009680 <__udivsi3>
 10079ec:	100b883a 	mov	r5,r2
 10079f0:	9009883a 	mov	r4,r18
 10079f4:	102b883a 	mov	r21,r2
 10079f8:	10096900 	call	1009690 <__mulsi3>
 10079fc:	8809883a 	mov	r4,r17
 1007a00:	b80b883a 	mov	r5,r23
 1007a04:	1025883a 	mov	r18,r2
 1007a08:	10096880 	call	1009688 <__umodsi3>
 1007a0c:	1004943a 	slli	r2,r2,16
 1007a10:	e0ffffcc 	andi	r3,fp,65535
 1007a14:	10c4b03a 	or	r2,r2,r3
 1007a18:	1480042e 	bgeu	r2,r18,1007a2c <__udivdi3+0x2e0>
 1007a1c:	9885883a 	add	r2,r19,r2
 1007a20:	ad7fffc4 	addi	r21,r21,-1
 1007a24:	14c00136 	bltu	r2,r19,1007a2c <__udivdi3+0x2e0>
 1007a28:	1480d936 	bltu	r2,r18,1007d90 <__udivdi3+0x644>
 1007a2c:	8004943a 	slli	r2,r16,16
 1007a30:	0009883a 	mov	r4,zero
 1007a34:	a884b03a 	or	r2,r21,r2
 1007a38:	003fad06 	br	10078f0 <__udivdi3+0x1a4>
 1007a3c:	00804034 	movhi	r2,256
 1007a40:	10bfffc4 	addi	r2,r2,-1
 1007a44:	11c0b636 	bltu	r2,r7,1007d20 <__udivdi3+0x5d4>
 1007a48:	01400404 	movi	r5,16
 1007a4c:	2805883a 	mov	r2,r5
 1007a50:	003f9a06 	br	10078bc <__udivdi3+0x170>
 1007a54:	0005883a 	mov	r2,zero
 1007a58:	0009883a 	mov	r4,zero
 1007a5c:	003fa406 	br	10078f0 <__udivdi3+0x1a4>
 1007a60:	00804034 	movhi	r2,256
 1007a64:	10bfffc4 	addi	r2,r2,-1
 1007a68:	14c0b336 	bltu	r2,r19,1007d38 <__udivdi3+0x5ec>
 1007a6c:	01400404 	movi	r5,16
 1007a70:	2805883a 	mov	r2,r5
 1007a74:	003f5106 	br	10077bc <__udivdi3+0x70>
 1007a78:	01000044 	movi	r4,1
 1007a7c:	000b883a 	mov	r5,zero
 1007a80:	10096800 	call	1009680 <__udivsi3>
 1007a84:	1027883a 	mov	r19,r2
 1007a88:	00bfffd4 	movui	r2,65535
 1007a8c:	14fff436 	bltu	r2,r19,1007a60 <__udivdi3+0x314>
 1007a90:	003f4606 	br	10077ac <__udivdi3+0x60>
 1007a94:	00804034 	movhi	r2,256
 1007a98:	10bfffc4 	addi	r2,r2,-1
 1007a9c:	1200ac36 	bltu	r2,r8,1007d50 <__udivdi3+0x604>
 1007aa0:	01400404 	movi	r5,16
 1007aa4:	2805883a 	mov	r2,r5
 1007aa8:	003fa806 	br	100794c <__udivdi3+0x200>
 1007aac:	3d85c83a 	sub	r2,r7,r22
 1007ab0:	3588983a 	sll	r4,r6,r22
 1007ab4:	9886d83a 	srl	r3,r19,r2
 1007ab8:	a8a2d83a 	srl	r17,r21,r2
 1007abc:	e084d83a 	srl	r2,fp,r2
 1007ac0:	20eeb03a 	or	r23,r4,r3
 1007ac4:	b824d43a 	srli	r18,r23,16
 1007ac8:	ad86983a 	sll	r3,r21,r22
 1007acc:	8809883a 	mov	r4,r17
 1007ad0:	900b883a 	mov	r5,r18
 1007ad4:	1886b03a 	or	r3,r3,r2
 1007ad8:	d8c00115 	stw	r3,4(sp)
 1007adc:	bc3fffcc 	andi	r16,r23,65535
 1007ae0:	10096800 	call	1009680 <__udivsi3>
 1007ae4:	100b883a 	mov	r5,r2
 1007ae8:	8009883a 	mov	r4,r16
 1007aec:	1029883a 	mov	r20,r2
 1007af0:	10096900 	call	1009690 <__mulsi3>
 1007af4:	900b883a 	mov	r5,r18
 1007af8:	8809883a 	mov	r4,r17
 1007afc:	102b883a 	mov	r21,r2
 1007b00:	10096880 	call	1009688 <__umodsi3>
 1007b04:	d9400117 	ldw	r5,4(sp)
 1007b08:	1004943a 	slli	r2,r2,16
 1007b0c:	9da6983a 	sll	r19,r19,r22
 1007b10:	2806d43a 	srli	r3,r5,16
 1007b14:	10c4b03a 	or	r2,r2,r3
 1007b18:	1540032e 	bgeu	r2,r21,1007b28 <__udivdi3+0x3dc>
 1007b1c:	15c5883a 	add	r2,r2,r23
 1007b20:	a53fffc4 	addi	r20,r20,-1
 1007b24:	15c0912e 	bgeu	r2,r23,1007d6c <__udivdi3+0x620>
 1007b28:	1563c83a 	sub	r17,r2,r21
 1007b2c:	8809883a 	mov	r4,r17
 1007b30:	900b883a 	mov	r5,r18
 1007b34:	10096800 	call	1009680 <__udivsi3>
 1007b38:	100b883a 	mov	r5,r2
 1007b3c:	8009883a 	mov	r4,r16
 1007b40:	102b883a 	mov	r21,r2
 1007b44:	10096900 	call	1009690 <__mulsi3>
 1007b48:	8809883a 	mov	r4,r17
 1007b4c:	900b883a 	mov	r5,r18
 1007b50:	1021883a 	mov	r16,r2
 1007b54:	10096880 	call	1009688 <__umodsi3>
 1007b58:	da800117 	ldw	r10,4(sp)
 1007b5c:	1004943a 	slli	r2,r2,16
 1007b60:	50ffffcc 	andi	r3,r10,65535
 1007b64:	10c6b03a 	or	r3,r2,r3
 1007b68:	1c00032e 	bgeu	r3,r16,1007b78 <__udivdi3+0x42c>
 1007b6c:	1dc7883a 	add	r3,r3,r23
 1007b70:	ad7fffc4 	addi	r21,r21,-1
 1007b74:	1dc0792e 	bgeu	r3,r23,1007d5c <__udivdi3+0x610>
 1007b78:	a004943a 	slli	r2,r20,16
 1007b7c:	982ed43a 	srli	r23,r19,16
 1007b80:	9cffffcc 	andi	r19,r19,65535
 1007b84:	a8a4b03a 	or	r18,r21,r2
 1007b88:	947fffcc 	andi	r17,r18,65535
 1007b8c:	902ad43a 	srli	r21,r18,16
 1007b90:	8809883a 	mov	r4,r17
 1007b94:	980b883a 	mov	r5,r19
 1007b98:	1c21c83a 	sub	r16,r3,r16
 1007b9c:	10096900 	call	1009690 <__mulsi3>
 1007ba0:	8809883a 	mov	r4,r17
 1007ba4:	b80b883a 	mov	r5,r23
 1007ba8:	1029883a 	mov	r20,r2
 1007bac:	10096900 	call	1009690 <__mulsi3>
 1007bb0:	980b883a 	mov	r5,r19
 1007bb4:	a809883a 	mov	r4,r21
 1007bb8:	1023883a 	mov	r17,r2
 1007bbc:	10096900 	call	1009690 <__mulsi3>
 1007bc0:	a809883a 	mov	r4,r21
 1007bc4:	b80b883a 	mov	r5,r23
 1007bc8:	1027883a 	mov	r19,r2
 1007bcc:	10096900 	call	1009690 <__mulsi3>
 1007bd0:	1009883a 	mov	r4,r2
 1007bd4:	a004d43a 	srli	r2,r20,16
 1007bd8:	8ce3883a 	add	r17,r17,r19
 1007bdc:	1447883a 	add	r3,r2,r17
 1007be0:	1cc0022e 	bgeu	r3,r19,1007bec <__udivdi3+0x4a0>
 1007be4:	00800074 	movhi	r2,1
 1007be8:	2089883a 	add	r4,r4,r2
 1007bec:	1804d43a 	srli	r2,r3,16
 1007bf0:	2085883a 	add	r2,r4,r2
 1007bf4:	80804436 	bltu	r16,r2,1007d08 <__udivdi3+0x5bc>
 1007bf8:	80803e26 	beq	r16,r2,1007cf4 <__udivdi3+0x5a8>
 1007bfc:	9005883a 	mov	r2,r18
 1007c00:	0009883a 	mov	r4,zero
 1007c04:	003f3a06 	br	10078f0 <__udivdi3+0x1a4>
 1007c08:	9d26983a 	sll	r19,r19,r20
 1007c0c:	3505c83a 	sub	r2,r6,r20
 1007c10:	a8a2d83a 	srl	r17,r21,r2
 1007c14:	982ed43a 	srli	r23,r19,16
 1007c18:	e084d83a 	srl	r2,fp,r2
 1007c1c:	ad06983a 	sll	r3,r21,r20
 1007c20:	8809883a 	mov	r4,r17
 1007c24:	b80b883a 	mov	r5,r23
 1007c28:	1886b03a 	or	r3,r3,r2
 1007c2c:	d8c00015 	stw	r3,0(sp)
 1007c30:	9dbfffcc 	andi	r22,r19,65535
 1007c34:	10096800 	call	1009680 <__udivsi3>
 1007c38:	100b883a 	mov	r5,r2
 1007c3c:	b009883a 	mov	r4,r22
 1007c40:	d8800215 	stw	r2,8(sp)
 1007c44:	10096900 	call	1009690 <__mulsi3>
 1007c48:	8809883a 	mov	r4,r17
 1007c4c:	b80b883a 	mov	r5,r23
 1007c50:	102b883a 	mov	r21,r2
 1007c54:	10096880 	call	1009688 <__umodsi3>
 1007c58:	d9000017 	ldw	r4,0(sp)
 1007c5c:	1004943a 	slli	r2,r2,16
 1007c60:	2006d43a 	srli	r3,r4,16
 1007c64:	10c4b03a 	or	r2,r2,r3
 1007c68:	1540052e 	bgeu	r2,r21,1007c80 <__udivdi3+0x534>
 1007c6c:	d9400217 	ldw	r5,8(sp)
 1007c70:	14c5883a 	add	r2,r2,r19
 1007c74:	297fffc4 	addi	r5,r5,-1
 1007c78:	d9400215 	stw	r5,8(sp)
 1007c7c:	14c0462e 	bgeu	r2,r19,1007d98 <__udivdi3+0x64c>
 1007c80:	1563c83a 	sub	r17,r2,r21
 1007c84:	8809883a 	mov	r4,r17
 1007c88:	b80b883a 	mov	r5,r23
 1007c8c:	10096800 	call	1009680 <__udivsi3>
 1007c90:	100b883a 	mov	r5,r2
 1007c94:	b009883a 	mov	r4,r22
 1007c98:	1025883a 	mov	r18,r2
 1007c9c:	10096900 	call	1009690 <__mulsi3>
 1007ca0:	8809883a 	mov	r4,r17
 1007ca4:	b80b883a 	mov	r5,r23
 1007ca8:	1021883a 	mov	r16,r2
 1007cac:	10096880 	call	1009688 <__umodsi3>
 1007cb0:	da800017 	ldw	r10,0(sp)
 1007cb4:	1004943a 	slli	r2,r2,16
 1007cb8:	50ffffcc 	andi	r3,r10,65535
 1007cbc:	10c6b03a 	or	r3,r2,r3
 1007cc0:	1c00062e 	bgeu	r3,r16,1007cdc <__udivdi3+0x590>
 1007cc4:	1cc7883a 	add	r3,r3,r19
 1007cc8:	94bfffc4 	addi	r18,r18,-1
 1007ccc:	1cc00336 	bltu	r3,r19,1007cdc <__udivdi3+0x590>
 1007cd0:	1c00022e 	bgeu	r3,r16,1007cdc <__udivdi3+0x590>
 1007cd4:	94bfffc4 	addi	r18,r18,-1
 1007cd8:	1cc7883a 	add	r3,r3,r19
 1007cdc:	d9000217 	ldw	r4,8(sp)
 1007ce0:	e538983a 	sll	fp,fp,r20
 1007ce4:	1c2bc83a 	sub	r21,r3,r16
 1007ce8:	2004943a 	slli	r2,r4,16
 1007cec:	90a8b03a 	or	r20,r18,r2
 1007cf0:	003ebf06 	br	10077f0 <__udivdi3+0xa4>
 1007cf4:	1804943a 	slli	r2,r3,16
 1007cf8:	e588983a 	sll	r4,fp,r22
 1007cfc:	a0ffffcc 	andi	r3,r20,65535
 1007d00:	10c5883a 	add	r2,r2,r3
 1007d04:	20bfbd2e 	bgeu	r4,r2,1007bfc <__udivdi3+0x4b0>
 1007d08:	90bfffc4 	addi	r2,r18,-1
 1007d0c:	0009883a 	mov	r4,zero
 1007d10:	003ef706 	br	10078f0 <__udivdi3+0x1a4>
 1007d14:	01400204 	movi	r5,8
 1007d18:	2805883a 	mov	r2,r5
 1007d1c:	003ee706 	br	10078bc <__udivdi3+0x170>
 1007d20:	01400604 	movi	r5,24
 1007d24:	2805883a 	mov	r2,r5
 1007d28:	003ee406 	br	10078bc <__udivdi3+0x170>
 1007d2c:	01400204 	movi	r5,8
 1007d30:	2805883a 	mov	r2,r5
 1007d34:	003ea106 	br	10077bc <__udivdi3+0x70>
 1007d38:	01400604 	movi	r5,24
 1007d3c:	2805883a 	mov	r2,r5
 1007d40:	003e9e06 	br	10077bc <__udivdi3+0x70>
 1007d44:	01400204 	movi	r5,8
 1007d48:	2805883a 	mov	r2,r5
 1007d4c:	003eff06 	br	100794c <__udivdi3+0x200>
 1007d50:	01400604 	movi	r5,24
 1007d54:	2805883a 	mov	r2,r5
 1007d58:	003efc06 	br	100794c <__udivdi3+0x200>
 1007d5c:	1c3f862e 	bgeu	r3,r16,1007b78 <__udivdi3+0x42c>
 1007d60:	1dc7883a 	add	r3,r3,r23
 1007d64:	ad7fffc4 	addi	r21,r21,-1
 1007d68:	003f8306 	br	1007b78 <__udivdi3+0x42c>
 1007d6c:	157f6e2e 	bgeu	r2,r21,1007b28 <__udivdi3+0x3dc>
 1007d70:	a53fffc4 	addi	r20,r20,-1
 1007d74:	15c5883a 	add	r2,r2,r23
 1007d78:	003f6b06 	br	1007b28 <__udivdi3+0x3dc>
 1007d7c:	ad7fffc4 	addi	r21,r21,-1
 1007d80:	003ec206 	br	100788c <__udivdi3+0x140>
 1007d84:	843fffc4 	addi	r16,r16,-1
 1007d88:	14c5883a 	add	r2,r2,r19
 1007d8c:	003f1306 	br	10079dc <__udivdi3+0x290>
 1007d90:	ad7fffc4 	addi	r21,r21,-1
 1007d94:	003f2506 	br	1007a2c <__udivdi3+0x2e0>
 1007d98:	157fb92e 	bgeu	r2,r21,1007c80 <__udivdi3+0x534>
 1007d9c:	297fffc4 	addi	r5,r5,-1
 1007da0:	14c5883a 	add	r2,r2,r19
 1007da4:	d9400215 	stw	r5,8(sp)
 1007da8:	003fb506 	br	1007c80 <__udivdi3+0x534>
 1007dac:	843fffc4 	addi	r16,r16,-1
 1007db0:	14c5883a 	add	r2,r2,r19
 1007db4:	003ea106 	br	100783c <__udivdi3+0xf0>

01007db8 <__umoddi3>:
 1007db8:	defff004 	addi	sp,sp,-64
 1007dbc:	3011883a 	mov	r8,r6
 1007dc0:	000d883a 	mov	r6,zero
 1007dc4:	dd400b15 	stw	r21,44(sp)
 1007dc8:	dcc00915 	stw	r19,36(sp)
 1007dcc:	dc000615 	stw	r16,24(sp)
 1007dd0:	dfc00f15 	stw	ra,60(sp)
 1007dd4:	df000e15 	stw	fp,56(sp)
 1007dd8:	ddc00d15 	stw	r23,52(sp)
 1007ddc:	dd800c15 	stw	r22,48(sp)
 1007de0:	dd000a15 	stw	r20,40(sp)
 1007de4:	dc800815 	stw	r18,32(sp)
 1007de8:	dc400715 	stw	r17,28(sp)
 1007dec:	2817883a 	mov	r11,r5
 1007df0:	d9800415 	stw	r6,16(sp)
 1007df4:	4027883a 	mov	r19,r8
 1007df8:	d9800515 	stw	r6,20(sp)
 1007dfc:	2021883a 	mov	r16,r4
 1007e00:	282b883a 	mov	r21,r5
 1007e04:	38002c1e 	bne	r7,zero,1007eb8 <__umoddi3+0x100>
 1007e08:	2a005636 	bltu	r5,r8,1007f64 <__umoddi3+0x1ac>
 1007e0c:	40009a26 	beq	r8,zero,1008078 <__umoddi3+0x2c0>
 1007e10:	00bfffd4 	movui	r2,65535
 1007e14:	14c09236 	bltu	r2,r19,1008060 <__umoddi3+0x2a8>
 1007e18:	00803fc4 	movi	r2,255
 1007e1c:	14c15c36 	bltu	r2,r19,1008390 <__umoddi3+0x5d8>
 1007e20:	000b883a 	mov	r5,zero
 1007e24:	0005883a 	mov	r2,zero
 1007e28:	9884d83a 	srl	r2,r19,r2
 1007e2c:	01004074 	movhi	r4,257
 1007e30:	210b0004 	addi	r4,r4,11264
 1007e34:	01800804 	movi	r6,32
 1007e38:	1105883a 	add	r2,r2,r4
 1007e3c:	10c00003 	ldbu	r3,0(r2)
 1007e40:	28c7883a 	add	r3,r5,r3
 1007e44:	30e5c83a 	sub	r18,r6,r3
 1007e48:	9000a41e 	bne	r18,zero,10080dc <__umoddi3+0x324>
 1007e4c:	982ed43a 	srli	r23,r19,16
 1007e50:	acebc83a 	sub	r21,r21,r19
 1007e54:	9d3fffcc 	andi	r20,r19,65535
 1007e58:	002d883a 	mov	r22,zero
 1007e5c:	a809883a 	mov	r4,r21
 1007e60:	b80b883a 	mov	r5,r23
 1007e64:	10096800 	call	1009680 <__udivsi3>
 1007e68:	100b883a 	mov	r5,r2
 1007e6c:	a009883a 	mov	r4,r20
 1007e70:	10096900 	call	1009690 <__mulsi3>
 1007e74:	a809883a 	mov	r4,r21
 1007e78:	b80b883a 	mov	r5,r23
 1007e7c:	1023883a 	mov	r17,r2
 1007e80:	10096880 	call	1009688 <__umodsi3>
 1007e84:	1004943a 	slli	r2,r2,16
 1007e88:	8006d43a 	srli	r3,r16,16
 1007e8c:	10c4b03a 	or	r2,r2,r3
 1007e90:	1440032e 	bgeu	r2,r17,1007ea0 <__umoddi3+0xe8>
 1007e94:	14c5883a 	add	r2,r2,r19
 1007e98:	14c00136 	bltu	r2,r19,1007ea0 <__umoddi3+0xe8>
 1007e9c:	14415836 	bltu	r2,r17,1008400 <__umoddi3+0x648>
 1007ea0:	1463c83a 	sub	r17,r2,r17
 1007ea4:	8809883a 	mov	r4,r17
 1007ea8:	b80b883a 	mov	r5,r23
 1007eac:	10096800 	call	1009680 <__udivsi3>
 1007eb0:	a009883a 	mov	r4,r20
 1007eb4:	00005306 	br	1008004 <__umoddi3+0x24c>
 1007eb8:	380d883a 	mov	r6,r7
 1007ebc:	29c0132e 	bgeu	r5,r7,1007f0c <__umoddi3+0x154>
 1007ec0:	d9000415 	stw	r4,16(sp)
 1007ec4:	d9400515 	stw	r5,20(sp)
 1007ec8:	d9400417 	ldw	r5,16(sp)
 1007ecc:	5813883a 	mov	r9,r11
 1007ed0:	2811883a 	mov	r8,r5
 1007ed4:	4005883a 	mov	r2,r8
 1007ed8:	4807883a 	mov	r3,r9
 1007edc:	dfc00f17 	ldw	ra,60(sp)
 1007ee0:	df000e17 	ldw	fp,56(sp)
 1007ee4:	ddc00d17 	ldw	r23,52(sp)
 1007ee8:	dd800c17 	ldw	r22,48(sp)
 1007eec:	dd400b17 	ldw	r21,44(sp)
 1007ef0:	dd000a17 	ldw	r20,40(sp)
 1007ef4:	dcc00917 	ldw	r19,36(sp)
 1007ef8:	dc800817 	ldw	r18,32(sp)
 1007efc:	dc400717 	ldw	r17,28(sp)
 1007f00:	dc000617 	ldw	r16,24(sp)
 1007f04:	dec01004 	addi	sp,sp,64
 1007f08:	f800283a 	ret
 1007f0c:	00bfffd4 	movui	r2,65535
 1007f10:	11c06636 	bltu	r2,r7,10080ac <__umoddi3+0x2f4>
 1007f14:	00803fc4 	movi	r2,255
 1007f18:	11c12036 	bltu	r2,r7,100839c <__umoddi3+0x5e4>
 1007f1c:	000b883a 	mov	r5,zero
 1007f20:	0005883a 	mov	r2,zero
 1007f24:	3084d83a 	srl	r2,r6,r2
 1007f28:	01004074 	movhi	r4,257
 1007f2c:	210b0004 	addi	r4,r4,11264
 1007f30:	01c00804 	movi	r7,32
 1007f34:	1105883a 	add	r2,r2,r4
 1007f38:	10c00003 	ldbu	r3,0(r2)
 1007f3c:	28c7883a 	add	r3,r5,r3
 1007f40:	38e5c83a 	sub	r18,r7,r3
 1007f44:	9000941e 	bne	r18,zero,1008198 <__umoddi3+0x3e0>
 1007f48:	35405e36 	bltu	r6,r21,10080c4 <__umoddi3+0x30c>
 1007f4c:	84c05d2e 	bgeu	r16,r19,10080c4 <__umoddi3+0x30c>
 1007f50:	8011883a 	mov	r8,r16
 1007f54:	a813883a 	mov	r9,r21
 1007f58:	dc000415 	stw	r16,16(sp)
 1007f5c:	dd400515 	stw	r21,20(sp)
 1007f60:	003fdc06 	br	1007ed4 <__umoddi3+0x11c>
 1007f64:	00bfffd4 	movui	r2,65535
 1007f68:	12004a36 	bltu	r2,r8,1008094 <__umoddi3+0x2dc>
 1007f6c:	00803fc4 	movi	r2,255
 1007f70:	12010d36 	bltu	r2,r8,10083a8 <__umoddi3+0x5f0>
 1007f74:	000b883a 	mov	r5,zero
 1007f78:	0005883a 	mov	r2,zero
 1007f7c:	9884d83a 	srl	r2,r19,r2
 1007f80:	01004074 	movhi	r4,257
 1007f84:	210b0004 	addi	r4,r4,11264
 1007f88:	01800804 	movi	r6,32
 1007f8c:	1105883a 	add	r2,r2,r4
 1007f90:	10c00003 	ldbu	r3,0(r2)
 1007f94:	28c7883a 	add	r3,r5,r3
 1007f98:	30c7c83a 	sub	r3,r6,r3
 1007f9c:	1800dc1e 	bne	r3,zero,1008310 <__umoddi3+0x558>
 1007fa0:	002d883a 	mov	r22,zero
 1007fa4:	982ed43a 	srli	r23,r19,16
 1007fa8:	a809883a 	mov	r4,r21
 1007fac:	9cbfffcc 	andi	r18,r19,65535
 1007fb0:	b80b883a 	mov	r5,r23
 1007fb4:	10096800 	call	1009680 <__udivsi3>
 1007fb8:	100b883a 	mov	r5,r2
 1007fbc:	9009883a 	mov	r4,r18
 1007fc0:	10096900 	call	1009690 <__mulsi3>
 1007fc4:	a809883a 	mov	r4,r21
 1007fc8:	b80b883a 	mov	r5,r23
 1007fcc:	1023883a 	mov	r17,r2
 1007fd0:	10096880 	call	1009688 <__umodsi3>
 1007fd4:	1004943a 	slli	r2,r2,16
 1007fd8:	8006d43a 	srli	r3,r16,16
 1007fdc:	10c4b03a 	or	r2,r2,r3
 1007fe0:	1440032e 	bgeu	r2,r17,1007ff0 <__umoddi3+0x238>
 1007fe4:	14c5883a 	add	r2,r2,r19
 1007fe8:	14c00136 	bltu	r2,r19,1007ff0 <__umoddi3+0x238>
 1007fec:	14410236 	bltu	r2,r17,10083f8 <__umoddi3+0x640>
 1007ff0:	1463c83a 	sub	r17,r2,r17
 1007ff4:	8809883a 	mov	r4,r17
 1007ff8:	b80b883a 	mov	r5,r23
 1007ffc:	10096800 	call	1009680 <__udivsi3>
 1008000:	9009883a 	mov	r4,r18
 1008004:	100b883a 	mov	r5,r2
 1008008:	10096900 	call	1009690 <__mulsi3>
 100800c:	8809883a 	mov	r4,r17
 1008010:	b80b883a 	mov	r5,r23
 1008014:	102b883a 	mov	r21,r2
 1008018:	10096880 	call	1009688 <__umodsi3>
 100801c:	1004943a 	slli	r2,r2,16
 1008020:	80ffffcc 	andi	r3,r16,65535
 1008024:	10c4b03a 	or	r2,r2,r3
 1008028:	1540042e 	bgeu	r2,r21,100803c <__umoddi3+0x284>
 100802c:	14c5883a 	add	r2,r2,r19
 1008030:	14c00236 	bltu	r2,r19,100803c <__umoddi3+0x284>
 1008034:	1540012e 	bgeu	r2,r21,100803c <__umoddi3+0x284>
 1008038:	14c5883a 	add	r2,r2,r19
 100803c:	1545c83a 	sub	r2,r2,r21
 1008040:	1584d83a 	srl	r2,r2,r22
 1008044:	0013883a 	mov	r9,zero
 1008048:	d8800415 	stw	r2,16(sp)
 100804c:	d8c00417 	ldw	r3,16(sp)
 1008050:	0005883a 	mov	r2,zero
 1008054:	d8800515 	stw	r2,20(sp)
 1008058:	1811883a 	mov	r8,r3
 100805c:	003f9d06 	br	1007ed4 <__umoddi3+0x11c>
 1008060:	00804034 	movhi	r2,256
 1008064:	10bfffc4 	addi	r2,r2,-1
 1008068:	14c0c636 	bltu	r2,r19,1008384 <__umoddi3+0x5cc>
 100806c:	01400404 	movi	r5,16
 1008070:	2805883a 	mov	r2,r5
 1008074:	003f6c06 	br	1007e28 <__umoddi3+0x70>
 1008078:	01000044 	movi	r4,1
 100807c:	000b883a 	mov	r5,zero
 1008080:	10096800 	call	1009680 <__udivsi3>
 1008084:	1027883a 	mov	r19,r2
 1008088:	00bfffd4 	movui	r2,65535
 100808c:	14fff436 	bltu	r2,r19,1008060 <__umoddi3+0x2a8>
 1008090:	003f6106 	br	1007e18 <__umoddi3+0x60>
 1008094:	00804034 	movhi	r2,256
 1008098:	10bfffc4 	addi	r2,r2,-1
 100809c:	1200c536 	bltu	r2,r8,10083b4 <__umoddi3+0x5fc>
 10080a0:	01400404 	movi	r5,16
 10080a4:	2805883a 	mov	r2,r5
 10080a8:	003fb406 	br	1007f7c <__umoddi3+0x1c4>
 10080ac:	00804034 	movhi	r2,256
 10080b0:	10bfffc4 	addi	r2,r2,-1
 10080b4:	11c0c236 	bltu	r2,r7,10083c0 <__umoddi3+0x608>
 10080b8:	01400404 	movi	r5,16
 10080bc:	2805883a 	mov	r2,r5
 10080c0:	003f9806 	br	1007f24 <__umoddi3+0x16c>
 10080c4:	84c9c83a 	sub	r4,r16,r19
 10080c8:	8105803a 	cmpltu	r2,r16,r4
 10080cc:	a987c83a 	sub	r3,r21,r6
 10080d0:	18abc83a 	sub	r21,r3,r2
 10080d4:	2021883a 	mov	r16,r4
 10080d8:	003f9d06 	br	1007f50 <__umoddi3+0x198>
 10080dc:	9ca6983a 	sll	r19,r19,r18
 10080e0:	3485c83a 	sub	r2,r6,r18
 10080e4:	a8a2d83a 	srl	r17,r21,r2
 10080e8:	982ed43a 	srli	r23,r19,16
 10080ec:	ac86983a 	sll	r3,r21,r18
 10080f0:	8084d83a 	srl	r2,r16,r2
 10080f4:	8809883a 	mov	r4,r17
 10080f8:	b80b883a 	mov	r5,r23
 10080fc:	18b8b03a 	or	fp,r3,r2
 1008100:	9d3fffcc 	andi	r20,r19,65535
 1008104:	10096800 	call	1009680 <__udivsi3>
 1008108:	100b883a 	mov	r5,r2
 100810c:	a009883a 	mov	r4,r20
 1008110:	10096900 	call	1009690 <__mulsi3>
 1008114:	8809883a 	mov	r4,r17
 1008118:	b80b883a 	mov	r5,r23
 100811c:	102b883a 	mov	r21,r2
 1008120:	10096880 	call	1009688 <__umodsi3>
 1008124:	1004943a 	slli	r2,r2,16
 1008128:	e006d43a 	srli	r3,fp,16
 100812c:	902d883a 	mov	r22,r18
 1008130:	10c4b03a 	or	r2,r2,r3
 1008134:	1540022e 	bgeu	r2,r21,1008140 <__umoddi3+0x388>
 1008138:	14c5883a 	add	r2,r2,r19
 100813c:	14c0ab2e 	bgeu	r2,r19,10083ec <__umoddi3+0x634>
 1008140:	1563c83a 	sub	r17,r2,r21
 1008144:	8809883a 	mov	r4,r17
 1008148:	b80b883a 	mov	r5,r23
 100814c:	10096800 	call	1009680 <__udivsi3>
 1008150:	100b883a 	mov	r5,r2
 1008154:	a009883a 	mov	r4,r20
 1008158:	10096900 	call	1009690 <__mulsi3>
 100815c:	8809883a 	mov	r4,r17
 1008160:	b80b883a 	mov	r5,r23
 1008164:	102b883a 	mov	r21,r2
 1008168:	10096880 	call	1009688 <__umodsi3>
 100816c:	1004943a 	slli	r2,r2,16
 1008170:	e0ffffcc 	andi	r3,fp,65535
 1008174:	10c4b03a 	or	r2,r2,r3
 1008178:	1540042e 	bgeu	r2,r21,100818c <__umoddi3+0x3d4>
 100817c:	14c5883a 	add	r2,r2,r19
 1008180:	14c00236 	bltu	r2,r19,100818c <__umoddi3+0x3d4>
 1008184:	1540012e 	bgeu	r2,r21,100818c <__umoddi3+0x3d4>
 1008188:	14c5883a 	add	r2,r2,r19
 100818c:	84a0983a 	sll	r16,r16,r18
 1008190:	156bc83a 	sub	r21,r2,r21
 1008194:	003f3106 	br	1007e5c <__umoddi3+0xa4>
 1008198:	3c8fc83a 	sub	r7,r7,r18
 100819c:	3486983a 	sll	r3,r6,r18
 10081a0:	99c4d83a 	srl	r2,r19,r7
 10081a4:	a9e2d83a 	srl	r17,r21,r7
 10081a8:	ac8c983a 	sll	r6,r21,r18
 10081ac:	18acb03a 	or	r22,r3,r2
 10081b0:	b02ed43a 	srli	r23,r22,16
 10081b4:	81c4d83a 	srl	r2,r16,r7
 10081b8:	8809883a 	mov	r4,r17
 10081bc:	b80b883a 	mov	r5,r23
 10081c0:	308cb03a 	or	r6,r6,r2
 10081c4:	d9c00315 	stw	r7,12(sp)
 10081c8:	d9800215 	stw	r6,8(sp)
 10081cc:	b53fffcc 	andi	r20,r22,65535
 10081d0:	10096800 	call	1009680 <__udivsi3>
 10081d4:	100b883a 	mov	r5,r2
 10081d8:	a009883a 	mov	r4,r20
 10081dc:	1039883a 	mov	fp,r2
 10081e0:	10096900 	call	1009690 <__mulsi3>
 10081e4:	8809883a 	mov	r4,r17
 10081e8:	b80b883a 	mov	r5,r23
 10081ec:	102b883a 	mov	r21,r2
 10081f0:	10096880 	call	1009688 <__umodsi3>
 10081f4:	d9000217 	ldw	r4,8(sp)
 10081f8:	1004943a 	slli	r2,r2,16
 10081fc:	9ca6983a 	sll	r19,r19,r18
 1008200:	2006d43a 	srli	r3,r4,16
 1008204:	84a0983a 	sll	r16,r16,r18
 1008208:	dcc00015 	stw	r19,0(sp)
 100820c:	10c4b03a 	or	r2,r2,r3
 1008210:	dc000115 	stw	r16,4(sp)
 1008214:	1540032e 	bgeu	r2,r21,1008224 <__umoddi3+0x46c>
 1008218:	1585883a 	add	r2,r2,r22
 100821c:	e73fffc4 	addi	fp,fp,-1
 1008220:	15806e2e 	bgeu	r2,r22,10083dc <__umoddi3+0x624>
 1008224:	1563c83a 	sub	r17,r2,r21
 1008228:	8809883a 	mov	r4,r17
 100822c:	b80b883a 	mov	r5,r23
 1008230:	10096800 	call	1009680 <__udivsi3>
 1008234:	100b883a 	mov	r5,r2
 1008238:	a009883a 	mov	r4,r20
 100823c:	1021883a 	mov	r16,r2
 1008240:	10096900 	call	1009690 <__mulsi3>
 1008244:	b80b883a 	mov	r5,r23
 1008248:	8809883a 	mov	r4,r17
 100824c:	1029883a 	mov	r20,r2
 1008250:	10096880 	call	1009688 <__umodsi3>
 1008254:	d9400217 	ldw	r5,8(sp)
 1008258:	1004943a 	slli	r2,r2,16
 100825c:	28ffffcc 	andi	r3,r5,65535
 1008260:	10c4b03a 	or	r2,r2,r3
 1008264:	1500032e 	bgeu	r2,r20,1008274 <__umoddi3+0x4bc>
 1008268:	1585883a 	add	r2,r2,r22
 100826c:	843fffc4 	addi	r16,r16,-1
 1008270:	1580562e 	bgeu	r2,r22,10083cc <__umoddi3+0x614>
 1008274:	d9800017 	ldw	r6,0(sp)
 1008278:	e022943a 	slli	r17,fp,16
 100827c:	302ed43a 	srli	r23,r6,16
 1008280:	8462b03a 	or	r17,r16,r17
 1008284:	34ffffcc 	andi	r19,r6,65535
 1008288:	882ad43a 	srli	r21,r17,16
 100828c:	8c7fffcc 	andi	r17,r17,65535
 1008290:	8809883a 	mov	r4,r17
 1008294:	980b883a 	mov	r5,r19
 1008298:	1521c83a 	sub	r16,r2,r20
 100829c:	10096900 	call	1009690 <__mulsi3>
 10082a0:	8809883a 	mov	r4,r17
 10082a4:	b80b883a 	mov	r5,r23
 10082a8:	1029883a 	mov	r20,r2
 10082ac:	10096900 	call	1009690 <__mulsi3>
 10082b0:	980b883a 	mov	r5,r19
 10082b4:	a809883a 	mov	r4,r21
 10082b8:	1023883a 	mov	r17,r2
 10082bc:	10096900 	call	1009690 <__mulsi3>
 10082c0:	a809883a 	mov	r4,r21
 10082c4:	b80b883a 	mov	r5,r23
 10082c8:	1027883a 	mov	r19,r2
 10082cc:	10096900 	call	1009690 <__mulsi3>
 10082d0:	100b883a 	mov	r5,r2
 10082d4:	a004d43a 	srli	r2,r20,16
 10082d8:	8ce3883a 	add	r17,r17,r19
 10082dc:	1449883a 	add	r4,r2,r17
 10082e0:	24c0022e 	bgeu	r4,r19,10082ec <__umoddi3+0x534>
 10082e4:	00800074 	movhi	r2,1
 10082e8:	288b883a 	add	r5,r5,r2
 10082ec:	2004d43a 	srli	r2,r4,16
 10082f0:	2008943a 	slli	r4,r4,16
 10082f4:	a0ffffcc 	andi	r3,r20,65535
 10082f8:	288d883a 	add	r6,r5,r2
 10082fc:	20c9883a 	add	r4,r4,r3
 1008300:	81800b36 	bltu	r16,r6,1008330 <__umoddi3+0x578>
 1008304:	81804026 	beq	r16,r6,1008408 <__umoddi3+0x650>
 1008308:	818dc83a 	sub	r6,r16,r6
 100830c:	00000f06 	br	100834c <__umoddi3+0x594>
 1008310:	30c5c83a 	sub	r2,r6,r3
 1008314:	182d883a 	mov	r22,r3
 1008318:	8084d83a 	srl	r2,r16,r2
 100831c:	a8c6983a 	sll	r3,r21,r3
 1008320:	9da6983a 	sll	r19,r19,r22
 1008324:	85a0983a 	sll	r16,r16,r22
 1008328:	18aab03a 	or	r21,r3,r2
 100832c:	003f1d06 	br	1007fa4 <__umoddi3+0x1ec>
 1008330:	d8c00017 	ldw	r3,0(sp)
 1008334:	20c5c83a 	sub	r2,r4,r3
 1008338:	2089803a 	cmpltu	r4,r4,r2
 100833c:	3587c83a 	sub	r3,r6,r22
 1008340:	1907c83a 	sub	r3,r3,r4
 1008344:	80cdc83a 	sub	r6,r16,r3
 1008348:	1009883a 	mov	r4,r2
 100834c:	d9400117 	ldw	r5,4(sp)
 1008350:	2905c83a 	sub	r2,r5,r4
 1008354:	2887803a 	cmpltu	r3,r5,r2
 1008358:	30c7c83a 	sub	r3,r6,r3
 100835c:	d9800317 	ldw	r6,12(sp)
 1008360:	1484d83a 	srl	r2,r2,r18
 1008364:	1988983a 	sll	r4,r3,r6
 1008368:	1c86d83a 	srl	r3,r3,r18
 100836c:	2088b03a 	or	r4,r4,r2
 1008370:	2011883a 	mov	r8,r4
 1008374:	1813883a 	mov	r9,r3
 1008378:	d9000415 	stw	r4,16(sp)
 100837c:	d8c00515 	stw	r3,20(sp)
 1008380:	003ed406 	br	1007ed4 <__umoddi3+0x11c>
 1008384:	01400604 	movi	r5,24
 1008388:	2805883a 	mov	r2,r5
 100838c:	003ea606 	br	1007e28 <__umoddi3+0x70>
 1008390:	01400204 	movi	r5,8
 1008394:	2805883a 	mov	r2,r5
 1008398:	003ea306 	br	1007e28 <__umoddi3+0x70>
 100839c:	01400204 	movi	r5,8
 10083a0:	2805883a 	mov	r2,r5
 10083a4:	003edf06 	br	1007f24 <__umoddi3+0x16c>
 10083a8:	01400204 	movi	r5,8
 10083ac:	2805883a 	mov	r2,r5
 10083b0:	003ef206 	br	1007f7c <__umoddi3+0x1c4>
 10083b4:	01400604 	movi	r5,24
 10083b8:	2805883a 	mov	r2,r5
 10083bc:	003eef06 	br	1007f7c <__umoddi3+0x1c4>
 10083c0:	01400604 	movi	r5,24
 10083c4:	2805883a 	mov	r2,r5
 10083c8:	003ed606 	br	1007f24 <__umoddi3+0x16c>
 10083cc:	153fa92e 	bgeu	r2,r20,1008274 <__umoddi3+0x4bc>
 10083d0:	843fffc4 	addi	r16,r16,-1
 10083d4:	1585883a 	add	r2,r2,r22
 10083d8:	003fa606 	br	1008274 <__umoddi3+0x4bc>
 10083dc:	157f912e 	bgeu	r2,r21,1008224 <__umoddi3+0x46c>
 10083e0:	e73fffc4 	addi	fp,fp,-1
 10083e4:	1585883a 	add	r2,r2,r22
 10083e8:	003f8e06 	br	1008224 <__umoddi3+0x46c>
 10083ec:	157f542e 	bgeu	r2,r21,1008140 <__umoddi3+0x388>
 10083f0:	14c5883a 	add	r2,r2,r19
 10083f4:	003f5206 	br	1008140 <__umoddi3+0x388>
 10083f8:	14c5883a 	add	r2,r2,r19
 10083fc:	003efc06 	br	1007ff0 <__umoddi3+0x238>
 1008400:	14c5883a 	add	r2,r2,r19
 1008404:	003ea606 	br	1007ea0 <__umoddi3+0xe8>
 1008408:	d8800117 	ldw	r2,4(sp)
 100840c:	113fc836 	bltu	r2,r4,1008330 <__umoddi3+0x578>
 1008410:	000d883a 	mov	r6,zero
 1008414:	003fcd06 	br	100834c <__umoddi3+0x594>

01008418 <_fpadd_parts>:
 1008418:	defff804 	addi	sp,sp,-32
 100841c:	dcc00315 	stw	r19,12(sp)
 1008420:	2027883a 	mov	r19,r4
 1008424:	21000017 	ldw	r4,0(r4)
 1008428:	00c00044 	movi	r3,1
 100842c:	dd400515 	stw	r21,20(sp)
 1008430:	dd000415 	stw	r20,16(sp)
 1008434:	ddc00715 	stw	r23,28(sp)
 1008438:	dd800615 	stw	r22,24(sp)
 100843c:	dc800215 	stw	r18,8(sp)
 1008440:	dc400115 	stw	r17,4(sp)
 1008444:	dc000015 	stw	r16,0(sp)
 1008448:	282b883a 	mov	r21,r5
 100844c:	3029883a 	mov	r20,r6
 1008450:	1900632e 	bgeu	r3,r4,10085e0 <_fpadd_parts+0x1c8>
 1008454:	28800017 	ldw	r2,0(r5)
 1008458:	1880812e 	bgeu	r3,r2,1008660 <_fpadd_parts+0x248>
 100845c:	00c00104 	movi	r3,4
 1008460:	20c0dc26 	beq	r4,r3,10087d4 <_fpadd_parts+0x3bc>
 1008464:	10c07e26 	beq	r2,r3,1008660 <_fpadd_parts+0x248>
 1008468:	00c00084 	movi	r3,2
 100846c:	10c06726 	beq	r2,r3,100860c <_fpadd_parts+0x1f4>
 1008470:	20c07b26 	beq	r4,r3,1008660 <_fpadd_parts+0x248>
 1008474:	9dc00217 	ldw	r23,8(r19)
 1008478:	28c00217 	ldw	r3,8(r5)
 100847c:	9c400317 	ldw	r17,12(r19)
 1008480:	2bc00317 	ldw	r15,12(r5)
 1008484:	b8cdc83a 	sub	r6,r23,r3
 1008488:	9c800417 	ldw	r18,16(r19)
 100848c:	2c000417 	ldw	r16,16(r5)
 1008490:	3009883a 	mov	r4,r6
 1008494:	30009716 	blt	r6,zero,10086f4 <_fpadd_parts+0x2dc>
 1008498:	00800fc4 	movi	r2,63
 100849c:	11806b16 	blt	r2,r6,100864c <_fpadd_parts+0x234>
 10084a0:	0100a40e 	bge	zero,r4,1008734 <_fpadd_parts+0x31c>
 10084a4:	35bff804 	addi	r22,r6,-32
 10084a8:	b000bc16 	blt	r22,zero,100879c <_fpadd_parts+0x384>
 10084ac:	8596d83a 	srl	r11,r16,r22
 10084b0:	0019883a 	mov	r12,zero
 10084b4:	0013883a 	mov	r9,zero
 10084b8:	01000044 	movi	r4,1
 10084bc:	0015883a 	mov	r10,zero
 10084c0:	b000be16 	blt	r22,zero,10087bc <_fpadd_parts+0x3a4>
 10084c4:	2590983a 	sll	r8,r4,r22
 10084c8:	000f883a 	mov	r7,zero
 10084cc:	00bfffc4 	movi	r2,-1
 10084d0:	3889883a 	add	r4,r7,r2
 10084d4:	408b883a 	add	r5,r8,r2
 10084d8:	21cd803a 	cmpltu	r6,r4,r7
 10084dc:	314b883a 	add	r5,r6,r5
 10084e0:	7904703a 	and	r2,r15,r4
 10084e4:	8146703a 	and	r3,r16,r5
 10084e8:	10c4b03a 	or	r2,r2,r3
 10084ec:	10000226 	beq	r2,zero,10084f8 <_fpadd_parts+0xe0>
 10084f0:	02400044 	movi	r9,1
 10084f4:	0015883a 	mov	r10,zero
 10084f8:	5a5eb03a 	or	r15,r11,r9
 10084fc:	62a0b03a 	or	r16,r12,r10
 1008500:	99400117 	ldw	r5,4(r19)
 1008504:	a8800117 	ldw	r2,4(r21)
 1008508:	28806e26 	beq	r5,r2,10086c4 <_fpadd_parts+0x2ac>
 100850c:	28006626 	beq	r5,zero,10086a8 <_fpadd_parts+0x290>
 1008510:	7c45c83a 	sub	r2,r15,r17
 1008514:	7889803a 	cmpltu	r4,r15,r2
 1008518:	8487c83a 	sub	r3,r16,r18
 100851c:	1909c83a 	sub	r4,r3,r4
 1008520:	100d883a 	mov	r6,r2
 1008524:	200f883a 	mov	r7,r4
 1008528:	38007716 	blt	r7,zero,1008708 <_fpadd_parts+0x2f0>
 100852c:	a5c00215 	stw	r23,8(r20)
 1008530:	a1c00415 	stw	r7,16(r20)
 1008534:	a0000115 	stw	zero,4(r20)
 1008538:	a1800315 	stw	r6,12(r20)
 100853c:	a2000317 	ldw	r8,12(r20)
 1008540:	a2400417 	ldw	r9,16(r20)
 1008544:	00bfffc4 	movi	r2,-1
 1008548:	408b883a 	add	r5,r8,r2
 100854c:	2a09803a 	cmpltu	r4,r5,r8
 1008550:	488d883a 	add	r6,r9,r2
 1008554:	01c40034 	movhi	r7,4096
 1008558:	39ffffc4 	addi	r7,r7,-1
 100855c:	218d883a 	add	r6,r4,r6
 1008560:	39801736 	bltu	r7,r6,10085c0 <_fpadd_parts+0x1a8>
 1008564:	31c06526 	beq	r6,r7,10086fc <_fpadd_parts+0x2e4>
 1008568:	a3000217 	ldw	r12,8(r20)
 100856c:	4209883a 	add	r4,r8,r8
 1008570:	00bfffc4 	movi	r2,-1
 1008574:	220f803a 	cmpltu	r7,r4,r8
 1008578:	4a4b883a 	add	r5,r9,r9
 100857c:	394f883a 	add	r7,r7,r5
 1008580:	2095883a 	add	r10,r4,r2
 1008584:	3897883a 	add	r11,r7,r2
 1008588:	510d803a 	cmpltu	r6,r10,r4
 100858c:	6099883a 	add	r12,r12,r2
 1008590:	32d7883a 	add	r11,r6,r11
 1008594:	00840034 	movhi	r2,4096
 1008598:	10bfffc4 	addi	r2,r2,-1
 100859c:	2011883a 	mov	r8,r4
 10085a0:	3813883a 	mov	r9,r7
 10085a4:	a1000315 	stw	r4,12(r20)
 10085a8:	a1c00415 	stw	r7,16(r20)
 10085ac:	a3000215 	stw	r12,8(r20)
 10085b0:	12c00336 	bltu	r2,r11,10085c0 <_fpadd_parts+0x1a8>
 10085b4:	58bfed1e 	bne	r11,r2,100856c <_fpadd_parts+0x154>
 10085b8:	00bfff84 	movi	r2,-2
 10085bc:	12bfeb2e 	bgeu	r2,r10,100856c <_fpadd_parts+0x154>
 10085c0:	a2800417 	ldw	r10,16(r20)
 10085c4:	008000c4 	movi	r2,3
 10085c8:	00c80034 	movhi	r3,8192
 10085cc:	18ffffc4 	addi	r3,r3,-1
 10085d0:	a2400317 	ldw	r9,12(r20)
 10085d4:	a0800015 	stw	r2,0(r20)
 10085d8:	1a802336 	bltu	r3,r10,1008668 <_fpadd_parts+0x250>
 10085dc:	a027883a 	mov	r19,r20
 10085e0:	9805883a 	mov	r2,r19
 10085e4:	ddc00717 	ldw	r23,28(sp)
 10085e8:	dd800617 	ldw	r22,24(sp)
 10085ec:	dd400517 	ldw	r21,20(sp)
 10085f0:	dd000417 	ldw	r20,16(sp)
 10085f4:	dcc00317 	ldw	r19,12(sp)
 10085f8:	dc800217 	ldw	r18,8(sp)
 10085fc:	dc400117 	ldw	r17,4(sp)
 1008600:	dc000017 	ldw	r16,0(sp)
 1008604:	dec00804 	addi	sp,sp,32
 1008608:	f800283a 	ret
 100860c:	20fff41e 	bne	r4,r3,10085e0 <_fpadd_parts+0x1c8>
 1008610:	31000015 	stw	r4,0(r6)
 1008614:	98800117 	ldw	r2,4(r19)
 1008618:	30800115 	stw	r2,4(r6)
 100861c:	98c00217 	ldw	r3,8(r19)
 1008620:	30c00215 	stw	r3,8(r6)
 1008624:	98800317 	ldw	r2,12(r19)
 1008628:	30800315 	stw	r2,12(r6)
 100862c:	98c00417 	ldw	r3,16(r19)
 1008630:	30c00415 	stw	r3,16(r6)
 1008634:	98800117 	ldw	r2,4(r19)
 1008638:	28c00117 	ldw	r3,4(r5)
 100863c:	3027883a 	mov	r19,r6
 1008640:	10c4703a 	and	r2,r2,r3
 1008644:	30800115 	stw	r2,4(r6)
 1008648:	003fe506 	br	10085e0 <_fpadd_parts+0x1c8>
 100864c:	1dc02616 	blt	r3,r23,10086e8 <_fpadd_parts+0x2d0>
 1008650:	0023883a 	mov	r17,zero
 1008654:	182f883a 	mov	r23,r3
 1008658:	0025883a 	mov	r18,zero
 100865c:	003fa806 	br	1008500 <_fpadd_parts+0xe8>
 1008660:	a827883a 	mov	r19,r21
 1008664:	003fde06 	br	10085e0 <_fpadd_parts+0x1c8>
 1008668:	01800044 	movi	r6,1
 100866c:	500497fa 	slli	r2,r10,31
 1008670:	4808d07a 	srli	r4,r9,1
 1008674:	518ad83a 	srl	r5,r10,r6
 1008678:	a2000217 	ldw	r8,8(r20)
 100867c:	1108b03a 	or	r4,r2,r4
 1008680:	0007883a 	mov	r3,zero
 1008684:	4984703a 	and	r2,r9,r6
 1008688:	208cb03a 	or	r6,r4,r2
 100868c:	28ceb03a 	or	r7,r5,r3
 1008690:	42000044 	addi	r8,r8,1
 1008694:	a027883a 	mov	r19,r20
 1008698:	a1c00415 	stw	r7,16(r20)
 100869c:	a2000215 	stw	r8,8(r20)
 10086a0:	a1800315 	stw	r6,12(r20)
 10086a4:	003fce06 	br	10085e0 <_fpadd_parts+0x1c8>
 10086a8:	8bc5c83a 	sub	r2,r17,r15
 10086ac:	8889803a 	cmpltu	r4,r17,r2
 10086b0:	9407c83a 	sub	r3,r18,r16
 10086b4:	1909c83a 	sub	r4,r3,r4
 10086b8:	100d883a 	mov	r6,r2
 10086bc:	200f883a 	mov	r7,r4
 10086c0:	003f9906 	br	1008528 <_fpadd_parts+0x110>
 10086c4:	7c45883a 	add	r2,r15,r17
 10086c8:	13c9803a 	cmpltu	r4,r2,r15
 10086cc:	8487883a 	add	r3,r16,r18
 10086d0:	20c9883a 	add	r4,r4,r3
 10086d4:	a1400115 	stw	r5,4(r20)
 10086d8:	a5c00215 	stw	r23,8(r20)
 10086dc:	a0800315 	stw	r2,12(r20)
 10086e0:	a1000415 	stw	r4,16(r20)
 10086e4:	003fb606 	br	10085c0 <_fpadd_parts+0x1a8>
 10086e8:	001f883a 	mov	r15,zero
 10086ec:	0021883a 	mov	r16,zero
 10086f0:	003f8306 	br	1008500 <_fpadd_parts+0xe8>
 10086f4:	018dc83a 	sub	r6,zero,r6
 10086f8:	003f6706 	br	1008498 <_fpadd_parts+0x80>
 10086fc:	00bfff84 	movi	r2,-2
 1008700:	117faf36 	bltu	r2,r5,10085c0 <_fpadd_parts+0x1a8>
 1008704:	003f9806 	br	1008568 <_fpadd_parts+0x150>
 1008708:	0005883a 	mov	r2,zero
 100870c:	1189c83a 	sub	r4,r2,r6
 1008710:	1105803a 	cmpltu	r2,r2,r4
 1008714:	01cbc83a 	sub	r5,zero,r7
 1008718:	2885c83a 	sub	r2,r5,r2
 100871c:	01800044 	movi	r6,1
 1008720:	a1800115 	stw	r6,4(r20)
 1008724:	a5c00215 	stw	r23,8(r20)
 1008728:	a1000315 	stw	r4,12(r20)
 100872c:	a0800415 	stw	r2,16(r20)
 1008730:	003f8206 	br	100853c <_fpadd_parts+0x124>
 1008734:	203f7226 	beq	r4,zero,1008500 <_fpadd_parts+0xe8>
 1008738:	35bff804 	addi	r22,r6,-32
 100873c:	b9af883a 	add	r23,r23,r6
 1008740:	b0003116 	blt	r22,zero,1008808 <_fpadd_parts+0x3f0>
 1008744:	959ad83a 	srl	r13,r18,r22
 1008748:	001d883a 	mov	r14,zero
 100874c:	000f883a 	mov	r7,zero
 1008750:	01000044 	movi	r4,1
 1008754:	0011883a 	mov	r8,zero
 1008758:	b0002516 	blt	r22,zero,10087f0 <_fpadd_parts+0x3d8>
 100875c:	2594983a 	sll	r10,r4,r22
 1008760:	0013883a 	mov	r9,zero
 1008764:	00bfffc4 	movi	r2,-1
 1008768:	4889883a 	add	r4,r9,r2
 100876c:	508b883a 	add	r5,r10,r2
 1008770:	224d803a 	cmpltu	r6,r4,r9
 1008774:	314b883a 	add	r5,r6,r5
 1008778:	8904703a 	and	r2,r17,r4
 100877c:	9146703a 	and	r3,r18,r5
 1008780:	10c4b03a 	or	r2,r2,r3
 1008784:	10000226 	beq	r2,zero,1008790 <_fpadd_parts+0x378>
 1008788:	01c00044 	movi	r7,1
 100878c:	0011883a 	mov	r8,zero
 1008790:	69e2b03a 	or	r17,r13,r7
 1008794:	7224b03a 	or	r18,r14,r8
 1008798:	003f5906 	br	1008500 <_fpadd_parts+0xe8>
 100879c:	8407883a 	add	r3,r16,r16
 10087a0:	008007c4 	movi	r2,31
 10087a4:	1185c83a 	sub	r2,r2,r6
 10087a8:	1886983a 	sll	r3,r3,r2
 10087ac:	7996d83a 	srl	r11,r15,r6
 10087b0:	8198d83a 	srl	r12,r16,r6
 10087b4:	1ad6b03a 	or	r11,r3,r11
 10087b8:	003f3e06 	br	10084b4 <_fpadd_parts+0x9c>
 10087bc:	2006d07a 	srli	r3,r4,1
 10087c0:	008007c4 	movi	r2,31
 10087c4:	1185c83a 	sub	r2,r2,r6
 10087c8:	1890d83a 	srl	r8,r3,r2
 10087cc:	218e983a 	sll	r7,r4,r6
 10087d0:	003f3e06 	br	10084cc <_fpadd_parts+0xb4>
 10087d4:	113f821e 	bne	r2,r4,10085e0 <_fpadd_parts+0x1c8>
 10087d8:	28c00117 	ldw	r3,4(r5)
 10087dc:	98800117 	ldw	r2,4(r19)
 10087e0:	10ff7f26 	beq	r2,r3,10085e0 <_fpadd_parts+0x1c8>
 10087e4:	04c04074 	movhi	r19,257
 10087e8:	9ccafb04 	addi	r19,r19,11244
 10087ec:	003f7c06 	br	10085e0 <_fpadd_parts+0x1c8>
 10087f0:	2006d07a 	srli	r3,r4,1
 10087f4:	008007c4 	movi	r2,31
 10087f8:	1185c83a 	sub	r2,r2,r6
 10087fc:	1894d83a 	srl	r10,r3,r2
 1008800:	2192983a 	sll	r9,r4,r6
 1008804:	003fd706 	br	1008764 <_fpadd_parts+0x34c>
 1008808:	9487883a 	add	r3,r18,r18
 100880c:	008007c4 	movi	r2,31
 1008810:	1185c83a 	sub	r2,r2,r6
 1008814:	1886983a 	sll	r3,r3,r2
 1008818:	899ad83a 	srl	r13,r17,r6
 100881c:	919cd83a 	srl	r14,r18,r6
 1008820:	1b5ab03a 	or	r13,r3,r13
 1008824:	003fc906 	br	100874c <_fpadd_parts+0x334>

01008828 <__subdf3>:
 1008828:	deffea04 	addi	sp,sp,-88
 100882c:	dcc01415 	stw	r19,80(sp)
 1008830:	dcc00404 	addi	r19,sp,16
 1008834:	2011883a 	mov	r8,r4
 1008838:	2813883a 	mov	r9,r5
 100883c:	dc401315 	stw	r17,76(sp)
 1008840:	d809883a 	mov	r4,sp
 1008844:	980b883a 	mov	r5,r19
 1008848:	dc400904 	addi	r17,sp,36
 100884c:	dfc01515 	stw	ra,84(sp)
 1008850:	da400115 	stw	r9,4(sp)
 1008854:	d9c00315 	stw	r7,12(sp)
 1008858:	da000015 	stw	r8,0(sp)
 100885c:	d9800215 	stw	r6,8(sp)
 1008860:	1009b800 	call	1009b80 <__unpack_d>
 1008864:	d9000204 	addi	r4,sp,8
 1008868:	880b883a 	mov	r5,r17
 100886c:	1009b800 	call	1009b80 <__unpack_d>
 1008870:	d8800a17 	ldw	r2,40(sp)
 1008874:	880b883a 	mov	r5,r17
 1008878:	9809883a 	mov	r4,r19
 100887c:	d9800e04 	addi	r6,sp,56
 1008880:	1080005c 	xori	r2,r2,1
 1008884:	d8800a15 	stw	r2,40(sp)
 1008888:	10084180 	call	1008418 <_fpadd_parts>
 100888c:	1009883a 	mov	r4,r2
 1008890:	100986c0 	call	100986c <__pack_d>
 1008894:	dfc01517 	ldw	ra,84(sp)
 1008898:	dcc01417 	ldw	r19,80(sp)
 100889c:	dc401317 	ldw	r17,76(sp)
 10088a0:	dec01604 	addi	sp,sp,88
 10088a4:	f800283a 	ret

010088a8 <__adddf3>:
 10088a8:	deffea04 	addi	sp,sp,-88
 10088ac:	dcc01415 	stw	r19,80(sp)
 10088b0:	dcc00404 	addi	r19,sp,16
 10088b4:	2011883a 	mov	r8,r4
 10088b8:	2813883a 	mov	r9,r5
 10088bc:	dc401315 	stw	r17,76(sp)
 10088c0:	d809883a 	mov	r4,sp
 10088c4:	980b883a 	mov	r5,r19
 10088c8:	dc400904 	addi	r17,sp,36
 10088cc:	dfc01515 	stw	ra,84(sp)
 10088d0:	da400115 	stw	r9,4(sp)
 10088d4:	d9c00315 	stw	r7,12(sp)
 10088d8:	da000015 	stw	r8,0(sp)
 10088dc:	d9800215 	stw	r6,8(sp)
 10088e0:	1009b800 	call	1009b80 <__unpack_d>
 10088e4:	d9000204 	addi	r4,sp,8
 10088e8:	880b883a 	mov	r5,r17
 10088ec:	1009b800 	call	1009b80 <__unpack_d>
 10088f0:	d9800e04 	addi	r6,sp,56
 10088f4:	9809883a 	mov	r4,r19
 10088f8:	880b883a 	mov	r5,r17
 10088fc:	10084180 	call	1008418 <_fpadd_parts>
 1008900:	1009883a 	mov	r4,r2
 1008904:	100986c0 	call	100986c <__pack_d>
 1008908:	dfc01517 	ldw	ra,84(sp)
 100890c:	dcc01417 	ldw	r19,80(sp)
 1008910:	dc401317 	ldw	r17,76(sp)
 1008914:	dec01604 	addi	sp,sp,88
 1008918:	f800283a 	ret

0100891c <__muldf3>:
 100891c:	deffe004 	addi	sp,sp,-128
 1008920:	dc401815 	stw	r17,96(sp)
 1008924:	dc400404 	addi	r17,sp,16
 1008928:	2011883a 	mov	r8,r4
 100892c:	2813883a 	mov	r9,r5
 1008930:	dc001715 	stw	r16,92(sp)
 1008934:	d809883a 	mov	r4,sp
 1008938:	880b883a 	mov	r5,r17
 100893c:	dc000904 	addi	r16,sp,36
 1008940:	dfc01f15 	stw	ra,124(sp)
 1008944:	da400115 	stw	r9,4(sp)
 1008948:	d9c00315 	stw	r7,12(sp)
 100894c:	da000015 	stw	r8,0(sp)
 1008950:	d9800215 	stw	r6,8(sp)
 1008954:	ddc01e15 	stw	r23,120(sp)
 1008958:	dd801d15 	stw	r22,116(sp)
 100895c:	dd401c15 	stw	r21,112(sp)
 1008960:	dd001b15 	stw	r20,108(sp)
 1008964:	dcc01a15 	stw	r19,104(sp)
 1008968:	dc801915 	stw	r18,100(sp)
 100896c:	1009b800 	call	1009b80 <__unpack_d>
 1008970:	d9000204 	addi	r4,sp,8
 1008974:	800b883a 	mov	r5,r16
 1008978:	1009b800 	call	1009b80 <__unpack_d>
 100897c:	d9000417 	ldw	r4,16(sp)
 1008980:	00800044 	movi	r2,1
 1008984:	1100102e 	bgeu	r2,r4,10089c8 <__muldf3+0xac>
 1008988:	d8c00917 	ldw	r3,36(sp)
 100898c:	10c0062e 	bgeu	r2,r3,10089a8 <__muldf3+0x8c>
 1008990:	00800104 	movi	r2,4
 1008994:	20800a26 	beq	r4,r2,10089c0 <__muldf3+0xa4>
 1008998:	1880cc26 	beq	r3,r2,1008ccc <__muldf3+0x3b0>
 100899c:	00800084 	movi	r2,2
 10089a0:	20800926 	beq	r4,r2,10089c8 <__muldf3+0xac>
 10089a4:	1880191e 	bne	r3,r2,1008a0c <__muldf3+0xf0>
 10089a8:	d8c00a17 	ldw	r3,40(sp)
 10089ac:	d8800517 	ldw	r2,20(sp)
 10089b0:	8009883a 	mov	r4,r16
 10089b4:	10c4c03a 	cmpne	r2,r2,r3
 10089b8:	d8800a15 	stw	r2,40(sp)
 10089bc:	00000706 	br	10089dc <__muldf3+0xc0>
 10089c0:	00800084 	movi	r2,2
 10089c4:	1880c326 	beq	r3,r2,1008cd4 <__muldf3+0x3b8>
 10089c8:	d8800517 	ldw	r2,20(sp)
 10089cc:	d8c00a17 	ldw	r3,40(sp)
 10089d0:	8809883a 	mov	r4,r17
 10089d4:	10c4c03a 	cmpne	r2,r2,r3
 10089d8:	d8800515 	stw	r2,20(sp)
 10089dc:	100986c0 	call	100986c <__pack_d>
 10089e0:	dfc01f17 	ldw	ra,124(sp)
 10089e4:	ddc01e17 	ldw	r23,120(sp)
 10089e8:	dd801d17 	ldw	r22,116(sp)
 10089ec:	dd401c17 	ldw	r21,112(sp)
 10089f0:	dd001b17 	ldw	r20,108(sp)
 10089f4:	dcc01a17 	ldw	r19,104(sp)
 10089f8:	dc801917 	ldw	r18,100(sp)
 10089fc:	dc401817 	ldw	r17,96(sp)
 1008a00:	dc001717 	ldw	r16,92(sp)
 1008a04:	dec02004 	addi	sp,sp,128
 1008a08:	f800283a 	ret
 1008a0c:	dd800717 	ldw	r22,28(sp)
 1008a10:	dc800c17 	ldw	r18,48(sp)
 1008a14:	002b883a 	mov	r21,zero
 1008a18:	0023883a 	mov	r17,zero
 1008a1c:	a80b883a 	mov	r5,r21
 1008a20:	b00d883a 	mov	r6,r22
 1008a24:	880f883a 	mov	r7,r17
 1008a28:	ddc00817 	ldw	r23,32(sp)
 1008a2c:	dcc00d17 	ldw	r19,52(sp)
 1008a30:	9009883a 	mov	r4,r18
 1008a34:	10096c80 	call	10096c8 <__muldi3>
 1008a38:	001b883a 	mov	r13,zero
 1008a3c:	680f883a 	mov	r7,r13
 1008a40:	b009883a 	mov	r4,r22
 1008a44:	000b883a 	mov	r5,zero
 1008a48:	980d883a 	mov	r6,r19
 1008a4c:	b82d883a 	mov	r22,r23
 1008a50:	002f883a 	mov	r23,zero
 1008a54:	db401615 	stw	r13,88(sp)
 1008a58:	d8801315 	stw	r2,76(sp)
 1008a5c:	d8c01415 	stw	r3,80(sp)
 1008a60:	dcc01515 	stw	r19,84(sp)
 1008a64:	10096c80 	call	10096c8 <__muldi3>
 1008a68:	b00d883a 	mov	r6,r22
 1008a6c:	000b883a 	mov	r5,zero
 1008a70:	9009883a 	mov	r4,r18
 1008a74:	b80f883a 	mov	r7,r23
 1008a78:	1021883a 	mov	r16,r2
 1008a7c:	1823883a 	mov	r17,r3
 1008a80:	10096c80 	call	10096c8 <__muldi3>
 1008a84:	8085883a 	add	r2,r16,r2
 1008a88:	140d803a 	cmpltu	r6,r2,r16
 1008a8c:	88c7883a 	add	r3,r17,r3
 1008a90:	30cd883a 	add	r6,r6,r3
 1008a94:	1029883a 	mov	r20,r2
 1008a98:	302b883a 	mov	r21,r6
 1008a9c:	da801317 	ldw	r10,76(sp)
 1008aa0:	dac01417 	ldw	r11,80(sp)
 1008aa4:	db001517 	ldw	r12,84(sp)
 1008aa8:	db401617 	ldw	r13,88(sp)
 1008aac:	3440612e 	bgeu	r6,r17,1008c34 <__muldf3+0x318>
 1008ab0:	0009883a 	mov	r4,zero
 1008ab4:	5105883a 	add	r2,r10,r4
 1008ab8:	128d803a 	cmpltu	r6,r2,r10
 1008abc:	5d07883a 	add	r3,r11,r20
 1008ac0:	30cd883a 	add	r6,r6,r3
 1008ac4:	0021883a 	mov	r16,zero
 1008ac8:	04400044 	movi	r17,1
 1008acc:	1025883a 	mov	r18,r2
 1008ad0:	3027883a 	mov	r19,r6
 1008ad4:	32c06236 	bltu	r6,r11,1008c60 <__muldf3+0x344>
 1008ad8:	59807a26 	beq	r11,r6,1008cc4 <__muldf3+0x3a8>
 1008adc:	680b883a 	mov	r5,r13
 1008ae0:	b80f883a 	mov	r7,r23
 1008ae4:	6009883a 	mov	r4,r12
 1008ae8:	b00d883a 	mov	r6,r22
 1008aec:	10096c80 	call	10096c8 <__muldi3>
 1008af0:	1009883a 	mov	r4,r2
 1008af4:	000f883a 	mov	r7,zero
 1008af8:	1545883a 	add	r2,r2,r21
 1008afc:	1111803a 	cmpltu	r8,r2,r4
 1008b00:	19c7883a 	add	r3,r3,r7
 1008b04:	40c7883a 	add	r3,r8,r3
 1008b08:	88cb883a 	add	r5,r17,r3
 1008b0c:	d8c00617 	ldw	r3,24(sp)
 1008b10:	8089883a 	add	r4,r16,r2
 1008b14:	d8800b17 	ldw	r2,44(sp)
 1008b18:	18c00104 	addi	r3,r3,4
 1008b1c:	240d803a 	cmpltu	r6,r4,r16
 1008b20:	10c7883a 	add	r3,r2,r3
 1008b24:	2013883a 	mov	r9,r4
 1008b28:	d8800a17 	ldw	r2,40(sp)
 1008b2c:	d9000517 	ldw	r4,20(sp)
 1008b30:	314d883a 	add	r6,r6,r5
 1008b34:	3015883a 	mov	r10,r6
 1008b38:	2088c03a 	cmpne	r4,r4,r2
 1008b3c:	00880034 	movhi	r2,8192
 1008b40:	10bfffc4 	addi	r2,r2,-1
 1008b44:	d9000f15 	stw	r4,60(sp)
 1008b48:	d8c01015 	stw	r3,64(sp)
 1008b4c:	1180162e 	bgeu	r2,r6,1008ba8 <__muldf3+0x28c>
 1008b50:	1811883a 	mov	r8,r3
 1008b54:	101f883a 	mov	r15,r2
 1008b58:	980497fa 	slli	r2,r19,31
 1008b5c:	9016d07a 	srli	r11,r18,1
 1008b60:	500697fa 	slli	r3,r10,31
 1008b64:	480cd07a 	srli	r6,r9,1
 1008b68:	500ed07a 	srli	r7,r10,1
 1008b6c:	12d6b03a 	or	r11,r2,r11
 1008b70:	00800044 	movi	r2,1
 1008b74:	198cb03a 	or	r6,r3,r6
 1008b78:	4888703a 	and	r4,r9,r2
 1008b7c:	9818d07a 	srli	r12,r19,1
 1008b80:	001b883a 	mov	r13,zero
 1008b84:	03a00034 	movhi	r14,32768
 1008b88:	3013883a 	mov	r9,r6
 1008b8c:	3815883a 	mov	r10,r7
 1008b90:	4091883a 	add	r8,r8,r2
 1008b94:	20000226 	beq	r4,zero,1008ba0 <__muldf3+0x284>
 1008b98:	5b64b03a 	or	r18,r11,r13
 1008b9c:	63a6b03a 	or	r19,r12,r14
 1008ba0:	7abfed36 	bltu	r15,r10,1008b58 <__muldf3+0x23c>
 1008ba4:	da001015 	stw	r8,64(sp)
 1008ba8:	00840034 	movhi	r2,4096
 1008bac:	10bfffc4 	addi	r2,r2,-1
 1008bb0:	12801436 	bltu	r2,r10,1008c04 <__muldf3+0x2e8>
 1008bb4:	da001017 	ldw	r8,64(sp)
 1008bb8:	101f883a 	mov	r15,r2
 1008bbc:	4a45883a 	add	r2,r9,r9
 1008bc0:	124d803a 	cmpltu	r6,r2,r9
 1008bc4:	5287883a 	add	r3,r10,r10
 1008bc8:	9497883a 	add	r11,r18,r18
 1008bcc:	5c8f803a 	cmpltu	r7,r11,r18
 1008bd0:	9cd9883a 	add	r12,r19,r19
 1008bd4:	01000044 	movi	r4,1
 1008bd8:	30cd883a 	add	r6,r6,r3
 1008bdc:	3b0f883a 	add	r7,r7,r12
 1008be0:	423fffc4 	addi	r8,r8,-1
 1008be4:	1013883a 	mov	r9,r2
 1008be8:	3015883a 	mov	r10,r6
 1008bec:	111ab03a 	or	r13,r2,r4
 1008bf0:	98003016 	blt	r19,zero,1008cb4 <__muldf3+0x398>
 1008bf4:	5825883a 	mov	r18,r11
 1008bf8:	3827883a 	mov	r19,r7
 1008bfc:	7abfef2e 	bgeu	r15,r10,1008bbc <__muldf3+0x2a0>
 1008c00:	da001015 	stw	r8,64(sp)
 1008c04:	00803fc4 	movi	r2,255
 1008c08:	488e703a 	and	r7,r9,r2
 1008c0c:	00802004 	movi	r2,128
 1008c10:	0007883a 	mov	r3,zero
 1008c14:	0011883a 	mov	r8,zero
 1008c18:	38801826 	beq	r7,r2,1008c7c <__muldf3+0x360>
 1008c1c:	008000c4 	movi	r2,3
 1008c20:	d9000e04 	addi	r4,sp,56
 1008c24:	da801215 	stw	r10,72(sp)
 1008c28:	d8800e15 	stw	r2,56(sp)
 1008c2c:	da401115 	stw	r9,68(sp)
 1008c30:	003f6a06 	br	10089dc <__muldf3+0xc0>
 1008c34:	89802126 	beq	r17,r6,1008cbc <__muldf3+0x3a0>
 1008c38:	0009883a 	mov	r4,zero
 1008c3c:	5105883a 	add	r2,r10,r4
 1008c40:	128d803a 	cmpltu	r6,r2,r10
 1008c44:	5d07883a 	add	r3,r11,r20
 1008c48:	30cd883a 	add	r6,r6,r3
 1008c4c:	0021883a 	mov	r16,zero
 1008c50:	0023883a 	mov	r17,zero
 1008c54:	1025883a 	mov	r18,r2
 1008c58:	3027883a 	mov	r19,r6
 1008c5c:	32ff9e2e 	bgeu	r6,r11,1008ad8 <__muldf3+0x1bc>
 1008c60:	00800044 	movi	r2,1
 1008c64:	8089883a 	add	r4,r16,r2
 1008c68:	240d803a 	cmpltu	r6,r4,r16
 1008c6c:	344d883a 	add	r6,r6,r17
 1008c70:	2021883a 	mov	r16,r4
 1008c74:	3023883a 	mov	r17,r6
 1008c78:	003f9806 	br	1008adc <__muldf3+0x1c0>
 1008c7c:	403fe71e 	bne	r8,zero,1008c1c <__muldf3+0x300>
 1008c80:	01004004 	movi	r4,256
 1008c84:	4904703a 	and	r2,r9,r4
 1008c88:	10c4b03a 	or	r2,r2,r3
 1008c8c:	103fe31e 	bne	r2,zero,1008c1c <__muldf3+0x300>
 1008c90:	94c4b03a 	or	r2,r18,r19
 1008c94:	103fe126 	beq	r2,zero,1008c1c <__muldf3+0x300>
 1008c98:	49c5883a 	add	r2,r9,r7
 1008c9c:	1251803a 	cmpltu	r8,r2,r9
 1008ca0:	4291883a 	add	r8,r8,r10
 1008ca4:	013fc004 	movi	r4,-256
 1008ca8:	1112703a 	and	r9,r2,r4
 1008cac:	4015883a 	mov	r10,r8
 1008cb0:	003fda06 	br	1008c1c <__muldf3+0x300>
 1008cb4:	6813883a 	mov	r9,r13
 1008cb8:	003fce06 	br	1008bf4 <__muldf3+0x2d8>
 1008cbc:	143f7c36 	bltu	r2,r16,1008ab0 <__muldf3+0x194>
 1008cc0:	003fdd06 	br	1008c38 <__muldf3+0x31c>
 1008cc4:	12bf852e 	bgeu	r2,r10,1008adc <__muldf3+0x1c0>
 1008cc8:	003fe506 	br	1008c60 <__muldf3+0x344>
 1008ccc:	00800084 	movi	r2,2
 1008cd0:	20bf351e 	bne	r4,r2,10089a8 <__muldf3+0x8c>
 1008cd4:	01004074 	movhi	r4,257
 1008cd8:	210afb04 	addi	r4,r4,11244
 1008cdc:	003f3f06 	br	10089dc <__muldf3+0xc0>

01008ce0 <__divdf3>:
 1008ce0:	deffed04 	addi	sp,sp,-76
 1008ce4:	dcc01115 	stw	r19,68(sp)
 1008ce8:	dcc00404 	addi	r19,sp,16
 1008cec:	2011883a 	mov	r8,r4
 1008cf0:	2813883a 	mov	r9,r5
 1008cf4:	dc000e15 	stw	r16,56(sp)
 1008cf8:	d809883a 	mov	r4,sp
 1008cfc:	980b883a 	mov	r5,r19
 1008d00:	dc000904 	addi	r16,sp,36
 1008d04:	dfc01215 	stw	ra,72(sp)
 1008d08:	da400115 	stw	r9,4(sp)
 1008d0c:	d9c00315 	stw	r7,12(sp)
 1008d10:	da000015 	stw	r8,0(sp)
 1008d14:	d9800215 	stw	r6,8(sp)
 1008d18:	dc801015 	stw	r18,64(sp)
 1008d1c:	dc400f15 	stw	r17,60(sp)
 1008d20:	1009b800 	call	1009b80 <__unpack_d>
 1008d24:	d9000204 	addi	r4,sp,8
 1008d28:	800b883a 	mov	r5,r16
 1008d2c:	1009b800 	call	1009b80 <__unpack_d>
 1008d30:	d9000417 	ldw	r4,16(sp)
 1008d34:	00800044 	movi	r2,1
 1008d38:	11000b2e 	bgeu	r2,r4,1008d68 <__divdf3+0x88>
 1008d3c:	d9400917 	ldw	r5,36(sp)
 1008d40:	1140762e 	bgeu	r2,r5,1008f1c <__divdf3+0x23c>
 1008d44:	d8800517 	ldw	r2,20(sp)
 1008d48:	d8c00a17 	ldw	r3,40(sp)
 1008d4c:	01800104 	movi	r6,4
 1008d50:	10c4f03a 	xor	r2,r2,r3
 1008d54:	d8800515 	stw	r2,20(sp)
 1008d58:	21800226 	beq	r4,r6,1008d64 <__divdf3+0x84>
 1008d5c:	00800084 	movi	r2,2
 1008d60:	2080141e 	bne	r4,r2,1008db4 <__divdf3+0xd4>
 1008d64:	29000926 	beq	r5,r4,1008d8c <__divdf3+0xac>
 1008d68:	9809883a 	mov	r4,r19
 1008d6c:	100986c0 	call	100986c <__pack_d>
 1008d70:	dfc01217 	ldw	ra,72(sp)
 1008d74:	dcc01117 	ldw	r19,68(sp)
 1008d78:	dc801017 	ldw	r18,64(sp)
 1008d7c:	dc400f17 	ldw	r17,60(sp)
 1008d80:	dc000e17 	ldw	r16,56(sp)
 1008d84:	dec01304 	addi	sp,sp,76
 1008d88:	f800283a 	ret
 1008d8c:	01004074 	movhi	r4,257
 1008d90:	210afb04 	addi	r4,r4,11244
 1008d94:	100986c0 	call	100986c <__pack_d>
 1008d98:	dfc01217 	ldw	ra,72(sp)
 1008d9c:	dcc01117 	ldw	r19,68(sp)
 1008da0:	dc801017 	ldw	r18,64(sp)
 1008da4:	dc400f17 	ldw	r17,60(sp)
 1008da8:	dc000e17 	ldw	r16,56(sp)
 1008dac:	dec01304 	addi	sp,sp,76
 1008db0:	f800283a 	ret
 1008db4:	29805b26 	beq	r5,r6,1008f24 <__divdf3+0x244>
 1008db8:	28802d26 	beq	r5,r2,1008e70 <__divdf3+0x190>
 1008dbc:	d8c00617 	ldw	r3,24(sp)
 1008dc0:	d8800b17 	ldw	r2,44(sp)
 1008dc4:	d9c00817 	ldw	r7,32(sp)
 1008dc8:	dc400d17 	ldw	r17,52(sp)
 1008dcc:	188bc83a 	sub	r5,r3,r2
 1008dd0:	d9800717 	ldw	r6,28(sp)
 1008dd4:	dc000c17 	ldw	r16,48(sp)
 1008dd8:	d9400615 	stw	r5,24(sp)
 1008ddc:	3c403836 	bltu	r7,r17,1008ec0 <__divdf3+0x1e0>
 1008de0:	89c03626 	beq	r17,r7,1008ebc <__divdf3+0x1dc>
 1008de4:	0015883a 	mov	r10,zero
 1008de8:	001d883a 	mov	r14,zero
 1008dec:	02c40034 	movhi	r11,4096
 1008df0:	001f883a 	mov	r15,zero
 1008df4:	003f883a 	mov	ra,zero
 1008df8:	04800f44 	movi	r18,61
 1008dfc:	00000f06 	br	1008e3c <__divdf3+0x15c>
 1008e00:	601d883a 	mov	r14,r12
 1008e04:	681f883a 	mov	r15,r13
 1008e08:	400d883a 	mov	r6,r8
 1008e0c:	100f883a 	mov	r7,r2
 1008e10:	3191883a 	add	r8,r6,r6
 1008e14:	5808d07a 	srli	r4,r11,1
 1008e18:	4185803a 	cmpltu	r2,r8,r6
 1008e1c:	39d3883a 	add	r9,r7,r7
 1008e20:	28c6b03a 	or	r3,r5,r3
 1008e24:	1245883a 	add	r2,r2,r9
 1008e28:	1815883a 	mov	r10,r3
 1008e2c:	2017883a 	mov	r11,r4
 1008e30:	400d883a 	mov	r6,r8
 1008e34:	100f883a 	mov	r7,r2
 1008e38:	fc801726 	beq	ra,r18,1008e98 <__divdf3+0x1b8>
 1008e3c:	580a97fa 	slli	r5,r11,31
 1008e40:	5006d07a 	srli	r3,r10,1
 1008e44:	ffc00044 	addi	ra,ra,1
 1008e48:	3c7ff136 	bltu	r7,r17,1008e10 <__divdf3+0x130>
 1008e4c:	3411c83a 	sub	r8,r6,r16
 1008e50:	3205803a 	cmpltu	r2,r6,r8
 1008e54:	3c53c83a 	sub	r9,r7,r17
 1008e58:	7298b03a 	or	r12,r14,r10
 1008e5c:	7adab03a 	or	r13,r15,r11
 1008e60:	4885c83a 	sub	r2,r9,r2
 1008e64:	89ffe61e 	bne	r17,r7,1008e00 <__divdf3+0x120>
 1008e68:	343fe936 	bltu	r6,r16,1008e10 <__divdf3+0x130>
 1008e6c:	003fe406 	br	1008e00 <__divdf3+0x120>
 1008e70:	9809883a 	mov	r4,r19
 1008e74:	d9800415 	stw	r6,16(sp)
 1008e78:	100986c0 	call	100986c <__pack_d>
 1008e7c:	dfc01217 	ldw	ra,72(sp)
 1008e80:	dcc01117 	ldw	r19,68(sp)
 1008e84:	dc801017 	ldw	r18,64(sp)
 1008e88:	dc400f17 	ldw	r17,60(sp)
 1008e8c:	dc000e17 	ldw	r16,56(sp)
 1008e90:	dec01304 	addi	sp,sp,76
 1008e94:	f800283a 	ret
 1008e98:	00803fc4 	movi	r2,255
 1008e9c:	7090703a 	and	r8,r14,r2
 1008ea0:	00802004 	movi	r2,128
 1008ea4:	0007883a 	mov	r3,zero
 1008ea8:	0013883a 	mov	r9,zero
 1008eac:	40800d26 	beq	r8,r2,1008ee4 <__divdf3+0x204>
 1008eb0:	dbc00815 	stw	r15,32(sp)
 1008eb4:	db800715 	stw	r14,28(sp)
 1008eb8:	003fab06 	br	1008d68 <__divdf3+0x88>
 1008ebc:	343fc92e 	bgeu	r6,r16,1008de4 <__divdf3+0x104>
 1008ec0:	3185883a 	add	r2,r6,r6
 1008ec4:	1189803a 	cmpltu	r4,r2,r6
 1008ec8:	39c7883a 	add	r3,r7,r7
 1008ecc:	20c9883a 	add	r4,r4,r3
 1008ed0:	297fffc4 	addi	r5,r5,-1
 1008ed4:	100d883a 	mov	r6,r2
 1008ed8:	200f883a 	mov	r7,r4
 1008edc:	d9400615 	stw	r5,24(sp)
 1008ee0:	003fc006 	br	1008de4 <__divdf3+0x104>
 1008ee4:	483ff21e 	bne	r9,zero,1008eb0 <__divdf3+0x1d0>
 1008ee8:	01004004 	movi	r4,256
 1008eec:	7104703a 	and	r2,r14,r4
 1008ef0:	10c4b03a 	or	r2,r2,r3
 1008ef4:	103fee1e 	bne	r2,zero,1008eb0 <__divdf3+0x1d0>
 1008ef8:	31c4b03a 	or	r2,r6,r7
 1008efc:	103fec26 	beq	r2,zero,1008eb0 <__divdf3+0x1d0>
 1008f00:	7205883a 	add	r2,r14,r8
 1008f04:	1391803a 	cmpltu	r8,r2,r14
 1008f08:	43d1883a 	add	r8,r8,r15
 1008f0c:	013fc004 	movi	r4,-256
 1008f10:	111c703a 	and	r14,r2,r4
 1008f14:	401f883a 	mov	r15,r8
 1008f18:	003fe506 	br	1008eb0 <__divdf3+0x1d0>
 1008f1c:	8009883a 	mov	r4,r16
 1008f20:	003f9206 	br	1008d6c <__divdf3+0x8c>
 1008f24:	9809883a 	mov	r4,r19
 1008f28:	d8000715 	stw	zero,28(sp)
 1008f2c:	d8000815 	stw	zero,32(sp)
 1008f30:	d8000615 	stw	zero,24(sp)
 1008f34:	003f8d06 	br	1008d6c <__divdf3+0x8c>

01008f38 <__eqdf2>:
 1008f38:	deffef04 	addi	sp,sp,-68
 1008f3c:	dc400f15 	stw	r17,60(sp)
 1008f40:	dc400404 	addi	r17,sp,16
 1008f44:	2005883a 	mov	r2,r4
 1008f48:	2807883a 	mov	r3,r5
 1008f4c:	dc000e15 	stw	r16,56(sp)
 1008f50:	d809883a 	mov	r4,sp
 1008f54:	880b883a 	mov	r5,r17
 1008f58:	dc000904 	addi	r16,sp,36
 1008f5c:	d8c00115 	stw	r3,4(sp)
 1008f60:	d8800015 	stw	r2,0(sp)
 1008f64:	d9800215 	stw	r6,8(sp)
 1008f68:	dfc01015 	stw	ra,64(sp)
 1008f6c:	d9c00315 	stw	r7,12(sp)
 1008f70:	1009b800 	call	1009b80 <__unpack_d>
 1008f74:	d9000204 	addi	r4,sp,8
 1008f78:	800b883a 	mov	r5,r16
 1008f7c:	1009b800 	call	1009b80 <__unpack_d>
 1008f80:	d8800417 	ldw	r2,16(sp)
 1008f84:	00c00044 	movi	r3,1
 1008f88:	180d883a 	mov	r6,r3
 1008f8c:	1880062e 	bgeu	r3,r2,1008fa8 <__eqdf2+0x70>
 1008f90:	d8800917 	ldw	r2,36(sp)
 1008f94:	8809883a 	mov	r4,r17
 1008f98:	800b883a 	mov	r5,r16
 1008f9c:	1880022e 	bgeu	r3,r2,1008fa8 <__eqdf2+0x70>
 1008fa0:	1009cb80 	call	1009cb8 <__fpcmp_parts_d>
 1008fa4:	100d883a 	mov	r6,r2
 1008fa8:	3005883a 	mov	r2,r6
 1008fac:	dfc01017 	ldw	ra,64(sp)
 1008fb0:	dc400f17 	ldw	r17,60(sp)
 1008fb4:	dc000e17 	ldw	r16,56(sp)
 1008fb8:	dec01104 	addi	sp,sp,68
 1008fbc:	f800283a 	ret

01008fc0 <__nedf2>:
 1008fc0:	deffef04 	addi	sp,sp,-68
 1008fc4:	dc400f15 	stw	r17,60(sp)
 1008fc8:	dc400404 	addi	r17,sp,16
 1008fcc:	2005883a 	mov	r2,r4
 1008fd0:	2807883a 	mov	r3,r5
 1008fd4:	dc000e15 	stw	r16,56(sp)
 1008fd8:	d809883a 	mov	r4,sp
 1008fdc:	880b883a 	mov	r5,r17
 1008fe0:	dc000904 	addi	r16,sp,36
 1008fe4:	d8c00115 	stw	r3,4(sp)
 1008fe8:	d8800015 	stw	r2,0(sp)
 1008fec:	d9800215 	stw	r6,8(sp)
 1008ff0:	dfc01015 	stw	ra,64(sp)
 1008ff4:	d9c00315 	stw	r7,12(sp)
 1008ff8:	1009b800 	call	1009b80 <__unpack_d>
 1008ffc:	d9000204 	addi	r4,sp,8
 1009000:	800b883a 	mov	r5,r16
 1009004:	1009b800 	call	1009b80 <__unpack_d>
 1009008:	d8800417 	ldw	r2,16(sp)
 100900c:	00c00044 	movi	r3,1
 1009010:	180d883a 	mov	r6,r3
 1009014:	1880062e 	bgeu	r3,r2,1009030 <__nedf2+0x70>
 1009018:	d8800917 	ldw	r2,36(sp)
 100901c:	8809883a 	mov	r4,r17
 1009020:	800b883a 	mov	r5,r16
 1009024:	1880022e 	bgeu	r3,r2,1009030 <__nedf2+0x70>
 1009028:	1009cb80 	call	1009cb8 <__fpcmp_parts_d>
 100902c:	100d883a 	mov	r6,r2
 1009030:	3005883a 	mov	r2,r6
 1009034:	dfc01017 	ldw	ra,64(sp)
 1009038:	dc400f17 	ldw	r17,60(sp)
 100903c:	dc000e17 	ldw	r16,56(sp)
 1009040:	dec01104 	addi	sp,sp,68
 1009044:	f800283a 	ret

01009048 <__gtdf2>:
 1009048:	deffef04 	addi	sp,sp,-68
 100904c:	dc400f15 	stw	r17,60(sp)
 1009050:	dc400404 	addi	r17,sp,16
 1009054:	2005883a 	mov	r2,r4
 1009058:	2807883a 	mov	r3,r5
 100905c:	dc000e15 	stw	r16,56(sp)
 1009060:	d809883a 	mov	r4,sp
 1009064:	880b883a 	mov	r5,r17
 1009068:	dc000904 	addi	r16,sp,36
 100906c:	d8c00115 	stw	r3,4(sp)
 1009070:	d8800015 	stw	r2,0(sp)
 1009074:	d9800215 	stw	r6,8(sp)
 1009078:	dfc01015 	stw	ra,64(sp)
 100907c:	d9c00315 	stw	r7,12(sp)
 1009080:	1009b800 	call	1009b80 <__unpack_d>
 1009084:	d9000204 	addi	r4,sp,8
 1009088:	800b883a 	mov	r5,r16
 100908c:	1009b800 	call	1009b80 <__unpack_d>
 1009090:	d8800417 	ldw	r2,16(sp)
 1009094:	00c00044 	movi	r3,1
 1009098:	01bfffc4 	movi	r6,-1
 100909c:	1880062e 	bgeu	r3,r2,10090b8 <__gtdf2+0x70>
 10090a0:	d8800917 	ldw	r2,36(sp)
 10090a4:	8809883a 	mov	r4,r17
 10090a8:	800b883a 	mov	r5,r16
 10090ac:	1880022e 	bgeu	r3,r2,10090b8 <__gtdf2+0x70>
 10090b0:	1009cb80 	call	1009cb8 <__fpcmp_parts_d>
 10090b4:	100d883a 	mov	r6,r2
 10090b8:	3005883a 	mov	r2,r6
 10090bc:	dfc01017 	ldw	ra,64(sp)
 10090c0:	dc400f17 	ldw	r17,60(sp)
 10090c4:	dc000e17 	ldw	r16,56(sp)
 10090c8:	dec01104 	addi	sp,sp,68
 10090cc:	f800283a 	ret

010090d0 <__gedf2>:
 10090d0:	deffef04 	addi	sp,sp,-68
 10090d4:	dc400f15 	stw	r17,60(sp)
 10090d8:	dc400404 	addi	r17,sp,16
 10090dc:	2005883a 	mov	r2,r4
 10090e0:	2807883a 	mov	r3,r5
 10090e4:	dc000e15 	stw	r16,56(sp)
 10090e8:	d809883a 	mov	r4,sp
 10090ec:	880b883a 	mov	r5,r17
 10090f0:	dc000904 	addi	r16,sp,36
 10090f4:	d8c00115 	stw	r3,4(sp)
 10090f8:	d8800015 	stw	r2,0(sp)
 10090fc:	d9800215 	stw	r6,8(sp)
 1009100:	dfc01015 	stw	ra,64(sp)
 1009104:	d9c00315 	stw	r7,12(sp)
 1009108:	1009b800 	call	1009b80 <__unpack_d>
 100910c:	d9000204 	addi	r4,sp,8
 1009110:	800b883a 	mov	r5,r16
 1009114:	1009b800 	call	1009b80 <__unpack_d>
 1009118:	d8800417 	ldw	r2,16(sp)
 100911c:	00c00044 	movi	r3,1
 1009120:	01bfffc4 	movi	r6,-1
 1009124:	1880062e 	bgeu	r3,r2,1009140 <__gedf2+0x70>
 1009128:	d8800917 	ldw	r2,36(sp)
 100912c:	8809883a 	mov	r4,r17
 1009130:	800b883a 	mov	r5,r16
 1009134:	1880022e 	bgeu	r3,r2,1009140 <__gedf2+0x70>
 1009138:	1009cb80 	call	1009cb8 <__fpcmp_parts_d>
 100913c:	100d883a 	mov	r6,r2
 1009140:	3005883a 	mov	r2,r6
 1009144:	dfc01017 	ldw	ra,64(sp)
 1009148:	dc400f17 	ldw	r17,60(sp)
 100914c:	dc000e17 	ldw	r16,56(sp)
 1009150:	dec01104 	addi	sp,sp,68
 1009154:	f800283a 	ret

01009158 <__ltdf2>:
 1009158:	deffef04 	addi	sp,sp,-68
 100915c:	dc400f15 	stw	r17,60(sp)
 1009160:	dc400404 	addi	r17,sp,16
 1009164:	2005883a 	mov	r2,r4
 1009168:	2807883a 	mov	r3,r5
 100916c:	dc000e15 	stw	r16,56(sp)
 1009170:	d809883a 	mov	r4,sp
 1009174:	880b883a 	mov	r5,r17
 1009178:	dc000904 	addi	r16,sp,36
 100917c:	d8c00115 	stw	r3,4(sp)
 1009180:	d8800015 	stw	r2,0(sp)
 1009184:	d9800215 	stw	r6,8(sp)
 1009188:	dfc01015 	stw	ra,64(sp)
 100918c:	d9c00315 	stw	r7,12(sp)
 1009190:	1009b800 	call	1009b80 <__unpack_d>
 1009194:	d9000204 	addi	r4,sp,8
 1009198:	800b883a 	mov	r5,r16
 100919c:	1009b800 	call	1009b80 <__unpack_d>
 10091a0:	d8800417 	ldw	r2,16(sp)
 10091a4:	00c00044 	movi	r3,1
 10091a8:	180d883a 	mov	r6,r3
 10091ac:	1880062e 	bgeu	r3,r2,10091c8 <__ltdf2+0x70>
 10091b0:	d8800917 	ldw	r2,36(sp)
 10091b4:	8809883a 	mov	r4,r17
 10091b8:	800b883a 	mov	r5,r16
 10091bc:	1880022e 	bgeu	r3,r2,10091c8 <__ltdf2+0x70>
 10091c0:	1009cb80 	call	1009cb8 <__fpcmp_parts_d>
 10091c4:	100d883a 	mov	r6,r2
 10091c8:	3005883a 	mov	r2,r6
 10091cc:	dfc01017 	ldw	ra,64(sp)
 10091d0:	dc400f17 	ldw	r17,60(sp)
 10091d4:	dc000e17 	ldw	r16,56(sp)
 10091d8:	dec01104 	addi	sp,sp,68
 10091dc:	f800283a 	ret

010091e0 <__floatsidf>:
 10091e0:	2006d7fa 	srli	r3,r4,31
 10091e4:	defff604 	addi	sp,sp,-40
 10091e8:	008000c4 	movi	r2,3
 10091ec:	dfc00915 	stw	ra,36(sp)
 10091f0:	dcc00815 	stw	r19,32(sp)
 10091f4:	dc800715 	stw	r18,28(sp)
 10091f8:	dc400615 	stw	r17,24(sp)
 10091fc:	dc000515 	stw	r16,20(sp)
 1009200:	d8800015 	stw	r2,0(sp)
 1009204:	d8c00115 	stw	r3,4(sp)
 1009208:	20000f1e 	bne	r4,zero,1009248 <__floatsidf+0x68>
 100920c:	00800084 	movi	r2,2
 1009210:	d8800015 	stw	r2,0(sp)
 1009214:	d809883a 	mov	r4,sp
 1009218:	100986c0 	call	100986c <__pack_d>
 100921c:	1009883a 	mov	r4,r2
 1009220:	180b883a 	mov	r5,r3
 1009224:	2005883a 	mov	r2,r4
 1009228:	2807883a 	mov	r3,r5
 100922c:	dfc00917 	ldw	ra,36(sp)
 1009230:	dcc00817 	ldw	r19,32(sp)
 1009234:	dc800717 	ldw	r18,28(sp)
 1009238:	dc400617 	ldw	r17,24(sp)
 100923c:	dc000517 	ldw	r16,20(sp)
 1009240:	dec00a04 	addi	sp,sp,40
 1009244:	f800283a 	ret
 1009248:	00800f04 	movi	r2,60
 100924c:	1807003a 	cmpeq	r3,r3,zero
 1009250:	d8800215 	stw	r2,8(sp)
 1009254:	18001126 	beq	r3,zero,100929c <__floatsidf+0xbc>
 1009258:	0027883a 	mov	r19,zero
 100925c:	2025883a 	mov	r18,r4
 1009260:	d9000315 	stw	r4,12(sp)
 1009264:	dcc00415 	stw	r19,16(sp)
 1009268:	10097ec0 	call	10097ec <__clzsi2>
 100926c:	11000744 	addi	r4,r2,29
 1009270:	013fe80e 	bge	zero,r4,1009214 <__floatsidf+0x34>
 1009274:	10bfff44 	addi	r2,r2,-3
 1009278:	10000c16 	blt	r2,zero,10092ac <__floatsidf+0xcc>
 100927c:	90a2983a 	sll	r17,r18,r2
 1009280:	0021883a 	mov	r16,zero
 1009284:	d8800217 	ldw	r2,8(sp)
 1009288:	dc400415 	stw	r17,16(sp)
 100928c:	dc000315 	stw	r16,12(sp)
 1009290:	1105c83a 	sub	r2,r2,r4
 1009294:	d8800215 	stw	r2,8(sp)
 1009298:	003fde06 	br	1009214 <__floatsidf+0x34>
 100929c:	00a00034 	movhi	r2,32768
 10092a0:	20800a26 	beq	r4,r2,10092cc <__floatsidf+0xec>
 10092a4:	0109c83a 	sub	r4,zero,r4
 10092a8:	003feb06 	br	1009258 <__floatsidf+0x78>
 10092ac:	9006d07a 	srli	r3,r18,1
 10092b0:	008007c4 	movi	r2,31
 10092b4:	1105c83a 	sub	r2,r2,r4
 10092b8:	1886d83a 	srl	r3,r3,r2
 10092bc:	9922983a 	sll	r17,r19,r4
 10092c0:	9120983a 	sll	r16,r18,r4
 10092c4:	1c62b03a 	or	r17,r3,r17
 10092c8:	003fee06 	br	1009284 <__floatsidf+0xa4>
 10092cc:	0009883a 	mov	r4,zero
 10092d0:	01707834 	movhi	r5,49632
 10092d4:	003fd306 	br	1009224 <__floatsidf+0x44>

010092d8 <__fixdfsi>:
 10092d8:	defff804 	addi	sp,sp,-32
 10092dc:	2005883a 	mov	r2,r4
 10092e0:	2807883a 	mov	r3,r5
 10092e4:	d809883a 	mov	r4,sp
 10092e8:	d9400204 	addi	r5,sp,8
 10092ec:	d8c00115 	stw	r3,4(sp)
 10092f0:	d8800015 	stw	r2,0(sp)
 10092f4:	dfc00715 	stw	ra,28(sp)
 10092f8:	1009b800 	call	1009b80 <__unpack_d>
 10092fc:	d8c00217 	ldw	r3,8(sp)
 1009300:	00800084 	movi	r2,2
 1009304:	1880051e 	bne	r3,r2,100931c <__fixdfsi+0x44>
 1009308:	0007883a 	mov	r3,zero
 100930c:	1805883a 	mov	r2,r3
 1009310:	dfc00717 	ldw	ra,28(sp)
 1009314:	dec00804 	addi	sp,sp,32
 1009318:	f800283a 	ret
 100931c:	00800044 	movi	r2,1
 1009320:	10fff92e 	bgeu	r2,r3,1009308 <__fixdfsi+0x30>
 1009324:	00800104 	movi	r2,4
 1009328:	18800426 	beq	r3,r2,100933c <__fixdfsi+0x64>
 100932c:	d8c00417 	ldw	r3,16(sp)
 1009330:	183ff516 	blt	r3,zero,1009308 <__fixdfsi+0x30>
 1009334:	00800784 	movi	r2,30
 1009338:	10c0080e 	bge	r2,r3,100935c <__fixdfsi+0x84>
 100933c:	d8800317 	ldw	r2,12(sp)
 1009340:	1000121e 	bne	r2,zero,100938c <__fixdfsi+0xb4>
 1009344:	00e00034 	movhi	r3,32768
 1009348:	18ffffc4 	addi	r3,r3,-1
 100934c:	1805883a 	mov	r2,r3
 1009350:	dfc00717 	ldw	ra,28(sp)
 1009354:	dec00804 	addi	sp,sp,32
 1009358:	f800283a 	ret
 100935c:	00800f04 	movi	r2,60
 1009360:	10d1c83a 	sub	r8,r2,r3
 1009364:	40bff804 	addi	r2,r8,-32
 1009368:	d9800517 	ldw	r6,20(sp)
 100936c:	d9c00617 	ldw	r7,24(sp)
 1009370:	10000816 	blt	r2,zero,1009394 <__fixdfsi+0xbc>
 1009374:	3888d83a 	srl	r4,r7,r2
 1009378:	d8800317 	ldw	r2,12(sp)
 100937c:	2007883a 	mov	r3,r4
 1009380:	103fe226 	beq	r2,zero,100930c <__fixdfsi+0x34>
 1009384:	0107c83a 	sub	r3,zero,r4
 1009388:	003fe006 	br	100930c <__fixdfsi+0x34>
 100938c:	00e00034 	movhi	r3,32768
 1009390:	003fde06 	br	100930c <__fixdfsi+0x34>
 1009394:	39c7883a 	add	r3,r7,r7
 1009398:	008007c4 	movi	r2,31
 100939c:	1205c83a 	sub	r2,r2,r8
 10093a0:	1886983a 	sll	r3,r3,r2
 10093a4:	3208d83a 	srl	r4,r6,r8
 10093a8:	1908b03a 	or	r4,r3,r4
 10093ac:	003ff206 	br	1009378 <__fixdfsi+0xa0>

010093b0 <__floatunsidf>:
 10093b0:	defff204 	addi	sp,sp,-56
 10093b4:	dfc00d15 	stw	ra,52(sp)
 10093b8:	ddc00c15 	stw	r23,48(sp)
 10093bc:	dd800b15 	stw	r22,44(sp)
 10093c0:	dd400a15 	stw	r21,40(sp)
 10093c4:	dd000915 	stw	r20,36(sp)
 10093c8:	dcc00815 	stw	r19,32(sp)
 10093cc:	dc800715 	stw	r18,28(sp)
 10093d0:	dc400615 	stw	r17,24(sp)
 10093d4:	dc000515 	stw	r16,20(sp)
 10093d8:	d8000115 	stw	zero,4(sp)
 10093dc:	20000f1e 	bne	r4,zero,100941c <__floatunsidf+0x6c>
 10093e0:	00800084 	movi	r2,2
 10093e4:	d8800015 	stw	r2,0(sp)
 10093e8:	d809883a 	mov	r4,sp
 10093ec:	100986c0 	call	100986c <__pack_d>
 10093f0:	dfc00d17 	ldw	ra,52(sp)
 10093f4:	ddc00c17 	ldw	r23,48(sp)
 10093f8:	dd800b17 	ldw	r22,44(sp)
 10093fc:	dd400a17 	ldw	r21,40(sp)
 1009400:	dd000917 	ldw	r20,36(sp)
 1009404:	dcc00817 	ldw	r19,32(sp)
 1009408:	dc800717 	ldw	r18,28(sp)
 100940c:	dc400617 	ldw	r17,24(sp)
 1009410:	dc000517 	ldw	r16,20(sp)
 1009414:	dec00e04 	addi	sp,sp,56
 1009418:	f800283a 	ret
 100941c:	008000c4 	movi	r2,3
 1009420:	00c00f04 	movi	r3,60
 1009424:	002f883a 	mov	r23,zero
 1009428:	202d883a 	mov	r22,r4
 100942c:	d8800015 	stw	r2,0(sp)
 1009430:	d8c00215 	stw	r3,8(sp)
 1009434:	d9000315 	stw	r4,12(sp)
 1009438:	ddc00415 	stw	r23,16(sp)
 100943c:	10097ec0 	call	10097ec <__clzsi2>
 1009440:	12400744 	addi	r9,r2,29
 1009444:	48000b16 	blt	r9,zero,1009474 <__floatunsidf+0xc4>
 1009448:	483fe726 	beq	r9,zero,10093e8 <__floatunsidf+0x38>
 100944c:	10bfff44 	addi	r2,r2,-3
 1009450:	10002e16 	blt	r2,zero,100950c <__floatunsidf+0x15c>
 1009454:	b0a2983a 	sll	r17,r22,r2
 1009458:	0021883a 	mov	r16,zero
 100945c:	d8800217 	ldw	r2,8(sp)
 1009460:	dc400415 	stw	r17,16(sp)
 1009464:	dc000315 	stw	r16,12(sp)
 1009468:	1245c83a 	sub	r2,r2,r9
 100946c:	d8800215 	stw	r2,8(sp)
 1009470:	003fdd06 	br	10093e8 <__floatunsidf+0x38>
 1009474:	0255c83a 	sub	r10,zero,r9
 1009478:	51bff804 	addi	r6,r10,-32
 100947c:	30001b16 	blt	r6,zero,10094ec <__floatunsidf+0x13c>
 1009480:	b9a8d83a 	srl	r20,r23,r6
 1009484:	002b883a 	mov	r21,zero
 1009488:	000f883a 	mov	r7,zero
 100948c:	01000044 	movi	r4,1
 1009490:	0011883a 	mov	r8,zero
 1009494:	30002516 	blt	r6,zero,100952c <__floatunsidf+0x17c>
 1009498:	21a6983a 	sll	r19,r4,r6
 100949c:	0025883a 	mov	r18,zero
 10094a0:	00bfffc4 	movi	r2,-1
 10094a4:	9089883a 	add	r4,r18,r2
 10094a8:	988b883a 	add	r5,r19,r2
 10094ac:	248d803a 	cmpltu	r6,r4,r18
 10094b0:	314b883a 	add	r5,r6,r5
 10094b4:	b104703a 	and	r2,r22,r4
 10094b8:	b946703a 	and	r3,r23,r5
 10094bc:	10c4b03a 	or	r2,r2,r3
 10094c0:	10000226 	beq	r2,zero,10094cc <__floatunsidf+0x11c>
 10094c4:	01c00044 	movi	r7,1
 10094c8:	0011883a 	mov	r8,zero
 10094cc:	d9000217 	ldw	r4,8(sp)
 10094d0:	a1c4b03a 	or	r2,r20,r7
 10094d4:	aa06b03a 	or	r3,r21,r8
 10094d8:	2249c83a 	sub	r4,r4,r9
 10094dc:	d8c00415 	stw	r3,16(sp)
 10094e0:	d9000215 	stw	r4,8(sp)
 10094e4:	d8800315 	stw	r2,12(sp)
 10094e8:	003fbf06 	br	10093e8 <__floatunsidf+0x38>
 10094ec:	bdc7883a 	add	r3,r23,r23
 10094f0:	008007c4 	movi	r2,31
 10094f4:	1285c83a 	sub	r2,r2,r10
 10094f8:	1886983a 	sll	r3,r3,r2
 10094fc:	b2a8d83a 	srl	r20,r22,r10
 1009500:	baaad83a 	srl	r21,r23,r10
 1009504:	1d28b03a 	or	r20,r3,r20
 1009508:	003fdf06 	br	1009488 <__floatunsidf+0xd8>
 100950c:	b006d07a 	srli	r3,r22,1
 1009510:	008007c4 	movi	r2,31
 1009514:	1245c83a 	sub	r2,r2,r9
 1009518:	1886d83a 	srl	r3,r3,r2
 100951c:	ba62983a 	sll	r17,r23,r9
 1009520:	b260983a 	sll	r16,r22,r9
 1009524:	1c62b03a 	or	r17,r3,r17
 1009528:	003fcc06 	br	100945c <__floatunsidf+0xac>
 100952c:	2006d07a 	srli	r3,r4,1
 1009530:	008007c4 	movi	r2,31
 1009534:	1285c83a 	sub	r2,r2,r10
 1009538:	18a6d83a 	srl	r19,r3,r2
 100953c:	22a4983a 	sll	r18,r4,r10
 1009540:	003fd706 	br	10094a0 <__floatunsidf+0xf0>

01009544 <udivmodsi4>:
 1009544:	29001b2e 	bgeu	r5,r4,10095b4 <udivmodsi4+0x70>
 1009548:	28001a16 	blt	r5,zero,10095b4 <udivmodsi4+0x70>
 100954c:	00800044 	movi	r2,1
 1009550:	0007883a 	mov	r3,zero
 1009554:	01c007c4 	movi	r7,31
 1009558:	00000306 	br	1009568 <udivmodsi4+0x24>
 100955c:	19c01326 	beq	r3,r7,10095ac <udivmodsi4+0x68>
 1009560:	18c00044 	addi	r3,r3,1
 1009564:	28000416 	blt	r5,zero,1009578 <udivmodsi4+0x34>
 1009568:	294b883a 	add	r5,r5,r5
 100956c:	1085883a 	add	r2,r2,r2
 1009570:	293ffa36 	bltu	r5,r4,100955c <udivmodsi4+0x18>
 1009574:	10000d26 	beq	r2,zero,10095ac <udivmodsi4+0x68>
 1009578:	0007883a 	mov	r3,zero
 100957c:	21400236 	bltu	r4,r5,1009588 <udivmodsi4+0x44>
 1009580:	2149c83a 	sub	r4,r4,r5
 1009584:	1886b03a 	or	r3,r3,r2
 1009588:	1004d07a 	srli	r2,r2,1
 100958c:	280ad07a 	srli	r5,r5,1
 1009590:	103ffa1e 	bne	r2,zero,100957c <udivmodsi4+0x38>
 1009594:	30000226 	beq	r6,zero,10095a0 <udivmodsi4+0x5c>
 1009598:	2005883a 	mov	r2,r4
 100959c:	f800283a 	ret
 10095a0:	1809883a 	mov	r4,r3
 10095a4:	2005883a 	mov	r2,r4
 10095a8:	f800283a 	ret
 10095ac:	0007883a 	mov	r3,zero
 10095b0:	003ff806 	br	1009594 <udivmodsi4+0x50>
 10095b4:	00800044 	movi	r2,1
 10095b8:	0007883a 	mov	r3,zero
 10095bc:	003fef06 	br	100957c <udivmodsi4+0x38>

010095c0 <__divsi3>:
 10095c0:	defffe04 	addi	sp,sp,-8
 10095c4:	dc000015 	stw	r16,0(sp)
 10095c8:	dfc00115 	stw	ra,4(sp)
 10095cc:	0021883a 	mov	r16,zero
 10095d0:	20000c16 	blt	r4,zero,1009604 <__divsi3+0x44>
 10095d4:	000d883a 	mov	r6,zero
 10095d8:	28000e16 	blt	r5,zero,1009614 <__divsi3+0x54>
 10095dc:	10095440 	call	1009544 <udivmodsi4>
 10095e0:	1007883a 	mov	r3,r2
 10095e4:	8005003a 	cmpeq	r2,r16,zero
 10095e8:	1000011e 	bne	r2,zero,10095f0 <__divsi3+0x30>
 10095ec:	00c7c83a 	sub	r3,zero,r3
 10095f0:	1805883a 	mov	r2,r3
 10095f4:	dfc00117 	ldw	ra,4(sp)
 10095f8:	dc000017 	ldw	r16,0(sp)
 10095fc:	dec00204 	addi	sp,sp,8
 1009600:	f800283a 	ret
 1009604:	0109c83a 	sub	r4,zero,r4
 1009608:	04000044 	movi	r16,1
 100960c:	000d883a 	mov	r6,zero
 1009610:	283ff20e 	bge	r5,zero,10095dc <__divsi3+0x1c>
 1009614:	014bc83a 	sub	r5,zero,r5
 1009618:	8021003a 	cmpeq	r16,r16,zero
 100961c:	003fef06 	br	10095dc <__divsi3+0x1c>

01009620 <__modsi3>:
 1009620:	deffff04 	addi	sp,sp,-4
 1009624:	dfc00015 	stw	ra,0(sp)
 1009628:	01800044 	movi	r6,1
 100962c:	2807883a 	mov	r3,r5
 1009630:	20000416 	blt	r4,zero,1009644 <__modsi3+0x24>
 1009634:	28000c16 	blt	r5,zero,1009668 <__modsi3+0x48>
 1009638:	dfc00017 	ldw	ra,0(sp)
 100963c:	dec00104 	addi	sp,sp,4
 1009640:	10095441 	jmpi	1009544 <udivmodsi4>
 1009644:	0109c83a 	sub	r4,zero,r4
 1009648:	28000b16 	blt	r5,zero,1009678 <__modsi3+0x58>
 100964c:	180b883a 	mov	r5,r3
 1009650:	01800044 	movi	r6,1
 1009654:	10095440 	call	1009544 <udivmodsi4>
 1009658:	0085c83a 	sub	r2,zero,r2
 100965c:	dfc00017 	ldw	ra,0(sp)
 1009660:	dec00104 	addi	sp,sp,4
 1009664:	f800283a 	ret
 1009668:	014bc83a 	sub	r5,zero,r5
 100966c:	dfc00017 	ldw	ra,0(sp)
 1009670:	dec00104 	addi	sp,sp,4
 1009674:	10095441 	jmpi	1009544 <udivmodsi4>
 1009678:	0147c83a 	sub	r3,zero,r5
 100967c:	003ff306 	br	100964c <__modsi3+0x2c>

01009680 <__udivsi3>:
 1009680:	000d883a 	mov	r6,zero
 1009684:	10095441 	jmpi	1009544 <udivmodsi4>

01009688 <__umodsi3>:
 1009688:	01800044 	movi	r6,1
 100968c:	10095441 	jmpi	1009544 <udivmodsi4>

01009690 <__mulsi3>:
 1009690:	20000a26 	beq	r4,zero,10096bc <__mulsi3+0x2c>
 1009694:	0007883a 	mov	r3,zero
 1009698:	2080004c 	andi	r2,r4,1
 100969c:	1005003a 	cmpeq	r2,r2,zero
 10096a0:	2008d07a 	srli	r4,r4,1
 10096a4:	1000011e 	bne	r2,zero,10096ac <__mulsi3+0x1c>
 10096a8:	1947883a 	add	r3,r3,r5
 10096ac:	294b883a 	add	r5,r5,r5
 10096b0:	203ff91e 	bne	r4,zero,1009698 <__mulsi3+0x8>
 10096b4:	1805883a 	mov	r2,r3
 10096b8:	f800283a 	ret
 10096bc:	0007883a 	mov	r3,zero
 10096c0:	1805883a 	mov	r2,r3
 10096c4:	f800283a 	ret

010096c8 <__muldi3>:
 10096c8:	defff204 	addi	sp,sp,-56
 10096cc:	df000c15 	stw	fp,48(sp)
 10096d0:	3038d43a 	srli	fp,r6,16
 10096d4:	dd000815 	stw	r20,32(sp)
 10096d8:	dc400515 	stw	r17,20(sp)
 10096dc:	2028d43a 	srli	r20,r4,16
 10096e0:	247fffcc 	andi	r17,r4,65535
 10096e4:	dc000415 	stw	r16,16(sp)
 10096e8:	343fffcc 	andi	r16,r6,65535
 10096ec:	dcc00715 	stw	r19,28(sp)
 10096f0:	d9000015 	stw	r4,0(sp)
 10096f4:	2827883a 	mov	r19,r5
 10096f8:	8809883a 	mov	r4,r17
 10096fc:	d9400115 	stw	r5,4(sp)
 1009700:	800b883a 	mov	r5,r16
 1009704:	d9800215 	stw	r6,8(sp)
 1009708:	dfc00d15 	stw	ra,52(sp)
 100970c:	d9c00315 	stw	r7,12(sp)
 1009710:	dd800a15 	stw	r22,40(sp)
 1009714:	dd400915 	stw	r21,36(sp)
 1009718:	302d883a 	mov	r22,r6
 100971c:	ddc00b15 	stw	r23,44(sp)
 1009720:	dc800615 	stw	r18,24(sp)
 1009724:	10096900 	call	1009690 <__mulsi3>
 1009728:	8809883a 	mov	r4,r17
 100972c:	e00b883a 	mov	r5,fp
 1009730:	102b883a 	mov	r21,r2
 1009734:	10096900 	call	1009690 <__mulsi3>
 1009738:	800b883a 	mov	r5,r16
 100973c:	a009883a 	mov	r4,r20
 1009740:	1023883a 	mov	r17,r2
 1009744:	10096900 	call	1009690 <__mulsi3>
 1009748:	a009883a 	mov	r4,r20
 100974c:	e00b883a 	mov	r5,fp
 1009750:	1021883a 	mov	r16,r2
 1009754:	10096900 	call	1009690 <__mulsi3>
 1009758:	a8ffffcc 	andi	r3,r21,65535
 100975c:	a82ad43a 	srli	r21,r21,16
 1009760:	8c23883a 	add	r17,r17,r16
 1009764:	1011883a 	mov	r8,r2
 1009768:	ac6b883a 	add	r21,r21,r17
 100976c:	a804943a 	slli	r2,r21,16
 1009770:	b009883a 	mov	r4,r22
 1009774:	980b883a 	mov	r5,r19
 1009778:	10c7883a 	add	r3,r2,r3
 100977c:	a812d43a 	srli	r9,r21,16
 1009780:	180d883a 	mov	r6,r3
 1009784:	ac00022e 	bgeu	r21,r16,1009790 <__muldi3+0xc8>
 1009788:	00800074 	movhi	r2,1
 100978c:	4091883a 	add	r8,r8,r2
 1009790:	4267883a 	add	r19,r8,r9
 1009794:	302d883a 	mov	r22,r6
 1009798:	10096900 	call	1009690 <__mulsi3>
 100979c:	d9400317 	ldw	r5,12(sp)
 10097a0:	d9000017 	ldw	r4,0(sp)
 10097a4:	1023883a 	mov	r17,r2
 10097a8:	10096900 	call	1009690 <__mulsi3>
 10097ac:	14cb883a 	add	r5,r2,r19
 10097b0:	894b883a 	add	r5,r17,r5
 10097b4:	b005883a 	mov	r2,r22
 10097b8:	2807883a 	mov	r3,r5
 10097bc:	dfc00d17 	ldw	ra,52(sp)
 10097c0:	df000c17 	ldw	fp,48(sp)
 10097c4:	ddc00b17 	ldw	r23,44(sp)
 10097c8:	dd800a17 	ldw	r22,40(sp)
 10097cc:	dd400917 	ldw	r21,36(sp)
 10097d0:	dd000817 	ldw	r20,32(sp)
 10097d4:	dcc00717 	ldw	r19,28(sp)
 10097d8:	dc800617 	ldw	r18,24(sp)
 10097dc:	dc400517 	ldw	r17,20(sp)
 10097e0:	dc000417 	ldw	r16,16(sp)
 10097e4:	dec00e04 	addi	sp,sp,56
 10097e8:	f800283a 	ret

010097ec <__clzsi2>:
 10097ec:	00bfffd4 	movui	r2,65535
 10097f0:	11000e36 	bltu	r2,r4,100982c <__clzsi2+0x40>
 10097f4:	00803fc4 	movi	r2,255
 10097f8:	01400204 	movi	r5,8
 10097fc:	0007883a 	mov	r3,zero
 1009800:	11001036 	bltu	r2,r4,1009844 <__clzsi2+0x58>
 1009804:	000b883a 	mov	r5,zero
 1009808:	20c6d83a 	srl	r3,r4,r3
 100980c:	00804074 	movhi	r2,257
 1009810:	108b0004 	addi	r2,r2,11264
 1009814:	1887883a 	add	r3,r3,r2
 1009818:	18800003 	ldbu	r2,0(r3)
 100981c:	00c00804 	movi	r3,32
 1009820:	2885883a 	add	r2,r5,r2
 1009824:	1885c83a 	sub	r2,r3,r2
 1009828:	f800283a 	ret
 100982c:	01400404 	movi	r5,16
 1009830:	00804034 	movhi	r2,256
 1009834:	10bfffc4 	addi	r2,r2,-1
 1009838:	2807883a 	mov	r3,r5
 100983c:	113ff22e 	bgeu	r2,r4,1009808 <__clzsi2+0x1c>
 1009840:	01400604 	movi	r5,24
 1009844:	2807883a 	mov	r3,r5
 1009848:	20c6d83a 	srl	r3,r4,r3
 100984c:	00804074 	movhi	r2,257
 1009850:	108b0004 	addi	r2,r2,11264
 1009854:	1887883a 	add	r3,r3,r2
 1009858:	18800003 	ldbu	r2,0(r3)
 100985c:	00c00804 	movi	r3,32
 1009860:	2885883a 	add	r2,r5,r2
 1009864:	1885c83a 	sub	r2,r3,r2
 1009868:	f800283a 	ret

0100986c <__pack_d>:
 100986c:	20c00017 	ldw	r3,0(r4)
 1009870:	defffd04 	addi	sp,sp,-12
 1009874:	dc000015 	stw	r16,0(sp)
 1009878:	dc800215 	stw	r18,8(sp)
 100987c:	dc400115 	stw	r17,4(sp)
 1009880:	00800044 	movi	r2,1
 1009884:	22000317 	ldw	r8,12(r4)
 1009888:	001f883a 	mov	r15,zero
 100988c:	22400417 	ldw	r9,16(r4)
 1009890:	24000117 	ldw	r16,4(r4)
 1009894:	10c0552e 	bgeu	r2,r3,10099ec <__pack_d+0x180>
 1009898:	00800104 	movi	r2,4
 100989c:	18804f26 	beq	r3,r2,10099dc <__pack_d+0x170>
 10098a0:	00800084 	movi	r2,2
 10098a4:	18800226 	beq	r3,r2,10098b0 <__pack_d+0x44>
 10098a8:	4244b03a 	or	r2,r8,r9
 10098ac:	10001a1e 	bne	r2,zero,1009918 <__pack_d+0xac>
 10098b0:	000d883a 	mov	r6,zero
 10098b4:	000f883a 	mov	r7,zero
 10098b8:	0011883a 	mov	r8,zero
 10098bc:	00800434 	movhi	r2,16
 10098c0:	10bfffc4 	addi	r2,r2,-1
 10098c4:	301d883a 	mov	r14,r6
 10098c8:	3884703a 	and	r2,r7,r2
 10098cc:	400a953a 	slli	r5,r8,20
 10098d0:	79bffc2c 	andhi	r6,r15,65520
 10098d4:	308cb03a 	or	r6,r6,r2
 10098d8:	00e00434 	movhi	r3,32784
 10098dc:	18ffffc4 	addi	r3,r3,-1
 10098e0:	800497fa 	slli	r2,r16,31
 10098e4:	30c6703a 	and	r3,r6,r3
 10098e8:	1946b03a 	or	r3,r3,r5
 10098ec:	01600034 	movhi	r5,32768
 10098f0:	297fffc4 	addi	r5,r5,-1
 10098f4:	194a703a 	and	r5,r3,r5
 10098f8:	288ab03a 	or	r5,r5,r2
 10098fc:	2807883a 	mov	r3,r5
 1009900:	7005883a 	mov	r2,r14
 1009904:	dc800217 	ldw	r18,8(sp)
 1009908:	dc400117 	ldw	r17,4(sp)
 100990c:	dc000017 	ldw	r16,0(sp)
 1009910:	dec00304 	addi	sp,sp,12
 1009914:	f800283a 	ret
 1009918:	21000217 	ldw	r4,8(r4)
 100991c:	00bf0084 	movi	r2,-1022
 1009920:	20803f16 	blt	r4,r2,1009a20 <__pack_d+0x1b4>
 1009924:	0080ffc4 	movi	r2,1023
 1009928:	11002c16 	blt	r2,r4,10099dc <__pack_d+0x170>
 100992c:	00803fc4 	movi	r2,255
 1009930:	408c703a 	and	r6,r8,r2
 1009934:	00802004 	movi	r2,128
 1009938:	0007883a 	mov	r3,zero
 100993c:	000f883a 	mov	r7,zero
 1009940:	2280ffc4 	addi	r10,r4,1023
 1009944:	30801e26 	beq	r6,r2,10099c0 <__pack_d+0x154>
 1009948:	00801fc4 	movi	r2,127
 100994c:	4089883a 	add	r4,r8,r2
 1009950:	220d803a 	cmpltu	r6,r4,r8
 1009954:	324d883a 	add	r6,r6,r9
 1009958:	2011883a 	mov	r8,r4
 100995c:	3013883a 	mov	r9,r6
 1009960:	00880034 	movhi	r2,8192
 1009964:	10bfffc4 	addi	r2,r2,-1
 1009968:	12400d36 	bltu	r2,r9,10099a0 <__pack_d+0x134>
 100996c:	4804963a 	slli	r2,r9,24
 1009970:	400cd23a 	srli	r6,r8,8
 1009974:	480ed23a 	srli	r7,r9,8
 1009978:	013fffc4 	movi	r4,-1
 100997c:	118cb03a 	or	r6,r2,r6
 1009980:	01400434 	movhi	r5,16
 1009984:	297fffc4 	addi	r5,r5,-1
 1009988:	3104703a 	and	r2,r6,r4
 100998c:	3946703a 	and	r3,r7,r5
 1009990:	5201ffcc 	andi	r8,r10,2047
 1009994:	100d883a 	mov	r6,r2
 1009998:	180f883a 	mov	r7,r3
 100999c:	003fc706 	br	10098bc <__pack_d+0x50>
 10099a0:	480897fa 	slli	r4,r9,31
 10099a4:	4004d07a 	srli	r2,r8,1
 10099a8:	4806d07a 	srli	r3,r9,1
 10099ac:	52800044 	addi	r10,r10,1
 10099b0:	2084b03a 	or	r2,r4,r2
 10099b4:	1011883a 	mov	r8,r2
 10099b8:	1813883a 	mov	r9,r3
 10099bc:	003feb06 	br	100996c <__pack_d+0x100>
 10099c0:	383fe11e 	bne	r7,zero,1009948 <__pack_d+0xdc>
 10099c4:	01004004 	movi	r4,256
 10099c8:	4104703a 	and	r2,r8,r4
 10099cc:	10c4b03a 	or	r2,r2,r3
 10099d0:	103fe326 	beq	r2,zero,1009960 <__pack_d+0xf4>
 10099d4:	3005883a 	mov	r2,r6
 10099d8:	003fdc06 	br	100994c <__pack_d+0xe0>
 10099dc:	000d883a 	mov	r6,zero
 10099e0:	000f883a 	mov	r7,zero
 10099e4:	0201ffc4 	movi	r8,2047
 10099e8:	003fb406 	br	10098bc <__pack_d+0x50>
 10099ec:	0005883a 	mov	r2,zero
 10099f0:	00c00234 	movhi	r3,8
 10099f4:	408cb03a 	or	r6,r8,r2
 10099f8:	48ceb03a 	or	r7,r9,r3
 10099fc:	013fffc4 	movi	r4,-1
 1009a00:	01400434 	movhi	r5,16
 1009a04:	297fffc4 	addi	r5,r5,-1
 1009a08:	3104703a 	and	r2,r6,r4
 1009a0c:	3946703a 	and	r3,r7,r5
 1009a10:	100d883a 	mov	r6,r2
 1009a14:	180f883a 	mov	r7,r3
 1009a18:	0201ffc4 	movi	r8,2047
 1009a1c:	003fa706 	br	10098bc <__pack_d+0x50>
 1009a20:	1109c83a 	sub	r4,r2,r4
 1009a24:	00800e04 	movi	r2,56
 1009a28:	11004316 	blt	r2,r4,1009b38 <__pack_d+0x2cc>
 1009a2c:	21fff804 	addi	r7,r4,-32
 1009a30:	38004516 	blt	r7,zero,1009b48 <__pack_d+0x2dc>
 1009a34:	49d8d83a 	srl	r12,r9,r7
 1009a38:	001b883a 	mov	r13,zero
 1009a3c:	0023883a 	mov	r17,zero
 1009a40:	01400044 	movi	r5,1
 1009a44:	0025883a 	mov	r18,zero
 1009a48:	38004716 	blt	r7,zero,1009b68 <__pack_d+0x2fc>
 1009a4c:	29d6983a 	sll	r11,r5,r7
 1009a50:	0015883a 	mov	r10,zero
 1009a54:	00bfffc4 	movi	r2,-1
 1009a58:	5089883a 	add	r4,r10,r2
 1009a5c:	588b883a 	add	r5,r11,r2
 1009a60:	228d803a 	cmpltu	r6,r4,r10
 1009a64:	314b883a 	add	r5,r6,r5
 1009a68:	4104703a 	and	r2,r8,r4
 1009a6c:	4946703a 	and	r3,r9,r5
 1009a70:	10c4b03a 	or	r2,r2,r3
 1009a74:	10000226 	beq	r2,zero,1009a80 <__pack_d+0x214>
 1009a78:	04400044 	movi	r17,1
 1009a7c:	0025883a 	mov	r18,zero
 1009a80:	00803fc4 	movi	r2,255
 1009a84:	644eb03a 	or	r7,r12,r17
 1009a88:	3892703a 	and	r9,r7,r2
 1009a8c:	00802004 	movi	r2,128
 1009a90:	6c90b03a 	or	r8,r13,r18
 1009a94:	0015883a 	mov	r10,zero
 1009a98:	48801626 	beq	r9,r2,1009af4 <__pack_d+0x288>
 1009a9c:	01001fc4 	movi	r4,127
 1009aa0:	3905883a 	add	r2,r7,r4
 1009aa4:	11cd803a 	cmpltu	r6,r2,r7
 1009aa8:	320d883a 	add	r6,r6,r8
 1009aac:	100f883a 	mov	r7,r2
 1009ab0:	00840034 	movhi	r2,4096
 1009ab4:	10bfffc4 	addi	r2,r2,-1
 1009ab8:	3011883a 	mov	r8,r6
 1009abc:	0007883a 	mov	r3,zero
 1009ac0:	11801b36 	bltu	r2,r6,1009b30 <__pack_d+0x2c4>
 1009ac4:	4004963a 	slli	r2,r8,24
 1009ac8:	3808d23a 	srli	r4,r7,8
 1009acc:	400ad23a 	srli	r5,r8,8
 1009ad0:	1813883a 	mov	r9,r3
 1009ad4:	1108b03a 	or	r4,r2,r4
 1009ad8:	00bfffc4 	movi	r2,-1
 1009adc:	00c00434 	movhi	r3,16
 1009ae0:	18ffffc4 	addi	r3,r3,-1
 1009ae4:	208c703a 	and	r6,r4,r2
 1009ae8:	28ce703a 	and	r7,r5,r3
 1009aec:	4a01ffcc 	andi	r8,r9,2047
 1009af0:	003f7206 	br	10098bc <__pack_d+0x50>
 1009af4:	503fe91e 	bne	r10,zero,1009a9c <__pack_d+0x230>
 1009af8:	01004004 	movi	r4,256
 1009afc:	3904703a 	and	r2,r7,r4
 1009b00:	0007883a 	mov	r3,zero
 1009b04:	10c4b03a 	or	r2,r2,r3
 1009b08:	10000626 	beq	r2,zero,1009b24 <__pack_d+0x2b8>
 1009b0c:	3a45883a 	add	r2,r7,r9
 1009b10:	11cd803a 	cmpltu	r6,r2,r7
 1009b14:	320d883a 	add	r6,r6,r8
 1009b18:	100f883a 	mov	r7,r2
 1009b1c:	3011883a 	mov	r8,r6
 1009b20:	0007883a 	mov	r3,zero
 1009b24:	00840034 	movhi	r2,4096
 1009b28:	10bfffc4 	addi	r2,r2,-1
 1009b2c:	123fe52e 	bgeu	r2,r8,1009ac4 <__pack_d+0x258>
 1009b30:	00c00044 	movi	r3,1
 1009b34:	003fe306 	br	1009ac4 <__pack_d+0x258>
 1009b38:	0009883a 	mov	r4,zero
 1009b3c:	0013883a 	mov	r9,zero
 1009b40:	000b883a 	mov	r5,zero
 1009b44:	003fe406 	br	1009ad8 <__pack_d+0x26c>
 1009b48:	4a47883a 	add	r3,r9,r9
 1009b4c:	008007c4 	movi	r2,31
 1009b50:	1105c83a 	sub	r2,r2,r4
 1009b54:	1886983a 	sll	r3,r3,r2
 1009b58:	4118d83a 	srl	r12,r8,r4
 1009b5c:	491ad83a 	srl	r13,r9,r4
 1009b60:	1b18b03a 	or	r12,r3,r12
 1009b64:	003fb506 	br	1009a3c <__pack_d+0x1d0>
 1009b68:	2806d07a 	srli	r3,r5,1
 1009b6c:	008007c4 	movi	r2,31
 1009b70:	1105c83a 	sub	r2,r2,r4
 1009b74:	1896d83a 	srl	r11,r3,r2
 1009b78:	2914983a 	sll	r10,r5,r4
 1009b7c:	003fb506 	br	1009a54 <__pack_d+0x1e8>

01009b80 <__unpack_d>:
 1009b80:	20c00117 	ldw	r3,4(r4)
 1009b84:	22400017 	ldw	r9,0(r4)
 1009b88:	00800434 	movhi	r2,16
 1009b8c:	10bfffc4 	addi	r2,r2,-1
 1009b90:	1808d53a 	srli	r4,r3,20
 1009b94:	180cd7fa 	srli	r6,r3,31
 1009b98:	1894703a 	and	r10,r3,r2
 1009b9c:	2201ffcc 	andi	r8,r4,2047
 1009ba0:	281b883a 	mov	r13,r5
 1009ba4:	4817883a 	mov	r11,r9
 1009ba8:	29800115 	stw	r6,4(r5)
 1009bac:	5019883a 	mov	r12,r10
 1009bb0:	40001e1e 	bne	r8,zero,1009c2c <__unpack_d+0xac>
 1009bb4:	4a84b03a 	or	r2,r9,r10
 1009bb8:	10001926 	beq	r2,zero,1009c20 <__unpack_d+0xa0>
 1009bbc:	4804d63a 	srli	r2,r9,24
 1009bc0:	500c923a 	slli	r6,r10,8
 1009bc4:	013f0084 	movi	r4,-1022
 1009bc8:	00c40034 	movhi	r3,4096
 1009bcc:	18ffffc4 	addi	r3,r3,-1
 1009bd0:	118cb03a 	or	r6,r2,r6
 1009bd4:	008000c4 	movi	r2,3
 1009bd8:	480a923a 	slli	r5,r9,8
 1009bdc:	68800015 	stw	r2,0(r13)
 1009be0:	69000215 	stw	r4,8(r13)
 1009be4:	19800b36 	bltu	r3,r6,1009c14 <__unpack_d+0x94>
 1009be8:	200f883a 	mov	r7,r4
 1009bec:	1811883a 	mov	r8,r3
 1009bf0:	2945883a 	add	r2,r5,r5
 1009bf4:	1149803a 	cmpltu	r4,r2,r5
 1009bf8:	3187883a 	add	r3,r6,r6
 1009bfc:	20c9883a 	add	r4,r4,r3
 1009c00:	100b883a 	mov	r5,r2
 1009c04:	200d883a 	mov	r6,r4
 1009c08:	39ffffc4 	addi	r7,r7,-1
 1009c0c:	413ff82e 	bgeu	r8,r4,1009bf0 <__unpack_d+0x70>
 1009c10:	69c00215 	stw	r7,8(r13)
 1009c14:	69800415 	stw	r6,16(r13)
 1009c18:	69400315 	stw	r5,12(r13)
 1009c1c:	f800283a 	ret
 1009c20:	00800084 	movi	r2,2
 1009c24:	28800015 	stw	r2,0(r5)
 1009c28:	f800283a 	ret
 1009c2c:	0081ffc4 	movi	r2,2047
 1009c30:	40800f26 	beq	r8,r2,1009c70 <__unpack_d+0xf0>
 1009c34:	480cd63a 	srli	r6,r9,24
 1009c38:	5006923a 	slli	r3,r10,8
 1009c3c:	4804923a 	slli	r2,r9,8
 1009c40:	0009883a 	mov	r4,zero
 1009c44:	30c6b03a 	or	r3,r6,r3
 1009c48:	01440034 	movhi	r5,4096
 1009c4c:	110cb03a 	or	r6,r2,r4
 1009c50:	423f0044 	addi	r8,r8,-1023
 1009c54:	194eb03a 	or	r7,r3,r5
 1009c58:	008000c4 	movi	r2,3
 1009c5c:	69c00415 	stw	r7,16(r13)
 1009c60:	6a000215 	stw	r8,8(r13)
 1009c64:	68800015 	stw	r2,0(r13)
 1009c68:	69800315 	stw	r6,12(r13)
 1009c6c:	f800283a 	ret
 1009c70:	4a84b03a 	or	r2,r9,r10
 1009c74:	1000031e 	bne	r2,zero,1009c84 <__unpack_d+0x104>
 1009c78:	00800104 	movi	r2,4
 1009c7c:	28800015 	stw	r2,0(r5)
 1009c80:	f800283a 	ret
 1009c84:	0009883a 	mov	r4,zero
 1009c88:	01400234 	movhi	r5,8
 1009c8c:	4904703a 	and	r2,r9,r4
 1009c90:	5146703a 	and	r3,r10,r5
 1009c94:	10c4b03a 	or	r2,r2,r3
 1009c98:	10000526 	beq	r2,zero,1009cb0 <__unpack_d+0x130>
 1009c9c:	00800044 	movi	r2,1
 1009ca0:	68800015 	stw	r2,0(r13)
 1009ca4:	6b000415 	stw	r12,16(r13)
 1009ca8:	6ac00315 	stw	r11,12(r13)
 1009cac:	f800283a 	ret
 1009cb0:	68000015 	stw	zero,0(r13)
 1009cb4:	003ffb06 	br	1009ca4 <__unpack_d+0x124>

01009cb8 <__fpcmp_parts_d>:
 1009cb8:	21800017 	ldw	r6,0(r4)
 1009cbc:	00c00044 	movi	r3,1
 1009cc0:	19800a2e 	bgeu	r3,r6,1009cec <__fpcmp_parts_d+0x34>
 1009cc4:	28800017 	ldw	r2,0(r5)
 1009cc8:	1880082e 	bgeu	r3,r2,1009cec <__fpcmp_parts_d+0x34>
 1009ccc:	00c00104 	movi	r3,4
 1009cd0:	30c02626 	beq	r6,r3,1009d6c <__fpcmp_parts_d+0xb4>
 1009cd4:	10c02226 	beq	r2,r3,1009d60 <__fpcmp_parts_d+0xa8>
 1009cd8:	00c00084 	movi	r3,2
 1009cdc:	30c00526 	beq	r6,r3,1009cf4 <__fpcmp_parts_d+0x3c>
 1009ce0:	10c0071e 	bne	r2,r3,1009d00 <__fpcmp_parts_d+0x48>
 1009ce4:	20800117 	ldw	r2,4(r4)
 1009ce8:	1000091e 	bne	r2,zero,1009d10 <__fpcmp_parts_d+0x58>
 1009cec:	00800044 	movi	r2,1
 1009cf0:	f800283a 	ret
 1009cf4:	10c01a1e 	bne	r2,r3,1009d60 <__fpcmp_parts_d+0xa8>
 1009cf8:	0005883a 	mov	r2,zero
 1009cfc:	f800283a 	ret
 1009d00:	22000117 	ldw	r8,4(r4)
 1009d04:	28800117 	ldw	r2,4(r5)
 1009d08:	40800326 	beq	r8,r2,1009d18 <__fpcmp_parts_d+0x60>
 1009d0c:	403ff726 	beq	r8,zero,1009cec <__fpcmp_parts_d+0x34>
 1009d10:	00bfffc4 	movi	r2,-1
 1009d14:	f800283a 	ret
 1009d18:	20c00217 	ldw	r3,8(r4)
 1009d1c:	28800217 	ldw	r2,8(r5)
 1009d20:	10fffa16 	blt	r2,r3,1009d0c <__fpcmp_parts_d+0x54>
 1009d24:	18800916 	blt	r3,r2,1009d4c <__fpcmp_parts_d+0x94>
 1009d28:	21c00417 	ldw	r7,16(r4)
 1009d2c:	28c00417 	ldw	r3,16(r5)
 1009d30:	21800317 	ldw	r6,12(r4)
 1009d34:	28800317 	ldw	r2,12(r5)
 1009d38:	19fff436 	bltu	r3,r7,1009d0c <__fpcmp_parts_d+0x54>
 1009d3c:	38c00526 	beq	r7,r3,1009d54 <__fpcmp_parts_d+0x9c>
 1009d40:	38c00236 	bltu	r7,r3,1009d4c <__fpcmp_parts_d+0x94>
 1009d44:	19ffec1e 	bne	r3,r7,1009cf8 <__fpcmp_parts_d+0x40>
 1009d48:	30bfeb2e 	bgeu	r6,r2,1009cf8 <__fpcmp_parts_d+0x40>
 1009d4c:	403fe71e 	bne	r8,zero,1009cec <__fpcmp_parts_d+0x34>
 1009d50:	003fef06 	br	1009d10 <__fpcmp_parts_d+0x58>
 1009d54:	11bffa2e 	bgeu	r2,r6,1009d40 <__fpcmp_parts_d+0x88>
 1009d58:	403fe426 	beq	r8,zero,1009cec <__fpcmp_parts_d+0x34>
 1009d5c:	003fec06 	br	1009d10 <__fpcmp_parts_d+0x58>
 1009d60:	28800117 	ldw	r2,4(r5)
 1009d64:	103fe11e 	bne	r2,zero,1009cec <__fpcmp_parts_d+0x34>
 1009d68:	003fe906 	br	1009d10 <__fpcmp_parts_d+0x58>
 1009d6c:	11bfdd1e 	bne	r2,r6,1009ce4 <__fpcmp_parts_d+0x2c>
 1009d70:	28c00117 	ldw	r3,4(r5)
 1009d74:	20800117 	ldw	r2,4(r4)
 1009d78:	1885c83a 	sub	r2,r3,r2
 1009d7c:	f800283a 	ret

01009d80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009d80:	defff804 	addi	sp,sp,-32
 1009d84:	dfc00715 	stw	ra,28(sp)
 1009d88:	df000615 	stw	fp,24(sp)
 1009d8c:	df000604 	addi	fp,sp,24
 1009d90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1009d94:	e0bffc17 	ldw	r2,-16(fp)
 1009d98:	1004803a 	cmplt	r2,r2,zero
 1009d9c:	1000091e 	bne	r2,zero,1009dc4 <close+0x44>
 1009da0:	e13ffc17 	ldw	r4,-16(fp)
 1009da4:	01400304 	movi	r5,12
 1009da8:	10096900 	call	1009690 <__mulsi3>
 1009dac:	1007883a 	mov	r3,r2
 1009db0:	00804074 	movhi	r2,257
 1009db4:	108d9604 	addi	r2,r2,13912
 1009db8:	1887883a 	add	r3,r3,r2
 1009dbc:	e0ffff15 	stw	r3,-4(fp)
 1009dc0:	00000106 	br	1009dc8 <close+0x48>
 1009dc4:	e03fff15 	stw	zero,-4(fp)
 1009dc8:	e0bfff17 	ldw	r2,-4(fp)
 1009dcc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1009dd0:	e0bffb17 	ldw	r2,-20(fp)
 1009dd4:	1005003a 	cmpeq	r2,r2,zero
 1009dd8:	10001d1e 	bne	r2,zero,1009e50 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1009ddc:	e0bffb17 	ldw	r2,-20(fp)
 1009de0:	10800017 	ldw	r2,0(r2)
 1009de4:	10800417 	ldw	r2,16(r2)
 1009de8:	1005003a 	cmpeq	r2,r2,zero
 1009dec:	1000071e 	bne	r2,zero,1009e0c <close+0x8c>
 1009df0:	e0bffb17 	ldw	r2,-20(fp)
 1009df4:	10800017 	ldw	r2,0(r2)
 1009df8:	10800417 	ldw	r2,16(r2)
 1009dfc:	e13ffb17 	ldw	r4,-20(fp)
 1009e00:	103ee83a 	callr	r2
 1009e04:	e0bffe15 	stw	r2,-8(fp)
 1009e08:	00000106 	br	1009e10 <close+0x90>
 1009e0c:	e03ffe15 	stw	zero,-8(fp)
 1009e10:	e0bffe17 	ldw	r2,-8(fp)
 1009e14:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1009e18:	e13ffc17 	ldw	r4,-16(fp)
 1009e1c:	100a5d80 	call	100a5d8 <alt_release_fd>
    if (rval < 0)
 1009e20:	e0bffa17 	ldw	r2,-24(fp)
 1009e24:	1004403a 	cmpge	r2,r2,zero
 1009e28:	1000071e 	bne	r2,zero,1009e48 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1009e2c:	1009e800 	call	1009e80 <alt_get_errno>
 1009e30:	e0fffa17 	ldw	r3,-24(fp)
 1009e34:	00c7c83a 	sub	r3,zero,r3
 1009e38:	10c00015 	stw	r3,0(r2)
      return -1;
 1009e3c:	00bfffc4 	movi	r2,-1
 1009e40:	e0bffd15 	stw	r2,-12(fp)
 1009e44:	00000806 	br	1009e68 <close+0xe8>
    }
    return 0;
 1009e48:	e03ffd15 	stw	zero,-12(fp)
 1009e4c:	00000606 	br	1009e68 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009e50:	1009e800 	call	1009e80 <alt_get_errno>
 1009e54:	1007883a 	mov	r3,r2
 1009e58:	00801444 	movi	r2,81
 1009e5c:	18800015 	stw	r2,0(r3)
    return -1;
 1009e60:	00bfffc4 	movi	r2,-1
 1009e64:	e0bffd15 	stw	r2,-12(fp)
 1009e68:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1009e6c:	e037883a 	mov	sp,fp
 1009e70:	dfc00117 	ldw	ra,4(sp)
 1009e74:	df000017 	ldw	fp,0(sp)
 1009e78:	dec00204 	addi	sp,sp,8
 1009e7c:	f800283a 	ret

01009e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009e80:	defffd04 	addi	sp,sp,-12
 1009e84:	dfc00215 	stw	ra,8(sp)
 1009e88:	df000115 	stw	fp,4(sp)
 1009e8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009e90:	00804074 	movhi	r2,257
 1009e94:	10922f04 	addi	r2,r2,18620
 1009e98:	10800017 	ldw	r2,0(r2)
 1009e9c:	1005003a 	cmpeq	r2,r2,zero
 1009ea0:	1000061e 	bne	r2,zero,1009ebc <alt_get_errno+0x3c>
 1009ea4:	00804074 	movhi	r2,257
 1009ea8:	10922f04 	addi	r2,r2,18620
 1009eac:	10800017 	ldw	r2,0(r2)
 1009eb0:	103ee83a 	callr	r2
 1009eb4:	e0bfff15 	stw	r2,-4(fp)
 1009eb8:	00000306 	br	1009ec8 <alt_get_errno+0x48>
 1009ebc:	00804074 	movhi	r2,257
 1009ec0:	1098e704 	addi	r2,r2,25500
 1009ec4:	e0bfff15 	stw	r2,-4(fp)
 1009ec8:	e0bfff17 	ldw	r2,-4(fp)
}
 1009ecc:	e037883a 	mov	sp,fp
 1009ed0:	dfc00117 	ldw	ra,4(sp)
 1009ed4:	df000017 	ldw	fp,0(sp)
 1009ed8:	dec00204 	addi	sp,sp,8
 1009edc:	f800283a 	ret

01009ee0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1009ee0:	defffc04 	addi	sp,sp,-16
 1009ee4:	df000315 	stw	fp,12(sp)
 1009ee8:	df000304 	addi	fp,sp,12
 1009eec:	e13ffd15 	stw	r4,-12(fp)
 1009ef0:	e17ffe15 	stw	r5,-8(fp)
 1009ef4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1009ef8:	e0bfff17 	ldw	r2,-4(fp)
}
 1009efc:	e037883a 	mov	sp,fp
 1009f00:	df000017 	ldw	fp,0(sp)
 1009f04:	dec00104 	addi	sp,sp,4
 1009f08:	f800283a 	ret

01009f0c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1009f0c:	defff904 	addi	sp,sp,-28
 1009f10:	dfc00615 	stw	ra,24(sp)
 1009f14:	df000515 	stw	fp,20(sp)
 1009f18:	df000504 	addi	fp,sp,20
 1009f1c:	e13ffc15 	stw	r4,-16(fp)
 1009f20:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009f24:	e0bffc17 	ldw	r2,-16(fp)
 1009f28:	1004803a 	cmplt	r2,r2,zero
 1009f2c:	1000091e 	bne	r2,zero,1009f54 <fstat+0x48>
 1009f30:	e13ffc17 	ldw	r4,-16(fp)
 1009f34:	01400304 	movi	r5,12
 1009f38:	10096900 	call	1009690 <__mulsi3>
 1009f3c:	1007883a 	mov	r3,r2
 1009f40:	00804074 	movhi	r2,257
 1009f44:	108d9604 	addi	r2,r2,13912
 1009f48:	1887883a 	add	r3,r3,r2
 1009f4c:	e0ffff15 	stw	r3,-4(fp)
 1009f50:	00000106 	br	1009f58 <fstat+0x4c>
 1009f54:	e03fff15 	stw	zero,-4(fp)
 1009f58:	e0bfff17 	ldw	r2,-4(fp)
 1009f5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1009f60:	e0bffb17 	ldw	r2,-20(fp)
 1009f64:	1005003a 	cmpeq	r2,r2,zero
 1009f68:	1000121e 	bne	r2,zero,1009fb4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1009f6c:	e0bffb17 	ldw	r2,-20(fp)
 1009f70:	10800017 	ldw	r2,0(r2)
 1009f74:	10800817 	ldw	r2,32(r2)
 1009f78:	1005003a 	cmpeq	r2,r2,zero
 1009f7c:	1000081e 	bne	r2,zero,1009fa0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1009f80:	e0bffb17 	ldw	r2,-20(fp)
 1009f84:	10800017 	ldw	r2,0(r2)
 1009f88:	10800817 	ldw	r2,32(r2)
 1009f8c:	e13ffb17 	ldw	r4,-20(fp)
 1009f90:	e17ffd17 	ldw	r5,-12(fp)
 1009f94:	103ee83a 	callr	r2
 1009f98:	e0bffe15 	stw	r2,-8(fp)
 1009f9c:	00000b06 	br	1009fcc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1009fa0:	e0fffd17 	ldw	r3,-12(fp)
 1009fa4:	00880004 	movi	r2,8192
 1009fa8:	18800115 	stw	r2,4(r3)
      return 0;
 1009fac:	e03ffe15 	stw	zero,-8(fp)
 1009fb0:	00000606 	br	1009fcc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009fb4:	1009fe40 	call	1009fe4 <alt_get_errno>
 1009fb8:	1007883a 	mov	r3,r2
 1009fbc:	00801444 	movi	r2,81
 1009fc0:	18800015 	stw	r2,0(r3)
    return -1;
 1009fc4:	00bfffc4 	movi	r2,-1
 1009fc8:	e0bffe15 	stw	r2,-8(fp)
 1009fcc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1009fd0:	e037883a 	mov	sp,fp
 1009fd4:	dfc00117 	ldw	ra,4(sp)
 1009fd8:	df000017 	ldw	fp,0(sp)
 1009fdc:	dec00204 	addi	sp,sp,8
 1009fe0:	f800283a 	ret

01009fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009fe4:	defffd04 	addi	sp,sp,-12
 1009fe8:	dfc00215 	stw	ra,8(sp)
 1009fec:	df000115 	stw	fp,4(sp)
 1009ff0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009ff4:	00804074 	movhi	r2,257
 1009ff8:	10922f04 	addi	r2,r2,18620
 1009ffc:	10800017 	ldw	r2,0(r2)
 100a000:	1005003a 	cmpeq	r2,r2,zero
 100a004:	1000061e 	bne	r2,zero,100a020 <alt_get_errno+0x3c>
 100a008:	00804074 	movhi	r2,257
 100a00c:	10922f04 	addi	r2,r2,18620
 100a010:	10800017 	ldw	r2,0(r2)
 100a014:	103ee83a 	callr	r2
 100a018:	e0bfff15 	stw	r2,-4(fp)
 100a01c:	00000306 	br	100a02c <alt_get_errno+0x48>
 100a020:	00804074 	movhi	r2,257
 100a024:	1098e704 	addi	r2,r2,25500
 100a028:	e0bfff15 	stw	r2,-4(fp)
 100a02c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a030:	e037883a 	mov	sp,fp
 100a034:	dfc00117 	ldw	ra,4(sp)
 100a038:	df000017 	ldw	fp,0(sp)
 100a03c:	dec00204 	addi	sp,sp,8
 100a040:	f800283a 	ret

0100a044 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a044:	deffeb04 	addi	sp,sp,-84
 100a048:	dfc01415 	stw	ra,80(sp)
 100a04c:	df001315 	stw	fp,76(sp)
 100a050:	df001304 	addi	fp,sp,76
 100a054:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a058:	e0bffd17 	ldw	r2,-12(fp)
 100a05c:	1004803a 	cmplt	r2,r2,zero
 100a060:	1000091e 	bne	r2,zero,100a088 <isatty+0x44>
 100a064:	e13ffd17 	ldw	r4,-12(fp)
 100a068:	01400304 	movi	r5,12
 100a06c:	10096900 	call	1009690 <__mulsi3>
 100a070:	1007883a 	mov	r3,r2
 100a074:	00804074 	movhi	r2,257
 100a078:	108d9604 	addi	r2,r2,13912
 100a07c:	1887883a 	add	r3,r3,r2
 100a080:	e0ffff15 	stw	r3,-4(fp)
 100a084:	00000106 	br	100a08c <isatty+0x48>
 100a088:	e03fff15 	stw	zero,-4(fp)
 100a08c:	e0bfff17 	ldw	r2,-4(fp)
 100a090:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a094:	e0bfed17 	ldw	r2,-76(fp)
 100a098:	1005003a 	cmpeq	r2,r2,zero
 100a09c:	10000f1e 	bne	r2,zero,100a0dc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a0a0:	e0bfed17 	ldw	r2,-76(fp)
 100a0a4:	10800017 	ldw	r2,0(r2)
 100a0a8:	10800817 	ldw	r2,32(r2)
 100a0ac:	1004c03a 	cmpne	r2,r2,zero
 100a0b0:	1000031e 	bne	r2,zero,100a0c0 <isatty+0x7c>
    {
      return 1;
 100a0b4:	00800044 	movi	r2,1
 100a0b8:	e0bffe15 	stw	r2,-8(fp)
 100a0bc:	00000c06 	br	100a0f0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a0c0:	e17fee04 	addi	r5,fp,-72
 100a0c4:	e13ffd17 	ldw	r4,-12(fp)
 100a0c8:	1009f0c0 	call	1009f0c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a0cc:	e0bfef17 	ldw	r2,-68(fp)
 100a0d0:	10880020 	cmpeqi	r2,r2,8192
 100a0d4:	e0bffe15 	stw	r2,-8(fp)
 100a0d8:	00000506 	br	100a0f0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a0dc:	100a1080 	call	100a108 <alt_get_errno>
 100a0e0:	1007883a 	mov	r3,r2
 100a0e4:	00801444 	movi	r2,81
 100a0e8:	18800015 	stw	r2,0(r3)
    return 0;
 100a0ec:	e03ffe15 	stw	zero,-8(fp)
 100a0f0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a0f4:	e037883a 	mov	sp,fp
 100a0f8:	dfc00117 	ldw	ra,4(sp)
 100a0fc:	df000017 	ldw	fp,0(sp)
 100a100:	dec00204 	addi	sp,sp,8
 100a104:	f800283a 	ret

0100a108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a108:	defffd04 	addi	sp,sp,-12
 100a10c:	dfc00215 	stw	ra,8(sp)
 100a110:	df000115 	stw	fp,4(sp)
 100a114:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a118:	00804074 	movhi	r2,257
 100a11c:	10922f04 	addi	r2,r2,18620
 100a120:	10800017 	ldw	r2,0(r2)
 100a124:	1005003a 	cmpeq	r2,r2,zero
 100a128:	1000061e 	bne	r2,zero,100a144 <alt_get_errno+0x3c>
 100a12c:	00804074 	movhi	r2,257
 100a130:	10922f04 	addi	r2,r2,18620
 100a134:	10800017 	ldw	r2,0(r2)
 100a138:	103ee83a 	callr	r2
 100a13c:	e0bfff15 	stw	r2,-4(fp)
 100a140:	00000306 	br	100a150 <alt_get_errno+0x48>
 100a144:	00804074 	movhi	r2,257
 100a148:	1098e704 	addi	r2,r2,25500
 100a14c:	e0bfff15 	stw	r2,-4(fp)
 100a150:	e0bfff17 	ldw	r2,-4(fp)
}
 100a154:	e037883a 	mov	sp,fp
 100a158:	dfc00117 	ldw	ra,4(sp)
 100a15c:	df000017 	ldw	fp,0(sp)
 100a160:	dec00204 	addi	sp,sp,8
 100a164:	f800283a 	ret

0100a168 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a168:	defffe04 	addi	sp,sp,-8
 100a16c:	dfc00115 	stw	ra,4(sp)
 100a170:	df000015 	stw	fp,0(sp)
 100a174:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a178:	01004074 	movhi	r4,257
 100a17c:	21123404 	addi	r4,r4,18640
 100a180:	01404074 	movhi	r5,257
 100a184:	294b8704 	addi	r5,r5,11804
 100a188:	01804074 	movhi	r6,257
 100a18c:	31923404 	addi	r6,r6,18640
 100a190:	100a1e80 	call	100a1e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a194:	01004034 	movhi	r4,256
 100a198:	21000804 	addi	r4,r4,32
 100a19c:	01404034 	movhi	r5,256
 100a1a0:	29400804 	addi	r5,r5,32
 100a1a4:	01804034 	movhi	r6,256
 100a1a8:	31806d04 	addi	r6,r6,436
 100a1ac:	100a1e80 	call	100a1e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a1b0:	01004074 	movhi	r4,257
 100a1b4:	210a5f04 	addi	r4,r4,10620
 100a1b8:	01404074 	movhi	r5,257
 100a1bc:	294a5f04 	addi	r5,r5,10620
 100a1c0:	01804074 	movhi	r6,257
 100a1c4:	318b8704 	addi	r6,r6,11804
 100a1c8:	100a1e80 	call	100a1e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a1cc:	10100b00 	call	10100b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a1d0:	101033c0 	call	101033c <alt_icache_flush_all>
}
 100a1d4:	e037883a 	mov	sp,fp
 100a1d8:	dfc00117 	ldw	ra,4(sp)
 100a1dc:	df000017 	ldw	fp,0(sp)
 100a1e0:	dec00204 	addi	sp,sp,8
 100a1e4:	f800283a 	ret

0100a1e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a1e8:	defffc04 	addi	sp,sp,-16
 100a1ec:	df000315 	stw	fp,12(sp)
 100a1f0:	df000304 	addi	fp,sp,12
 100a1f4:	e13ffd15 	stw	r4,-12(fp)
 100a1f8:	e17ffe15 	stw	r5,-8(fp)
 100a1fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a200:	e0fffe17 	ldw	r3,-8(fp)
 100a204:	e0bffd17 	ldw	r2,-12(fp)
 100a208:	18800e26 	beq	r3,r2,100a244 <alt_load_section+0x5c>
  {
    while( to != end )
 100a20c:	00000a06 	br	100a238 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a210:	e0bffd17 	ldw	r2,-12(fp)
 100a214:	10c00017 	ldw	r3,0(r2)
 100a218:	e0bffe17 	ldw	r2,-8(fp)
 100a21c:	10c00015 	stw	r3,0(r2)
 100a220:	e0bffe17 	ldw	r2,-8(fp)
 100a224:	10800104 	addi	r2,r2,4
 100a228:	e0bffe15 	stw	r2,-8(fp)
 100a22c:	e0bffd17 	ldw	r2,-12(fp)
 100a230:	10800104 	addi	r2,r2,4
 100a234:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a238:	e0fffe17 	ldw	r3,-8(fp)
 100a23c:	e0bfff17 	ldw	r2,-4(fp)
 100a240:	18bff31e 	bne	r3,r2,100a210 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a244:	e037883a 	mov	sp,fp
 100a248:	df000017 	ldw	fp,0(sp)
 100a24c:	dec00104 	addi	sp,sp,4
 100a250:	f800283a 	ret

0100a254 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a254:	defff804 	addi	sp,sp,-32
 100a258:	dfc00715 	stw	ra,28(sp)
 100a25c:	df000615 	stw	fp,24(sp)
 100a260:	df000604 	addi	fp,sp,24
 100a264:	e13ffc15 	stw	r4,-16(fp)
 100a268:	e17ffd15 	stw	r5,-12(fp)
 100a26c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a270:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a274:	e0bffc17 	ldw	r2,-16(fp)
 100a278:	1004803a 	cmplt	r2,r2,zero
 100a27c:	1000091e 	bne	r2,zero,100a2a4 <lseek+0x50>
 100a280:	e13ffc17 	ldw	r4,-16(fp)
 100a284:	01400304 	movi	r5,12
 100a288:	10096900 	call	1009690 <__mulsi3>
 100a28c:	1007883a 	mov	r3,r2
 100a290:	00804074 	movhi	r2,257
 100a294:	108d9604 	addi	r2,r2,13912
 100a298:	1887883a 	add	r3,r3,r2
 100a29c:	e0ffff15 	stw	r3,-4(fp)
 100a2a0:	00000106 	br	100a2a8 <lseek+0x54>
 100a2a4:	e03fff15 	stw	zero,-4(fp)
 100a2a8:	e0bfff17 	ldw	r2,-4(fp)
 100a2ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a2b0:	e0bffb17 	ldw	r2,-20(fp)
 100a2b4:	1005003a 	cmpeq	r2,r2,zero
 100a2b8:	1000111e 	bne	r2,zero,100a300 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a2bc:	e0bffb17 	ldw	r2,-20(fp)
 100a2c0:	10800017 	ldw	r2,0(r2)
 100a2c4:	10800717 	ldw	r2,28(r2)
 100a2c8:	1005003a 	cmpeq	r2,r2,zero
 100a2cc:	1000091e 	bne	r2,zero,100a2f4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a2d0:	e0bffb17 	ldw	r2,-20(fp)
 100a2d4:	10800017 	ldw	r2,0(r2)
 100a2d8:	10800717 	ldw	r2,28(r2)
 100a2dc:	e13ffb17 	ldw	r4,-20(fp)
 100a2e0:	e17ffd17 	ldw	r5,-12(fp)
 100a2e4:	e1bffe17 	ldw	r6,-8(fp)
 100a2e8:	103ee83a 	callr	r2
 100a2ec:	e0bffa15 	stw	r2,-24(fp)
 100a2f0:	00000506 	br	100a308 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a2f4:	00bfde84 	movi	r2,-134
 100a2f8:	e0bffa15 	stw	r2,-24(fp)
 100a2fc:	00000206 	br	100a308 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a300:	00bfebc4 	movi	r2,-81
 100a304:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a308:	e0bffa17 	ldw	r2,-24(fp)
 100a30c:	1004403a 	cmpge	r2,r2,zero
 100a310:	1000071e 	bne	r2,zero,100a330 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100a314:	100a3480 	call	100a348 <alt_get_errno>
 100a318:	1007883a 	mov	r3,r2
 100a31c:	e0bffa17 	ldw	r2,-24(fp)
 100a320:	0085c83a 	sub	r2,zero,r2
 100a324:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a328:	00bfffc4 	movi	r2,-1
 100a32c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a330:	e0bffa17 	ldw	r2,-24(fp)
}
 100a334:	e037883a 	mov	sp,fp
 100a338:	dfc00117 	ldw	ra,4(sp)
 100a33c:	df000017 	ldw	fp,0(sp)
 100a340:	dec00204 	addi	sp,sp,8
 100a344:	f800283a 	ret

0100a348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a348:	defffd04 	addi	sp,sp,-12
 100a34c:	dfc00215 	stw	ra,8(sp)
 100a350:	df000115 	stw	fp,4(sp)
 100a354:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a358:	00804074 	movhi	r2,257
 100a35c:	10922f04 	addi	r2,r2,18620
 100a360:	10800017 	ldw	r2,0(r2)
 100a364:	1005003a 	cmpeq	r2,r2,zero
 100a368:	1000061e 	bne	r2,zero,100a384 <alt_get_errno+0x3c>
 100a36c:	00804074 	movhi	r2,257
 100a370:	10922f04 	addi	r2,r2,18620
 100a374:	10800017 	ldw	r2,0(r2)
 100a378:	103ee83a 	callr	r2
 100a37c:	e0bfff15 	stw	r2,-4(fp)
 100a380:	00000306 	br	100a390 <alt_get_errno+0x48>
 100a384:	00804074 	movhi	r2,257
 100a388:	1098e704 	addi	r2,r2,25500
 100a38c:	e0bfff15 	stw	r2,-4(fp)
 100a390:	e0bfff17 	ldw	r2,-4(fp)
}
 100a394:	e037883a 	mov	sp,fp
 100a398:	dfc00117 	ldw	ra,4(sp)
 100a39c:	df000017 	ldw	fp,0(sp)
 100a3a0:	dec00204 	addi	sp,sp,8
 100a3a4:	f800283a 	ret

0100a3a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a3a8:	defffd04 	addi	sp,sp,-12
 100a3ac:	dfc00215 	stw	ra,8(sp)
 100a3b0:	df000115 	stw	fp,4(sp)
 100a3b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a3b8:	0009883a 	mov	r4,zero
 100a3bc:	100a8900 	call	100a890 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a3c0:	100a8c40 	call	100a8c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a3c4:	01004074 	movhi	r4,257
 100a3c8:	210b4304 	addi	r4,r4,11532
 100a3cc:	01404074 	movhi	r5,257
 100a3d0:	294b4304 	addi	r5,r5,11532
 100a3d4:	01804074 	movhi	r6,257
 100a3d8:	318b4304 	addi	r6,r6,11532
 100a3dc:	10106fc0 	call	10106fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a3e0:	10101e00 	call	10101e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a3e4:	01004074 	movhi	r4,257
 100a3e8:	21009104 	addi	r4,r4,580
 100a3ec:	1010e840 	call	1010e84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a3f0:	d126c417 	ldw	r4,-25840(gp)
 100a3f4:	d166c517 	ldw	r5,-25836(gp)
 100a3f8:	d1a6c617 	ldw	r6,-25832(gp)
 100a3fc:	10001f00 	call	10001f0 <main>
 100a400:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a404:	01000044 	movi	r4,1
 100a408:	1009d800 	call	1009d80 <close>
  exit (result);
 100a40c:	e13fff17 	ldw	r4,-4(fp)
 100a410:	1010e980 	call	1010e98 <exit>

0100a414 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a414:	defffe04 	addi	sp,sp,-8
 100a418:	df000115 	stw	fp,4(sp)
 100a41c:	df000104 	addi	fp,sp,4
 100a420:	e13fff15 	stw	r4,-4(fp)
}
 100a424:	e037883a 	mov	sp,fp
 100a428:	df000017 	ldw	fp,0(sp)
 100a42c:	dec00104 	addi	sp,sp,4
 100a430:	f800283a 	ret

0100a434 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a434:	defffe04 	addi	sp,sp,-8
 100a438:	df000115 	stw	fp,4(sp)
 100a43c:	df000104 	addi	fp,sp,4
 100a440:	e13fff15 	stw	r4,-4(fp)
}
 100a444:	e037883a 	mov	sp,fp
 100a448:	df000017 	ldw	fp,0(sp)
 100a44c:	dec00104 	addi	sp,sp,4
 100a450:	f800283a 	ret

0100a454 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a454:	defff704 	addi	sp,sp,-36
 100a458:	dfc00815 	stw	ra,32(sp)
 100a45c:	df000715 	stw	fp,28(sp)
 100a460:	df000704 	addi	fp,sp,28
 100a464:	e13ffb15 	stw	r4,-20(fp)
 100a468:	e17ffc15 	stw	r5,-16(fp)
 100a46c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a470:	e0bffb17 	ldw	r2,-20(fp)
 100a474:	1004803a 	cmplt	r2,r2,zero
 100a478:	1000091e 	bne	r2,zero,100a4a0 <read+0x4c>
 100a47c:	e13ffb17 	ldw	r4,-20(fp)
 100a480:	01400304 	movi	r5,12
 100a484:	10096900 	call	1009690 <__mulsi3>
 100a488:	1007883a 	mov	r3,r2
 100a48c:	00804074 	movhi	r2,257
 100a490:	108d9604 	addi	r2,r2,13912
 100a494:	1887883a 	add	r3,r3,r2
 100a498:	e0ffff15 	stw	r3,-4(fp)
 100a49c:	00000106 	br	100a4a4 <read+0x50>
 100a4a0:	e03fff15 	stw	zero,-4(fp)
 100a4a4:	e0bfff17 	ldw	r2,-4(fp)
 100a4a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a4ac:	e0bffa17 	ldw	r2,-24(fp)
 100a4b0:	1005003a 	cmpeq	r2,r2,zero
 100a4b4:	1000241e 	bne	r2,zero,100a548 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a4b8:	e0bffa17 	ldw	r2,-24(fp)
 100a4bc:	10800217 	ldw	r2,8(r2)
 100a4c0:	108000cc 	andi	r2,r2,3
 100a4c4:	10800060 	cmpeqi	r2,r2,1
 100a4c8:	10001a1e 	bne	r2,zero,100a534 <read+0xe0>
 100a4cc:	e0bffa17 	ldw	r2,-24(fp)
 100a4d0:	10800017 	ldw	r2,0(r2)
 100a4d4:	10800517 	ldw	r2,20(r2)
 100a4d8:	1005003a 	cmpeq	r2,r2,zero
 100a4dc:	1000151e 	bne	r2,zero,100a534 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a4e0:	e0bffa17 	ldw	r2,-24(fp)
 100a4e4:	10800017 	ldw	r2,0(r2)
 100a4e8:	10800517 	ldw	r2,20(r2)
 100a4ec:	e17ffc17 	ldw	r5,-16(fp)
 100a4f0:	e1bffd17 	ldw	r6,-12(fp)
 100a4f4:	e13ffa17 	ldw	r4,-24(fp)
 100a4f8:	103ee83a 	callr	r2
 100a4fc:	e0bff915 	stw	r2,-28(fp)
 100a500:	e0bff917 	ldw	r2,-28(fp)
 100a504:	1004403a 	cmpge	r2,r2,zero
 100a508:	1000071e 	bne	r2,zero,100a528 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100a50c:	100a5780 	call	100a578 <alt_get_errno>
 100a510:	e0fff917 	ldw	r3,-28(fp)
 100a514:	00c7c83a 	sub	r3,zero,r3
 100a518:	10c00015 	stw	r3,0(r2)
          return -1;
 100a51c:	00bfffc4 	movi	r2,-1
 100a520:	e0bffe15 	stw	r2,-8(fp)
 100a524:	00000e06 	br	100a560 <read+0x10c>
        }
        return rval;
 100a528:	e0bff917 	ldw	r2,-28(fp)
 100a52c:	e0bffe15 	stw	r2,-8(fp)
 100a530:	00000b06 	br	100a560 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a534:	100a5780 	call	100a578 <alt_get_errno>
 100a538:	1007883a 	mov	r3,r2
 100a53c:	00800344 	movi	r2,13
 100a540:	18800015 	stw	r2,0(r3)
 100a544:	00000406 	br	100a558 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a548:	100a5780 	call	100a578 <alt_get_errno>
 100a54c:	1007883a 	mov	r3,r2
 100a550:	00801444 	movi	r2,81
 100a554:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a558:	00bfffc4 	movi	r2,-1
 100a55c:	e0bffe15 	stw	r2,-8(fp)
 100a560:	e0bffe17 	ldw	r2,-8(fp)
}
 100a564:	e037883a 	mov	sp,fp
 100a568:	dfc00117 	ldw	ra,4(sp)
 100a56c:	df000017 	ldw	fp,0(sp)
 100a570:	dec00204 	addi	sp,sp,8
 100a574:	f800283a 	ret

0100a578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a578:	defffd04 	addi	sp,sp,-12
 100a57c:	dfc00215 	stw	ra,8(sp)
 100a580:	df000115 	stw	fp,4(sp)
 100a584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a588:	00804074 	movhi	r2,257
 100a58c:	10922f04 	addi	r2,r2,18620
 100a590:	10800017 	ldw	r2,0(r2)
 100a594:	1005003a 	cmpeq	r2,r2,zero
 100a598:	1000061e 	bne	r2,zero,100a5b4 <alt_get_errno+0x3c>
 100a59c:	00804074 	movhi	r2,257
 100a5a0:	10922f04 	addi	r2,r2,18620
 100a5a4:	10800017 	ldw	r2,0(r2)
 100a5a8:	103ee83a 	callr	r2
 100a5ac:	e0bfff15 	stw	r2,-4(fp)
 100a5b0:	00000306 	br	100a5c0 <alt_get_errno+0x48>
 100a5b4:	00804074 	movhi	r2,257
 100a5b8:	1098e704 	addi	r2,r2,25500
 100a5bc:	e0bfff15 	stw	r2,-4(fp)
 100a5c0:	e0bfff17 	ldw	r2,-4(fp)
}
 100a5c4:	e037883a 	mov	sp,fp
 100a5c8:	dfc00117 	ldw	ra,4(sp)
 100a5cc:	df000017 	ldw	fp,0(sp)
 100a5d0:	dec00204 	addi	sp,sp,8
 100a5d4:	f800283a 	ret

0100a5d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a5d8:	defffc04 	addi	sp,sp,-16
 100a5dc:	dfc00315 	stw	ra,12(sp)
 100a5e0:	df000215 	stw	fp,8(sp)
 100a5e4:	dc000115 	stw	r16,4(sp)
 100a5e8:	df000104 	addi	fp,sp,4
 100a5ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a5f0:	e0bfff17 	ldw	r2,-4(fp)
 100a5f4:	108000d0 	cmplti	r2,r2,3
 100a5f8:	10000f1e 	bne	r2,zero,100a638 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a5fc:	e13fff17 	ldw	r4,-4(fp)
 100a600:	04004074 	movhi	r16,257
 100a604:	840d9604 	addi	r16,r16,13912
 100a608:	01400304 	movi	r5,12
 100a60c:	10096900 	call	1009690 <__mulsi3>
 100a610:	1405883a 	add	r2,r2,r16
 100a614:	10800204 	addi	r2,r2,8
 100a618:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a61c:	e13fff17 	ldw	r4,-4(fp)
 100a620:	04004074 	movhi	r16,257
 100a624:	840d9604 	addi	r16,r16,13912
 100a628:	01400304 	movi	r5,12
 100a62c:	10096900 	call	1009690 <__mulsi3>
 100a630:	1405883a 	add	r2,r2,r16
 100a634:	10000015 	stw	zero,0(r2)
  }
}
 100a638:	e037883a 	mov	sp,fp
 100a63c:	dfc00217 	ldw	ra,8(sp)
 100a640:	df000117 	ldw	fp,4(sp)
 100a644:	dc000017 	ldw	r16,0(sp)
 100a648:	dec00304 	addi	sp,sp,12
 100a64c:	f800283a 	ret

0100a650 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a650:	defff804 	addi	sp,sp,-32
 100a654:	df000715 	stw	fp,28(sp)
 100a658:	df000704 	addi	fp,sp,28
 100a65c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a660:	0005303a 	rdctl	r2,status
 100a664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a668:	e0fffb17 	ldw	r3,-20(fp)
 100a66c:	00bfff84 	movi	r2,-2
 100a670:	1884703a 	and	r2,r3,r2
 100a674:	1001703a 	wrctl	status,r2
  
  return context;
 100a678:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a67c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a680:	d0a00c17 	ldw	r2,-32720(gp)
 100a684:	10c000c4 	addi	r3,r2,3
 100a688:	00bfff04 	movi	r2,-4
 100a68c:	1884703a 	and	r2,r3,r2
 100a690:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a694:	d0e00c17 	ldw	r3,-32720(gp)
 100a698:	e0bffe17 	ldw	r2,-8(fp)
 100a69c:	1887883a 	add	r3,r3,r2
 100a6a0:	00806034 	movhi	r2,384
 100a6a4:	10800004 	addi	r2,r2,0
 100a6a8:	10c0072e 	bgeu	r2,r3,100a6c8 <sbrk+0x78>
 100a6ac:	e0bffd17 	ldw	r2,-12(fp)
 100a6b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a6b4:	e0bffa17 	ldw	r2,-24(fp)
 100a6b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a6bc:	00bfffc4 	movi	r2,-1
 100a6c0:	e0bfff15 	stw	r2,-4(fp)
 100a6c4:	00000c06 	br	100a6f8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a6c8:	d0a00c17 	ldw	r2,-32720(gp)
 100a6cc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a6d0:	d0e00c17 	ldw	r3,-32720(gp)
 100a6d4:	e0bffe17 	ldw	r2,-8(fp)
 100a6d8:	1885883a 	add	r2,r3,r2
 100a6dc:	d0a00c15 	stw	r2,-32720(gp)
 100a6e0:	e0bffd17 	ldw	r2,-12(fp)
 100a6e4:	e0bff915 	stw	r2,-28(fp)
 100a6e8:	e0bff917 	ldw	r2,-28(fp)
 100a6ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a6f0:	e0bffc17 	ldw	r2,-16(fp)
 100a6f4:	e0bfff15 	stw	r2,-4(fp)
 100a6f8:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a6fc:	e037883a 	mov	sp,fp
 100a700:	df000017 	ldw	fp,0(sp)
 100a704:	dec00104 	addi	sp,sp,4
 100a708:	f800283a 	ret

0100a70c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a70c:	defff704 	addi	sp,sp,-36
 100a710:	dfc00815 	stw	ra,32(sp)
 100a714:	df000715 	stw	fp,28(sp)
 100a718:	df000704 	addi	fp,sp,28
 100a71c:	e13ffb15 	stw	r4,-20(fp)
 100a720:	e17ffc15 	stw	r5,-16(fp)
 100a724:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a728:	e0bffb17 	ldw	r2,-20(fp)
 100a72c:	1004803a 	cmplt	r2,r2,zero
 100a730:	1000091e 	bne	r2,zero,100a758 <write+0x4c>
 100a734:	e13ffb17 	ldw	r4,-20(fp)
 100a738:	01400304 	movi	r5,12
 100a73c:	10096900 	call	1009690 <__mulsi3>
 100a740:	1007883a 	mov	r3,r2
 100a744:	00804074 	movhi	r2,257
 100a748:	108d9604 	addi	r2,r2,13912
 100a74c:	1887883a 	add	r3,r3,r2
 100a750:	e0ffff15 	stw	r3,-4(fp)
 100a754:	00000106 	br	100a75c <write+0x50>
 100a758:	e03fff15 	stw	zero,-4(fp)
 100a75c:	e0bfff17 	ldw	r2,-4(fp)
 100a760:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a764:	e0bffa17 	ldw	r2,-24(fp)
 100a768:	1005003a 	cmpeq	r2,r2,zero
 100a76c:	1000241e 	bne	r2,zero,100a800 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a770:	e0bffa17 	ldw	r2,-24(fp)
 100a774:	10800217 	ldw	r2,8(r2)
 100a778:	108000cc 	andi	r2,r2,3
 100a77c:	1005003a 	cmpeq	r2,r2,zero
 100a780:	10001a1e 	bne	r2,zero,100a7ec <write+0xe0>
 100a784:	e0bffa17 	ldw	r2,-24(fp)
 100a788:	10800017 	ldw	r2,0(r2)
 100a78c:	10800617 	ldw	r2,24(r2)
 100a790:	1005003a 	cmpeq	r2,r2,zero
 100a794:	1000151e 	bne	r2,zero,100a7ec <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100a798:	e0bffa17 	ldw	r2,-24(fp)
 100a79c:	10800017 	ldw	r2,0(r2)
 100a7a0:	10800617 	ldw	r2,24(r2)
 100a7a4:	e17ffc17 	ldw	r5,-16(fp)
 100a7a8:	e1bffd17 	ldw	r6,-12(fp)
 100a7ac:	e13ffa17 	ldw	r4,-24(fp)
 100a7b0:	103ee83a 	callr	r2
 100a7b4:	e0bff915 	stw	r2,-28(fp)
 100a7b8:	e0bff917 	ldw	r2,-28(fp)
 100a7bc:	1004403a 	cmpge	r2,r2,zero
 100a7c0:	1000071e 	bne	r2,zero,100a7e0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100a7c4:	100a8300 	call	100a830 <alt_get_errno>
 100a7c8:	e0fff917 	ldw	r3,-28(fp)
 100a7cc:	00c7c83a 	sub	r3,zero,r3
 100a7d0:	10c00015 	stw	r3,0(r2)
        return -1;
 100a7d4:	00bfffc4 	movi	r2,-1
 100a7d8:	e0bffe15 	stw	r2,-8(fp)
 100a7dc:	00000e06 	br	100a818 <write+0x10c>
      }
      return rval;
 100a7e0:	e0bff917 	ldw	r2,-28(fp)
 100a7e4:	e0bffe15 	stw	r2,-8(fp)
 100a7e8:	00000b06 	br	100a818 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100a7ec:	100a8300 	call	100a830 <alt_get_errno>
 100a7f0:	1007883a 	mov	r3,r2
 100a7f4:	00800344 	movi	r2,13
 100a7f8:	18800015 	stw	r2,0(r3)
 100a7fc:	00000406 	br	100a810 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100a800:	100a8300 	call	100a830 <alt_get_errno>
 100a804:	1007883a 	mov	r3,r2
 100a808:	00801444 	movi	r2,81
 100a80c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a810:	00bfffc4 	movi	r2,-1
 100a814:	e0bffe15 	stw	r2,-8(fp)
 100a818:	e0bffe17 	ldw	r2,-8(fp)
}
 100a81c:	e037883a 	mov	sp,fp
 100a820:	dfc00117 	ldw	ra,4(sp)
 100a824:	df000017 	ldw	fp,0(sp)
 100a828:	dec00204 	addi	sp,sp,8
 100a82c:	f800283a 	ret

0100a830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a830:	defffd04 	addi	sp,sp,-12
 100a834:	dfc00215 	stw	ra,8(sp)
 100a838:	df000115 	stw	fp,4(sp)
 100a83c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a840:	00804074 	movhi	r2,257
 100a844:	10922f04 	addi	r2,r2,18620
 100a848:	10800017 	ldw	r2,0(r2)
 100a84c:	1005003a 	cmpeq	r2,r2,zero
 100a850:	1000061e 	bne	r2,zero,100a86c <alt_get_errno+0x3c>
 100a854:	00804074 	movhi	r2,257
 100a858:	10922f04 	addi	r2,r2,18620
 100a85c:	10800017 	ldw	r2,0(r2)
 100a860:	103ee83a 	callr	r2
 100a864:	e0bfff15 	stw	r2,-4(fp)
 100a868:	00000306 	br	100a878 <alt_get_errno+0x48>
 100a86c:	00804074 	movhi	r2,257
 100a870:	1098e704 	addi	r2,r2,25500
 100a874:	e0bfff15 	stw	r2,-4(fp)
 100a878:	e0bfff17 	ldw	r2,-4(fp)
}
 100a87c:	e037883a 	mov	sp,fp
 100a880:	dfc00117 	ldw	ra,4(sp)
 100a884:	df000017 	ldw	fp,0(sp)
 100a888:	dec00204 	addi	sp,sp,8
 100a88c:	f800283a 	ret

0100a890 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100a890:	defffd04 	addi	sp,sp,-12
 100a894:	dfc00215 	stw	ra,8(sp)
 100a898:	df000115 	stw	fp,4(sp)
 100a89c:	df000104 	addi	fp,sp,4
 100a8a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100a8a4:	1010bfc0 	call	1010bfc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100a8a8:	00800044 	movi	r2,1
 100a8ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100a8b0:	e037883a 	mov	sp,fp
 100a8b4:	dfc00117 	ldw	ra,4(sp)
 100a8b8:	df000017 	ldw	fp,0(sp)
 100a8bc:	dec00204 	addi	sp,sp,8
 100a8c0:	f800283a 	ret

0100a8c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100a8c4:	defffe04 	addi	sp,sp,-8
 100a8c8:	dfc00115 	stw	ra,4(sp)
 100a8cc:	df000015 	stw	fp,0(sp)
 100a8d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100a8d4:	01004074 	movhi	r4,257
 100a8d8:	210e0004 	addi	r4,r4,14336
 100a8dc:	000b883a 	mov	r5,zero
 100a8e0:	01800144 	movi	r6,5
 100a8e4:	100f0c80 	call	100f0c8 <altera_avalon_jtag_uart_init>
 100a8e8:	01004074 	movhi	r4,257
 100a8ec:	210df604 	addi	r4,r4,14296
 100a8f0:	100a92c0 	call	100a92c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100a8f4:	01004074 	movhi	r4,257
 100a8f8:	21120e04 	addi	r4,r4,18488
 100a8fc:	100fadc0 	call	100fadc <alt_up_character_lcd_init>
 100a900:	01004074 	movhi	r4,257
 100a904:	21120e04 	addi	r4,r4,18488
 100a908:	100a92c0 	call	100a92c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
 100a90c:	01004074 	movhi	r4,257
 100a910:	21121904 	addi	r4,r4,18532
 100a914:	100a92c0 	call	100a92c <alt_dev_reg>
}
 100a918:	e037883a 	mov	sp,fp
 100a91c:	dfc00117 	ldw	ra,4(sp)
 100a920:	df000017 	ldw	fp,0(sp)
 100a924:	dec00204 	addi	sp,sp,8
 100a928:	f800283a 	ret

0100a92c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100a92c:	defffd04 	addi	sp,sp,-12
 100a930:	dfc00215 	stw	ra,8(sp)
 100a934:	df000115 	stw	fp,4(sp)
 100a938:	df000104 	addi	fp,sp,4
 100a93c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100a940:	e13fff17 	ldw	r4,-4(fp)
 100a944:	01404074 	movhi	r5,257
 100a948:	29522c04 	addi	r5,r5,18608
 100a94c:	10100cc0 	call	10100cc <alt_dev_llist_insert>
}
 100a950:	e037883a 	mov	sp,fp
 100a954:	dfc00117 	ldw	ra,4(sp)
 100a958:	df000017 	ldw	fp,0(sp)
 100a95c:	dec00204 	addi	sp,sp,8
 100a960:	f800283a 	ret

0100a964 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 100a964:	defffa04 	addi	sp,sp,-24
 100a968:	dfc00515 	stw	ra,20(sp)
 100a96c:	df000415 	stw	fp,16(sp)
 100a970:	df000404 	addi	fp,sp,16
 100a974:	e13ffe15 	stw	r4,-8(fp)
 100a978:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100a97c:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 100a980:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100a984:	1005003a 	cmpeq	r2,r2,zero
 100a988:	1000221e 	bne	r2,zero,100aa14 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 100a98c:	00803fc4 	movi	r2,255
 100a990:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100a994:	d0a6cd17 	ldw	r2,-25804(gp)
 100a998:	1009883a 	mov	r4,r2
 100a99c:	e0fffe17 	ldw	r3,-8(fp)
 100a9a0:	e0bfff17 	ldw	r2,-4(fp)
 100a9a4:	1885883a 	add	r2,r3,r2
 100a9a8:	1006927a 	slli	r3,r2,9
 100a9ac:	2005883a 	mov	r2,r4
 100a9b0:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 100a9b4:	d0a6cc17 	ldw	r2,-25808(gp)
 100a9b8:	1007883a 	mov	r3,r2
 100a9bc:	00800604 	movi	r2,24
 100a9c0:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100a9c4:	d0a6c917 	ldw	r2,-25820(gp)
 100a9c8:	1080002b 	ldhuio	r2,0(r2)
 100a9cc:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 100a9d0:	e0bffc0b 	ldhu	r2,-16(fp)
 100a9d4:	10bfffcc 	andi	r2,r2,65535
 100a9d8:	1080010c 	andi	r2,r2,4
 100a9dc:	1004c03a 	cmpne	r2,r2,zero
 100a9e0:	103ff81e 	bne	r2,zero,100a9c4 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100a9e4:	e0bffc0b 	ldhu	r2,-16(fp)
 100a9e8:	10bfffcc 	andi	r2,r2,65535
 100a9ec:	1080040c 	andi	r2,r2,16
 100a9f0:	1004c03a 	cmpne	r2,r2,zero
 100a9f4:	1000071e 	bne	r2,zero,100aa14 <Write_Sector_Data+0xb0>
			result = true;
 100a9f8:	00800044 	movi	r2,1
 100a9fc:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 100aa00:	d026d215 	stw	zero,-25784(gp)
			current_sector_index = sector_index + partition_offset;
 100aa04:	e0fffe17 	ldw	r3,-8(fp)
 100aa08:	e0bfff17 	ldw	r2,-4(fp)
 100aa0c:	1885883a 	add	r2,r3,r2
 100aa10:	d0a6d315 	stw	r2,-25780(gp)
		}
	}
	return result;
 100aa14:	e0bffd17 	ldw	r2,-12(fp)
}
 100aa18:	e037883a 	mov	sp,fp
 100aa1c:	dfc00117 	ldw	ra,4(sp)
 100aa20:	df000017 	ldw	fp,0(sp)
 100aa24:	dec00204 	addi	sp,sp,8
 100aa28:	f800283a 	ret

0100aa2c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 100aa2c:	defffd04 	addi	sp,sp,-12
 100aa30:	dfc00215 	stw	ra,8(sp)
 100aa34:	df000115 	stw	fp,4(sp)
 100aa38:	df000104 	addi	fp,sp,4
	bool result = true;
 100aa3c:	00800044 	movi	r2,1
 100aa40:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 100aa44:	d0a6d217 	ldw	r2,-25784(gp)
 100aa48:	1005003a 	cmpeq	r2,r2,zero
 100aa4c:	1000051e 	bne	r2,zero,100aa64 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 100aa50:	d0a6d317 	ldw	r2,-25780(gp)
 100aa54:	1009883a 	mov	r4,r2
 100aa58:	000b883a 	mov	r5,zero
 100aa5c:	100a9640 	call	100a964 <Write_Sector_Data>
 100aa60:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 100aa64:	e0bfff17 	ldw	r2,-4(fp)
}
 100aa68:	e037883a 	mov	sp,fp
 100aa6c:	dfc00117 	ldw	ra,4(sp)
 100aa70:	df000017 	ldw	fp,0(sp)
 100aa74:	dec00204 	addi	sp,sp,8
 100aa78:	f800283a 	ret

0100aa7c <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100aa7c:	defff904 	addi	sp,sp,-28
 100aa80:	dfc00615 	stw	ra,24(sp)
 100aa84:	df000515 	stw	fp,20(sp)
 100aa88:	df000504 	addi	fp,sp,20
 100aa8c:	e13ffd15 	stw	r4,-12(fp)
 100aa90:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100aa94:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100aa98:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100aa9c:	1005003a 	cmpeq	r2,r2,zero
 100aaa0:	10002d1e 	bne	r2,zero,100ab58 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 100aaa4:	00803fc4 	movi	r2,255
 100aaa8:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100aaac:	d0a6d217 	ldw	r2,-25784(gp)
 100aab0:	1005003a 	cmpeq	r2,r2,zero
 100aab4:	1000081e 	bne	r2,zero,100aad8 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100aab8:	d0a6d317 	ldw	r2,-25780(gp)
 100aabc:	1009883a 	mov	r4,r2
 100aac0:	000b883a 	mov	r5,zero
 100aac4:	100a9640 	call	100a964 <Write_Sector_Data>
 100aac8:	1004c03a 	cmpne	r2,r2,zero
 100aacc:	1000021e 	bne	r2,zero,100aad8 <Read_Sector_Data+0x5c>
				return false;
 100aad0:	e03fff15 	stw	zero,-4(fp)
 100aad4:	00002206 	br	100ab60 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100aad8:	d0a6cd17 	ldw	r2,-25804(gp)
 100aadc:	1009883a 	mov	r4,r2
 100aae0:	e0fffd17 	ldw	r3,-12(fp)
 100aae4:	e0bffe17 	ldw	r2,-8(fp)
 100aae8:	1885883a 	add	r2,r3,r2
 100aaec:	1006927a 	slli	r3,r2,9
 100aaf0:	2005883a 	mov	r2,r4
 100aaf4:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100aaf8:	d0a6cc17 	ldw	r2,-25808(gp)
 100aafc:	1007883a 	mov	r3,r2
 100ab00:	00800444 	movi	r2,17
 100ab04:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100ab08:	d0a6c917 	ldw	r2,-25820(gp)
 100ab0c:	1080002b 	ldhuio	r2,0(r2)
 100ab10:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100ab14:	e0bffb0b 	ldhu	r2,-20(fp)
 100ab18:	10bfffcc 	andi	r2,r2,65535
 100ab1c:	1080010c 	andi	r2,r2,4
 100ab20:	1004c03a 	cmpne	r2,r2,zero
 100ab24:	103ff81e 	bne	r2,zero,100ab08 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100ab28:	e0bffb0b 	ldhu	r2,-20(fp)
 100ab2c:	10bfffcc 	andi	r2,r2,65535
 100ab30:	1080040c 	andi	r2,r2,16
 100ab34:	1004c03a 	cmpne	r2,r2,zero
 100ab38:	1000071e 	bne	r2,zero,100ab58 <Read_Sector_Data+0xdc>
			result = true;
 100ab3c:	00800044 	movi	r2,1
 100ab40:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100ab44:	d026d215 	stw	zero,-25784(gp)
			current_sector_index = sector_index + partition_offset;
 100ab48:	e0fffd17 	ldw	r3,-12(fp)
 100ab4c:	e0bffe17 	ldw	r2,-8(fp)
 100ab50:	1885883a 	add	r2,r3,r2
 100ab54:	d0a6d315 	stw	r2,-25780(gp)
		}
	}
	return result;
 100ab58:	e0bffc17 	ldw	r2,-16(fp)
 100ab5c:	e0bfff15 	stw	r2,-4(fp)
 100ab60:	e0bfff17 	ldw	r2,-4(fp)
}
 100ab64:	e037883a 	mov	sp,fp
 100ab68:	dfc00117 	ldw	ra,4(sp)
 100ab6c:	df000017 	ldw	fp,0(sp)
 100ab70:	dec00204 	addi	sp,sp,8
 100ab74:	f800283a 	ret

0100ab78 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 100ab78:	defffa04 	addi	sp,sp,-24
 100ab7c:	dfc00515 	stw	ra,20(sp)
 100ab80:	df000415 	stw	fp,16(sp)
 100ab84:	df000404 	addi	fp,sp,16
 100ab88:	e13ffd15 	stw	r4,-12(fp)
 100ab8c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100ab90:	e0bffd17 	ldw	r2,-12(fp)
 100ab94:	1006d23a 	srli	r3,r2,8
 100ab98:	d0a6cf17 	ldw	r2,-25796(gp)
 100ab9c:	1885883a 	add	r2,r3,r2
 100aba0:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100aba4:	00804074 	movhi	r2,257
 100aba8:	10990a04 	addi	r2,r2,25640
 100abac:	10c01117 	ldw	r3,68(r2)
 100abb0:	e0bffc17 	ldw	r2,-16(fp)
 100abb4:	10c5883a 	add	r2,r2,r3
 100abb8:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 100abbc:	d0e6d317 	ldw	r3,-25780(gp)
 100abc0:	e0bffc17 	ldw	r2,-16(fp)
 100abc4:	10c00726 	beq	r2,r3,100abe4 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100abc8:	e13ffc17 	ldw	r4,-16(fp)
 100abcc:	000b883a 	mov	r5,zero
 100abd0:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100abd4:	1004c03a 	cmpne	r2,r2,zero
 100abd8:	1000021e 	bne	r2,zero,100abe4 <get_cluster_flag+0x6c>
			return false;
 100abdc:	e03fff15 	stw	zero,-4(fp)
 100abe0:	00000d06 	br	100ac18 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 100abe4:	d0a6d117 	ldw	r2,-25788(gp)
 100abe8:	10800a17 	ldw	r2,40(r2)
 100abec:	1007883a 	mov	r3,r2
 100abf0:	e0bffd17 	ldw	r2,-12(fp)
 100abf4:	10803fcc 	andi	r2,r2,255
 100abf8:	1085883a 	add	r2,r2,r2
 100abfc:	1885883a 	add	r2,r3,r2
 100ac00:	1080002b 	ldhuio	r2,0(r2)
 100ac04:	1007883a 	mov	r3,r2
 100ac08:	e0bffe17 	ldw	r2,-8(fp)
 100ac0c:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 100ac10:	00800044 	movi	r2,1
 100ac14:	e0bfff15 	stw	r2,-4(fp)
 100ac18:	e0bfff17 	ldw	r2,-4(fp)
}
 100ac1c:	e037883a 	mov	sp,fp
 100ac20:	dfc00117 	ldw	ra,4(sp)
 100ac24:	df000017 	ldw	fp,0(sp)
 100ac28:	dec00204 	addi	sp,sp,8
 100ac2c:	f800283a 	ret

0100ac30 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 100ac30:	defff904 	addi	sp,sp,-28
 100ac34:	dfc00615 	stw	ra,24(sp)
 100ac38:	df000515 	stw	fp,20(sp)
 100ac3c:	df000504 	addi	fp,sp,20
 100ac40:	e13ffc15 	stw	r4,-16(fp)
 100ac44:	e1bffe15 	stw	r6,-8(fp)
 100ac48:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100ac4c:	e0bffc17 	ldw	r2,-16(fp)
 100ac50:	1006d23a 	srli	r3,r2,8
 100ac54:	d0a6cf17 	ldw	r2,-25796(gp)
 100ac58:	1885883a 	add	r2,r3,r2
 100ac5c:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 100ac60:	e0bffe17 	ldw	r2,-8(fp)
 100ac64:	1005003a 	cmpeq	r2,r2,zero
 100ac68:	1000071e 	bne	r2,zero,100ac88 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100ac6c:	00804074 	movhi	r2,257
 100ac70:	10990a04 	addi	r2,r2,25640
 100ac74:	10c01117 	ldw	r3,68(r2)
 100ac78:	e0bffb17 	ldw	r2,-20(fp)
 100ac7c:	10c5883a 	add	r2,r2,r3
 100ac80:	e0bffb15 	stw	r2,-20(fp)
 100ac84:	00000606 	br	100aca0 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 100ac88:	00804074 	movhi	r2,257
 100ac8c:	10990a04 	addi	r2,r2,25640
 100ac90:	10c01217 	ldw	r3,72(r2)
 100ac94:	e0bffb17 	ldw	r2,-20(fp)
 100ac98:	10c5883a 	add	r2,r2,r3
 100ac9c:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 100aca0:	d0e6d317 	ldw	r3,-25780(gp)
 100aca4:	e0bffb17 	ldw	r2,-20(fp)
 100aca8:	10c00726 	beq	r2,r3,100acc8 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100acac:	e13ffb17 	ldw	r4,-20(fp)
 100acb0:	000b883a 	mov	r5,zero
 100acb4:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100acb8:	1004c03a 	cmpne	r2,r2,zero
 100acbc:	1000021e 	bne	r2,zero,100acc8 <mark_cluster+0x98>
			return false;
 100acc0:	e03fff15 	stw	zero,-4(fp)
 100acc4:	00000d06 	br	100acfc <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 100acc8:	d0a6d117 	ldw	r2,-25788(gp)
 100accc:	10800a17 	ldw	r2,40(r2)
 100acd0:	1007883a 	mov	r3,r2
 100acd4:	e0bffc17 	ldw	r2,-16(fp)
 100acd8:	10803fcc 	andi	r2,r2,255
 100acdc:	1085883a 	add	r2,r2,r2
 100ace0:	1885883a 	add	r2,r3,r2
 100ace4:	e0fffd0f 	ldh	r3,-12(fp)
 100ace8:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 100acec:	00800044 	movi	r2,1
 100acf0:	d0a6d215 	stw	r2,-25784(gp)
	return true;
 100acf4:	00800044 	movi	r2,1
 100acf8:	e0bfff15 	stw	r2,-4(fp)
 100acfc:	e0bfff17 	ldw	r2,-4(fp)
}
 100ad00:	e037883a 	mov	sp,fp
 100ad04:	dfc00117 	ldw	ra,4(sp)
 100ad08:	df000017 	ldw	fp,0(sp)
 100ad0c:	dec00204 	addi	sp,sp,8
 100ad10:	f800283a 	ret

0100ad14 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 100ad14:	defff704 	addi	sp,sp,-36
 100ad18:	dfc00815 	stw	ra,32(sp)
 100ad1c:	df000715 	stw	fp,28(sp)
 100ad20:	df000704 	addi	fp,sp,28
	bool result = false;
 100ad24:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 100ad28:	0009883a 	mov	r4,zero
 100ad2c:	000b883a 	mov	r5,zero
 100ad30:	100eef00 	call	100eef0 <Read_Sector_Data_Attempt_CRC>
 100ad34:	1005003a 	cmpeq	r2,r2,zero
 100ad38:	10005c1e 	bne	r2,zero,100aeac <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 100ad3c:	d0a6d117 	ldw	r2,-25788(gp)
 100ad40:	10800a17 	ldw	r2,40(r2)
 100ad44:	10807f84 	addi	r2,r2,510
 100ad48:	1080002b 	ldhuio	r2,0(r2)
 100ad4c:	10bfffcc 	andi	r2,r2,65535
 100ad50:	10a0001c 	xori	r2,r2,32768
 100ad54:	10a00004 	addi	r2,r2,-32768
 100ad58:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 100ad5c:	e0bffd17 	ldw	r2,-12(fp)
 100ad60:	10ffffcc 	andi	r3,r2,65535
 100ad64:	00aa9554 	movui	r2,43605
 100ad68:	1880501e 	bne	r3,r2,100aeac <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100ad6c:	e03ffe15 	stw	zero,-8(fp)
 100ad70:	00004b06 	br	100aea0 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 100ad74:	e0bffe17 	ldw	r2,-8(fp)
 100ad78:	1004913a 	slli	r2,r2,4
 100ad7c:	10806f84 	addi	r2,r2,446
 100ad80:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 100ad84:	d0a6d117 	ldw	r2,-25788(gp)
 100ad88:	10800a17 	ldw	r2,40(r2)
 100ad8c:	1007883a 	mov	r3,r2
 100ad90:	e0bffa17 	ldw	r2,-24(fp)
 100ad94:	1885883a 	add	r2,r3,r2
 100ad98:	10800104 	addi	r2,r2,4
 100ad9c:	10800023 	ldbuio	r2,0(r2)
 100ada0:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 100ada4:	e0bff907 	ldb	r2,-28(fp)
 100ada8:	10800060 	cmpeqi	r2,r2,1
 100adac:	1000091e 	bne	r2,zero,100add4 <Check_for_Master_Boot_Record+0xc0>
 100adb0:	e0bff907 	ldb	r2,-28(fp)
 100adb4:	10800120 	cmpeqi	r2,r2,4
 100adb8:	1000061e 	bne	r2,zero,100add4 <Check_for_Master_Boot_Record+0xc0>
 100adbc:	e0bff907 	ldb	r2,-28(fp)
 100adc0:	108001a0 	cmpeqi	r2,r2,6
 100adc4:	1000031e 	bne	r2,zero,100add4 <Check_for_Master_Boot_Record+0xc0>
 100adc8:	e0bff907 	ldb	r2,-28(fp)
 100adcc:	10800398 	cmpnei	r2,r2,14
 100add0:	1000301e 	bne	r2,zero,100ae94 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 100add4:	d0a6d117 	ldw	r2,-25788(gp)
 100add8:	10800a17 	ldw	r2,40(r2)
 100addc:	1007883a 	mov	r3,r2
 100ade0:	e0bffa17 	ldw	r2,-24(fp)
 100ade4:	1885883a 	add	r2,r3,r2
 100ade8:	10800284 	addi	r2,r2,10
 100adec:	1080002b 	ldhuio	r2,0(r2)
 100adf0:	10bfffcc 	andi	r2,r2,65535
 100adf4:	1008943a 	slli	r4,r2,16
 100adf8:	d0a6d117 	ldw	r2,-25788(gp)
 100adfc:	10800a17 	ldw	r2,40(r2)
 100ae00:	1007883a 	mov	r3,r2
 100ae04:	e0bffa17 	ldw	r2,-24(fp)
 100ae08:	1885883a 	add	r2,r3,r2
 100ae0c:	10800204 	addi	r2,r2,8
 100ae10:	1080002b 	ldhuio	r2,0(r2)
 100ae14:	10bfffcc 	andi	r2,r2,65535
 100ae18:	2084b03a 	or	r2,r4,r2
 100ae1c:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 100ae20:	d0a6d117 	ldw	r2,-25788(gp)
 100ae24:	10800a17 	ldw	r2,40(r2)
 100ae28:	1007883a 	mov	r3,r2
 100ae2c:	e0bffa17 	ldw	r2,-24(fp)
 100ae30:	1885883a 	add	r2,r3,r2
 100ae34:	10800384 	addi	r2,r2,14
 100ae38:	1080002b 	ldhuio	r2,0(r2)
 100ae3c:	10bfffcc 	andi	r2,r2,65535
 100ae40:	1008943a 	slli	r4,r2,16
 100ae44:	d0a6d117 	ldw	r2,-25788(gp)
 100ae48:	10800a17 	ldw	r2,40(r2)
 100ae4c:	1007883a 	mov	r3,r2
 100ae50:	e0bffa17 	ldw	r2,-24(fp)
 100ae54:	1885883a 	add	r2,r3,r2
 100ae58:	10800304 	addi	r2,r2,12
 100ae5c:	1080002b 	ldhuio	r2,0(r2)
 100ae60:	10bfffcc 	andi	r2,r2,65535
 100ae64:	2084b03a 	or	r2,r4,r2
 100ae68:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 100ae6c:	e0bffb17 	ldw	r2,-20(fp)
 100ae70:	10800050 	cmplti	r2,r2,1
 100ae74:	1000071e 	bne	r2,zero,100ae94 <Check_for_Master_Boot_Record+0x180>
						result = true;
 100ae78:	00800044 	movi	r2,1
 100ae7c:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 100ae80:	e0bffb17 	ldw	r2,-20(fp)
 100ae84:	d0a6d015 	stw	r2,-25792(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 100ae88:	e0bffc17 	ldw	r2,-16(fp)
 100ae8c:	d0a6cf15 	stw	r2,-25796(gp)
						break;
 100ae90:	00000606 	br	100aeac <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100ae94:	e0bffe17 	ldw	r2,-8(fp)
 100ae98:	10800044 	addi	r2,r2,1
 100ae9c:	e0bffe15 	stw	r2,-8(fp)
 100aea0:	e0bffe17 	ldw	r2,-8(fp)
 100aea4:	10800110 	cmplti	r2,r2,4
 100aea8:	103fb21e 	bne	r2,zero,100ad74 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 100aeac:	e0bfff17 	ldw	r2,-4(fp)
}
 100aeb0:	e037883a 	mov	sp,fp
 100aeb4:	dfc00117 	ldw	ra,4(sp)
 100aeb8:	df000017 	ldw	fp,0(sp)
 100aebc:	dec00204 	addi	sp,sp,8
 100aec0:	f800283a 	ret

0100aec4 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 100aec4:	defff804 	addi	sp,sp,-32
 100aec8:	dfc00715 	stw	ra,28(sp)
 100aecc:	df000615 	stw	fp,24(sp)
 100aed0:	df000604 	addi	fp,sp,24
 100aed4:	e13ffc15 	stw	r4,-16(fp)
 100aed8:	e17ffd15 	stw	r5,-12(fp)
 100aedc:	e1bffe15 	stw	r6,-8(fp)
 100aee0:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 100aee4:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100aee8:	e0bffc17 	ldw	r2,-16(fp)
 100aeec:	108007cc 	andi	r2,r2,31
 100aef0:	1004c03a 	cmpne	r2,r2,zero
 100aef4:	10008e1e 	bne	r2,zero,100b130 <Read_File_Record_At_Offset+0x26c>
 100aef8:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100aefc:	1005003a 	cmpeq	r2,r2,zero
 100af00:	10008b1e 	bne	r2,zero,100b130 <Read_File_Record_At_Offset+0x26c>
 100af04:	d0a6c817 	ldw	r2,-25824(gp)
 100af08:	1005003a 	cmpeq	r2,r2,zero
 100af0c:	1000881e 	bne	r2,zero,100b130 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100af10:	e03ffa15 	stw	zero,-24(fp)
 100af14:	00001006 	br	100af58 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 100af18:	e17ffa17 	ldw	r5,-24(fp)
 100af1c:	d0a6d117 	ldw	r2,-25788(gp)
 100af20:	10800a17 	ldw	r2,40(r2)
 100af24:	1009883a 	mov	r4,r2
 100af28:	e0fffc17 	ldw	r3,-16(fp)
 100af2c:	e0bffa17 	ldw	r2,-24(fp)
 100af30:	1885883a 	add	r2,r3,r2
 100af34:	2085883a 	add	r2,r4,r2
 100af38:	10800023 	ldbuio	r2,0(r2)
 100af3c:	1007883a 	mov	r3,r2
 100af40:	e0bffd17 	ldw	r2,-12(fp)
 100af44:	1145883a 	add	r2,r2,r5
 100af48:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100af4c:	e0bffa17 	ldw	r2,-24(fp)
 100af50:	10800044 	addi	r2,r2,1
 100af54:	e0bffa15 	stw	r2,-24(fp)
 100af58:	e0bffa17 	ldw	r2,-24(fp)
 100af5c:	10800210 	cmplti	r2,r2,8
 100af60:	103fed1e 	bne	r2,zero,100af18 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100af64:	e03ffa15 	stw	zero,-24(fp)
 100af68:	00001206 	br	100afb4 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 100af6c:	e17ffa17 	ldw	r5,-24(fp)
 100af70:	d0a6d117 	ldw	r2,-25788(gp)
 100af74:	10800a17 	ldw	r2,40(r2)
 100af78:	1009883a 	mov	r4,r2
 100af7c:	e0fffc17 	ldw	r3,-16(fp)
 100af80:	e0bffa17 	ldw	r2,-24(fp)
 100af84:	1885883a 	add	r2,r3,r2
 100af88:	2085883a 	add	r2,r4,r2
 100af8c:	10800204 	addi	r2,r2,8
 100af90:	10800023 	ldbuio	r2,0(r2)
 100af94:	1007883a 	mov	r3,r2
 100af98:	e0bffd17 	ldw	r2,-12(fp)
 100af9c:	2885883a 	add	r2,r5,r2
 100afa0:	10800204 	addi	r2,r2,8
 100afa4:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100afa8:	e0bffa17 	ldw	r2,-24(fp)
 100afac:	10800044 	addi	r2,r2,1
 100afb0:	e0bffa15 	stw	r2,-24(fp)
 100afb4:	e0bffa17 	ldw	r2,-24(fp)
 100afb8:	108000d0 	cmplti	r2,r2,3
 100afbc:	103feb1e 	bne	r2,zero,100af6c <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 100afc0:	d0a6d117 	ldw	r2,-25788(gp)
 100afc4:	10800a17 	ldw	r2,40(r2)
 100afc8:	1007883a 	mov	r3,r2
 100afcc:	e0bffc17 	ldw	r2,-16(fp)
 100afd0:	1885883a 	add	r2,r3,r2
 100afd4:	108002c4 	addi	r2,r2,11
 100afd8:	10800023 	ldbuio	r2,0(r2)
 100afdc:	1007883a 	mov	r3,r2
 100afe0:	e0bffd17 	ldw	r2,-12(fp)
 100afe4:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 100afe8:	d0a6d117 	ldw	r2,-25788(gp)
 100afec:	10800a17 	ldw	r2,40(r2)
 100aff0:	1007883a 	mov	r3,r2
 100aff4:	e0bffc17 	ldw	r2,-16(fp)
 100aff8:	1885883a 	add	r2,r3,r2
 100affc:	10800384 	addi	r2,r2,14
 100b000:	1080002b 	ldhuio	r2,0(r2)
 100b004:	1007883a 	mov	r3,r2
 100b008:	e0bffd17 	ldw	r2,-12(fp)
 100b00c:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 100b010:	d0a6d117 	ldw	r2,-25788(gp)
 100b014:	10800a17 	ldw	r2,40(r2)
 100b018:	1007883a 	mov	r3,r2
 100b01c:	e0bffc17 	ldw	r2,-16(fp)
 100b020:	1885883a 	add	r2,r3,r2
 100b024:	10800404 	addi	r2,r2,16
 100b028:	1080002b 	ldhuio	r2,0(r2)
 100b02c:	1007883a 	mov	r3,r2
 100b030:	e0bffd17 	ldw	r2,-12(fp)
 100b034:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 100b038:	d0a6d117 	ldw	r2,-25788(gp)
 100b03c:	10800a17 	ldw	r2,40(r2)
 100b040:	1007883a 	mov	r3,r2
 100b044:	e0bffc17 	ldw	r2,-16(fp)
 100b048:	1885883a 	add	r2,r3,r2
 100b04c:	10800484 	addi	r2,r2,18
 100b050:	1080002b 	ldhuio	r2,0(r2)
 100b054:	1007883a 	mov	r3,r2
 100b058:	e0bffd17 	ldw	r2,-12(fp)
 100b05c:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 100b060:	d0a6d117 	ldw	r2,-25788(gp)
 100b064:	10800a17 	ldw	r2,40(r2)
 100b068:	1007883a 	mov	r3,r2
 100b06c:	e0bffc17 	ldw	r2,-16(fp)
 100b070:	1885883a 	add	r2,r3,r2
 100b074:	10800584 	addi	r2,r2,22
 100b078:	1080002b 	ldhuio	r2,0(r2)
 100b07c:	1007883a 	mov	r3,r2
 100b080:	e0bffd17 	ldw	r2,-12(fp)
 100b084:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 100b088:	d0a6d117 	ldw	r2,-25788(gp)
 100b08c:	10800a17 	ldw	r2,40(r2)
 100b090:	1007883a 	mov	r3,r2
 100b094:	e0bffc17 	ldw	r2,-16(fp)
 100b098:	1885883a 	add	r2,r3,r2
 100b09c:	10800604 	addi	r2,r2,24
 100b0a0:	1080002b 	ldhuio	r2,0(r2)
 100b0a4:	1007883a 	mov	r3,r2
 100b0a8:	e0bffd17 	ldw	r2,-12(fp)
 100b0ac:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 100b0b0:	d0a6d117 	ldw	r2,-25788(gp)
 100b0b4:	10800a17 	ldw	r2,40(r2)
 100b0b8:	1007883a 	mov	r3,r2
 100b0bc:	e0bffc17 	ldw	r2,-16(fp)
 100b0c0:	1885883a 	add	r2,r3,r2
 100b0c4:	10800684 	addi	r2,r2,26
 100b0c8:	1080002b 	ldhuio	r2,0(r2)
 100b0cc:	1007883a 	mov	r3,r2
 100b0d0:	e0bffd17 	ldw	r2,-12(fp)
 100b0d4:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 100b0d8:	d0a6d117 	ldw	r2,-25788(gp)
 100b0dc:	10800a17 	ldw	r2,40(r2)
 100b0e0:	1007883a 	mov	r3,r2
 100b0e4:	e0bffc17 	ldw	r2,-16(fp)
 100b0e8:	1885883a 	add	r2,r3,r2
 100b0ec:	10800704 	addi	r2,r2,28
 100b0f0:	10800037 	ldwio	r2,0(r2)
 100b0f4:	1007883a 	mov	r3,r2
 100b0f8:	e0bffd17 	ldw	r2,-12(fp)
 100b0fc:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 100b100:	e0fffd17 	ldw	r3,-12(fp)
 100b104:	e0bffe17 	ldw	r2,-8(fp)
 100b108:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 100b10c:	e0fffd17 	ldw	r3,-12(fp)
 100b110:	e0bfff17 	ldw	r2,-4(fp)
 100b114:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 100b118:	e0bffc17 	ldw	r2,-16(fp)
 100b11c:	1007883a 	mov	r3,r2
 100b120:	e0bffd17 	ldw	r2,-12(fp)
 100b124:	10c00c0d 	sth	r3,48(r2)
		result = true;
 100b128:	00800044 	movi	r2,1
 100b12c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100b130:	e0bffb17 	ldw	r2,-20(fp)
}
 100b134:	e037883a 	mov	sp,fp
 100b138:	dfc00117 	ldw	ra,4(sp)
 100b13c:	df000017 	ldw	fp,0(sp)
 100b140:	dec00204 	addi	sp,sp,8
 100b144:	f800283a 	ret

0100b148 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 100b148:	defff904 	addi	sp,sp,-28
 100b14c:	dfc00615 	stw	ra,24(sp)
 100b150:	df000515 	stw	fp,20(sp)
 100b154:	df000504 	addi	fp,sp,20
 100b158:	e13ffe15 	stw	r4,-8(fp)
 100b15c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100b160:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100b164:	e0bffe17 	ldw	r2,-8(fp)
 100b168:	108007cc 	andi	r2,r2,31
 100b16c:	1004c03a 	cmpne	r2,r2,zero
 100b170:	10009d1e 	bne	r2,zero,100b3e8 <Write_File_Record_At_Offset+0x2a0>
 100b174:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100b178:	1005003a 	cmpeq	r2,r2,zero
 100b17c:	10009a1e 	bne	r2,zero,100b3e8 <Write_File_Record_At_Offset+0x2a0>
 100b180:	d0a6c817 	ldw	r2,-25824(gp)
 100b184:	1005003a 	cmpeq	r2,r2,zero
 100b188:	1000971e 	bne	r2,zero,100b3e8 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100b18c:	e03ffc15 	stw	zero,-16(fp)
 100b190:	00001e06 	br	100b20c <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 100b194:	e0bffc17 	ldw	r2,-16(fp)
 100b198:	10c00044 	addi	r3,r2,1
 100b19c:	e0bfff17 	ldw	r2,-4(fp)
 100b1a0:	10c5883a 	add	r2,r2,r3
 100b1a4:	10800003 	ldbu	r2,0(r2)
 100b1a8:	10803fcc 	andi	r2,r2,255
 100b1ac:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 100b1b0:	e0bffb0f 	ldh	r2,-20(fp)
 100b1b4:	1004923a 	slli	r2,r2,8
 100b1b8:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 100b1bc:	e0fffc17 	ldw	r3,-16(fp)
 100b1c0:	e0bfff17 	ldw	r2,-4(fp)
 100b1c4:	10c5883a 	add	r2,r2,r3
 100b1c8:	10800003 	ldbu	r2,0(r2)
 100b1cc:	10c03fcc 	andi	r3,r2,255
 100b1d0:	e0bffb0b 	ldhu	r2,-20(fp)
 100b1d4:	10c4b03a 	or	r2,r2,r3
 100b1d8:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 100b1dc:	d0a6d117 	ldw	r2,-25788(gp)
 100b1e0:	10800a17 	ldw	r2,40(r2)
 100b1e4:	1009883a 	mov	r4,r2
 100b1e8:	e0fffe17 	ldw	r3,-8(fp)
 100b1ec:	e0bffc17 	ldw	r2,-16(fp)
 100b1f0:	1885883a 	add	r2,r3,r2
 100b1f4:	2085883a 	add	r2,r4,r2
 100b1f8:	e0fffb0f 	ldh	r3,-20(fp)
 100b1fc:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100b200:	e0bffc17 	ldw	r2,-16(fp)
 100b204:	10800084 	addi	r2,r2,2
 100b208:	e0bffc15 	stw	r2,-16(fp)
 100b20c:	e0bffc17 	ldw	r2,-16(fp)
 100b210:	10800210 	cmplti	r2,r2,8
 100b214:	103fdf1e 	bne	r2,zero,100b194 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100b218:	e03ffc15 	stw	zero,-16(fp)
 100b21c:	00001306 	br	100b26c <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 100b220:	d0a6d117 	ldw	r2,-25788(gp)
 100b224:	10800a17 	ldw	r2,40(r2)
 100b228:	1009883a 	mov	r4,r2
 100b22c:	e0fffe17 	ldw	r3,-8(fp)
 100b230:	e0bffc17 	ldw	r2,-16(fp)
 100b234:	1885883a 	add	r2,r3,r2
 100b238:	2085883a 	add	r2,r4,r2
 100b23c:	11000204 	addi	r4,r2,8
 100b240:	e0fffc17 	ldw	r3,-16(fp)
 100b244:	e0bfff17 	ldw	r2,-4(fp)
 100b248:	1885883a 	add	r2,r3,r2
 100b24c:	10800204 	addi	r2,r2,8
 100b250:	10800003 	ldbu	r2,0(r2)
 100b254:	10c03fcc 	andi	r3,r2,255
 100b258:	2005883a 	mov	r2,r4
 100b25c:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100b260:	e0bffc17 	ldw	r2,-16(fp)
 100b264:	10800044 	addi	r2,r2,1
 100b268:	e0bffc15 	stw	r2,-16(fp)
 100b26c:	e0bffc17 	ldw	r2,-16(fp)
 100b270:	108000d0 	cmplti	r2,r2,3
 100b274:	103fea1e 	bne	r2,zero,100b220 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 100b278:	d0a6d117 	ldw	r2,-25788(gp)
 100b27c:	10800a17 	ldw	r2,40(r2)
 100b280:	1007883a 	mov	r3,r2
 100b284:	e0bffe17 	ldw	r2,-8(fp)
 100b288:	1885883a 	add	r2,r3,r2
 100b28c:	110002c4 	addi	r4,r2,11
 100b290:	e0bfff17 	ldw	r2,-4(fp)
 100b294:	108002c3 	ldbu	r2,11(r2)
 100b298:	10c03fcc 	andi	r3,r2,255
 100b29c:	2005883a 	mov	r2,r4
 100b2a0:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 100b2a4:	d0a6d117 	ldw	r2,-25788(gp)
 100b2a8:	10800a17 	ldw	r2,40(r2)
 100b2ac:	1007883a 	mov	r3,r2
 100b2b0:	e0bffe17 	ldw	r2,-8(fp)
 100b2b4:	1885883a 	add	r2,r3,r2
 100b2b8:	11000384 	addi	r4,r2,14
 100b2bc:	e0bfff17 	ldw	r2,-4(fp)
 100b2c0:	1080030b 	ldhu	r2,12(r2)
 100b2c4:	10ffffcc 	andi	r3,r2,65535
 100b2c8:	2005883a 	mov	r2,r4
 100b2cc:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 100b2d0:	d0a6d117 	ldw	r2,-25788(gp)
 100b2d4:	10800a17 	ldw	r2,40(r2)
 100b2d8:	1007883a 	mov	r3,r2
 100b2dc:	e0bffe17 	ldw	r2,-8(fp)
 100b2e0:	1885883a 	add	r2,r3,r2
 100b2e4:	11000404 	addi	r4,r2,16
 100b2e8:	e0bfff17 	ldw	r2,-4(fp)
 100b2ec:	1080038b 	ldhu	r2,14(r2)
 100b2f0:	10ffffcc 	andi	r3,r2,65535
 100b2f4:	2005883a 	mov	r2,r4
 100b2f8:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 100b2fc:	d0a6d117 	ldw	r2,-25788(gp)
 100b300:	10800a17 	ldw	r2,40(r2)
 100b304:	1007883a 	mov	r3,r2
 100b308:	e0bffe17 	ldw	r2,-8(fp)
 100b30c:	1885883a 	add	r2,r3,r2
 100b310:	11000484 	addi	r4,r2,18
 100b314:	e0bfff17 	ldw	r2,-4(fp)
 100b318:	1080040b 	ldhu	r2,16(r2)
 100b31c:	10ffffcc 	andi	r3,r2,65535
 100b320:	2005883a 	mov	r2,r4
 100b324:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 100b328:	d0a6d117 	ldw	r2,-25788(gp)
 100b32c:	10800a17 	ldw	r2,40(r2)
 100b330:	1007883a 	mov	r3,r2
 100b334:	e0bffe17 	ldw	r2,-8(fp)
 100b338:	1885883a 	add	r2,r3,r2
 100b33c:	11000584 	addi	r4,r2,22
 100b340:	e0bfff17 	ldw	r2,-4(fp)
 100b344:	1080048b 	ldhu	r2,18(r2)
 100b348:	10ffffcc 	andi	r3,r2,65535
 100b34c:	2005883a 	mov	r2,r4
 100b350:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 100b354:	d0a6d117 	ldw	r2,-25788(gp)
 100b358:	10800a17 	ldw	r2,40(r2)
 100b35c:	1007883a 	mov	r3,r2
 100b360:	e0bffe17 	ldw	r2,-8(fp)
 100b364:	1885883a 	add	r2,r3,r2
 100b368:	11000604 	addi	r4,r2,24
 100b36c:	e0bfff17 	ldw	r2,-4(fp)
 100b370:	1080050b 	ldhu	r2,20(r2)
 100b374:	10ffffcc 	andi	r3,r2,65535
 100b378:	2005883a 	mov	r2,r4
 100b37c:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 100b380:	d0a6d117 	ldw	r2,-25788(gp)
 100b384:	10800a17 	ldw	r2,40(r2)
 100b388:	1007883a 	mov	r3,r2
 100b38c:	e0bffe17 	ldw	r2,-8(fp)
 100b390:	1885883a 	add	r2,r3,r2
 100b394:	11000684 	addi	r4,r2,26
 100b398:	e0bfff17 	ldw	r2,-4(fp)
 100b39c:	1080058b 	ldhu	r2,22(r2)
 100b3a0:	10ffffcc 	andi	r3,r2,65535
 100b3a4:	2005883a 	mov	r2,r4
 100b3a8:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 100b3ac:	d0a6d117 	ldw	r2,-25788(gp)
 100b3b0:	10800a17 	ldw	r2,40(r2)
 100b3b4:	1007883a 	mov	r3,r2
 100b3b8:	e0bffe17 	ldw	r2,-8(fp)
 100b3bc:	1885883a 	add	r2,r3,r2
 100b3c0:	11000704 	addi	r4,r2,28
 100b3c4:	e0bfff17 	ldw	r2,-4(fp)
 100b3c8:	10800617 	ldw	r2,24(r2)
 100b3cc:	1007883a 	mov	r3,r2
 100b3d0:	2005883a 	mov	r2,r4
 100b3d4:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 100b3d8:	00800044 	movi	r2,1
 100b3dc:	d0a6d215 	stw	r2,-25784(gp)
		result = true;
 100b3e0:	00800044 	movi	r2,1
 100b3e4:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 100b3e8:	e0bffd17 	ldw	r2,-12(fp)
}
 100b3ec:	e037883a 	mov	sp,fp
 100b3f0:	dfc00117 	ldw	ra,4(sp)
 100b3f4:	df000017 	ldw	fp,0(sp)
 100b3f8:	dec00204 	addi	sp,sp,8
 100b3fc:	f800283a 	ret

0100b400 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 100b400:	defff804 	addi	sp,sp,-32
 100b404:	dfc00715 	stw	ra,28(sp)
 100b408:	df000615 	stw	fp,24(sp)
 100b40c:	dc000515 	stw	r16,20(sp)
 100b410:	df000504 	addi	fp,sp,20
 100b414:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 100b418:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 100b41c:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 100b420:	0009883a 	mov	r4,zero
 100b424:	e17fff17 	ldw	r5,-4(fp)
 100b428:	100eef00 	call	100eef0 <Read_Sector_Data_Attempt_CRC>
 100b42c:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 100b430:	d0a6d117 	ldw	r2,-25788(gp)
 100b434:	10800a17 	ldw	r2,40(r2)
 100b438:	10807f84 	addi	r2,r2,510
 100b43c:	1080002b 	ldhuio	r2,0(r2)
 100b440:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100b444:	e0bffc0f 	ldh	r2,-16(fp)
 100b448:	10ffffcc 	andi	r3,r2,65535
 100b44c:	00aa9554 	movui	r2,43605
 100b450:	1881751e 	bne	r3,r2,100ba28 <Check_for_DOS_FAT+0x628>
 100b454:	e0bffe17 	ldw	r2,-8(fp)
 100b458:	1005003a 	cmpeq	r2,r2,zero
 100b45c:	1001721e 	bne	r2,zero,100ba28 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
 100b460:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 100b464:	d0a6d117 	ldw	r2,-25788(gp)
 100b468:	10800a17 	ldw	r2,40(r2)
 100b46c:	10800023 	ldbuio	r2,0(r2)
 100b470:	1007883a 	mov	r3,r2
 100b474:	00804074 	movhi	r2,257
 100b478:	10990a04 	addi	r2,r2,25640
 100b47c:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 100b480:	d0a6d117 	ldw	r2,-25788(gp)
 100b484:	10800a17 	ldw	r2,40(r2)
 100b488:	10800044 	addi	r2,r2,1
 100b48c:	10800023 	ldbuio	r2,0(r2)
 100b490:	1007883a 	mov	r3,r2
 100b494:	00804074 	movhi	r2,257
 100b498:	10990a04 	addi	r2,r2,25640
 100b49c:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 100b4a0:	d0a6d117 	ldw	r2,-25788(gp)
 100b4a4:	10800a17 	ldw	r2,40(r2)
 100b4a8:	10800084 	addi	r2,r2,2
 100b4ac:	10800023 	ldbuio	r2,0(r2)
 100b4b0:	1007883a 	mov	r3,r2
 100b4b4:	00804074 	movhi	r2,257
 100b4b8:	10990a04 	addi	r2,r2,25640
 100b4bc:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100b4c0:	e03ffd15 	stw	zero,-12(fp)
 100b4c4:	00001006 	br	100b508 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter] =
 100b4c8:	e13ffd17 	ldw	r4,-12(fp)
 100b4cc:	d0a6d117 	ldw	r2,-25788(gp)
 100b4d0:	10800a17 	ldw	r2,40(r2)
 100b4d4:	1007883a 	mov	r3,r2
 100b4d8:	e0bffd17 	ldw	r2,-12(fp)
 100b4dc:	1885883a 	add	r2,r3,r2
 100b4e0:	108000c4 	addi	r2,r2,3
 100b4e4:	10800023 	ldbuio	r2,0(r2)
 100b4e8:	1007883a 	mov	r3,r2
 100b4ec:	00804074 	movhi	r2,257
 100b4f0:	10990a04 	addi	r2,r2,25640
 100b4f4:	1105883a 	add	r2,r2,r4
 100b4f8:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100b4fc:	e0bffd17 	ldw	r2,-12(fp)
 100b500:	10800044 	addi	r2,r2,1
 100b504:	e0bffd15 	stw	r2,-12(fp)
 100b508:	e0bffd17 	ldw	r2,-12(fp)
 100b50c:	10800210 	cmplti	r2,r2,8
 100b510:	103fed1e 	bne	r2,zero,100b4c8 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 100b514:	d0a6d117 	ldw	r2,-25788(gp)
 100b518:	10800a17 	ldw	r2,40(r2)
 100b51c:	10800304 	addi	r2,r2,12
 100b520:	10800023 	ldbuio	r2,0(r2)
 100b524:	10803fcc 	andi	r2,r2,255
 100b528:	1004923a 	slli	r2,r2,8
 100b52c:	1007883a 	mov	r3,r2
 100b530:	d0a6d117 	ldw	r2,-25788(gp)
 100b534:	10800a17 	ldw	r2,40(r2)
 100b538:	108002c4 	addi	r2,r2,11
 100b53c:	10800023 	ldbuio	r2,0(r2)
 100b540:	10803fcc 	andi	r2,r2,255
 100b544:	1080201c 	xori	r2,r2,128
 100b548:	10bfe004 	addi	r2,r2,-128
 100b54c:	1884b03a 	or	r2,r3,r2
 100b550:	1007883a 	mov	r3,r2
 100b554:	00804074 	movhi	r2,257
 100b558:	10990a04 	addi	r2,r2,25640
 100b55c:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 100b560:	d0a6d117 	ldw	r2,-25788(gp)
 100b564:	10800a17 	ldw	r2,40(r2)
 100b568:	10800344 	addi	r2,r2,13
 100b56c:	10800023 	ldbuio	r2,0(r2)
 100b570:	1007883a 	mov	r3,r2
 100b574:	00804074 	movhi	r2,257
 100b578:	10990a04 	addi	r2,r2,25640
 100b57c:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 100b580:	d0a6d117 	ldw	r2,-25788(gp)
 100b584:	10800a17 	ldw	r2,40(r2)
 100b588:	10800384 	addi	r2,r2,14
 100b58c:	1080002b 	ldhuio	r2,0(r2)
 100b590:	1007883a 	mov	r3,r2
 100b594:	00804074 	movhi	r2,257
 100b598:	10990a04 	addi	r2,r2,25640
 100b59c:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 100b5a0:	d0a6d117 	ldw	r2,-25788(gp)
 100b5a4:	10800a17 	ldw	r2,40(r2)
 100b5a8:	10800404 	addi	r2,r2,16
 100b5ac:	10800023 	ldbuio	r2,0(r2)
 100b5b0:	1007883a 	mov	r3,r2
 100b5b4:	00804074 	movhi	r2,257
 100b5b8:	10990a04 	addi	r2,r2,25640
 100b5bc:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 100b5c0:	d0a6d117 	ldw	r2,-25788(gp)
 100b5c4:	10800a17 	ldw	r2,40(r2)
 100b5c8:	10800484 	addi	r2,r2,18
 100b5cc:	10800023 	ldbuio	r2,0(r2)
 100b5d0:	10803fcc 	andi	r2,r2,255
 100b5d4:	1004923a 	slli	r2,r2,8
 100b5d8:	1007883a 	mov	r3,r2
 100b5dc:	d0a6d117 	ldw	r2,-25788(gp)
 100b5e0:	10800a17 	ldw	r2,40(r2)
 100b5e4:	10800444 	addi	r2,r2,17
 100b5e8:	10800023 	ldbuio	r2,0(r2)
 100b5ec:	10803fcc 	andi	r2,r2,255
 100b5f0:	1884b03a 	or	r2,r3,r2
 100b5f4:	1007883a 	mov	r3,r2
 100b5f8:	00804074 	movhi	r2,257
 100b5fc:	10990a04 	addi	r2,r2,25640
 100b600:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 100b604:	d0a6d117 	ldw	r2,-25788(gp)
 100b608:	10800a17 	ldw	r2,40(r2)
 100b60c:	10800504 	addi	r2,r2,20
 100b610:	10800023 	ldbuio	r2,0(r2)
 100b614:	10803fcc 	andi	r2,r2,255
 100b618:	1004923a 	slli	r2,r2,8
 100b61c:	1007883a 	mov	r3,r2
 100b620:	d0a6d117 	ldw	r2,-25788(gp)
 100b624:	10800a17 	ldw	r2,40(r2)
 100b628:	108004c4 	addi	r2,r2,19
 100b62c:	10800023 	ldbuio	r2,0(r2)
 100b630:	10803fcc 	andi	r2,r2,255
 100b634:	1884b03a 	or	r2,r3,r2
 100b638:	1007883a 	mov	r3,r2
 100b63c:	00804074 	movhi	r2,257
 100b640:	10990a04 	addi	r2,r2,25640
 100b644:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 100b648:	d0a6d117 	ldw	r2,-25788(gp)
 100b64c:	10800a17 	ldw	r2,40(r2)
 100b650:	10800544 	addi	r2,r2,21
 100b654:	10800023 	ldbuio	r2,0(r2)
 100b658:	1007883a 	mov	r3,r2
 100b65c:	00804074 	movhi	r2,257
 100b660:	10990a04 	addi	r2,r2,25640
 100b664:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 100b668:	d0a6d117 	ldw	r2,-25788(gp)
 100b66c:	10800a17 	ldw	r2,40(r2)
 100b670:	10800584 	addi	r2,r2,22
 100b674:	1080002b 	ldhuio	r2,0(r2)
 100b678:	1007883a 	mov	r3,r2
 100b67c:	00804074 	movhi	r2,257
 100b680:	10990a04 	addi	r2,r2,25640
 100b684:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 100b688:	d0a6d117 	ldw	r2,-25788(gp)
 100b68c:	10800a17 	ldw	r2,40(r2)
 100b690:	10800604 	addi	r2,r2,24
 100b694:	1080002b 	ldhuio	r2,0(r2)
 100b698:	1007883a 	mov	r3,r2
 100b69c:	00804074 	movhi	r2,257
 100b6a0:	10990a04 	addi	r2,r2,25640
 100b6a4:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 100b6a8:	d0a6d117 	ldw	r2,-25788(gp)
 100b6ac:	10800a17 	ldw	r2,40(r2)
 100b6b0:	10800684 	addi	r2,r2,26
 100b6b4:	1080002b 	ldhuio	r2,0(r2)
 100b6b8:	1007883a 	mov	r3,r2
 100b6bc:	00804074 	movhi	r2,257
 100b6c0:	10990a04 	addi	r2,r2,25640
 100b6c4:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 100b6c8:	d0a6d117 	ldw	r2,-25788(gp)
 100b6cc:	10800a17 	ldw	r2,40(r2)
 100b6d0:	10800704 	addi	r2,r2,28
 100b6d4:	10800037 	ldwio	r2,0(r2)
 100b6d8:	1007883a 	mov	r3,r2
 100b6dc:	00804074 	movhi	r2,257
 100b6e0:	10990a04 	addi	r2,r2,25640
 100b6e4:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 100b6e8:	d0a6d117 	ldw	r2,-25788(gp)
 100b6ec:	10800a17 	ldw	r2,40(r2)
 100b6f0:	10800804 	addi	r2,r2,32
 100b6f4:	10800037 	ldwio	r2,0(r2)
 100b6f8:	1007883a 	mov	r3,r2
 100b6fc:	00804074 	movhi	r2,257
 100b700:	10990a04 	addi	r2,r2,25640
 100b704:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 100b708:	d0a6d117 	ldw	r2,-25788(gp)
 100b70c:	10800a17 	ldw	r2,40(r2)
 100b710:	10800904 	addi	r2,r2,36
 100b714:	10800023 	ldbuio	r2,0(r2)
 100b718:	1007883a 	mov	r3,r2
 100b71c:	00804074 	movhi	r2,257
 100b720:	10990a04 	addi	r2,r2,25640
 100b724:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 100b728:	d0a6d117 	ldw	r2,-25788(gp)
 100b72c:	10800a17 	ldw	r2,40(r2)
 100b730:	10800944 	addi	r2,r2,37
 100b734:	10800023 	ldbuio	r2,0(r2)
 100b738:	1007883a 	mov	r3,r2
 100b73c:	00804074 	movhi	r2,257
 100b740:	10990a04 	addi	r2,r2,25640
 100b744:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 100b748:	d0a6d117 	ldw	r2,-25788(gp)
 100b74c:	10800a17 	ldw	r2,40(r2)
 100b750:	10800984 	addi	r2,r2,38
 100b754:	10800023 	ldbuio	r2,0(r2)
 100b758:	1007883a 	mov	r3,r2
 100b75c:	00804074 	movhi	r2,257
 100b760:	10990a04 	addi	r2,r2,25640
 100b764:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 100b768:	00804074 	movhi	r2,257
 100b76c:	10990a04 	addi	r2,r2,25640
 100b770:	1080040b 	ldhu	r2,16(r2)
 100b774:	10ffffcc 	andi	r3,r2,65535
 100b778:	00804074 	movhi	r2,257
 100b77c:	10990a04 	addi	r2,r2,25640
 100b780:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 100b784:	00804074 	movhi	r2,257
 100b788:	10990a04 	addi	r2,r2,25640
 100b78c:	10c01117 	ldw	r3,68(r2)
 100b790:	00804074 	movhi	r2,257
 100b794:	10990a04 	addi	r2,r2,25640
 100b798:	1080068b 	ldhu	r2,26(r2)
 100b79c:	10bfffcc 	andi	r2,r2,65535
 100b7a0:	1887883a 	add	r3,r3,r2
 100b7a4:	00804074 	movhi	r2,257
 100b7a8:	10990a04 	addi	r2,r2,25640
 100b7ac:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 100b7b0:	00804074 	movhi	r2,257
 100b7b4:	10990a04 	addi	r2,r2,25640
 100b7b8:	10c01217 	ldw	r3,72(r2)
 100b7bc:	00804074 	movhi	r2,257
 100b7c0:	10990a04 	addi	r2,r2,25640
 100b7c4:	1080068b 	ldhu	r2,26(r2)
 100b7c8:	10bfffcc 	andi	r2,r2,65535
 100b7cc:	1887883a 	add	r3,r3,r2
 100b7d0:	00804074 	movhi	r2,257
 100b7d4:	10990a04 	addi	r2,r2,25640
 100b7d8:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 100b7dc:	00804074 	movhi	r2,257
 100b7e0:	10990a04 	addi	r2,r2,25640
 100b7e4:	14001317 	ldw	r16,76(r2)
 100b7e8:	00804074 	movhi	r2,257
 100b7ec:	10990a04 	addi	r2,r2,25640
 100b7f0:	1080050b 	ldhu	r2,20(r2)
 100b7f4:	10bfffcc 	andi	r2,r2,65535
 100b7f8:	1008917a 	slli	r4,r2,5
 100b7fc:	00804074 	movhi	r2,257
 100b800:	10990a04 	addi	r2,r2,25640
 100b804:	1080030b 	ldhu	r2,12(r2)
 100b808:	117fffcc 	andi	r5,r2,65535
 100b80c:	10095c00 	call	10095c0 <__divsi3>
 100b810:	8087883a 	add	r3,r16,r2
 100b814:	00804074 	movhi	r2,257
 100b818:	10990a04 	addi	r2,r2,25640
 100b81c:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 100b820:	00804074 	movhi	r2,257
 100b824:	10990a04 	addi	r2,r2,25640
 100b828:	1080058b 	ldhu	r2,22(r2)
 100b82c:	10bfffcc 	andi	r2,r2,65535
 100b830:	1005003a 	cmpeq	r2,r2,zero
 100b834:	10000b1e 	bne	r2,zero,100b864 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 100b838:	00804074 	movhi	r2,257
 100b83c:	10990a04 	addi	r2,r2,25640
 100b840:	1080058b 	ldhu	r2,22(r2)
 100b844:	113fffcc 	andi	r4,r2,65535
 100b848:	00804074 	movhi	r2,257
 100b84c:	10990a04 	addi	r2,r2,25640
 100b850:	10800383 	ldbu	r2,14(r2)
 100b854:	11403fcc 	andi	r5,r2,255
 100b858:	10095c00 	call	10095c0 <__divsi3>
 100b85c:	e0bffb15 	stw	r2,-20(fp)
 100b860:	00000906 	br	100b888 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 100b864:	00804074 	movhi	r2,257
 100b868:	10990a04 	addi	r2,r2,25640
 100b86c:	11000917 	ldw	r4,36(r2)
 100b870:	00804074 	movhi	r2,257
 100b874:	10990a04 	addi	r2,r2,25640
 100b878:	10800383 	ldbu	r2,14(r2)
 100b87c:	11403fcc 	andi	r5,r2,255
 100b880:	10096800 	call	1009680 <__udivsi3>
 100b884:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 100b888:	e0bffb17 	ldw	r2,-20(fp)
 100b88c:	1083fdc8 	cmpgei	r2,r2,4087
 100b890:	1000051e 	bne	r2,zero,100b8a8 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
 100b894:	00c04074 	movhi	r3,257
 100b898:	18d90a04 	addi	r3,r3,25640
 100b89c:	00800304 	movi	r2,12
 100b8a0:	18801085 	stb	r2,66(r3)
 100b8a4:	00000c06 	br	100b8d8 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
 100b8a8:	e0fffb17 	ldw	r3,-20(fp)
 100b8ac:	00bffb54 	movui	r2,65517
 100b8b0:	10c00516 	blt	r2,r3,100b8c8 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
 100b8b4:	00c04074 	movhi	r3,257
 100b8b8:	18d90a04 	addi	r3,r3,25640
 100b8bc:	00800404 	movi	r2,16
 100b8c0:	18801085 	stb	r2,66(r3)
 100b8c4:	00000406 	br	100b8d8 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 100b8c8:	00c04074 	movhi	r3,257
 100b8cc:	18d90a04 	addi	r3,r3,25640
 100b8d0:	00800804 	movi	r2,32
 100b8d4:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 100b8d8:	e03ffd15 	stw	zero,-12(fp)
 100b8dc:	00001106 	br	100b924 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter] =
 100b8e0:	e13ffd17 	ldw	r4,-12(fp)
 100b8e4:	d0a6d117 	ldw	r2,-25788(gp)
 100b8e8:	10800a17 	ldw	r2,40(r2)
 100b8ec:	1007883a 	mov	r3,r2
 100b8f0:	e0bffd17 	ldw	r2,-12(fp)
 100b8f4:	1885883a 	add	r2,r3,r2
 100b8f8:	108009c4 	addi	r2,r2,39
 100b8fc:	10800023 	ldbuio	r2,0(r2)
 100b900:	1007883a 	mov	r3,r2
 100b904:	00804074 	movhi	r2,257
 100b908:	10990a04 	addi	r2,r2,25640
 100b90c:	2085883a 	add	r2,r4,r2
 100b910:	10800a04 	addi	r2,r2,40
 100b914:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 100b918:	e0bffd17 	ldw	r2,-12(fp)
 100b91c:	10800044 	addi	r2,r2,1
 100b920:	e0bffd15 	stw	r2,-12(fp)
 100b924:	e0bffd17 	ldw	r2,-12(fp)
 100b928:	10800110 	cmplti	r2,r2,4
 100b92c:	103fec1e 	bne	r2,zero,100b8e0 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100b930:	e03ffd15 	stw	zero,-12(fp)
 100b934:	00001106 	br	100b97c <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter] =
 100b938:	e13ffd17 	ldw	r4,-12(fp)
 100b93c:	d0a6d117 	ldw	r2,-25788(gp)
 100b940:	10800a17 	ldw	r2,40(r2)
 100b944:	1007883a 	mov	r3,r2
 100b948:	e0bffd17 	ldw	r2,-12(fp)
 100b94c:	1885883a 	add	r2,r3,r2
 100b950:	10800ac4 	addi	r2,r2,43
 100b954:	10800023 	ldbuio	r2,0(r2)
 100b958:	1007883a 	mov	r3,r2
 100b95c:	00804074 	movhi	r2,257
 100b960:	10990a04 	addi	r2,r2,25640
 100b964:	2085883a 	add	r2,r4,r2
 100b968:	10800b04 	addi	r2,r2,44
 100b96c:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100b970:	e0bffd17 	ldw	r2,-12(fp)
 100b974:	10800044 	addi	r2,r2,1
 100b978:	e0bffd15 	stw	r2,-12(fp)
 100b97c:	e0bffd17 	ldw	r2,-12(fp)
 100b980:	108002d0 	cmplti	r2,r2,11
 100b984:	103fec1e 	bne	r2,zero,100b938 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100b988:	e03ffd15 	stw	zero,-12(fp)
 100b98c:	00001106 	br	100b9d4 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter] =
 100b990:	e13ffd17 	ldw	r4,-12(fp)
 100b994:	d0a6d117 	ldw	r2,-25788(gp)
 100b998:	10800a17 	ldw	r2,40(r2)
 100b99c:	1007883a 	mov	r3,r2
 100b9a0:	e0bffd17 	ldw	r2,-12(fp)
 100b9a4:	1885883a 	add	r2,r3,r2
 100b9a8:	10800d84 	addi	r2,r2,54
 100b9ac:	10800023 	ldbuio	r2,0(r2)
 100b9b0:	1007883a 	mov	r3,r2
 100b9b4:	00804074 	movhi	r2,257
 100b9b8:	10990a04 	addi	r2,r2,25640
 100b9bc:	2085883a 	add	r2,r4,r2
 100b9c0:	10800e04 	addi	r2,r2,56
 100b9c4:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100b9c8:	e0bffd17 	ldw	r2,-12(fp)
 100b9cc:	10800044 	addi	r2,r2,1
 100b9d0:	e0bffd15 	stw	r2,-12(fp)
 100b9d4:	e0bffd17 	ldw	r2,-12(fp)
 100b9d8:	10800210 	cmplti	r2,r2,8
 100b9dc:	103fec1e 	bne	r2,zero,100b990 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100b9e0:	e03ffd15 	stw	zero,-12(fp)
 100b9e4:	00000a06 	br	100ba10 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
 100b9e8:	e0bffd17 	ldw	r2,-12(fp)
 100b9ec:	00c04074 	movhi	r3,257
 100b9f0:	18d91f04 	addi	r3,r3,25724
 100b9f4:	100491ba 	slli	r2,r2,6
 100b9f8:	10c5883a 	add	r2,r2,r3
 100b9fc:	10800f04 	addi	r2,r2,60
 100ba00:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100ba04:	e0bffd17 	ldw	r2,-12(fp)
 100ba08:	10800044 	addi	r2,r2,1
 100ba0c:	e0bffd15 	stw	r2,-12(fp)
 100ba10:	e0bffd17 	ldw	r2,-12(fp)
 100ba14:	10800510 	cmplti	r2,r2,20
 100ba18:	103ff31e 	bne	r2,zero,100b9e8 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
 100ba1c:	00800044 	movi	r2,1
 100ba20:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100ba24:	00000106 	br	100ba2c <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 100ba28:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 100ba2c:	e0bffe17 	ldw	r2,-8(fp)
}
 100ba30:	e037883a 	mov	sp,fp
 100ba34:	dfc00217 	ldw	ra,8(sp)
 100ba38:	df000117 	ldw	fp,4(sp)
 100ba3c:	dc000017 	ldw	r16,0(sp)
 100ba40:	dec00304 	addi	sp,sp,12
 100ba44:	f800283a 	ret

0100ba48 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 100ba48:	defffc04 	addi	sp,sp,-16
 100ba4c:	dfc00315 	stw	ra,12(sp)
 100ba50:	df000215 	stw	fp,8(sp)
 100ba54:	df000204 	addi	fp,sp,8
	bool result = false;
 100ba58:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100ba5c:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100ba60:	1005003a 	cmpeq	r2,r2,zero
 100ba64:	1000331e 	bne	r2,zero,100bb34 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 100ba68:	0009883a 	mov	r4,zero
 100ba6c:	000b883a 	mov	r5,zero
 100ba70:	100eef00 	call	100eef0 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 100ba74:	d0a6cb17 	ldw	r2,-25812(gp)
 100ba78:	1080000b 	ldhu	r2,0(r2)
 100ba7c:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 100ba80:	d026cf15 	stw	zero,-25796(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 100ba84:	d026d015 	stw	zero,-25792(gp)

		if (((csd_file_format & 0x8000) == 0)
 100ba88:	e0bffe0f 	ldh	r2,-8(fp)
 100ba8c:	1004803a 	cmplt	r2,r2,zero
 100ba90:	1000281e 	bne	r2,zero,100bb34 <Look_for_FAT16+0xec>
 100ba94:	e0bffe0b 	ldhu	r2,-8(fp)
 100ba98:	10bfffcc 	andi	r2,r2,65535
 100ba9c:	1083000c 	andi	r2,r2,3072
 100baa0:	10830020 	cmpeqi	r2,r2,3072
 100baa4:	1000231e 	bne	r2,zero,100bb34 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 100baa8:	e0bffe0b 	ldhu	r2,-8(fp)
 100baac:	10bfffcc 	andi	r2,r2,65535
 100bab0:	1083000c 	andi	r2,r2,3072
 100bab4:	10810018 	cmpnei	r2,r2,1024
 100bab8:	1000031e 	bne	r2,zero,100bac8 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 100babc:	0009883a 	mov	r4,zero
 100bac0:	100b4000 	call	100b400 <Check_for_DOS_FAT>
 100bac4:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 100bac8:	e0bffe0b 	ldhu	r2,-8(fp)
 100bacc:	10bfffcc 	andi	r2,r2,65535
 100bad0:	1083000c 	andi	r2,r2,3072
 100bad4:	1004c03a 	cmpne	r2,r2,zero
 100bad8:	1000061e 	bne	r2,zero,100baf4 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 100badc:	100ad140 	call	100ad14 <Check_for_Master_Boot_Record>
 100bae0:	1005003a 	cmpeq	r2,r2,zero
 100bae4:	1000031e 	bne	r2,zero,100baf4 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 100bae8:	d126cf17 	ldw	r4,-25796(gp)
 100baec:	100b4000 	call	100b400 <Check_for_DOS_FAT>
 100baf0:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 100baf4:	e0bfff17 	ldw	r2,-4(fp)
 100baf8:	10800058 	cmpnei	r2,r2,1
 100bafc:	10000d1e 	bne	r2,zero,100bb34 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 100bb00:	00804074 	movhi	r2,257
 100bb04:	10990a04 	addi	r2,r2,25640
 100bb08:	10801083 	ldbu	r2,66(r2)
 100bb0c:	10803fcc 	andi	r2,r2,255
 100bb10:	10800420 	cmpeqi	r2,r2,16
 100bb14:	1000021e 	bne	r2,zero,100bb20 <Look_for_FAT16+0xd8>
					result = false;
 100bb18:	e03fff15 	stw	zero,-4(fp)
 100bb1c:	00000506 	br	100bb34 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 100bb20:	00804074 	movhi	r2,257
 100bb24:	10990a04 	addi	r2,r2,25640
 100bb28:	1080058b 	ldhu	r2,22(r2)
 100bb2c:	10bfffcc 	andi	r2,r2,65535
 100bb30:	d0a6d015 	stw	r2,-25792(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 100bb34:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb38:	e037883a 	mov	sp,fp
 100bb3c:	dfc00117 	ldw	ra,4(sp)
 100bb40:	df000017 	ldw	fp,0(sp)
 100bb44:	dec00204 	addi	sp,sp,8
 100bb48:	f800283a 	ret

0100bb4c <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 100bb4c:	defffb04 	addi	sp,sp,-20
 100bb50:	dfc00415 	stw	ra,16(sp)
 100bb54:	df000315 	stw	fp,12(sp)
 100bb58:	df000304 	addi	fp,sp,12
 100bb5c:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 100bb60:	e13fff17 	ldw	r4,-4(fp)
 100bb64:	10004400 	call	1000440 <strlen>
 100bb68:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100bb6c:	e03ffe15 	stw	zero,-8(fp)
 100bb70:	00002206 	br	100bbfc <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 100bb74:	e0bffe17 	ldw	r2,-8(fp)
 100bb78:	1007883a 	mov	r3,r2
 100bb7c:	e0bfff17 	ldw	r2,-4(fp)
 100bb80:	1885883a 	add	r2,r3,r2
 100bb84:	10800003 	ldbu	r2,0(r2)
 100bb88:	10803fcc 	andi	r2,r2,255
 100bb8c:	1080201c 	xori	r2,r2,128
 100bb90:	10bfe004 	addi	r2,r2,-128
 100bb94:	10801850 	cmplti	r2,r2,97
 100bb98:	1000151e 	bne	r2,zero,100bbf0 <filename_to_upper_case+0xa4>
 100bb9c:	e0bffe17 	ldw	r2,-8(fp)
 100bba0:	1007883a 	mov	r3,r2
 100bba4:	e0bfff17 	ldw	r2,-4(fp)
 100bba8:	1885883a 	add	r2,r3,r2
 100bbac:	10800003 	ldbu	r2,0(r2)
 100bbb0:	10803fcc 	andi	r2,r2,255
 100bbb4:	1080201c 	xori	r2,r2,128
 100bbb8:	10bfe004 	addi	r2,r2,-128
 100bbbc:	10801ec8 	cmpgei	r2,r2,123
 100bbc0:	10000b1e 	bne	r2,zero,100bbf0 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 100bbc4:	e0bffe17 	ldw	r2,-8(fp)
 100bbc8:	1007883a 	mov	r3,r2
 100bbcc:	e0bfff17 	ldw	r2,-4(fp)
 100bbd0:	1889883a 	add	r4,r3,r2
 100bbd4:	e0bffe17 	ldw	r2,-8(fp)
 100bbd8:	1007883a 	mov	r3,r2
 100bbdc:	e0bfff17 	ldw	r2,-4(fp)
 100bbe0:	1885883a 	add	r2,r3,r2
 100bbe4:	10800003 	ldbu	r2,0(r2)
 100bbe8:	10bff804 	addi	r2,r2,-32
 100bbec:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 100bbf0:	e0bffe17 	ldw	r2,-8(fp)
 100bbf4:	10800044 	addi	r2,r2,1
 100bbf8:	e0bffe15 	stw	r2,-8(fp)
 100bbfc:	e0fffe17 	ldw	r3,-8(fp)
 100bc00:	e0bffd17 	ldw	r2,-12(fp)
 100bc04:	18bfdb16 	blt	r3,r2,100bb74 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 100bc08:	e037883a 	mov	sp,fp
 100bc0c:	dfc00117 	ldw	ra,4(sp)
 100bc10:	df000017 	ldw	fp,0(sp)
 100bc14:	dec00204 	addi	sp,sp,8
 100bc18:	f800283a 	ret

0100bc1c <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 100bc1c:	defff804 	addi	sp,sp,-32
 100bc20:	dfc00715 	stw	ra,28(sp)
 100bc24:	df000615 	stw	fp,24(sp)
 100bc28:	df000604 	addi	fp,sp,24
 100bc2c:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 100bc30:	e13fff17 	ldw	r4,-4(fp)
 100bc34:	10004400 	call	1000440 <strlen>
 100bc38:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 100bc3c:	00bfffc4 	movi	r2,-1
 100bc40:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 100bc44:	00bfffc4 	movi	r2,-1
 100bc48:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 100bc4c:	00800044 	movi	r2,1
 100bc50:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 100bc54:	e03ffd15 	stw	zero,-12(fp)
 100bc58:	00007606 	br	100be34 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 100bc5c:	e0bffd17 	ldw	r2,-12(fp)
 100bc60:	1007883a 	mov	r3,r2
 100bc64:	e0bfff17 	ldw	r2,-4(fp)
 100bc68:	1885883a 	add	r2,r3,r2
 100bc6c:	10800003 	ldbu	r2,0(r2)
 100bc70:	10803fcc 	andi	r2,r2,255
 100bc74:	1080201c 	xori	r2,r2,128
 100bc78:	10bfe004 	addi	r2,r2,-128
 100bc7c:	10800820 	cmpeqi	r2,r2,32
 100bc80:	1000431e 	bne	r2,zero,100bd90 <check_file_name_for_FAT16_compliance+0x174>
 100bc84:	e0bffd17 	ldw	r2,-12(fp)
 100bc88:	10ffffc4 	addi	r3,r2,-1
 100bc8c:	e0bffc17 	ldw	r2,-16(fp)
 100bc90:	1880141e 	bne	r3,r2,100bce4 <check_file_name_for_FAT16_compliance+0xc8>
 100bc94:	e0bffd17 	ldw	r2,-12(fp)
 100bc98:	1007883a 	mov	r3,r2
 100bc9c:	e0bfff17 	ldw	r2,-4(fp)
 100bca0:	1885883a 	add	r2,r3,r2
 100bca4:	10800003 	ldbu	r2,0(r2)
 100bca8:	10803fcc 	andi	r2,r2,255
 100bcac:	1080201c 	xori	r2,r2,128
 100bcb0:	10bfe004 	addi	r2,r2,-128
 100bcb4:	10801720 	cmpeqi	r2,r2,92
 100bcb8:	1000351e 	bne	r2,zero,100bd90 <check_file_name_for_FAT16_compliance+0x174>
 100bcbc:	e0bffd17 	ldw	r2,-12(fp)
 100bcc0:	1007883a 	mov	r3,r2
 100bcc4:	e0bfff17 	ldw	r2,-4(fp)
 100bcc8:	1885883a 	add	r2,r3,r2
 100bccc:	10800003 	ldbu	r2,0(r2)
 100bcd0:	10803fcc 	andi	r2,r2,255
 100bcd4:	1080201c 	xori	r2,r2,128
 100bcd8:	10bfe004 	addi	r2,r2,-128
 100bcdc:	10800be0 	cmpeqi	r2,r2,47
 100bce0:	10002b1e 	bne	r2,zero,100bd90 <check_file_name_for_FAT16_compliance+0x174>
 100bce4:	e0fffd17 	ldw	r3,-12(fp)
 100bce8:	e0bffb17 	ldw	r2,-20(fp)
 100bcec:	1885c83a 	sub	r2,r3,r2
 100bcf0:	10800258 	cmpnei	r2,r2,9
 100bcf4:	10000a1e 	bne	r2,zero,100bd20 <check_file_name_for_FAT16_compliance+0x104>
 100bcf8:	e0bffd17 	ldw	r2,-12(fp)
 100bcfc:	1007883a 	mov	r3,r2
 100bd00:	e0bfff17 	ldw	r2,-4(fp)
 100bd04:	1885883a 	add	r2,r3,r2
 100bd08:	10800003 	ldbu	r2,0(r2)
 100bd0c:	10803fcc 	andi	r2,r2,255
 100bd10:	1080201c 	xori	r2,r2,128
 100bd14:	10bfe004 	addi	r2,r2,-128
 100bd18:	10800b98 	cmpnei	r2,r2,46
 100bd1c:	10001c1e 	bne	r2,zero,100bd90 <check_file_name_for_FAT16_compliance+0x174>
 100bd20:	e0fffc17 	ldw	r3,-16(fp)
 100bd24:	e0bffb17 	ldw	r2,-20(fp)
 100bd28:	18801b26 	beq	r3,r2,100bd98 <check_file_name_for_FAT16_compliance+0x17c>
 100bd2c:	e0fffd17 	ldw	r3,-12(fp)
 100bd30:	e0bffb17 	ldw	r2,-20(fp)
 100bd34:	1885c83a 	sub	r2,r3,r2
 100bd38:	10800110 	cmplti	r2,r2,4
 100bd3c:	1000161e 	bne	r2,zero,100bd98 <check_file_name_for_FAT16_compliance+0x17c>
 100bd40:	e0bffd17 	ldw	r2,-12(fp)
 100bd44:	1007883a 	mov	r3,r2
 100bd48:	e0bfff17 	ldw	r2,-4(fp)
 100bd4c:	1885883a 	add	r2,r3,r2
 100bd50:	10800003 	ldbu	r2,0(r2)
 100bd54:	10803fcc 	andi	r2,r2,255
 100bd58:	1080201c 	xori	r2,r2,128
 100bd5c:	10bfe004 	addi	r2,r2,-128
 100bd60:	10801720 	cmpeqi	r2,r2,92
 100bd64:	10000c1e 	bne	r2,zero,100bd98 <check_file_name_for_FAT16_compliance+0x17c>
 100bd68:	e0bffd17 	ldw	r2,-12(fp)
 100bd6c:	1007883a 	mov	r3,r2
 100bd70:	e0bfff17 	ldw	r2,-4(fp)
 100bd74:	1885883a 	add	r2,r3,r2
 100bd78:	10800003 	ldbu	r2,0(r2)
 100bd7c:	10803fcc 	andi	r2,r2,255
 100bd80:	1080201c 	xori	r2,r2,128
 100bd84:	10bfe004 	addi	r2,r2,-128
 100bd88:	10800be0 	cmpeqi	r2,r2,47
 100bd8c:	1000021e 	bne	r2,zero,100bd98 <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 100bd90:	e03ffa15 	stw	zero,-24(fp)
			break;
 100bd94:	00002a06 	br	100be40 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 100bd98:	e0bffd17 	ldw	r2,-12(fp)
 100bd9c:	1007883a 	mov	r3,r2
 100bda0:	e0bfff17 	ldw	r2,-4(fp)
 100bda4:	1885883a 	add	r2,r3,r2
 100bda8:	10800003 	ldbu	r2,0(r2)
 100bdac:	10803fcc 	andi	r2,r2,255
 100bdb0:	1080201c 	xori	r2,r2,128
 100bdb4:	10bfe004 	addi	r2,r2,-128
 100bdb8:	10801720 	cmpeqi	r2,r2,92
 100bdbc:	10000a1e 	bne	r2,zero,100bde8 <check_file_name_for_FAT16_compliance+0x1cc>
 100bdc0:	e0bffd17 	ldw	r2,-12(fp)
 100bdc4:	1007883a 	mov	r3,r2
 100bdc8:	e0bfff17 	ldw	r2,-4(fp)
 100bdcc:	1885883a 	add	r2,r3,r2
 100bdd0:	10800003 	ldbu	r2,0(r2)
 100bdd4:	10803fcc 	andi	r2,r2,255
 100bdd8:	1080201c 	xori	r2,r2,128
 100bddc:	10bfe004 	addi	r2,r2,-128
 100bde0:	10800bd8 	cmpnei	r2,r2,47
 100bde4:	1000041e 	bne	r2,zero,100bdf8 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 100bde8:	e0bffd17 	ldw	r2,-12(fp)
 100bdec:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 100bdf0:	e0bffd17 	ldw	r2,-12(fp)
 100bdf4:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 100bdf8:	e0bffd17 	ldw	r2,-12(fp)
 100bdfc:	1007883a 	mov	r3,r2
 100be00:	e0bfff17 	ldw	r2,-4(fp)
 100be04:	1885883a 	add	r2,r3,r2
 100be08:	10800003 	ldbu	r2,0(r2)
 100be0c:	10803fcc 	andi	r2,r2,255
 100be10:	1080201c 	xori	r2,r2,128
 100be14:	10bfe004 	addi	r2,r2,-128
 100be18:	10800b98 	cmpnei	r2,r2,46
 100be1c:	1000021e 	bne	r2,zero,100be28 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 100be20:	e0bffd17 	ldw	r2,-12(fp)
 100be24:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 100be28:	e0bffd17 	ldw	r2,-12(fp)
 100be2c:	10800044 	addi	r2,r2,1
 100be30:	e0bffd15 	stw	r2,-12(fp)
 100be34:	e0fffd17 	ldw	r3,-12(fp)
 100be38:	e0bffe17 	ldw	r2,-8(fp)
 100be3c:	18bf8716 	blt	r3,r2,100bc5c <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 100be40:	e0fffe17 	ldw	r3,-8(fp)
 100be44:	e0bfff17 	ldw	r2,-4(fp)
 100be48:	1885883a 	add	r2,r3,r2
 100be4c:	10bfffc4 	addi	r2,r2,-1
 100be50:	10800003 	ldbu	r2,0(r2)
 100be54:	10803fcc 	andi	r2,r2,255
 100be58:	1080201c 	xori	r2,r2,128
 100be5c:	10bfe004 	addi	r2,r2,-128
 100be60:	10801720 	cmpeqi	r2,r2,92
 100be64:	10000a1e 	bne	r2,zero,100be90 <check_file_name_for_FAT16_compliance+0x274>
 100be68:	e0fffe17 	ldw	r3,-8(fp)
 100be6c:	e0bfff17 	ldw	r2,-4(fp)
 100be70:	1885883a 	add	r2,r3,r2
 100be74:	10bfffc4 	addi	r2,r2,-1
 100be78:	10800003 	ldbu	r2,0(r2)
 100be7c:	10803fcc 	andi	r2,r2,255
 100be80:	1080201c 	xori	r2,r2,128
 100be84:	10bfe004 	addi	r2,r2,-128
 100be88:	10800bd8 	cmpnei	r2,r2,47
 100be8c:	1000011e 	bne	r2,zero,100be94 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 100be90:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 100be94:	e0bffa17 	ldw	r2,-24(fp)
}
 100be98:	e037883a 	mov	sp,fp
 100be9c:	dfc00117 	ldw	ra,4(sp)
 100bea0:	df000017 	ldw	fp,0(sp)
 100bea4:	dec00204 	addi	sp,sp,8
 100bea8:	f800283a 	ret

0100beac <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 100beac:	defffb04 	addi	sp,sp,-20
 100beb0:	dfc00415 	stw	ra,16(sp)
 100beb4:	df000315 	stw	fp,12(sp)
 100beb8:	df000304 	addi	fp,sp,12
 100bebc:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 100bec0:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 100bec4:	e13fff17 	ldw	r4,-4(fp)
 100bec8:	10004400 	call	1000440 <strlen>
 100becc:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100bed0:	e03ffe15 	stw	zero,-8(fp)
 100bed4:	00001706 	br	100bf34 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 100bed8:	e0bffe17 	ldw	r2,-8(fp)
 100bedc:	1007883a 	mov	r3,r2
 100bee0:	e0bfff17 	ldw	r2,-4(fp)
 100bee4:	1885883a 	add	r2,r3,r2
 100bee8:	10800003 	ldbu	r2,0(r2)
 100beec:	10803fcc 	andi	r2,r2,255
 100bef0:	1080201c 	xori	r2,r2,128
 100bef4:	10bfe004 	addi	r2,r2,-128
 100bef8:	10801720 	cmpeqi	r2,r2,92
 100befc:	1000101e 	bne	r2,zero,100bf40 <get_dir_divider_location+0x94>
 100bf00:	e0bffe17 	ldw	r2,-8(fp)
 100bf04:	1007883a 	mov	r3,r2
 100bf08:	e0bfff17 	ldw	r2,-4(fp)
 100bf0c:	1885883a 	add	r2,r3,r2
 100bf10:	10800003 	ldbu	r2,0(r2)
 100bf14:	10803fcc 	andi	r2,r2,255
 100bf18:	1080201c 	xori	r2,r2,128
 100bf1c:	10bfe004 	addi	r2,r2,-128
 100bf20:	10800be0 	cmpeqi	r2,r2,47
 100bf24:	1000061e 	bne	r2,zero,100bf40 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 100bf28:	e0bffe17 	ldw	r2,-8(fp)
 100bf2c:	10800044 	addi	r2,r2,1
 100bf30:	e0bffe15 	stw	r2,-8(fp)
 100bf34:	e0fffe17 	ldw	r3,-8(fp)
 100bf38:	e0bffd17 	ldw	r2,-12(fp)
 100bf3c:	18bfe616 	blt	r3,r2,100bed8 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 100bf40:	e0fffe17 	ldw	r3,-8(fp)
 100bf44:	e0bffd17 	ldw	r2,-12(fp)
 100bf48:	1880021e 	bne	r3,r2,100bf54 <get_dir_divider_location+0xa8>
		index = -1;
 100bf4c:	00bfffc4 	movi	r2,-1
 100bf50:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 100bf54:	e0bffe17 	ldw	r2,-8(fp)
}
 100bf58:	e037883a 	mov	sp,fp
 100bf5c:	dfc00117 	ldw	ra,4(sp)
 100bf60:	df000017 	ldw	fp,0(sp)
 100bf64:	dec00204 	addi	sp,sp,8
 100bf68:	f800283a 	ret

0100bf6c <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 100bf6c:	defff604 	addi	sp,sp,-40
 100bf70:	df000915 	stw	fp,36(sp)
 100bf74:	df000904 	addi	fp,sp,36
 100bf78:	e13ff915 	stw	r4,-28(fp)
 100bf7c:	e17ffa15 	stw	r5,-24(fp)
 100bf80:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 100bf84:	00800044 	movi	r2,1
 100bf88:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 100bf8c:	e03ff715 	stw	zero,-36(fp)
 100bf90:	00005006 	br	100c0d4 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 100bf94:	e0fff717 	ldw	r3,-36(fp)
 100bf98:	e0bff917 	ldw	r2,-28(fp)
 100bf9c:	10c5883a 	add	r2,r2,r3
 100bfa0:	10800003 	ldbu	r2,0(r2)
 100bfa4:	10803fcc 	andi	r2,r2,255
 100bfa8:	10801870 	cmpltui	r2,r2,97
 100bfac:	1000111e 	bne	r2,zero,100bff4 <match_file_record_to_name_ext+0x88>
 100bfb0:	e0fff717 	ldw	r3,-36(fp)
 100bfb4:	e0bff917 	ldw	r2,-28(fp)
 100bfb8:	10c5883a 	add	r2,r2,r3
 100bfbc:	10800003 	ldbu	r2,0(r2)
 100bfc0:	10803fcc 	andi	r2,r2,255
 100bfc4:	10801ee8 	cmpgeui	r2,r2,123
 100bfc8:	10000a1e 	bne	r2,zero,100bff4 <match_file_record_to_name_ext+0x88>
 100bfcc:	e0fff717 	ldw	r3,-36(fp)
 100bfd0:	e0bff917 	ldw	r2,-28(fp)
 100bfd4:	10c5883a 	add	r2,r2,r3
 100bfd8:	10800003 	ldbu	r2,0(r2)
 100bfdc:	10bff804 	addi	r2,r2,-32
 100bfe0:	10803fcc 	andi	r2,r2,255
 100bfe4:	1080201c 	xori	r2,r2,128
 100bfe8:	10bfe004 	addi	r2,r2,-128
 100bfec:	e0bfff15 	stw	r2,-4(fp)
 100bff0:	00000806 	br	100c014 <match_file_record_to_name_ext+0xa8>
 100bff4:	e0fff717 	ldw	r3,-36(fp)
 100bff8:	e0bff917 	ldw	r2,-28(fp)
 100bffc:	10c5883a 	add	r2,r2,r3
 100c000:	10800003 	ldbu	r2,0(r2)
 100c004:	10803fcc 	andi	r2,r2,255
 100c008:	1080201c 	xori	r2,r2,128
 100c00c:	10bfe004 	addi	r2,r2,-128
 100c010:	e0bfff15 	stw	r2,-4(fp)
 100c014:	e0bff717 	ldw	r2,-36(fp)
 100c018:	1007883a 	mov	r3,r2
 100c01c:	e0bffa17 	ldw	r2,-24(fp)
 100c020:	1885883a 	add	r2,r3,r2
 100c024:	10800003 	ldbu	r2,0(r2)
 100c028:	10803fcc 	andi	r2,r2,255
 100c02c:	1080201c 	xori	r2,r2,128
 100c030:	10bfe004 	addi	r2,r2,-128
 100c034:	10801850 	cmplti	r2,r2,97
 100c038:	1000151e 	bne	r2,zero,100c090 <match_file_record_to_name_ext+0x124>
 100c03c:	e0bff717 	ldw	r2,-36(fp)
 100c040:	1007883a 	mov	r3,r2
 100c044:	e0bffa17 	ldw	r2,-24(fp)
 100c048:	1885883a 	add	r2,r3,r2
 100c04c:	10800003 	ldbu	r2,0(r2)
 100c050:	10803fcc 	andi	r2,r2,255
 100c054:	1080201c 	xori	r2,r2,128
 100c058:	10bfe004 	addi	r2,r2,-128
 100c05c:	10801ec8 	cmpgei	r2,r2,123
 100c060:	10000b1e 	bne	r2,zero,100c090 <match_file_record_to_name_ext+0x124>
 100c064:	e0bff717 	ldw	r2,-36(fp)
 100c068:	1007883a 	mov	r3,r2
 100c06c:	e0bffa17 	ldw	r2,-24(fp)
 100c070:	1885883a 	add	r2,r3,r2
 100c074:	10800003 	ldbu	r2,0(r2)
 100c078:	10bff804 	addi	r2,r2,-32
 100c07c:	10803fcc 	andi	r2,r2,255
 100c080:	1080201c 	xori	r2,r2,128
 100c084:	10bfe004 	addi	r2,r2,-128
 100c088:	e0bffe15 	stw	r2,-8(fp)
 100c08c:	00000906 	br	100c0b4 <match_file_record_to_name_ext+0x148>
 100c090:	e0bff717 	ldw	r2,-36(fp)
 100c094:	1007883a 	mov	r3,r2
 100c098:	e0bffa17 	ldw	r2,-24(fp)
 100c09c:	1885883a 	add	r2,r3,r2
 100c0a0:	10800003 	ldbu	r2,0(r2)
 100c0a4:	10803fcc 	andi	r2,r2,255
 100c0a8:	1080201c 	xori	r2,r2,128
 100c0ac:	10bfe004 	addi	r2,r2,-128
 100c0b0:	e0bffe15 	stw	r2,-8(fp)
 100c0b4:	e0bfff17 	ldw	r2,-4(fp)
 100c0b8:	e0fffe17 	ldw	r3,-8(fp)
 100c0bc:	10c00226 	beq	r2,r3,100c0c8 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 100c0c0:	e03ff815 	stw	zero,-32(fp)
			break;
 100c0c4:	00000606 	br	100c0e0 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 100c0c8:	e0bff717 	ldw	r2,-36(fp)
 100c0cc:	10800044 	addi	r2,r2,1
 100c0d0:	e0bff715 	stw	r2,-36(fp)
 100c0d4:	e0bff717 	ldw	r2,-36(fp)
 100c0d8:	10800210 	cmplti	r2,r2,8
 100c0dc:	103fad1e 	bne	r2,zero,100bf94 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100c0e0:	e03ff715 	stw	zero,-36(fp)
 100c0e4:	00005406 	br	100c238 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 100c0e8:	e0fff717 	ldw	r3,-36(fp)
 100c0ec:	e0bff917 	ldw	r2,-28(fp)
 100c0f0:	1885883a 	add	r2,r3,r2
 100c0f4:	10800204 	addi	r2,r2,8
 100c0f8:	10800003 	ldbu	r2,0(r2)
 100c0fc:	10803fcc 	andi	r2,r2,255
 100c100:	10801870 	cmpltui	r2,r2,97
 100c104:	1000131e 	bne	r2,zero,100c154 <match_file_record_to_name_ext+0x1e8>
 100c108:	e0fff717 	ldw	r3,-36(fp)
 100c10c:	e0bff917 	ldw	r2,-28(fp)
 100c110:	1885883a 	add	r2,r3,r2
 100c114:	10800204 	addi	r2,r2,8
 100c118:	10800003 	ldbu	r2,0(r2)
 100c11c:	10803fcc 	andi	r2,r2,255
 100c120:	10801ee8 	cmpgeui	r2,r2,123
 100c124:	10000b1e 	bne	r2,zero,100c154 <match_file_record_to_name_ext+0x1e8>
 100c128:	e0fff717 	ldw	r3,-36(fp)
 100c12c:	e0bff917 	ldw	r2,-28(fp)
 100c130:	1885883a 	add	r2,r3,r2
 100c134:	10800204 	addi	r2,r2,8
 100c138:	10800003 	ldbu	r2,0(r2)
 100c13c:	10bff804 	addi	r2,r2,-32
 100c140:	10803fcc 	andi	r2,r2,255
 100c144:	1080201c 	xori	r2,r2,128
 100c148:	10bfe004 	addi	r2,r2,-128
 100c14c:	e0bffd15 	stw	r2,-12(fp)
 100c150:	00000906 	br	100c178 <match_file_record_to_name_ext+0x20c>
 100c154:	e0fff717 	ldw	r3,-36(fp)
 100c158:	e0bff917 	ldw	r2,-28(fp)
 100c15c:	1885883a 	add	r2,r3,r2
 100c160:	10800204 	addi	r2,r2,8
 100c164:	10800003 	ldbu	r2,0(r2)
 100c168:	10803fcc 	andi	r2,r2,255
 100c16c:	1080201c 	xori	r2,r2,128
 100c170:	10bfe004 	addi	r2,r2,-128
 100c174:	e0bffd15 	stw	r2,-12(fp)
 100c178:	e0bff717 	ldw	r2,-36(fp)
 100c17c:	1007883a 	mov	r3,r2
 100c180:	e0bffb17 	ldw	r2,-20(fp)
 100c184:	1885883a 	add	r2,r3,r2
 100c188:	10800003 	ldbu	r2,0(r2)
 100c18c:	10803fcc 	andi	r2,r2,255
 100c190:	1080201c 	xori	r2,r2,128
 100c194:	10bfe004 	addi	r2,r2,-128
 100c198:	10801850 	cmplti	r2,r2,97
 100c19c:	1000151e 	bne	r2,zero,100c1f4 <match_file_record_to_name_ext+0x288>
 100c1a0:	e0bff717 	ldw	r2,-36(fp)
 100c1a4:	1007883a 	mov	r3,r2
 100c1a8:	e0bffb17 	ldw	r2,-20(fp)
 100c1ac:	1885883a 	add	r2,r3,r2
 100c1b0:	10800003 	ldbu	r2,0(r2)
 100c1b4:	10803fcc 	andi	r2,r2,255
 100c1b8:	1080201c 	xori	r2,r2,128
 100c1bc:	10bfe004 	addi	r2,r2,-128
 100c1c0:	10801ec8 	cmpgei	r2,r2,123
 100c1c4:	10000b1e 	bne	r2,zero,100c1f4 <match_file_record_to_name_ext+0x288>
 100c1c8:	e0bff717 	ldw	r2,-36(fp)
 100c1cc:	1007883a 	mov	r3,r2
 100c1d0:	e0bffb17 	ldw	r2,-20(fp)
 100c1d4:	1885883a 	add	r2,r3,r2
 100c1d8:	10800003 	ldbu	r2,0(r2)
 100c1dc:	10bff804 	addi	r2,r2,-32
 100c1e0:	10803fcc 	andi	r2,r2,255
 100c1e4:	1080201c 	xori	r2,r2,128
 100c1e8:	10bfe004 	addi	r2,r2,-128
 100c1ec:	e0bffc15 	stw	r2,-16(fp)
 100c1f0:	00000906 	br	100c218 <match_file_record_to_name_ext+0x2ac>
 100c1f4:	e0bff717 	ldw	r2,-36(fp)
 100c1f8:	1007883a 	mov	r3,r2
 100c1fc:	e0bffb17 	ldw	r2,-20(fp)
 100c200:	1885883a 	add	r2,r3,r2
 100c204:	10800003 	ldbu	r2,0(r2)
 100c208:	10803fcc 	andi	r2,r2,255
 100c20c:	1080201c 	xori	r2,r2,128
 100c210:	10bfe004 	addi	r2,r2,-128
 100c214:	e0bffc15 	stw	r2,-16(fp)
 100c218:	e0bffd17 	ldw	r2,-12(fp)
 100c21c:	e0fffc17 	ldw	r3,-16(fp)
 100c220:	10c00226 	beq	r2,r3,100c22c <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 100c224:	e03ff815 	stw	zero,-32(fp)
			break;
 100c228:	00000606 	br	100c244 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100c22c:	e0bff717 	ldw	r2,-36(fp)
 100c230:	10800044 	addi	r2,r2,1
 100c234:	e0bff715 	stw	r2,-36(fp)
 100c238:	e0bff717 	ldw	r2,-36(fp)
 100c23c:	108000d0 	cmplti	r2,r2,3
 100c240:	103fa91e 	bne	r2,zero,100c0e8 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 100c244:	e0bff817 	ldw	r2,-32(fp)
}
 100c248:	e037883a 	mov	sp,fp
 100c24c:	df000017 	ldw	fp,0(sp)
 100c250:	dec00104 	addi	sp,sp,4
 100c254:	f800283a 	ret

0100c258 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 100c258:	deffe604 	addi	sp,sp,-104
 100c25c:	dfc01915 	stw	ra,100(sp)
 100c260:	df001815 	stw	fp,96(sp)
 100c264:	df001804 	addi	fp,sp,96
 100c268:	e13ffc15 	stw	r4,-16(fp)
 100c26c:	e17ffd15 	stw	r5,-12(fp)
 100c270:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 100c274:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 100c278:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 100c27c:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 100c280:	e13ffc17 	ldw	r4,-16(fp)
 100c284:	100beac0 	call	100beac <get_dir_divider_location>
 100c288:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 100c28c:	00012206 	br	100c718 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100c290:	00800804 	movi	r2,32
 100c294:	e0bff805 	stb	r2,-32(fp)
 100c298:	00800804 	movi	r2,32
 100c29c:	e0bff845 	stb	r2,-31(fp)
 100c2a0:	00800804 	movi	r2,32
 100c2a4:	e0bff885 	stb	r2,-30(fp)
 100c2a8:	00800804 	movi	r2,32
 100c2ac:	e0bff8c5 	stb	r2,-29(fp)
 100c2b0:	00800804 	movi	r2,32
 100c2b4:	e0bff905 	stb	r2,-28(fp)
 100c2b8:	00800804 	movi	r2,32
 100c2bc:	e0bff945 	stb	r2,-27(fp)
 100c2c0:	00800804 	movi	r2,32
 100c2c4:	e0bff985 	stb	r2,-26(fp)
 100c2c8:	00800804 	movi	r2,32
 100c2cc:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 100c2d0:	00800804 	movi	r2,32
 100c2d4:	e0bffa05 	stb	r2,-24(fp)
 100c2d8:	00800804 	movi	r2,32
 100c2dc:	e0bffa45 	stb	r2,-23(fp)
 100c2e0:	00800804 	movi	r2,32
 100c2e4:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 100c2e8:	00bfffc4 	movi	r2,-1
 100c2ec:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 100c2f0:	e0bff617 	ldw	r2,-40(fp)
 100c2f4:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100c2f8:	e03ff415 	stw	zero,-48(fp)
 100c2fc:	00002e06 	br	100c3b8 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 100c300:	e0fff417 	ldw	r3,-48(fp)
 100c304:	e0bff317 	ldw	r2,-52(fp)
 100c308:	1885883a 	add	r2,r3,r2
 100c30c:	1007883a 	mov	r3,r2
 100c310:	e0bffc17 	ldw	r2,-16(fp)
 100c314:	1885883a 	add	r2,r3,r2
 100c318:	10800003 	ldbu	r2,0(r2)
 100c31c:	10803fcc 	andi	r2,r2,255
 100c320:	1080201c 	xori	r2,r2,128
 100c324:	10bfe004 	addi	r2,r2,-128
 100c328:	10800b98 	cmpnei	r2,r2,46
 100c32c:	1000031e 	bne	r2,zero,100c33c <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 100c330:	e0bff417 	ldw	r2,-48(fp)
 100c334:	e0bff215 	stw	r2,-56(fp)
 100c338:	00001c06 	br	100c3ac <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 100c33c:	e0bff217 	ldw	r2,-56(fp)
 100c340:	1004403a 	cmpge	r2,r2,zero
 100c344:	10000c1e 	bne	r2,zero,100c378 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 100c348:	e13ff417 	ldw	r4,-48(fp)
 100c34c:	e0fff417 	ldw	r3,-48(fp)
 100c350:	e0bff317 	ldw	r2,-52(fp)
 100c354:	1885883a 	add	r2,r3,r2
 100c358:	1007883a 	mov	r3,r2
 100c35c:	e0bffc17 	ldw	r2,-16(fp)
 100c360:	1885883a 	add	r2,r3,r2
 100c364:	10c00003 	ldbu	r3,0(r2)
 100c368:	e0bff804 	addi	r2,fp,-32
 100c36c:	1105883a 	add	r2,r2,r4
 100c370:	10c00005 	stb	r3,0(r2)
 100c374:	00000d06 	br	100c3ac <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 100c378:	e0fff417 	ldw	r3,-48(fp)
 100c37c:	e0bff217 	ldw	r2,-56(fp)
 100c380:	1889c83a 	sub	r4,r3,r2
 100c384:	e0fff417 	ldw	r3,-48(fp)
 100c388:	e0bff317 	ldw	r2,-52(fp)
 100c38c:	1885883a 	add	r2,r3,r2
 100c390:	1007883a 	mov	r3,r2
 100c394:	e0bffc17 	ldw	r2,-16(fp)
 100c398:	1885883a 	add	r2,r3,r2
 100c39c:	10c00003 	ldbu	r3,0(r2)
 100c3a0:	e0bffa04 	addi	r2,fp,-24
 100c3a4:	1105883a 	add	r2,r2,r4
 100c3a8:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100c3ac:	e0bff417 	ldw	r2,-48(fp)
 100c3b0:	10800044 	addi	r2,r2,1
 100c3b4:	e0bff415 	stw	r2,-48(fp)
 100c3b8:	e0fff417 	ldw	r3,-48(fp)
 100c3bc:	e0bff517 	ldw	r2,-44(fp)
 100c3c0:	18bfcf16 	blt	r3,r2,100c300 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 100c3c4:	e0bff617 	ldw	r2,-40(fp)
 100c3c8:	1004c03a 	cmpne	r2,r2,zero
 100c3cc:	1000551e 	bne	r2,zero,100c524 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 100c3d0:	00804074 	movhi	r2,257
 100c3d4:	10990a04 	addi	r2,r2,25640
 100c3d8:	1080050b 	ldhu	r2,20(r2)
 100c3dc:	10bfffcc 	andi	r2,r2,65535
 100c3e0:	1008917a 	slli	r4,r2,5
 100c3e4:	00804074 	movhi	r2,257
 100c3e8:	10990a04 	addi	r2,r2,25640
 100c3ec:	1080030b 	ldhu	r2,12(r2)
 100c3f0:	117fffcc 	andi	r5,r2,65535
 100c3f4:	10095c00 	call	10095c0 <__divsi3>
 100c3f8:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 100c3fc:	e03fef15 	stw	zero,-68(fp)
 100c400:	00003806 	br	100c4e4 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 100c404:	00804074 	movhi	r2,257
 100c408:	10990a04 	addi	r2,r2,25640
 100c40c:	10c01317 	ldw	r3,76(r2)
 100c410:	e0bfef17 	ldw	r2,-68(fp)
 100c414:	1885883a 	add	r2,r3,r2
 100c418:	1009883a 	mov	r4,r2
 100c41c:	d166cf17 	ldw	r5,-25796(gp)
 100c420:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100c424:	1005003a 	cmpeq	r2,r2,zero
 100c428:	1000311e 	bne	r2,zero,100c4f0 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100c42c:	e03fee15 	stw	zero,-72(fp)
 100c430:	00002306 	br	100c4c0 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100c434:	e0bfee17 	ldw	r2,-72(fp)
 100c438:	1008917a 	slli	r4,r2,5
 100c43c:	e1ffef17 	ldw	r7,-68(fp)
 100c440:	e17ffe17 	ldw	r5,-8(fp)
 100c444:	000d883a 	mov	r6,zero
 100c448:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 100c44c:	e0bffe17 	ldw	r2,-8(fp)
 100c450:	10800003 	ldbu	r2,0(r2)
 100c454:	10803fcc 	andi	r2,r2,255
 100c458:	10803960 	cmpeqi	r2,r2,229
 100c45c:	1000151e 	bne	r2,zero,100c4b4 <get_home_directory_cluster_for_file+0x25c>
 100c460:	e0bffe17 	ldw	r2,-8(fp)
 100c464:	10800003 	ldbu	r2,0(r2)
 100c468:	10803fcc 	andi	r2,r2,255
 100c46c:	1005003a 	cmpeq	r2,r2,zero
 100c470:	1000101e 	bne	r2,zero,100c4b4 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100c474:	e17ff804 	addi	r5,fp,-32
 100c478:	e1bffa04 	addi	r6,fp,-24
 100c47c:	e13ffe17 	ldw	r4,-8(fp)
 100c480:	100bf6c0 	call	100bf6c <match_file_record_to_name_ext>
 100c484:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 100c488:	e0bfed17 	ldw	r2,-76(fp)
 100c48c:	1005003a 	cmpeq	r2,r2,zero
 100c490:	1000081e 	bne	r2,zero,100c4b4 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 100c494:	e0bffe17 	ldw	r2,-8(fp)
 100c498:	1080058b 	ldhu	r2,22(r2)
 100c49c:	10bfffcc 	andi	r2,r2,65535
 100c4a0:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 100c4a4:	e0fffe17 	ldw	r3,-8(fp)
 100c4a8:	00800044 	movi	r2,1
 100c4ac:	18800a15 	stw	r2,40(r3)
								break;
 100c4b0:	00000606 	br	100c4cc <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100c4b4:	e0bfee17 	ldw	r2,-72(fp)
 100c4b8:	10800044 	addi	r2,r2,1
 100c4bc:	e0bfee15 	stw	r2,-72(fp)
 100c4c0:	e0bfee17 	ldw	r2,-72(fp)
 100c4c4:	10800410 	cmplti	r2,r2,16
 100c4c8:	103fda1e 	bne	r2,zero,100c434 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 100c4cc:	e0fff117 	ldw	r3,-60(fp)
 100c4d0:	e0bff617 	ldw	r2,-40(fp)
 100c4d4:	1880061e 	bne	r3,r2,100c4f0 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 100c4d8:	e0bfef17 	ldw	r2,-68(fp)
 100c4dc:	10800044 	addi	r2,r2,1
 100c4e0:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 100c4e4:	e0ffef17 	ldw	r3,-68(fp)
 100c4e8:	e0bff017 	ldw	r2,-64(fp)
 100c4ec:	18bfc516 	blt	r3,r2,100c404 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 100c4f0:	e0fff117 	ldw	r3,-60(fp)
 100c4f4:	e0bff617 	ldw	r2,-40(fp)
 100c4f8:	18800826 	beq	r3,r2,100c51c <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100c4fc:	e0bff117 	ldw	r2,-60(fp)
 100c500:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100c504:	e0fff317 	ldw	r3,-52(fp)
 100c508:	e0bff517 	ldw	r2,-44(fp)
 100c50c:	1885883a 	add	r2,r3,r2
 100c510:	10800044 	addi	r2,r2,1
 100c514:	e0bff315 	stw	r2,-52(fp)
 100c518:	00007406 	br	100c6ec <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100c51c:	e03fff15 	stw	zero,-4(fp)
 100c520:	00008c06 	br	100c754 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 100c524:	e0bff617 	ldw	r2,-40(fp)
 100c528:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 100c52c:	e0bfec17 	ldw	r2,-80(fp)
 100c530:	113fff84 	addi	r4,r2,-2
 100c534:	00804074 	movhi	r2,257
 100c538:	10990a04 	addi	r2,r2,25640
 100c53c:	10800383 	ldbu	r2,14(r2)
 100c540:	11403fcc 	andi	r5,r2,255
 100c544:	10096900 	call	1009690 <__mulsi3>
 100c548:	1007883a 	mov	r3,r2
 100c54c:	00804074 	movhi	r2,257
 100c550:	10990a04 	addi	r2,r2,25640
 100c554:	10801417 	ldw	r2,80(r2)
 100c558:	1885883a 	add	r2,r3,r2
 100c55c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 100c560:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 100c564:	00003206 	br	100c630 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 100c568:	e0ffea17 	ldw	r3,-88(fp)
 100c56c:	e0bfeb17 	ldw	r2,-84(fp)
 100c570:	1889883a 	add	r4,r3,r2
 100c574:	d166cf17 	ldw	r5,-25796(gp)
 100c578:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100c57c:	1005003a 	cmpeq	r2,r2,zero
 100c580:	1000311e 	bne	r2,zero,100c648 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 100c584:	e03fe915 	stw	zero,-92(fp)
 100c588:	00002006 	br	100c60c <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 100c58c:	e0bfe917 	ldw	r2,-92(fp)
 100c590:	1008917a 	slli	r4,r2,5
 100c594:	e1bfec17 	ldw	r6,-80(fp)
 100c598:	e1ffea17 	ldw	r7,-88(fp)
 100c59c:	e17ffe17 	ldw	r5,-8(fp)
 100c5a0:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 100c5a4:	e0bffe17 	ldw	r2,-8(fp)
 100c5a8:	10800003 	ldbu	r2,0(r2)
 100c5ac:	10803fcc 	andi	r2,r2,255
 100c5b0:	10803960 	cmpeqi	r2,r2,229
 100c5b4:	1000121e 	bne	r2,zero,100c600 <get_home_directory_cluster_for_file+0x3a8>
 100c5b8:	e0bffe17 	ldw	r2,-8(fp)
 100c5bc:	10800003 	ldbu	r2,0(r2)
 100c5c0:	10803fcc 	andi	r2,r2,255
 100c5c4:	1005003a 	cmpeq	r2,r2,zero
 100c5c8:	10000d1e 	bne	r2,zero,100c600 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 100c5cc:	e17ff804 	addi	r5,fp,-32
 100c5d0:	e1bffa04 	addi	r6,fp,-24
 100c5d4:	e13ffe17 	ldw	r4,-8(fp)
 100c5d8:	100bf6c0 	call	100bf6c <match_file_record_to_name_ext>
 100c5dc:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 100c5e0:	e0bfe817 	ldw	r2,-96(fp)
 100c5e4:	1005003a 	cmpeq	r2,r2,zero
 100c5e8:	1000051e 	bne	r2,zero,100c600 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 100c5ec:	e0bffe17 	ldw	r2,-8(fp)
 100c5f0:	1080058b 	ldhu	r2,22(r2)
 100c5f4:	10bfffcc 	andi	r2,r2,65535
 100c5f8:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 100c5fc:	00000606 	br	100c618 <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 100c600:	e0bfe917 	ldw	r2,-92(fp)
 100c604:	10800044 	addi	r2,r2,1
 100c608:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 100c60c:	e0bfe917 	ldw	r2,-92(fp)
 100c610:	10800410 	cmplti	r2,r2,16
 100c614:	103fdd1e 	bne	r2,zero,100c58c <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 100c618:	e0fff117 	ldw	r3,-60(fp)
 100c61c:	e0bff617 	ldw	r2,-40(fp)
 100c620:	1880091e 	bne	r3,r2,100c648 <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 100c624:	e0bfea17 	ldw	r2,-88(fp)
 100c628:	10800044 	addi	r2,r2,1
 100c62c:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 100c630:	00804074 	movhi	r2,257
 100c634:	10990a04 	addi	r2,r2,25640
 100c638:	10800383 	ldbu	r2,14(r2)
 100c63c:	10c03fcc 	andi	r3,r2,255
 100c640:	e0bfea17 	ldw	r2,-88(fp)
 100c644:	10ffc816 	blt	r2,r3,100c568 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 100c648:	e0fff117 	ldw	r3,-60(fp)
 100c64c:	e0bff617 	ldw	r2,-40(fp)
 100c650:	1880131e 	bne	r3,r2,100c6a0 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 100c654:	e13ff117 	ldw	r4,-60(fp)
 100c658:	e17ffb04 	addi	r5,fp,-20
 100c65c:	100ab780 	call	100ab78 <get_cluster_flag>
 100c660:	1005003a 	cmpeq	r2,r2,zero
 100c664:	10000c1e 	bne	r2,zero,100c698 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100c668:	e0bffb0b 	ldhu	r2,-20(fp)
 100c66c:	10bfffcc 	andi	r2,r2,65535
 100c670:	10fffe0c 	andi	r3,r2,65528
 100c674:	00bffe14 	movui	r2,65528
 100c678:	1880021e 	bne	r3,r2,100c684 <get_home_directory_cluster_for_file+0x42c>
							return false;
 100c67c:	e03fff15 	stw	zero,-4(fp)
 100c680:	00003406 	br	100c754 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 100c684:	e0bffb0b 	ldhu	r2,-20(fp)
 100c688:	10bfffcc 	andi	r2,r2,65535
 100c68c:	10bffe0c 	andi	r2,r2,65528
 100c690:	e0bff115 	stw	r2,-60(fp)
 100c694:	00000206 	br	100c6a0 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 100c698:	e03fff15 	stw	zero,-4(fp)
 100c69c:	00002d06 	br	100c754 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 100c6a0:	e0ffec17 	ldw	r3,-80(fp)
 100c6a4:	00bffdd4 	movui	r2,65527
 100c6a8:	10c00316 	blt	r2,r3,100c6b8 <get_home_directory_cluster_for_file+0x460>
 100c6ac:	e0fff117 	ldw	r3,-60(fp)
 100c6b0:	e0bff617 	ldw	r2,-40(fp)
 100c6b4:	18bf9d26 	beq	r3,r2,100c52c <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 100c6b8:	e0fff117 	ldw	r3,-60(fp)
 100c6bc:	e0bff617 	ldw	r2,-40(fp)
 100c6c0:	18800826 	beq	r3,r2,100c6e4 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100c6c4:	e0bff117 	ldw	r2,-60(fp)
 100c6c8:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100c6cc:	e0fff317 	ldw	r3,-52(fp)
 100c6d0:	e0bff517 	ldw	r2,-44(fp)
 100c6d4:	1885883a 	add	r2,r3,r2
 100c6d8:	10800044 	addi	r2,r2,1
 100c6dc:	e0bff315 	stw	r2,-52(fp)
 100c6e0:	00000206 	br	100c6ec <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100c6e4:	e03fff15 	stw	zero,-4(fp)
 100c6e8:	00001a06 	br	100c754 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 100c6ec:	e0bff317 	ldw	r2,-52(fp)
 100c6f0:	1007883a 	mov	r3,r2
 100c6f4:	e0bffc17 	ldw	r2,-16(fp)
 100c6f8:	1889883a 	add	r4,r3,r2
 100c6fc:	100beac0 	call	100beac <get_dir_divider_location>
 100c700:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 100c704:	e0bff517 	ldw	r2,-44(fp)
 100c708:	1004403a 	cmpge	r2,r2,zero
 100c70c:	1000021e 	bne	r2,zero,100c718 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 100c710:	00800044 	movi	r2,1
 100c714:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 100c718:	e0bff517 	ldw	r2,-44(fp)
 100c71c:	10800048 	cmpgei	r2,r2,1
 100c720:	103edb1e 	bne	r2,zero,100c290 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 100c724:	e0fffd17 	ldw	r3,-12(fp)
 100c728:	e0bff617 	ldw	r2,-40(fp)
 100c72c:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 100c730:	e0bff617 	ldw	r2,-40(fp)
 100c734:	1004c03a 	cmpne	r2,r2,zero
 100c738:	1000041e 	bne	r2,zero,100c74c <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 100c73c:	e0bffe17 	ldw	r2,-8(fp)
 100c740:	10000a15 	stw	zero,40(r2)
		result = true;
 100c744:	00800044 	movi	r2,1
 100c748:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 100c74c:	e0bff717 	ldw	r2,-36(fp)
 100c750:	e0bfff15 	stw	r2,-4(fp)
 100c754:	e0bfff17 	ldw	r2,-4(fp)
}
 100c758:	e037883a 	mov	sp,fp
 100c75c:	dfc00117 	ldw	ra,4(sp)
 100c760:	df000017 	ldw	fp,0(sp)
 100c764:	dec00204 	addi	sp,sp,8
 100c768:	f800283a 	ret

0100c76c <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 100c76c:	deffe704 	addi	sp,sp,-100
 100c770:	dfc01815 	stw	ra,96(sp)
 100c774:	df001715 	stw	fp,92(sp)
 100c778:	df001704 	addi	fp,sp,92
 100c77c:	e13ffc15 	stw	r4,-16(fp)
 100c780:	e17ffd15 	stw	r5,-12(fp)
 100c784:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 100c788:	e13ffd17 	ldw	r4,-12(fp)
 100c78c:	100beac0 	call	100beac <get_dir_divider_location>
 100c790:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 100c794:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100c798:	00800804 	movi	r2,32
 100c79c:	e0bff805 	stb	r2,-32(fp)
 100c7a0:	00800804 	movi	r2,32
 100c7a4:	e0bff845 	stb	r2,-31(fp)
 100c7a8:	00800804 	movi	r2,32
 100c7ac:	e0bff885 	stb	r2,-30(fp)
 100c7b0:	00800804 	movi	r2,32
 100c7b4:	e0bff8c5 	stb	r2,-29(fp)
 100c7b8:	00800804 	movi	r2,32
 100c7bc:	e0bff905 	stb	r2,-28(fp)
 100c7c0:	00800804 	movi	r2,32
 100c7c4:	e0bff945 	stb	r2,-27(fp)
 100c7c8:	00800804 	movi	r2,32
 100c7cc:	e0bff985 	stb	r2,-26(fp)
 100c7d0:	00800804 	movi	r2,32
 100c7d4:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 100c7d8:	00800804 	movi	r2,32
 100c7dc:	e0bffa05 	stb	r2,-24(fp)
 100c7e0:	00800804 	movi	r2,32
 100c7e4:	e0bffa45 	stb	r2,-23(fp)
 100c7e8:	00800804 	movi	r2,32
 100c7ec:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 100c7f0:	00bfffc4 	movi	r2,-1
 100c7f4:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 100c7f8:	e0bffc17 	ldw	r2,-16(fp)
 100c7fc:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 100c800:	e13ffd17 	ldw	r4,-12(fp)
 100c804:	10004400 	call	1000440 <strlen>
 100c808:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 100c80c:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 100c810:	00000b06 	br	100c840 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 100c814:	e0fff617 	ldw	r3,-40(fp)
 100c818:	e0bff717 	ldw	r2,-36(fp)
 100c81c:	1885883a 	add	r2,r3,r2
 100c820:	10800044 	addi	r2,r2,1
 100c824:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 100c828:	e0bff617 	ldw	r2,-40(fp)
 100c82c:	1007883a 	mov	r3,r2
 100c830:	e0bffd17 	ldw	r2,-12(fp)
 100c834:	1889883a 	add	r4,r3,r2
 100c838:	100beac0 	call	100beac <get_dir_divider_location>
 100c83c:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 100c840:	e0bff717 	ldw	r2,-36(fp)
 100c844:	10800048 	cmpgei	r2,r2,1
 100c848:	103ff21e 	bne	r2,zero,100c814 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100c84c:	e0bff617 	ldw	r2,-40(fp)
 100c850:	e0bff315 	stw	r2,-52(fp)
 100c854:	00002b06 	br	100c904 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 100c858:	e0bff317 	ldw	r2,-52(fp)
 100c85c:	1007883a 	mov	r3,r2
 100c860:	e0bffd17 	ldw	r2,-12(fp)
 100c864:	1885883a 	add	r2,r3,r2
 100c868:	10800003 	ldbu	r2,0(r2)
 100c86c:	10803fcc 	andi	r2,r2,255
 100c870:	1080201c 	xori	r2,r2,128
 100c874:	10bfe004 	addi	r2,r2,-128
 100c878:	10800b98 	cmpnei	r2,r2,46
 100c87c:	1000031e 	bne	r2,zero,100c88c <find_file_in_directory+0x120>
			ext_index = index;
 100c880:	e0bff317 	ldw	r2,-52(fp)
 100c884:	e0bff515 	stw	r2,-44(fp)
 100c888:	00001b06 	br	100c8f8 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 100c88c:	e0bff517 	ldw	r2,-44(fp)
 100c890:	1004403a 	cmpge	r2,r2,zero
 100c894:	10000c1e 	bne	r2,zero,100c8c8 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 100c898:	e0fff317 	ldw	r3,-52(fp)
 100c89c:	e0bff617 	ldw	r2,-40(fp)
 100c8a0:	1889c83a 	sub	r4,r3,r2
 100c8a4:	e0bff317 	ldw	r2,-52(fp)
 100c8a8:	1007883a 	mov	r3,r2
 100c8ac:	e0bffd17 	ldw	r2,-12(fp)
 100c8b0:	1885883a 	add	r2,r3,r2
 100c8b4:	10c00003 	ldbu	r3,0(r2)
 100c8b8:	e0bff804 	addi	r2,fp,-32
 100c8bc:	1105883a 	add	r2,r2,r4
 100c8c0:	10c00005 	stb	r3,0(r2)
 100c8c4:	00000c06 	br	100c8f8 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 100c8c8:	e0fff317 	ldw	r3,-52(fp)
 100c8cc:	e0bff517 	ldw	r2,-44(fp)
 100c8d0:	1885c83a 	sub	r2,r3,r2
 100c8d4:	113fffc4 	addi	r4,r2,-1
 100c8d8:	e0bff317 	ldw	r2,-52(fp)
 100c8dc:	1007883a 	mov	r3,r2
 100c8e0:	e0bffd17 	ldw	r2,-12(fp)
 100c8e4:	1885883a 	add	r2,r3,r2
 100c8e8:	10c00003 	ldbu	r3,0(r2)
 100c8ec:	e0bffa04 	addi	r2,fp,-24
 100c8f0:	1105883a 	add	r2,r2,r4
 100c8f4:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100c8f8:	e0bff317 	ldw	r2,-52(fp)
 100c8fc:	10800044 	addi	r2,r2,1
 100c900:	e0bff315 	stw	r2,-52(fp)
 100c904:	e0fff317 	ldw	r3,-52(fp)
 100c908:	e0bff217 	ldw	r2,-56(fp)
 100c90c:	18bfd216 	blt	r3,r2,100c858 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 100c910:	e0bffc17 	ldw	r2,-16(fp)
 100c914:	1004c03a 	cmpne	r2,r2,zero
 100c918:	1000441e 	bne	r2,zero,100ca2c <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 100c91c:	00804074 	movhi	r2,257
 100c920:	10990a04 	addi	r2,r2,25640
 100c924:	1080050b 	ldhu	r2,20(r2)
 100c928:	10bfffcc 	andi	r2,r2,65535
 100c92c:	1008917a 	slli	r4,r2,5
 100c930:	00804074 	movhi	r2,257
 100c934:	10990a04 	addi	r2,r2,25640
 100c938:	1080030b 	ldhu	r2,12(r2)
 100c93c:	117fffcc 	andi	r5,r2,65535
 100c940:	10095c00 	call	10095c0 <__divsi3>
 100c944:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 100c948:	e03fef15 	stw	zero,-68(fp)
 100c94c:	00003306 	br	100ca1c <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 100c950:	00804074 	movhi	r2,257
 100c954:	10990a04 	addi	r2,r2,25640
 100c958:	10c01317 	ldw	r3,76(r2)
 100c95c:	e0bfef17 	ldw	r2,-68(fp)
 100c960:	1885883a 	add	r2,r3,r2
 100c964:	1009883a 	mov	r4,r2
 100c968:	d166cf17 	ldw	r5,-25796(gp)
 100c96c:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100c970:	1005003a 	cmpeq	r2,r2,zero
 100c974:	10008e1e 	bne	r2,zero,100cbb0 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100c978:	e03fee15 	stw	zero,-72(fp)
 100c97c:	00001e06 	br	100c9f8 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 100c980:	e0bfee17 	ldw	r2,-72(fp)
 100c984:	1008917a 	slli	r4,r2,5
 100c988:	e1ffef17 	ldw	r7,-68(fp)
 100c98c:	e17ffe17 	ldw	r5,-8(fp)
 100c990:	000d883a 	mov	r6,zero
 100c994:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 100c998:	e0bffe17 	ldw	r2,-8(fp)
 100c99c:	10800003 	ldbu	r2,0(r2)
 100c9a0:	10803fcc 	andi	r2,r2,255
 100c9a4:	10803960 	cmpeqi	r2,r2,229
 100c9a8:	1000101e 	bne	r2,zero,100c9ec <find_file_in_directory+0x280>
 100c9ac:	e0bffe17 	ldw	r2,-8(fp)
 100c9b0:	10800003 	ldbu	r2,0(r2)
 100c9b4:	10803fcc 	andi	r2,r2,255
 100c9b8:	1005003a 	cmpeq	r2,r2,zero
 100c9bc:	10000b1e 	bne	r2,zero,100c9ec <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 100c9c0:	e17ff804 	addi	r5,fp,-32
 100c9c4:	e1bffa04 	addi	r6,fp,-24
 100c9c8:	e13ffe17 	ldw	r4,-8(fp)
 100c9cc:	100bf6c0 	call	100bf6c <match_file_record_to_name_ext>
 100c9d0:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 100c9d4:	e0bfed17 	ldw	r2,-76(fp)
 100c9d8:	1005003a 	cmpeq	r2,r2,zero
 100c9dc:	1000031e 	bne	r2,zero,100c9ec <find_file_in_directory+0x280>
							result = true;
 100c9e0:	00800044 	movi	r2,1
 100c9e4:	e0bff115 	stw	r2,-60(fp)
							break;
 100c9e8:	00000606 	br	100ca04 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100c9ec:	e0bfee17 	ldw	r2,-72(fp)
 100c9f0:	10800044 	addi	r2,r2,1
 100c9f4:	e0bfee15 	stw	r2,-72(fp)
 100c9f8:	e0bfee17 	ldw	r2,-72(fp)
 100c9fc:	10800410 	cmplti	r2,r2,16
 100ca00:	103fdf1e 	bne	r2,zero,100c980 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 100ca04:	e0bff117 	ldw	r2,-60(fp)
 100ca08:	1004c03a 	cmpne	r2,r2,zero
 100ca0c:	1000681e 	bne	r2,zero,100cbb0 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 100ca10:	e0bfef17 	ldw	r2,-68(fp)
 100ca14:	10800044 	addi	r2,r2,1
 100ca18:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 100ca1c:	e0ffef17 	ldw	r3,-68(fp)
 100ca20:	e0bff017 	ldw	r2,-64(fp)
 100ca24:	18bfca16 	blt	r3,r2,100c950 <find_file_in_directory+0x1e4>
 100ca28:	00006106 	br	100cbb0 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 100ca2c:	e0bff417 	ldw	r2,-48(fp)
 100ca30:	113fff84 	addi	r4,r2,-2
 100ca34:	00804074 	movhi	r2,257
 100ca38:	10990a04 	addi	r2,r2,25640
 100ca3c:	10800383 	ldbu	r2,14(r2)
 100ca40:	11403fcc 	andi	r5,r2,255
 100ca44:	10096900 	call	1009690 <__mulsi3>
 100ca48:	1007883a 	mov	r3,r2
 100ca4c:	00804074 	movhi	r2,257
 100ca50:	10990a04 	addi	r2,r2,25640
 100ca54:	10801417 	ldw	r2,80(r2)
 100ca58:	1885883a 	add	r2,r3,r2
 100ca5c:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 100ca60:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 100ca64:	00003006 	br	100cb28 <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 100ca68:	e0ffeb17 	ldw	r3,-84(fp)
 100ca6c:	e0bfec17 	ldw	r2,-80(fp)
 100ca70:	1889883a 	add	r4,r3,r2
 100ca74:	d166cf17 	ldw	r5,-25796(gp)
 100ca78:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100ca7c:	1005003a 	cmpeq	r2,r2,zero
 100ca80:	10002f1e 	bne	r2,zero,100cb40 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100ca84:	e03fea15 	stw	zero,-88(fp)
 100ca88:	00001e06 	br	100cb04 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100ca8c:	e0bfea17 	ldw	r2,-88(fp)
 100ca90:	1008917a 	slli	r4,r2,5
 100ca94:	e1bff417 	ldw	r6,-48(fp)
 100ca98:	e1ffeb17 	ldw	r7,-84(fp)
 100ca9c:	e17ffe17 	ldw	r5,-8(fp)
 100caa0:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 100caa4:	e0bffe17 	ldw	r2,-8(fp)
 100caa8:	10800003 	ldbu	r2,0(r2)
 100caac:	10803fcc 	andi	r2,r2,255
 100cab0:	10803960 	cmpeqi	r2,r2,229
 100cab4:	1000101e 	bne	r2,zero,100caf8 <find_file_in_directory+0x38c>
 100cab8:	e0bffe17 	ldw	r2,-8(fp)
 100cabc:	10800003 	ldbu	r2,0(r2)
 100cac0:	10803fcc 	andi	r2,r2,255
 100cac4:	1005003a 	cmpeq	r2,r2,zero
 100cac8:	10000b1e 	bne	r2,zero,100caf8 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100cacc:	e17ff804 	addi	r5,fp,-32
 100cad0:	e1bffa04 	addi	r6,fp,-24
 100cad4:	e13ffe17 	ldw	r4,-8(fp)
 100cad8:	100bf6c0 	call	100bf6c <match_file_record_to_name_ext>
 100cadc:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 100cae0:	e0bfe917 	ldw	r2,-92(fp)
 100cae4:	1005003a 	cmpeq	r2,r2,zero
 100cae8:	1000031e 	bne	r2,zero,100caf8 <find_file_in_directory+0x38c>
								result = true;
 100caec:	00800044 	movi	r2,1
 100caf0:	e0bff115 	stw	r2,-60(fp)
								break;
 100caf4:	00000606 	br	100cb10 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100caf8:	e0bfea17 	ldw	r2,-88(fp)
 100cafc:	10800044 	addi	r2,r2,1
 100cb00:	e0bfea15 	stw	r2,-88(fp)
 100cb04:	e0bfea17 	ldw	r2,-88(fp)
 100cb08:	10800410 	cmplti	r2,r2,16
 100cb0c:	103fdf1e 	bne	r2,zero,100ca8c <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 100cb10:	e0bff117 	ldw	r2,-60(fp)
 100cb14:	1004c03a 	cmpne	r2,r2,zero
 100cb18:	1000091e 	bne	r2,zero,100cb40 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 100cb1c:	e0bfeb17 	ldw	r2,-84(fp)
 100cb20:	10800044 	addi	r2,r2,1
 100cb24:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 100cb28:	00804074 	movhi	r2,257
 100cb2c:	10990a04 	addi	r2,r2,25640
 100cb30:	10800383 	ldbu	r2,14(r2)
 100cb34:	10c03fcc 	andi	r3,r2,255
 100cb38:	e0bfeb17 	ldw	r2,-84(fp)
 100cb3c:	10ffca16 	blt	r2,r3,100ca68 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 100cb40:	e0bff117 	ldw	r2,-60(fp)
 100cb44:	1004c03a 	cmpne	r2,r2,zero
 100cb48:	1000131e 	bne	r2,zero,100cb98 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 100cb4c:	e13ff417 	ldw	r4,-48(fp)
 100cb50:	e17ffb04 	addi	r5,fp,-20
 100cb54:	100ab780 	call	100ab78 <get_cluster_flag>
 100cb58:	1005003a 	cmpeq	r2,r2,zero
 100cb5c:	10000c1e 	bne	r2,zero,100cb90 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100cb60:	e0bffb0b 	ldhu	r2,-20(fp)
 100cb64:	10bfffcc 	andi	r2,r2,65535
 100cb68:	10fffe0c 	andi	r3,r2,65528
 100cb6c:	00bffe14 	movui	r2,65528
 100cb70:	1880021e 	bne	r3,r2,100cb7c <find_file_in_directory+0x410>
						return false;
 100cb74:	e03fff15 	stw	zero,-4(fp)
 100cb78:	00000f06 	br	100cbb8 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 100cb7c:	e0bffb0b 	ldhu	r2,-20(fp)
 100cb80:	10bfffcc 	andi	r2,r2,65535
 100cb84:	10bffe0c 	andi	r2,r2,65528
 100cb88:	e0bff415 	stw	r2,-48(fp)
 100cb8c:	00000206 	br	100cb98 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 100cb90:	e03fff15 	stw	zero,-4(fp)
 100cb94:	00000806 	br	100cbb8 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 100cb98:	e0fff417 	ldw	r3,-48(fp)
 100cb9c:	00bffdd4 	movui	r2,65527
 100cba0:	10c00316 	blt	r2,r3,100cbb0 <find_file_in_directory+0x444>
 100cba4:	e0bff117 	ldw	r2,-60(fp)
 100cba8:	1005003a 	cmpeq	r2,r2,zero
 100cbac:	103f9f1e 	bne	r2,zero,100ca2c <find_file_in_directory+0x2c0>
	}

	return result;
 100cbb0:	e0bff117 	ldw	r2,-60(fp)
 100cbb4:	e0bfff15 	stw	r2,-4(fp)
 100cbb8:	e0bfff17 	ldw	r2,-4(fp)
}
 100cbbc:	e037883a 	mov	sp,fp
 100cbc0:	dfc00117 	ldw	ra,4(sp)
 100cbc4:	df000017 	ldw	fp,0(sp)
 100cbc8:	dec00204 	addi	sp,sp,8
 100cbcc:	f800283a 	ret

0100cbd0 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 100cbd0:	defff504 	addi	sp,sp,-44
 100cbd4:	dfc00a15 	stw	ra,40(sp)
 100cbd8:	df000915 	stw	fp,36(sp)
 100cbdc:	df000904 	addi	fp,sp,36
 100cbe0:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 100cbe4:	00804074 	movhi	r2,257
 100cbe8:	10990a04 	addi	r2,r2,25640
 100cbec:	10801117 	ldw	r2,68(r2)
 100cbf0:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 100cbf4:	00800084 	movi	r2,2
 100cbf8:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 100cbfc:	00bfffc4 	movi	r2,-1
 100cc00:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 100cc04:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 100cc08:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 100cc0c:	00804074 	movhi	r2,257
 100cc10:	10990a04 	addi	r2,r2,25640
 100cc14:	10801417 	ldw	r2,80(r2)
 100cc18:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 100cc1c:	00804074 	movhi	r2,257
 100cc20:	10990a04 	addi	r2,r2,25640
 100cc24:	1080058b 	ldhu	r2,22(r2)
 100cc28:	10bfffcc 	andi	r2,r2,65535
 100cc2c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 100cc30:	00804074 	movhi	r2,257
 100cc34:	10990a04 	addi	r2,r2,25640
 100cc38:	10800917 	ldw	r2,36(r2)
 100cc3c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 100cc40:	e0fff817 	ldw	r3,-32(fp)
 100cc44:	e0bff717 	ldw	r2,-36(fp)
 100cc48:	10c00b2e 	bgeu	r2,r3,100cc78 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 100cc4c:	e0fff817 	ldw	r3,-32(fp)
 100cc50:	e0bff917 	ldw	r2,-28(fp)
 100cc54:	1889c83a 	sub	r4,r3,r2
 100cc58:	00804074 	movhi	r2,257
 100cc5c:	10990a04 	addi	r2,r2,25640
 100cc60:	10800383 	ldbu	r2,14(r2)
 100cc64:	11403fcc 	andi	r5,r2,255
 100cc68:	10096800 	call	1009680 <__udivsi3>
 100cc6c:	10800044 	addi	r2,r2,1
 100cc70:	e0bffa15 	stw	r2,-24(fp)
 100cc74:	00002906 	br	100cd1c <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 100cc78:	e0fff717 	ldw	r3,-36(fp)
 100cc7c:	e0bff917 	ldw	r2,-28(fp)
 100cc80:	1889c83a 	sub	r4,r3,r2
 100cc84:	00804074 	movhi	r2,257
 100cc88:	10990a04 	addi	r2,r2,25640
 100cc8c:	10800383 	ldbu	r2,14(r2)
 100cc90:	11403fcc 	andi	r5,r2,255
 100cc94:	10096800 	call	1009680 <__udivsi3>
 100cc98:	10800044 	addi	r2,r2,1
 100cc9c:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100cca0:	00001e06 	br	100cd1c <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 100cca4:	e13ffe17 	ldw	r4,-8(fp)
 100cca8:	d166cf17 	ldw	r5,-25796(gp)
 100ccac:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100ccb0:	1005003a 	cmpeq	r2,r2,zero
 100ccb4:	1000131e 	bne	r2,zero,100cd04 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 100ccb8:	d0a6d117 	ldw	r2,-25788(gp)
 100ccbc:	10800a17 	ldw	r2,40(r2)
 100ccc0:	1007883a 	mov	r3,r2
 100ccc4:	e0bffd17 	ldw	r2,-12(fp)
 100ccc8:	10803fcc 	andi	r2,r2,255
 100cccc:	1085883a 	add	r2,r2,r2
 100ccd0:	1885883a 	add	r2,r3,r2
 100ccd4:	1080002b 	ldhuio	r2,0(r2)
 100ccd8:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 100ccdc:	e0bffc0f 	ldh	r2,-16(fp)
 100cce0:	1005003a 	cmpeq	r2,r2,zero
 100cce4:	1000071e 	bne	r2,zero,100cd04 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 100cce8:	e0bffd17 	ldw	r2,-12(fp)
 100ccec:	10800044 	addi	r2,r2,1
 100ccf0:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 100ccf4:	e0bffd17 	ldw	r2,-12(fp)
 100ccf8:	10803fcc 	andi	r2,r2,255
 100ccfc:	1004c03a 	cmpne	r2,r2,zero
 100cd00:	103fed1e 	bne	r2,zero,100ccb8 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 100cd04:	e0bffc0f 	ldh	r2,-16(fp)
 100cd08:	1005003a 	cmpeq	r2,r2,zero
 100cd0c:	1000081e 	bne	r2,zero,100cd30 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 100cd10:	e0bffe17 	ldw	r2,-8(fp)
 100cd14:	10800044 	addi	r2,r2,1
 100cd18:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100cd1c:	00804074 	movhi	r2,257
 100cd20:	10990a04 	addi	r2,r2,25640
 100cd24:	10c01217 	ldw	r3,72(r2)
 100cd28:	e0bffe17 	ldw	r2,-8(fp)
 100cd2c:	18bfdd1e 	bne	r3,r2,100cca4 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 100cd30:	e0bffc0f 	ldh	r2,-16(fp)
 100cd34:	1004c03a 	cmpne	r2,r2,zero
 100cd38:	1000081e 	bne	r2,zero,100cd5c <find_first_empty_cluster+0x18c>
 100cd3c:	e0fffc0f 	ldh	r3,-16(fp)
 100cd40:	e0bffa17 	ldw	r2,-24(fp)
 100cd44:	10c00536 	bltu	r2,r3,100cd5c <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 100cd48:	e0bfff17 	ldw	r2,-4(fp)
 100cd4c:	e0fffd17 	ldw	r3,-12(fp)
 100cd50:	10c00015 	stw	r3,0(r2)
		result = true;
 100cd54:	00800044 	movi	r2,1
 100cd58:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100cd5c:	e0bffb17 	ldw	r2,-20(fp)
}
 100cd60:	e037883a 	mov	sp,fp
 100cd64:	dfc00117 	ldw	ra,4(sp)
 100cd68:	df000017 	ldw	fp,0(sp)
 100cd6c:	dec00204 	addi	sp,sp,8
 100cd70:	f800283a 	ret

0100cd74 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 100cd74:	defff404 	addi	sp,sp,-48
 100cd78:	dfc00b15 	stw	ra,44(sp)
 100cd7c:	df000a15 	stw	fp,40(sp)
 100cd80:	df000a04 	addi	fp,sp,40
 100cd84:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 100cd88:	00bfffc4 	movi	r2,-1
 100cd8c:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 100cd90:	e0bffe17 	ldw	r2,-8(fp)
 100cd94:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 100cd98:	e0bffa17 	ldw	r2,-24(fp)
 100cd9c:	113fff84 	addi	r4,r2,-2
 100cda0:	00804074 	movhi	r2,257
 100cda4:	10990a04 	addi	r2,r2,25640
 100cda8:	10800383 	ldbu	r2,14(r2)
 100cdac:	11403fcc 	andi	r5,r2,255
 100cdb0:	10096900 	call	1009690 <__mulsi3>
 100cdb4:	1007883a 	mov	r3,r2
 100cdb8:	00804074 	movhi	r2,257
 100cdbc:	10990a04 	addi	r2,r2,25640
 100cdc0:	10801417 	ldw	r2,80(r2)
 100cdc4:	1885883a 	add	r2,r3,r2
 100cdc8:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 100cdcc:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 100cdd0:	00002c06 	br	100ce84 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 100cdd4:	e0fff817 	ldw	r3,-32(fp)
 100cdd8:	e0bff917 	ldw	r2,-28(fp)
 100cddc:	1889883a 	add	r4,r3,r2
 100cde0:	d166cf17 	ldw	r5,-25796(gp)
 100cde4:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100cde8:	1005003a 	cmpeq	r2,r2,zero
 100cdec:	10002b1e 	bne	r2,zero,100ce9c <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100cdf0:	e03ff715 	stw	zero,-36(fp)
 100cdf4:	00001d06 	br	100ce6c <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 100cdf8:	d0a6d117 	ldw	r2,-25788(gp)
 100cdfc:	10800a17 	ldw	r2,40(r2)
 100ce00:	1007883a 	mov	r3,r2
 100ce04:	e0bff717 	ldw	r2,-36(fp)
 100ce08:	1004917a 	slli	r2,r2,5
 100ce0c:	1885883a 	add	r2,r3,r2
 100ce10:	10800023 	ldbuio	r2,0(r2)
 100ce14:	10803fcc 	andi	r2,r2,255
 100ce18:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100ce1c:	e0bff60b 	ldhu	r2,-40(fp)
 100ce20:	10803960 	cmpeqi	r2,r2,229
 100ce24:	1000031e 	bne	r2,zero,100ce34 <find_first_empty_record_in_a_subdirectory+0xc0>
 100ce28:	e0bff60b 	ldhu	r2,-40(fp)
 100ce2c:	1004c03a 	cmpne	r2,r2,zero
 100ce30:	10000b1e 	bne	r2,zero,100ce60 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 100ce34:	e0bff817 	ldw	r2,-32(fp)
 100ce38:	1006913a 	slli	r3,r2,4
 100ce3c:	e0bff717 	ldw	r2,-36(fp)
 100ce40:	1885883a 	add	r2,r3,r2
 100ce44:	1006943a 	slli	r3,r2,16
 100ce48:	e0bffa17 	ldw	r2,-24(fp)
 100ce4c:	1884b03a 	or	r2,r3,r2
 100ce50:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 100ce54:	e0bffb17 	ldw	r2,-20(fp)
 100ce58:	e0bfff15 	stw	r2,-4(fp)
 100ce5c:	00005206 	br	100cfa8 <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100ce60:	e0bff717 	ldw	r2,-36(fp)
 100ce64:	10800044 	addi	r2,r2,1
 100ce68:	e0bff715 	stw	r2,-36(fp)
 100ce6c:	e0bff717 	ldw	r2,-36(fp)
 100ce70:	10800410 	cmplti	r2,r2,16
 100ce74:	103fe01e 	bne	r2,zero,100cdf8 <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 100ce78:	e0bff817 	ldw	r2,-32(fp)
 100ce7c:	10800044 	addi	r2,r2,1
 100ce80:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 100ce84:	00804074 	movhi	r2,257
 100ce88:	10990a04 	addi	r2,r2,25640
 100ce8c:	10800383 	ldbu	r2,14(r2)
 100ce90:	10c03fcc 	andi	r3,r2,255
 100ce94:	e0bff817 	ldw	r2,-32(fp)
 100ce98:	10ffce16 	blt	r2,r3,100cdd4 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 100ce9c:	e0bffb17 	ldw	r2,-20(fp)
 100cea0:	1004403a 	cmpge	r2,r2,zero
 100cea4:	1000381e 	bne	r2,zero,100cf88 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 100cea8:	e13ffa17 	ldw	r4,-24(fp)
 100ceac:	e17ffc04 	addi	r5,fp,-16
 100ceb0:	100ab780 	call	100ab78 <get_cluster_flag>
 100ceb4:	1005003a 	cmpeq	r2,r2,zero
 100ceb8:	1000311e 	bne	r2,zero,100cf80 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100cebc:	e0bffc0b 	ldhu	r2,-16(fp)
 100cec0:	10bfffcc 	andi	r2,r2,65535
 100cec4:	10fffe0c 	andi	r3,r2,65528
 100cec8:	00bffe14 	movui	r2,65528
 100cecc:	18802e1e 	bne	r3,r2,100cf88 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 100ced0:	e13ffd04 	addi	r4,fp,-12
 100ced4:	100cbd00 	call	100cbd0 <find_first_empty_cluster>
 100ced8:	1005003a 	cmpeq	r2,r2,zero
 100cedc:	1000231e 	bne	r2,zero,100cf6c <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 100cee0:	e13ffa17 	ldw	r4,-24(fp)
 100cee4:	e0bffd17 	ldw	r2,-12(fp)
 100cee8:	117fffcc 	andi	r5,r2,65535
 100ceec:	2960001c 	xori	r5,r5,32768
 100cef0:	29600004 	addi	r5,r5,-32768
 100cef4:	01800044 	movi	r6,1
 100cef8:	100ac300 	call	100ac30 <mark_cluster>
 100cefc:	1005003a 	cmpeq	r2,r2,zero
 100cf00:	10001a1e 	bne	r2,zero,100cf6c <find_first_empty_record_in_a_subdirectory+0x1f8>
 100cf04:	e0bffd17 	ldw	r2,-12(fp)
 100cf08:	1009883a 	mov	r4,r2
 100cf0c:	017fffc4 	movi	r5,-1
 100cf10:	01800044 	movi	r6,1
 100cf14:	100ac300 	call	100ac30 <mark_cluster>
 100cf18:	1005003a 	cmpeq	r2,r2,zero
 100cf1c:	1000131e 	bne	r2,zero,100cf6c <find_first_empty_record_in_a_subdirectory+0x1f8>
 100cf20:	e13ffa17 	ldw	r4,-24(fp)
 100cf24:	e0bffd17 	ldw	r2,-12(fp)
 100cf28:	117fffcc 	andi	r5,r2,65535
 100cf2c:	2960001c 	xori	r5,r5,32768
 100cf30:	29600004 	addi	r5,r5,-32768
 100cf34:	000d883a 	mov	r6,zero
 100cf38:	100ac300 	call	100ac30 <mark_cluster>
 100cf3c:	1005003a 	cmpeq	r2,r2,zero
 100cf40:	10000a1e 	bne	r2,zero,100cf6c <find_first_empty_record_in_a_subdirectory+0x1f8>
 100cf44:	e0bffd17 	ldw	r2,-12(fp)
 100cf48:	1009883a 	mov	r4,r2
 100cf4c:	017fffc4 	movi	r5,-1
 100cf50:	000d883a 	mov	r6,zero
 100cf54:	100ac300 	call	100ac30 <mark_cluster>
 100cf58:	1005003a 	cmpeq	r2,r2,zero
 100cf5c:	1000031e 	bne	r2,zero,100cf6c <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 100cf60:	100aa2c0 	call	100aa2c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 100cf64:	e0bffd17 	ldw	r2,-12(fp)
 100cf68:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 100cf6c:	e0bffc0b 	ldhu	r2,-16(fp)
 100cf70:	10bfffcc 	andi	r2,r2,65535
 100cf74:	10bffe0c 	andi	r2,r2,65528
 100cf78:	e0bffa15 	stw	r2,-24(fp)
 100cf7c:	00000206 	br	100cf88 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 100cf80:	00bfffc4 	movi	r2,-1
 100cf84:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 100cf88:	e0fffa17 	ldw	r3,-24(fp)
 100cf8c:	00bffdd4 	movui	r2,65527
 100cf90:	10c00316 	blt	r2,r3,100cfa0 <find_first_empty_record_in_a_subdirectory+0x22c>
 100cf94:	e0bffb17 	ldw	r2,-20(fp)
 100cf98:	10bfffe0 	cmpeqi	r2,r2,-1
 100cf9c:	103f7e1e 	bne	r2,zero,100cd98 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 100cfa0:	e0bffb17 	ldw	r2,-20(fp)
 100cfa4:	e0bfff15 	stw	r2,-4(fp)
 100cfa8:	e0bfff17 	ldw	r2,-4(fp)
}
 100cfac:	e037883a 	mov	sp,fp
 100cfb0:	dfc00117 	ldw	ra,4(sp)
 100cfb4:	df000017 	ldw	fp,0(sp)
 100cfb8:	dec00204 	addi	sp,sp,8
 100cfbc:	f800283a 	ret

0100cfc0 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 100cfc0:	defff804 	addi	sp,sp,-32
 100cfc4:	dfc00715 	stw	ra,28(sp)
 100cfc8:	df000615 	stw	fp,24(sp)
 100cfcc:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 100cfd0:	00804074 	movhi	r2,257
 100cfd4:	10990a04 	addi	r2,r2,25640
 100cfd8:	1080050b 	ldhu	r2,20(r2)
 100cfdc:	10bfffcc 	andi	r2,r2,65535
 100cfe0:	1008917a 	slli	r4,r2,5
 100cfe4:	00804074 	movhi	r2,257
 100cfe8:	10990a04 	addi	r2,r2,25640
 100cfec:	1080030b 	ldhu	r2,12(r2)
 100cff0:	117fffcc 	andi	r5,r2,65535
 100cff4:	10095c00 	call	10095c0 <__divsi3>
 100cff8:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 100cffc:	00bfffc4 	movi	r2,-1
 100d000:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 100d004:	e03ffd15 	stw	zero,-12(fp)
 100d008:	00002d06 	br	100d0c0 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 100d00c:	00804074 	movhi	r2,257
 100d010:	10990a04 	addi	r2,r2,25640
 100d014:	10c01317 	ldw	r3,76(r2)
 100d018:	e0bffd17 	ldw	r2,-12(fp)
 100d01c:	1885883a 	add	r2,r3,r2
 100d020:	1009883a 	mov	r4,r2
 100d024:	d166cf17 	ldw	r5,-25796(gp)
 100d028:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100d02c:	1005003a 	cmpeq	r2,r2,zero
 100d030:	1000261e 	bne	r2,zero,100d0cc <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100d034:	e03ffb15 	stw	zero,-20(fp)
 100d038:	00001b06 	br	100d0a8 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 100d03c:	d0a6d117 	ldw	r2,-25788(gp)
 100d040:	10800a17 	ldw	r2,40(r2)
 100d044:	1007883a 	mov	r3,r2
 100d048:	e0bffb17 	ldw	r2,-20(fp)
 100d04c:	1004917a 	slli	r2,r2,5
 100d050:	1885883a 	add	r2,r3,r2
 100d054:	10800023 	ldbuio	r2,0(r2)
 100d058:	10803fcc 	andi	r2,r2,255
 100d05c:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100d060:	e0bffa0b 	ldhu	r2,-24(fp)
 100d064:	10803960 	cmpeqi	r2,r2,229
 100d068:	1000031e 	bne	r2,zero,100d078 <find_first_empty_record_in_root_directory+0xb8>
 100d06c:	e0bffa0b 	ldhu	r2,-24(fp)
 100d070:	1004c03a 	cmpne	r2,r2,zero
 100d074:	1000091e 	bne	r2,zero,100d09c <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 100d078:	e0bffd17 	ldw	r2,-12(fp)
 100d07c:	1006913a 	slli	r3,r2,4
 100d080:	e0bffb17 	ldw	r2,-20(fp)
 100d084:	1885883a 	add	r2,r3,r2
 100d088:	1004943a 	slli	r2,r2,16
 100d08c:	e0bffc15 	stw	r2,-16(fp)
					return result;
 100d090:	e0bffc17 	ldw	r2,-16(fp)
 100d094:	e0bfff15 	stw	r2,-4(fp)
 100d098:	00000e06 	br	100d0d4 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100d09c:	e0bffb17 	ldw	r2,-20(fp)
 100d0a0:	10800044 	addi	r2,r2,1
 100d0a4:	e0bffb15 	stw	r2,-20(fp)
 100d0a8:	e0bffb17 	ldw	r2,-20(fp)
 100d0ac:	10800410 	cmplti	r2,r2,16
 100d0b0:	103fe21e 	bne	r2,zero,100d03c <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 100d0b4:	e0bffd17 	ldw	r2,-12(fp)
 100d0b8:	10800044 	addi	r2,r2,1
 100d0bc:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 100d0c0:	e0fffd17 	ldw	r3,-12(fp)
 100d0c4:	e0bffe17 	ldw	r2,-8(fp)
 100d0c8:	18bfd016 	blt	r3,r2,100d00c <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 100d0cc:	e0bffc17 	ldw	r2,-16(fp)
 100d0d0:	e0bfff15 	stw	r2,-4(fp)
 100d0d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100d0d8:	e037883a 	mov	sp,fp
 100d0dc:	dfc00117 	ldw	ra,4(sp)
 100d0e0:	df000017 	ldw	fp,0(sp)
 100d0e4:	dec00204 	addi	sp,sp,8
 100d0e8:	f800283a 	ret

0100d0ec <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 100d0ec:	defffa04 	addi	sp,sp,-24
 100d0f0:	df000515 	stw	fp,20(sp)
 100d0f4:	df000504 	addi	fp,sp,20
 100d0f8:	e13ffd15 	stw	r4,-12(fp)
 100d0fc:	e17ffe15 	stw	r5,-8(fp)
 100d100:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 100d104:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 100d108:	e03ffc15 	stw	zero,-16(fp)
 100d10c:	00002b06 	br	100d1bc <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 100d110:	e0bffb17 	ldw	r2,-20(fp)
 100d114:	1007883a 	mov	r3,r2
 100d118:	e0bffd17 	ldw	r2,-12(fp)
 100d11c:	1885883a 	add	r2,r3,r2
 100d120:	10800003 	ldbu	r2,0(r2)
 100d124:	10803fcc 	andi	r2,r2,255
 100d128:	1080201c 	xori	r2,r2,128
 100d12c:	10bfe004 	addi	r2,r2,-128
 100d130:	10800ba0 	cmpeqi	r2,r2,46
 100d134:	1000181e 	bne	r2,zero,100d198 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 100d138:	e0bffc17 	ldw	r2,-16(fp)
 100d13c:	1007883a 	mov	r3,r2
 100d140:	e0bffe17 	ldw	r2,-8(fp)
 100d144:	1889883a 	add	r4,r3,r2
 100d148:	e0bffb17 	ldw	r2,-20(fp)
 100d14c:	1007883a 	mov	r3,r2
 100d150:	e0bffd17 	ldw	r2,-12(fp)
 100d154:	1885883a 	add	r2,r3,r2
 100d158:	10800003 	ldbu	r2,0(r2)
 100d15c:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 100d160:	e0bffb17 	ldw	r2,-20(fp)
 100d164:	1007883a 	mov	r3,r2
 100d168:	e0bffd17 	ldw	r2,-12(fp)
 100d16c:	1885883a 	add	r2,r3,r2
 100d170:	10800003 	ldbu	r2,0(r2)
 100d174:	10803fcc 	andi	r2,r2,255
 100d178:	1080201c 	xori	r2,r2,128
 100d17c:	10bfe004 	addi	r2,r2,-128
 100d180:	1005003a 	cmpeq	r2,r2,zero
 100d184:	10000a1e 	bne	r2,zero,100d1b0 <convert_filename_to_name_extension+0xc4>
				local++;
 100d188:	e0bffb17 	ldw	r2,-20(fp)
 100d18c:	10800044 	addi	r2,r2,1
 100d190:	e0bffb15 	stw	r2,-20(fp)
 100d194:	00000606 	br	100d1b0 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 100d198:	e0bffc17 	ldw	r2,-16(fp)
 100d19c:	1007883a 	mov	r3,r2
 100d1a0:	e0bffe17 	ldw	r2,-8(fp)
 100d1a4:	1887883a 	add	r3,r3,r2
 100d1a8:	00800804 	movi	r2,32
 100d1ac:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 100d1b0:	e0bffc17 	ldw	r2,-16(fp)
 100d1b4:	10800044 	addi	r2,r2,1
 100d1b8:	e0bffc15 	stw	r2,-16(fp)
 100d1bc:	e0bffc17 	ldw	r2,-16(fp)
 100d1c0:	10800210 	cmplti	r2,r2,8
 100d1c4:	103fd21e 	bne	r2,zero,100d110 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 100d1c8:	e0bffb17 	ldw	r2,-20(fp)
 100d1cc:	1007883a 	mov	r3,r2
 100d1d0:	e0bffd17 	ldw	r2,-12(fp)
 100d1d4:	1885883a 	add	r2,r3,r2
 100d1d8:	10800003 	ldbu	r2,0(r2)
 100d1dc:	10803fcc 	andi	r2,r2,255
 100d1e0:	1080201c 	xori	r2,r2,128
 100d1e4:	10bfe004 	addi	r2,r2,-128
 100d1e8:	10800b98 	cmpnei	r2,r2,46
 100d1ec:	1000031e 	bne	r2,zero,100d1fc <convert_filename_to_name_extension+0x110>
		local++;
 100d1f0:	e0bffb17 	ldw	r2,-20(fp)
 100d1f4:	10800044 	addi	r2,r2,1
 100d1f8:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 100d1fc:	e03ffc15 	stw	zero,-16(fp)
 100d200:	00002106 	br	100d288 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 100d204:	e0bffb17 	ldw	r2,-20(fp)
 100d208:	1007883a 	mov	r3,r2
 100d20c:	e0bffd17 	ldw	r2,-12(fp)
 100d210:	1885883a 	add	r2,r3,r2
 100d214:	10800003 	ldbu	r2,0(r2)
 100d218:	10803fcc 	andi	r2,r2,255
 100d21c:	1080201c 	xori	r2,r2,128
 100d220:	10bfe004 	addi	r2,r2,-128
 100d224:	1005003a 	cmpeq	r2,r2,zero
 100d228:	10000e1e 	bne	r2,zero,100d264 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 100d22c:	e0bffc17 	ldw	r2,-16(fp)
 100d230:	1007883a 	mov	r3,r2
 100d234:	e0bfff17 	ldw	r2,-4(fp)
 100d238:	1889883a 	add	r4,r3,r2
 100d23c:	e0bffb17 	ldw	r2,-20(fp)
 100d240:	1007883a 	mov	r3,r2
 100d244:	e0bffd17 	ldw	r2,-12(fp)
 100d248:	1885883a 	add	r2,r3,r2
 100d24c:	10800003 	ldbu	r2,0(r2)
 100d250:	20800005 	stb	r2,0(r4)
			local++;
 100d254:	e0bffb17 	ldw	r2,-20(fp)
 100d258:	10800044 	addi	r2,r2,1
 100d25c:	e0bffb15 	stw	r2,-20(fp)
 100d260:	00000606 	br	100d27c <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 100d264:	e0bffc17 	ldw	r2,-16(fp)
 100d268:	1007883a 	mov	r3,r2
 100d26c:	e0bfff17 	ldw	r2,-4(fp)
 100d270:	1887883a 	add	r3,r3,r2
 100d274:	00800804 	movi	r2,32
 100d278:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 100d27c:	e0bffc17 	ldw	r2,-16(fp)
 100d280:	10800044 	addi	r2,r2,1
 100d284:	e0bffc15 	stw	r2,-16(fp)
 100d288:	e0bffc17 	ldw	r2,-16(fp)
 100d28c:	108000d0 	cmplti	r2,r2,3
 100d290:	103fdc1e 	bne	r2,zero,100d204 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 100d294:	e037883a 	mov	sp,fp
 100d298:	df000017 	ldw	fp,0(sp)
 100d29c:	dec00104 	addi	sp,sp,4
 100d2a0:	f800283a 	ret

0100d2a4 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 100d2a4:	defff204 	addi	sp,sp,-56
 100d2a8:	dfc00d15 	stw	ra,52(sp)
 100d2ac:	df000c15 	stw	fp,48(sp)
 100d2b0:	dc000b15 	stw	r16,44(sp)
 100d2b4:	df000b04 	addi	fp,sp,44
 100d2b8:	e13ffb15 	stw	r4,-20(fp)
 100d2bc:	e17ffc15 	stw	r5,-16(fp)
 100d2c0:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 100d2c4:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 100d2c8:	e13ffa04 	addi	r4,fp,-24
 100d2cc:	100cbd00 	call	100cbd0 <find_first_empty_cluster>
 100d2d0:	1005003a 	cmpeq	r2,r2,zero
 100d2d4:	1000a31e 	bne	r2,zero,100d564 <create_file+0x2c0>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 100d2d8:	e0bffd17 	ldw	r2,-12(fp)
 100d2dc:	10800a17 	ldw	r2,40(r2)
 100d2e0:	1004c03a 	cmpne	r2,r2,zero
 100d2e4:	1000031e 	bne	r2,zero,100d2f4 <create_file+0x50>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 100d2e8:	100cfc00 	call	100cfc0 <find_first_empty_record_in_root_directory>
 100d2ec:	e0bff815 	stw	r2,-32(fp)
 100d2f0:	00000506 	br	100d308 <create_file+0x64>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 100d2f4:	e0bffd17 	ldw	r2,-12(fp)
 100d2f8:	1080058b 	ldhu	r2,22(r2)
 100d2fc:	113fffcc 	andi	r4,r2,65535
 100d300:	100cd740 	call	100cd74 <find_first_empty_record_in_a_subdirectory>
 100d304:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 100d308:	e0bff817 	ldw	r2,-32(fp)
 100d30c:	1004803a 	cmplt	r2,r2,zero
 100d310:	1000941e 	bne	r2,zero,100d564 <create_file+0x2c0>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 100d314:	e13ffb17 	ldw	r4,-20(fp)
 100d318:	100beac0 	call	100beac <get_dir_divider_location>
 100d31c:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 100d320:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 100d324:	00000b06 	br	100d354 <create_file+0xb0>
				last_dir_separator = last_dir_separator + location + 1;
 100d328:	e0fff517 	ldw	r3,-44(fp)
 100d32c:	e0bff617 	ldw	r2,-40(fp)
 100d330:	1885883a 	add	r2,r3,r2
 100d334:	10800044 	addi	r2,r2,1
 100d338:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 100d33c:	e0bff517 	ldw	r2,-44(fp)
 100d340:	1007883a 	mov	r3,r2
 100d344:	e0bffb17 	ldw	r2,-20(fp)
 100d348:	1889883a 	add	r4,r3,r2
 100d34c:	100beac0 	call	100beac <get_dir_divider_location>
 100d350:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 100d354:	e0bff617 	ldw	r2,-40(fp)
 100d358:	10800048 	cmpgei	r2,r2,1
 100d35c:	103ff21e 	bne	r2,zero,100d328 <create_file+0x84>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 100d360:	e0bff517 	ldw	r2,-44(fp)
 100d364:	1007883a 	mov	r3,r2
 100d368:	e0bffb17 	ldw	r2,-20(fp)
 100d36c:	1889883a 	add	r4,r3,r2
 100d370:	e0bffc17 	ldw	r2,-16(fp)
 100d374:	100b883a 	mov	r5,r2
 100d378:	e0bffc17 	ldw	r2,-16(fp)
 100d37c:	10800204 	addi	r2,r2,8
 100d380:	100d883a 	mov	r6,r2
 100d384:	100d0ec0 	call	100d0ec <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 100d388:	e0bffc17 	ldw	r2,-16(fp)
 100d38c:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 100d390:	e0bffc17 	ldw	r2,-16(fp)
 100d394:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 100d398:	e0bffc17 	ldw	r2,-16(fp)
 100d39c:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 100d3a0:	e0bffc17 	ldw	r2,-16(fp)
 100d3a4:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 100d3a8:	e0bffc17 	ldw	r2,-16(fp)
 100d3ac:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 100d3b0:	e0bffc17 	ldw	r2,-16(fp)
 100d3b4:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 100d3b8:	e0bffa17 	ldw	r2,-24(fp)
 100d3bc:	1007883a 	mov	r3,r2
 100d3c0:	e0bffc17 	ldw	r2,-16(fp)
 100d3c4:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 100d3c8:	e0bffc17 	ldw	r2,-16(fp)
 100d3cc:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 100d3d0:	e0fffa17 	ldw	r3,-24(fp)
 100d3d4:	e0bffc17 	ldw	r2,-16(fp)
 100d3d8:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 100d3dc:	e0bffc17 	ldw	r2,-16(fp)
 100d3e0:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 100d3e4:	e0bffc17 	ldw	r2,-16(fp)
 100d3e8:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 100d3ec:	e0bff817 	ldw	r2,-32(fp)
 100d3f0:	10ffffcc 	andi	r3,r2,65535
 100d3f4:	e0bffc17 	ldw	r2,-16(fp)
 100d3f8:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 100d3fc:	e0bff817 	ldw	r2,-32(fp)
 100d400:	1005d43a 	srai	r2,r2,16
 100d404:	10bfffcc 	andi	r2,r2,65535
 100d408:	e0bfff15 	stw	r2,-4(fp)
 100d40c:	e0ffff17 	ldw	r3,-4(fp)
 100d410:	1804403a 	cmpge	r2,r3,zero
 100d414:	1000031e 	bne	r2,zero,100d424 <create_file+0x180>
 100d418:	e0bfff17 	ldw	r2,-4(fp)
 100d41c:	108003c4 	addi	r2,r2,15
 100d420:	e0bfff15 	stw	r2,-4(fp)
 100d424:	e0ffff17 	ldw	r3,-4(fp)
 100d428:	1805d13a 	srai	r2,r3,4
 100d42c:	1007883a 	mov	r3,r2
 100d430:	e0bffc17 	ldw	r2,-16(fp)
 100d434:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 100d438:	e0bff817 	ldw	r2,-32(fp)
 100d43c:	1005d43a 	srai	r2,r2,16
 100d440:	108003cc 	andi	r2,r2,15
 100d444:	1004917a 	slli	r2,r2,5
 100d448:	1007883a 	mov	r3,r2
 100d44c:	e0bffc17 	ldw	r2,-16(fp)
 100d450:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 100d454:	e0bffd17 	ldw	r2,-12(fp)
 100d458:	1080058b 	ldhu	r2,22(r2)
 100d45c:	10ffffcc 	andi	r3,r2,65535
 100d460:	e0bffc17 	ldw	r2,-16(fp)
 100d464:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 100d468:	e0fffc17 	ldw	r3,-16(fp)
 100d46c:	00800044 	movi	r2,1
 100d470:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 100d474:	e0fffc17 	ldw	r3,-16(fp)
 100d478:	00800044 	movi	r2,1
 100d47c:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 100d480:	e0bffc17 	ldw	r2,-16(fp)
 100d484:	10800a17 	ldw	r2,40(r2)
 100d488:	1004c03a 	cmpne	r2,r2,zero
 100d48c:	1000081e 	bne	r2,zero,100d4b0 <create_file+0x20c>
 100d490:	00804074 	movhi	r2,257
 100d494:	10990a04 	addi	r2,r2,25640
 100d498:	10c01317 	ldw	r3,76(r2)
 100d49c:	e0bffc17 	ldw	r2,-16(fp)
 100d4a0:	10800b17 	ldw	r2,44(r2)
 100d4a4:	1887883a 	add	r3,r3,r2
 100d4a8:	e0fffe15 	stw	r3,-8(fp)
 100d4ac:	00001006 	br	100d4f0 <create_file+0x24c>
 100d4b0:	00804074 	movhi	r2,257
 100d4b4:	10990a04 	addi	r2,r2,25640
 100d4b8:	14001417 	ldw	r16,80(r2)
 100d4bc:	e0bffc17 	ldw	r2,-16(fp)
 100d4c0:	10800a17 	ldw	r2,40(r2)
 100d4c4:	113fff84 	addi	r4,r2,-2
 100d4c8:	00804074 	movhi	r2,257
 100d4cc:	10990a04 	addi	r2,r2,25640
 100d4d0:	10800383 	ldbu	r2,14(r2)
 100d4d4:	11403fcc 	andi	r5,r2,255
 100d4d8:	10096900 	call	1009690 <__mulsi3>
 100d4dc:	8087883a 	add	r3,r16,r2
 100d4e0:	e0bffc17 	ldw	r2,-16(fp)
 100d4e4:	10800b17 	ldw	r2,44(r2)
 100d4e8:	1887883a 	add	r3,r3,r2
 100d4ec:	e0fffe15 	stw	r3,-8(fp)
 100d4f0:	e0bffe17 	ldw	r2,-8(fp)
 100d4f4:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 100d4f8:	e13ff717 	ldw	r4,-36(fp)
 100d4fc:	d166cf17 	ldw	r5,-25796(gp)
 100d500:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100d504:	1005003a 	cmpeq	r2,r2,zero
 100d508:	1000161e 	bne	r2,zero,100d564 <create_file+0x2c0>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 100d50c:	e0bffc17 	ldw	r2,-16(fp)
 100d510:	10800c0b 	ldhu	r2,48(r2)
 100d514:	113fffcc 	andi	r4,r2,65535
 100d518:	2120001c 	xori	r4,r4,32768
 100d51c:	21200004 	addi	r4,r4,-32768
 100d520:	e17ffc17 	ldw	r5,-16(fp)
 100d524:	100b1480 	call	100b148 <Write_File_Record_At_Offset>
 100d528:	1005003a 	cmpeq	r2,r2,zero
 100d52c:	10000d1e 	bne	r2,zero,100d564 <create_file+0x2c0>
						file_record)) {
					Save_Modified_Sector();
 100d530:	100aa2c0 	call	100aa2c <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 100d534:	e13ffa17 	ldw	r4,-24(fp)
 100d538:	017fffc4 	movi	r5,-1
 100d53c:	01800044 	movi	r6,1
 100d540:	100ac300 	call	100ac30 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 100d544:	e13ffa17 	ldw	r4,-24(fp)
 100d548:	017fffc4 	movi	r5,-1
 100d54c:	000d883a 	mov	r6,zero
 100d550:	100ac300 	call	100ac30 <mark_cluster>
 100d554:	1005003a 	cmpeq	r2,r2,zero
 100d558:	1000021e 	bne	r2,zero,100d564 <create_file+0x2c0>
							false)) {
						result = true;
 100d55c:	00800044 	movi	r2,1
 100d560:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 100d564:	e0bff917 	ldw	r2,-28(fp)
}
 100d568:	e037883a 	mov	sp,fp
 100d56c:	dfc00217 	ldw	ra,8(sp)
 100d570:	df000117 	ldw	fp,4(sp)
 100d574:	dc000017 	ldw	r16,0(sp)
 100d578:	dec00304 	addi	sp,sp,12
 100d57c:	f800283a 	ret

0100d580 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 100d580:	defffb04 	addi	sp,sp,-20
 100d584:	df000415 	stw	fp,16(sp)
 100d588:	df000404 	addi	fp,sp,16
 100d58c:	e13ffe15 	stw	r4,-8(fp)
 100d590:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 100d594:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100d598:	e03ffd15 	stw	zero,-12(fp)
 100d59c:	00001606 	br	100d5f8 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 100d5a0:	e0fffd17 	ldw	r3,-12(fp)
 100d5a4:	e0bffe17 	ldw	r2,-8(fp)
 100d5a8:	10c5883a 	add	r2,r2,r3
 100d5ac:	10800003 	ldbu	r2,0(r2)
 100d5b0:	10803fcc 	andi	r2,r2,255
 100d5b4:	10800820 	cmpeqi	r2,r2,32
 100d5b8:	10000c1e 	bne	r2,zero,100d5ec <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 100d5bc:	e0bffc17 	ldw	r2,-16(fp)
 100d5c0:	1007883a 	mov	r3,r2
 100d5c4:	e0bfff17 	ldw	r2,-4(fp)
 100d5c8:	1889883a 	add	r4,r3,r2
 100d5cc:	e0fffd17 	ldw	r3,-12(fp)
 100d5d0:	e0bffe17 	ldw	r2,-8(fp)
 100d5d4:	10c5883a 	add	r2,r2,r3
 100d5d8:	10800003 	ldbu	r2,0(r2)
 100d5dc:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 100d5e0:	e0bffc17 	ldw	r2,-16(fp)
 100d5e4:	10800044 	addi	r2,r2,1
 100d5e8:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100d5ec:	e0bffd17 	ldw	r2,-12(fp)
 100d5f0:	10800044 	addi	r2,r2,1
 100d5f4:	e0bffd15 	stw	r2,-12(fp)
 100d5f8:	e0bffd17 	ldw	r2,-12(fp)
 100d5fc:	10800210 	cmplti	r2,r2,8
 100d600:	103fe71e 	bne	r2,zero,100d5a0 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 100d604:	e0bffe17 	ldw	r2,-8(fp)
 100d608:	10800203 	ldbu	r2,8(r2)
 100d60c:	10803fcc 	andi	r2,r2,255
 100d610:	10800820 	cmpeqi	r2,r2,32
 100d614:	1000261e 	bne	r2,zero,100d6b0 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 100d618:	e0bffc17 	ldw	r2,-16(fp)
 100d61c:	1007883a 	mov	r3,r2
 100d620:	e0bfff17 	ldw	r2,-4(fp)
 100d624:	1887883a 	add	r3,r3,r2
 100d628:	00800b84 	movi	r2,46
 100d62c:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 100d630:	e0bffc17 	ldw	r2,-16(fp)
 100d634:	10800044 	addi	r2,r2,1
 100d638:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 100d63c:	e03ffd15 	stw	zero,-12(fp)
 100d640:	00001806 	br	100d6a4 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 100d644:	e0fffd17 	ldw	r3,-12(fp)
 100d648:	e0bffe17 	ldw	r2,-8(fp)
 100d64c:	1885883a 	add	r2,r3,r2
 100d650:	10800204 	addi	r2,r2,8
 100d654:	10800003 	ldbu	r2,0(r2)
 100d658:	10803fcc 	andi	r2,r2,255
 100d65c:	10800820 	cmpeqi	r2,r2,32
 100d660:	10000d1e 	bne	r2,zero,100d698 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 100d664:	e0bffc17 	ldw	r2,-16(fp)
 100d668:	1007883a 	mov	r3,r2
 100d66c:	e0bfff17 	ldw	r2,-4(fp)
 100d670:	1889883a 	add	r4,r3,r2
 100d674:	e0fffd17 	ldw	r3,-12(fp)
 100d678:	e0bffe17 	ldw	r2,-8(fp)
 100d67c:	1885883a 	add	r2,r3,r2
 100d680:	10800204 	addi	r2,r2,8
 100d684:	10800003 	ldbu	r2,0(r2)
 100d688:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 100d68c:	e0bffc17 	ldw	r2,-16(fp)
 100d690:	10800044 	addi	r2,r2,1
 100d694:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 100d698:	e0bffd17 	ldw	r2,-12(fp)
 100d69c:	10800044 	addi	r2,r2,1
 100d6a0:	e0bffd15 	stw	r2,-12(fp)
 100d6a4:	e0bffd17 	ldw	r2,-12(fp)
 100d6a8:	108000d0 	cmplti	r2,r2,3
 100d6ac:	103fe51e 	bne	r2,zero,100d644 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 100d6b0:	e0bffc17 	ldw	r2,-16(fp)
 100d6b4:	1007883a 	mov	r3,r2
 100d6b8:	e0bfff17 	ldw	r2,-4(fp)
 100d6bc:	1885883a 	add	r2,r3,r2
 100d6c0:	10000005 	stb	zero,0(r2)
}
 100d6c4:	e037883a 	mov	sp,fp
 100d6c8:	df000017 	ldw	fp,0(sp)
 100d6cc:	dec00104 	addi	sp,sp,4
 100d6d0:	f800283a 	ret

0100d6d4 <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 100d6d4:	defffc04 	addi	sp,sp,-16
 100d6d8:	dfc00315 	stw	ra,12(sp)
 100d6dc:	df000215 	stw	fp,8(sp)
 100d6e0:	df000204 	addi	fp,sp,8
 100d6e4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 100d6e8:	e13fff17 	ldw	r4,-4(fp)
 100d6ec:	01404074 	movhi	r5,257
 100d6f0:	29522c04 	addi	r5,r5,18608
 100d6f4:	10102a80 	call	10102a8 <alt_find_dev>
 100d6f8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 100d6fc:	e0bffe17 	ldw	r2,-8(fp)
 100d700:	1005003a 	cmpeq	r2,r2,zero
 100d704:	10001e1e 	bne	r2,zero,100d780 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 100d708:	e0bffe17 	ldw	r2,-8(fp)
 100d70c:	10800a17 	ldw	r2,40(r2)
 100d710:	10808d04 	addi	r2,r2,564
 100d714:	d0a6c915 	stw	r2,-25820(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 100d718:	e0bffe17 	ldw	r2,-8(fp)
 100d71c:	10800a17 	ldw	r2,40(r2)
 100d720:	10808904 	addi	r2,r2,548
 100d724:	d0a6ca15 	stw	r2,-25816(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 100d728:	e0bffe17 	ldw	r2,-8(fp)
 100d72c:	10800a17 	ldw	r2,40(r2)
 100d730:	10808404 	addi	r2,r2,528
 100d734:	d0a6cb15 	stw	r2,-25812(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 100d738:	e0bffe17 	ldw	r2,-8(fp)
 100d73c:	10800a17 	ldw	r2,40(r2)
 100d740:	10808c04 	addi	r2,r2,560
 100d744:	d0a6cc15 	stw	r2,-25808(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 100d748:	e0bffe17 	ldw	r2,-8(fp)
 100d74c:	10800a17 	ldw	r2,40(r2)
 100d750:	10808b04 	addi	r2,r2,556
 100d754:	d0a6cd15 	stw	r2,-25804(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 100d758:	e0bffe17 	ldw	r2,-8(fp)
 100d75c:	10800a17 	ldw	r2,40(r2)
 100d760:	d0a6ce15 	stw	r2,-25800(gp)
		device_pointer = dev;
 100d764:	e0bffe17 	ldw	r2,-8(fp)
 100d768:	d0a6d115 	stw	r2,-25788(gp)
		initialized = false;
 100d76c:	d026c715 	stw	zero,-25828(gp)
		is_sd_card_formated_as_FAT16 = false;
 100d770:	d026c815 	stw	zero,-25824(gp)
		search_data.valid = false;
 100d774:	00804074 	movhi	r2,257
 100d778:	10990504 	addi	r2,r2,25620
 100d77c:	10000415 	stw	zero,16(r2)
	}
	return dev;
 100d780:	e0bffe17 	ldw	r2,-8(fp)
}
 100d784:	e037883a 	mov	sp,fp
 100d788:	dfc00117 	ldw	ra,4(sp)
 100d78c:	df000017 	ldw	fp,0(sp)
 100d790:	dec00204 	addi	sp,sp,8
 100d794:	f800283a 	ret

0100d798 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 100d798:	defffd04 	addi	sp,sp,-12
 100d79c:	df000215 	stw	fp,8(sp)
 100d7a0:	df000204 	addi	fp,sp,8
	bool result = false;
 100d7a4:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 100d7a8:	d0a6d117 	ldw	r2,-25788(gp)
 100d7ac:	1005003a 	cmpeq	r2,r2,zero
 100d7b0:	1000081e 	bne	r2,zero,100d7d4 <alt_up_sd_card_is_Present+0x3c>
 100d7b4:	d0a6c917 	ldw	r2,-25820(gp)
 100d7b8:	1080002b 	ldhuio	r2,0(r2)
 100d7bc:	1080008c 	andi	r2,r2,2
 100d7c0:	1005003a 	cmpeq	r2,r2,zero
 100d7c4:	1000031e 	bne	r2,zero,100d7d4 <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 100d7c8:	00800044 	movi	r2,1
 100d7cc:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 100d7d0:	00001e06 	br	100d84c <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 100d7d4:	d0a6c717 	ldw	r2,-25828(gp)
 100d7d8:	10800058 	cmpnei	r2,r2,1
 100d7dc:	10001b1e 	bne	r2,zero,100d84c <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 100d7e0:	d026c715 	stw	zero,-25828(gp)
		search_data.valid = false;
 100d7e4:	00804074 	movhi	r2,257
 100d7e8:	10990504 	addi	r2,r2,25620
 100d7ec:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 100d7f0:	d026c815 	stw	zero,-25824(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100d7f4:	e03ffe15 	stw	zero,-8(fp)
 100d7f8:	00001106 	br	100d840 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 100d7fc:	e0bffe17 	ldw	r2,-8(fp)
 100d800:	00c04074 	movhi	r3,257
 100d804:	18d91f04 	addi	r3,r3,25724
 100d808:	100491ba 	slli	r2,r2,6
 100d80c:	10c5883a 	add	r2,r2,r3
 100d810:	10800f04 	addi	r2,r2,60
 100d814:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 100d818:	e0bffe17 	ldw	r2,-8(fp)
 100d81c:	00c04074 	movhi	r3,257
 100d820:	18d91f04 	addi	r3,r3,25724
 100d824:	100491ba 	slli	r2,r2,6
 100d828:	10c5883a 	add	r2,r2,r3
 100d82c:	10800e04 	addi	r2,r2,56
 100d830:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100d834:	e0bffe17 	ldw	r2,-8(fp)
 100d838:	10800044 	addi	r2,r2,1
 100d83c:	e0bffe15 	stw	r2,-8(fp)
 100d840:	e0bffe17 	ldw	r2,-8(fp)
 100d844:	10800510 	cmplti	r2,r2,20
 100d848:	103fec1e 	bne	r2,zero,100d7fc <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 100d84c:	e0bfff17 	ldw	r2,-4(fp)
}
 100d850:	e037883a 	mov	sp,fp
 100d854:	df000017 	ldw	fp,0(sp)
 100d858:	dec00104 	addi	sp,sp,4
 100d85c:	f800283a 	ret

0100d860 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 100d860:	defffd04 	addi	sp,sp,-12
 100d864:	dfc00215 	stw	ra,8(sp)
 100d868:	df000115 	stw	fp,4(sp)
 100d86c:	df000104 	addi	fp,sp,4
	bool result = false;
 100d870:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100d874:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100d878:	1005003a 	cmpeq	r2,r2,zero
 100d87c:	10000d1e 	bne	r2,zero,100d8b4 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 100d880:	d0a6c717 	ldw	r2,-25828(gp)
 100d884:	1004c03a 	cmpne	r2,r2,zero
 100d888:	1000071e 	bne	r2,zero,100d8a8 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 100d88c:	100ba480 	call	100ba48 <Look_for_FAT16>
 100d890:	d0a6c815 	stw	r2,-25824(gp)
			initialized = is_sd_card_formated_as_FAT16;
 100d894:	d0a6c817 	ldw	r2,-25824(gp)
 100d898:	d0a6c715 	stw	r2,-25828(gp)
			search_data.valid = false;
 100d89c:	00804074 	movhi	r2,257
 100d8a0:	10990504 	addi	r2,r2,25620
 100d8a4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 100d8a8:	d0a6c817 	ldw	r2,-25824(gp)
 100d8ac:	e0bfff15 	stw	r2,-4(fp)
 100d8b0:	00000206 	br	100d8bc <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 100d8b4:	d026c715 	stw	zero,-25828(gp)
		is_sd_card_formated_as_FAT16 = false;
 100d8b8:	d026c815 	stw	zero,-25824(gp)
	}

	return result;
 100d8bc:	e0bfff17 	ldw	r2,-4(fp)
}
 100d8c0:	e037883a 	mov	sp,fp
 100d8c4:	dfc00117 	ldw	ra,4(sp)
 100d8c8:	df000017 	ldw	fp,0(sp)
 100d8cc:	dec00204 	addi	sp,sp,8
 100d8d0:	f800283a 	ret

0100d8d4 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 100d8d4:	deffea04 	addi	sp,sp,-88
 100d8d8:	dfc01515 	stw	ra,84(sp)
 100d8dc:	df001415 	stw	fp,80(sp)
 100d8e0:	df001404 	addi	fp,sp,80
 100d8e4:	e13ffe15 	stw	r4,-8(fp)
 100d8e8:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 100d8ec:	00800084 	movi	r2,2
 100d8f0:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100d8f4:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100d8f8:	1005003a 	cmpeq	r2,r2,zero
 100d8fc:	1000241e 	bne	r2,zero,100d990 <alt_up_sd_card_find_first+0xbc>
 100d900:	d0a6c817 	ldw	r2,-25824(gp)
 100d904:	1005003a 	cmpeq	r2,r2,zero
 100d908:	1000211e 	bne	r2,zero,100d990 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 100d90c:	e17fed04 	addi	r5,fp,-76
 100d910:	e1bfee04 	addi	r6,fp,-72
 100d914:	e13ffe17 	ldw	r4,-8(fp)
 100d918:	100c2580 	call	100c258 <get_home_directory_cluster_for_file>
 100d91c:	1005003a 	cmpeq	r2,r2,zero
 100d920:	1000191e 	bne	r2,zero,100d988 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 100d924:	e0bfed17 	ldw	r2,-76(fp)
 100d928:	1007883a 	mov	r3,r2
 100d92c:	00804074 	movhi	r2,257
 100d930:	10990504 	addi	r2,r2,25620
 100d934:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 100d938:	e0bfed17 	ldw	r2,-76(fp)
 100d93c:	1007883a 	mov	r3,r2
 100d940:	00804074 	movhi	r2,257
 100d944:	10990504 	addi	r2,r2,25620
 100d948:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 100d94c:	00804074 	movhi	r2,257
 100d950:	10990504 	addi	r2,r2,25620
 100d954:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 100d958:	00c04074 	movhi	r3,257
 100d95c:	18d90504 	addi	r3,r3,25620
 100d960:	00bfffc4 	movi	r2,-1
 100d964:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 100d968:	00c04074 	movhi	r3,257
 100d96c:	18d90504 	addi	r3,r3,25620
 100d970:	00800044 	movi	r2,1
 100d974:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 100d978:	e13fff17 	ldw	r4,-4(fp)
 100d97c:	100d9a80 	call	100d9a8 <alt_up_sd_card_find_next>
 100d980:	e0bfec0d 	sth	r2,-80(fp)
 100d984:	00000206 	br	100d990 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 100d988:	00800044 	movi	r2,1
 100d98c:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 100d990:	e0bfec0f 	ldh	r2,-80(fp)
}
 100d994:	e037883a 	mov	sp,fp
 100d998:	dfc00117 	ldw	ra,4(sp)
 100d99c:	df000017 	ldw	fp,0(sp)
 100d9a0:	dec00204 	addi	sp,sp,8
 100d9a4:	f800283a 	ret

0100d9a8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 100d9a8:	deffe404 	addi	sp,sp,-112
 100d9ac:	dfc01b15 	stw	ra,108(sp)
 100d9b0:	df001a15 	stw	fp,104(sp)
 100d9b4:	df001a04 	addi	fp,sp,104
 100d9b8:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 100d9bc:	00800084 	movi	r2,2
 100d9c0:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100d9c4:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100d9c8:	1005003a 	cmpeq	r2,r2,zero
 100d9cc:	1000da1e 	bne	r2,zero,100dd38 <alt_up_sd_card_find_next+0x390>
 100d9d0:	d0a6c817 	ldw	r2,-25824(gp)
 100d9d4:	1005003a 	cmpeq	r2,r2,zero
 100d9d8:	1000d71e 	bne	r2,zero,100dd38 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 100d9dc:	00804074 	movhi	r2,257
 100d9e0:	10990504 	addi	r2,r2,25620
 100d9e4:	10800417 	ldw	r2,16(r2)
 100d9e8:	1005003a 	cmpeq	r2,r2,zero
 100d9ec:	1000d01e 	bne	r2,zero,100dd30 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 100d9f0:	00804074 	movhi	r2,257
 100d9f4:	10990504 	addi	r2,r2,25620
 100d9f8:	10800117 	ldw	r2,4(r2)
 100d9fc:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 100da00:	e0bfec17 	ldw	r2,-80(fp)
 100da04:	1004c03a 	cmpne	r2,r2,zero
 100da08:	1000511e 	bne	r2,zero,100db50 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 100da0c:	00804074 	movhi	r2,257
 100da10:	10990a04 	addi	r2,r2,25640
 100da14:	1080050b 	ldhu	r2,20(r2)
 100da18:	10bfffcc 	andi	r2,r2,65535
 100da1c:	1008917a 	slli	r4,r2,5
 100da20:	00804074 	movhi	r2,257
 100da24:	10990a04 	addi	r2,r2,25640
 100da28:	1080030b 	ldhu	r2,12(r2)
 100da2c:	117fffcc 	andi	r5,r2,65535
 100da30:	10095c00 	call	10095c0 <__divsi3>
 100da34:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 100da38:	00804074 	movhi	r2,257
 100da3c:	10990504 	addi	r2,r2,25620
 100da40:	10800217 	ldw	r2,8(r2)
 100da44:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 100da48:	00804074 	movhi	r2,257
 100da4c:	10990504 	addi	r2,r2,25620
 100da50:	1080030b 	ldhu	r2,12(r2)
 100da54:	10bfffcc 	andi	r2,r2,65535
 100da58:	10a0001c 	xori	r2,r2,32768
 100da5c:	10a00004 	addi	r2,r2,-32768
 100da60:	10800044 	addi	r2,r2,1
 100da64:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100da68:	00003306 	br	100db38 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 100da6c:	00804074 	movhi	r2,257
 100da70:	10990a04 	addi	r2,r2,25640
 100da74:	10c01317 	ldw	r3,76(r2)
 100da78:	e0bfea17 	ldw	r2,-88(fp)
 100da7c:	1885883a 	add	r2,r3,r2
 100da80:	1009883a 	mov	r4,r2
 100da84:	d166cf17 	ldw	r5,-25796(gp)
 100da88:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100da8c:	1005003a 	cmpeq	r2,r2,zero
 100da90:	10002c1e 	bne	r2,zero,100db44 <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100da94:	00002106 	br	100db1c <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 100da98:	e0bfe917 	ldw	r2,-92(fp)
 100da9c:	1008917a 	slli	r4,r2,5
 100daa0:	e1ffea17 	ldw	r7,-88(fp)
 100daa4:	e17fee04 	addi	r5,fp,-72
 100daa8:	000d883a 	mov	r6,zero
 100daac:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
 100dab0:	1005003a 	cmpeq	r2,r2,zero
 100dab4:	1000161e 	bne	r2,zero,100db10 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 100dab8:	e0bfee03 	ldbu	r2,-72(fp)
 100dabc:	10803fcc 	andi	r2,r2,255
 100dac0:	1005003a 	cmpeq	r2,r2,zero
 100dac4:	1000121e 	bne	r2,zero,100db10 <alt_up_sd_card_find_next+0x168>
 100dac8:	e0bfee03 	ldbu	r2,-72(fp)
 100dacc:	10803fcc 	andi	r2,r2,255
 100dad0:	10803960 	cmpeqi	r2,r2,229
 100dad4:	10000e1e 	bne	r2,zero,100db10 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 100dad8:	e0bfe917 	ldw	r2,-92(fp)
 100dadc:	1007883a 	mov	r3,r2
 100dae0:	00804074 	movhi	r2,257
 100dae4:	10990504 	addi	r2,r2,25620
 100dae8:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 100daec:	e0ffea17 	ldw	r3,-88(fp)
 100daf0:	00804074 	movhi	r2,257
 100daf4:	10990504 	addi	r2,r2,25620
 100daf8:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 100dafc:	e13fee04 	addi	r4,fp,-72
 100db00:	e17ffe17 	ldw	r5,-8(fp)
 100db04:	100d5800 	call	100d580 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 100db08:	e03fff15 	stw	zero,-4(fp)
 100db0c:	00008c06 	br	100dd40 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100db10:	e0bfe917 	ldw	r2,-92(fp)
 100db14:	10800044 	addi	r2,r2,1
 100db18:	e0bfe915 	stw	r2,-92(fp)
 100db1c:	e0bfe917 	ldw	r2,-92(fp)
 100db20:	10800410 	cmplti	r2,r2,16
 100db24:	103fdc1e 	bne	r2,zero,100da98 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 100db28:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100db2c:	e0bfea17 	ldw	r2,-88(fp)
 100db30:	10800044 	addi	r2,r2,1
 100db34:	e0bfea15 	stw	r2,-88(fp)
 100db38:	e0ffea17 	ldw	r3,-88(fp)
 100db3c:	e0bfeb17 	ldw	r2,-84(fp)
 100db40:	18bfca16 	blt	r3,r2,100da6c <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 100db44:	00bfffc4 	movi	r2,-1
 100db48:	e0bfed0d 	sth	r2,-76(fp)
 100db4c:	00007a06 	br	100dd38 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 100db50:	00804074 	movhi	r2,257
 100db54:	10990504 	addi	r2,r2,25620
 100db58:	1080030b 	ldhu	r2,12(r2)
 100db5c:	10bfffcc 	andi	r2,r2,65535
 100db60:	10a0001c 	xori	r2,r2,32768
 100db64:	10a00004 	addi	r2,r2,-32768
 100db68:	10800044 	addi	r2,r2,1
 100db6c:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 100db70:	e0bfec17 	ldw	r2,-80(fp)
 100db74:	113fff84 	addi	r4,r2,-2
 100db78:	00804074 	movhi	r2,257
 100db7c:	10990a04 	addi	r2,r2,25640
 100db80:	10800383 	ldbu	r2,14(r2)
 100db84:	11403fcc 	andi	r5,r2,255
 100db88:	10096900 	call	1009690 <__mulsi3>
 100db8c:	1007883a 	mov	r3,r2
 100db90:	00804074 	movhi	r2,257
 100db94:	10990a04 	addi	r2,r2,25640
 100db98:	10801417 	ldw	r2,80(r2)
 100db9c:	1885883a 	add	r2,r3,r2
 100dba0:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 100dba4:	00804074 	movhi	r2,257
 100dba8:	10990504 	addi	r2,r2,25620
 100dbac:	10800217 	ldw	r2,8(r2)
 100dbb0:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 100dbb4:	00003406 	br	100dc88 <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 100dbb8:	e0ffe617 	ldw	r3,-104(fp)
 100dbbc:	e0bfe717 	ldw	r2,-100(fp)
 100dbc0:	1889883a 	add	r4,r3,r2
 100dbc4:	d166cf17 	ldw	r5,-25796(gp)
 100dbc8:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100dbcc:	1005003a 	cmpeq	r2,r2,zero
 100dbd0:	1000331e 	bne	r2,zero,100dca0 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100dbd4:	00002506 	br	100dc6c <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 100dbd8:	e0bfe817 	ldw	r2,-96(fp)
 100dbdc:	1008917a 	slli	r4,r2,5
 100dbe0:	e1bfec17 	ldw	r6,-80(fp)
 100dbe4:	e1ffe617 	ldw	r7,-104(fp)
 100dbe8:	e17fee04 	addi	r5,fp,-72
 100dbec:	100aec40 	call	100aec4 <Read_File_Record_At_Offset>
 100dbf0:	1005003a 	cmpeq	r2,r2,zero
 100dbf4:	10001a1e 	bne	r2,zero,100dc60 <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 100dbf8:	e0bfee03 	ldbu	r2,-72(fp)
 100dbfc:	10803fcc 	andi	r2,r2,255
 100dc00:	1005003a 	cmpeq	r2,r2,zero
 100dc04:	1000161e 	bne	r2,zero,100dc60 <alt_up_sd_card_find_next+0x2b8>
 100dc08:	e0bfee03 	ldbu	r2,-72(fp)
 100dc0c:	10803fcc 	andi	r2,r2,255
 100dc10:	10803960 	cmpeqi	r2,r2,229
 100dc14:	1000121e 	bne	r2,zero,100dc60 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 100dc18:	e0ffec17 	ldw	r3,-80(fp)
 100dc1c:	00804074 	movhi	r2,257
 100dc20:	10990504 	addi	r2,r2,25620
 100dc24:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 100dc28:	e0bfe817 	ldw	r2,-96(fp)
 100dc2c:	1007883a 	mov	r3,r2
 100dc30:	00804074 	movhi	r2,257
 100dc34:	10990504 	addi	r2,r2,25620
 100dc38:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 100dc3c:	e0ffe617 	ldw	r3,-104(fp)
 100dc40:	00804074 	movhi	r2,257
 100dc44:	10990504 	addi	r2,r2,25620
 100dc48:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 100dc4c:	e13fee04 	addi	r4,fp,-72
 100dc50:	e17ffe17 	ldw	r5,-8(fp)
 100dc54:	100d5800 	call	100d580 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 100dc58:	e03fff15 	stw	zero,-4(fp)
 100dc5c:	00003806 	br	100dd40 <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100dc60:	e0bfe817 	ldw	r2,-96(fp)
 100dc64:	10800044 	addi	r2,r2,1
 100dc68:	e0bfe815 	stw	r2,-96(fp)
 100dc6c:	e0bfe817 	ldw	r2,-96(fp)
 100dc70:	10800410 	cmplti	r2,r2,16
 100dc74:	103fd81e 	bne	r2,zero,100dbd8 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 100dc78:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 100dc7c:	e0bfe617 	ldw	r2,-104(fp)
 100dc80:	10800044 	addi	r2,r2,1
 100dc84:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 100dc88:	00804074 	movhi	r2,257
 100dc8c:	10990a04 	addi	r2,r2,25640
 100dc90:	10800383 	ldbu	r2,14(r2)
 100dc94:	10c03fcc 	andi	r3,r2,255
 100dc98:	e0bfe617 	ldw	r2,-104(fp)
 100dc9c:	10ffc616 	blt	r2,r3,100dbb8 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 100dca0:	00804074 	movhi	r2,257
 100dca4:	10990a04 	addi	r2,r2,25640
 100dca8:	10800383 	ldbu	r2,14(r2)
 100dcac:	10c03fcc 	andi	r3,r2,255
 100dcb0:	e0bfe617 	ldw	r2,-104(fp)
 100dcb4:	10c01a16 	blt	r2,r3,100dd20 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 100dcb8:	e13fec17 	ldw	r4,-80(fp)
 100dcbc:	e17fed84 	addi	r5,fp,-74
 100dcc0:	100ab780 	call	100ab78 <get_cluster_flag>
 100dcc4:	1005003a 	cmpeq	r2,r2,zero
 100dcc8:	1000131e 	bne	r2,zero,100dd18 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100dccc:	e0bfed8b 	ldhu	r2,-74(fp)
 100dcd0:	10bfffcc 	andi	r2,r2,65535
 100dcd4:	10a0001c 	xori	r2,r2,32768
 100dcd8:	10a00004 	addi	r2,r2,-32768
 100dcdc:	10fffe0c 	andi	r3,r2,65528
 100dce0:	00bffe14 	movui	r2,65528
 100dce4:	1880051e 	bne	r3,r2,100dcfc <alt_up_sd_card_find_next+0x354>
								result = -1;
 100dce8:	00bfffc4 	movi	r2,-1
 100dcec:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 100dcf0:	00804074 	movhi	r2,257
 100dcf4:	10990504 	addi	r2,r2,25620
 100dcf8:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 100dcfc:	e0bfed8b 	ldhu	r2,-74(fp)
 100dd00:	10bfffcc 	andi	r2,r2,65535
 100dd04:	10a0001c 	xori	r2,r2,32768
 100dd08:	10a00004 	addi	r2,r2,-32768
 100dd0c:	10bffe0c 	andi	r2,r2,65528
 100dd10:	e0bfec15 	stw	r2,-80(fp)
 100dd14:	00000206 	br	100dd20 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 100dd18:	00bfffc4 	movi	r2,-1
 100dd1c:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 100dd20:	e0ffec17 	ldw	r3,-80(fp)
 100dd24:	00bffdd4 	movui	r2,65527
 100dd28:	10ff910e 	bge	r2,r3,100db70 <alt_up_sd_card_find_next+0x1c8>
 100dd2c:	00000206 	br	100dd38 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 100dd30:	008000c4 	movi	r2,3
 100dd34:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 100dd38:	e0bfed0f 	ldh	r2,-76(fp)
 100dd3c:	e0bfff15 	stw	r2,-4(fp)
 100dd40:	e0bfff17 	ldw	r2,-4(fp)
}
 100dd44:	e037883a 	mov	sp,fp
 100dd48:	dfc00117 	ldw	ra,4(sp)
 100dd4c:	df000017 	ldw	fp,0(sp)
 100dd50:	dec00204 	addi	sp,sp,8
 100dd54:	f800283a 	ret

0100dd58 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 100dd58:	deffe804 	addi	sp,sp,-96
 100dd5c:	dfc01715 	stw	ra,92(sp)
 100dd60:	df001615 	stw	fp,88(sp)
 100dd64:	df001604 	addi	fp,sp,88
 100dd68:	e13ffd15 	stw	r4,-12(fp)
 100dd6c:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 100dd70:	00bfffc4 	movi	r2,-1
 100dd74:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100dd78:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100dd7c:	1005003a 	cmpeq	r2,r2,zero
 100dd80:	1000d71e 	bne	r2,zero,100e0e0 <alt_up_sd_card_fopen+0x388>
 100dd84:	d0a6c817 	ldw	r2,-25824(gp)
 100dd88:	1005003a 	cmpeq	r2,r2,zero
 100dd8c:	1000d41e 	bne	r2,zero,100e0e0 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 100dd90:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 100dd94:	e13ffd17 	ldw	r4,-12(fp)
 100dd98:	100bb4c0 	call	100bb4c <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 100dd9c:	e13ffd17 	ldw	r4,-12(fp)
 100dda0:	100bc1c0 	call	100bc1c <check_file_name_for_FAT16_compliance>
 100dda4:	1005003a 	cmpeq	r2,r2,zero
 100dda8:	1000cd1e 	bne	r2,zero,100e0e0 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 100ddac:	e17fec04 	addi	r5,fp,-80
 100ddb0:	e1bfed04 	addi	r6,fp,-76
 100ddb4:	e13ffd17 	ldw	r4,-12(fp)
 100ddb8:	100c2580 	call	100c258 <get_home_directory_cluster_for_file>
 100ddbc:	1004c03a 	cmpne	r2,r2,zero
 100ddc0:	1000031e 	bne	r2,zero,100ddd0 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 100ddc4:	e0bfeb0f 	ldh	r2,-84(fp)
 100ddc8:	e0bfff15 	stw	r2,-4(fp)
 100ddcc:	0000c606 	br	100e0e8 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 100ddd0:	e03fea15 	stw	zero,-88(fp)
 100ddd4:	00000f06 	br	100de14 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 100ddd8:	e0bfea17 	ldw	r2,-88(fp)
 100dddc:	00c04074 	movhi	r3,257
 100dde0:	18d91f04 	addi	r3,r3,25724
 100dde4:	100491ba 	slli	r2,r2,6
 100dde8:	10c5883a 	add	r2,r2,r3
 100ddec:	10800f04 	addi	r2,r2,60
 100ddf0:	10800017 	ldw	r2,0(r2)
 100ddf4:	1004c03a 	cmpne	r2,r2,zero
 100ddf8:	1000031e 	bne	r2,zero,100de08 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 100ddfc:	e0bfea17 	ldw	r2,-88(fp)
 100de00:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 100de04:	00000606 	br	100de20 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 100de08:	e0bfea17 	ldw	r2,-88(fp)
 100de0c:	10800044 	addi	r2,r2,1
 100de10:	e0bfea15 	stw	r2,-88(fp)
 100de14:	e0bfea17 	ldw	r2,-88(fp)
 100de18:	10800510 	cmplti	r2,r2,20
 100de1c:	103fee1e 	bne	r2,zero,100ddd8 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 100de20:	e0bfeb0f 	ldh	r2,-84(fp)
 100de24:	1004803a 	cmplt	r2,r2,zero
 100de28:	1000ad1e 	bne	r2,zero,100e0e0 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 100de2c:	e0bfec17 	ldw	r2,-80(fp)
 100de30:	1009883a 	mov	r4,r2
 100de34:	e0bfeb0f 	ldh	r2,-84(fp)
 100de38:	100491ba 	slli	r2,r2,6
 100de3c:	1007883a 	mov	r3,r2
 100de40:	00804074 	movhi	r2,257
 100de44:	10991f04 	addi	r2,r2,25724
 100de48:	188d883a 	add	r6,r3,r2
 100de4c:	e17ffd17 	ldw	r5,-12(fp)
 100de50:	100c76c0 	call	100c76c <find_file_in_directory>
 100de54:	1005003a 	cmpeq	r2,r2,zero
 100de58:	10007d1e 	bne	r2,zero,100e050 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 100de5c:	e0bffe17 	ldw	r2,-8(fp)
 100de60:	1005003a 	cmpeq	r2,r2,zero
 100de64:	1000031e 	bne	r2,zero,100de74 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 100de68:	00bfffc4 	movi	r2,-1
 100de6c:	e0bfff15 	stw	r2,-4(fp)
 100de70:	00009d06 	br	100e0e8 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 100de74:	e17feb0f 	ldh	r5,-84(fp)
 100de78:	e0bfeb0f 	ldh	r2,-84(fp)
 100de7c:	00c04074 	movhi	r3,257
 100de80:	18d91f04 	addi	r3,r3,25724
 100de84:	100491ba 	slli	r2,r2,6
 100de88:	10c5883a 	add	r2,r2,r3
 100de8c:	10800504 	addi	r2,r2,20
 100de90:	1080008b 	ldhu	r2,2(r2)
 100de94:	113fffcc 	andi	r4,r2,65535
 100de98:	00c04074 	movhi	r3,257
 100de9c:	18d91f04 	addi	r3,r3,25724
 100dea0:	280491ba 	slli	r2,r5,6
 100dea4:	10c5883a 	add	r2,r2,r3
 100dea8:	10800704 	addi	r2,r2,28
 100deac:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 100deb0:	e0bfeb0f 	ldh	r2,-84(fp)
 100deb4:	00c04074 	movhi	r3,257
 100deb8:	18d91f04 	addi	r3,r3,25724
 100debc:	100491ba 	slli	r2,r2,6
 100dec0:	10c5883a 	add	r2,r2,r3
 100dec4:	10800804 	addi	r2,r2,32
 100dec8:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 100decc:	e0bfeb0f 	ldh	r2,-84(fp)
 100ded0:	00c04074 	movhi	r3,257
 100ded4:	18d91f04 	addi	r3,r3,25724
 100ded8:	100491ba 	slli	r2,r2,6
 100dedc:	10c5883a 	add	r2,r2,r3
 100dee0:	10800904 	addi	r2,r2,36
 100dee4:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 100dee8:	e0bfeb0f 	ldh	r2,-84(fp)
 100deec:	00c04074 	movhi	r3,257
 100def0:	18d91f04 	addi	r3,r3,25724
 100def4:	100491ba 	slli	r2,r2,6
 100def8:	10c5883a 	add	r2,r2,r3
 100defc:	10c00f04 	addi	r3,r2,60
 100df00:	00800044 	movi	r2,1
 100df04:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 100df08:	e0bfeb0f 	ldh	r2,-84(fp)
 100df0c:	00c04074 	movhi	r3,257
 100df10:	18d91f04 	addi	r3,r3,25724
 100df14:	100491ba 	slli	r2,r2,6
 100df18:	10c5883a 	add	r2,r2,r3
 100df1c:	10800e04 	addi	r2,r2,56
 100df20:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 100df24:	e03fea15 	stw	zero,-88(fp)
 100df28:	00004506 	br	100e040 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 100df2c:	e0ffeb0f 	ldh	r3,-84(fp)
 100df30:	e0bfea17 	ldw	r2,-88(fp)
 100df34:	18803f26 	beq	r3,r2,100e034 <alt_up_sd_card_fopen+0x2dc>
 100df38:	e0bfea17 	ldw	r2,-88(fp)
 100df3c:	00c04074 	movhi	r3,257
 100df40:	18d91f04 	addi	r3,r3,25724
 100df44:	100491ba 	slli	r2,r2,6
 100df48:	10c5883a 	add	r2,r2,r3
 100df4c:	10800f04 	addi	r2,r2,60
 100df50:	10800017 	ldw	r2,0(r2)
 100df54:	10800058 	cmpnei	r2,r2,1
 100df58:	1000361e 	bne	r2,zero,100e034 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 100df5c:	e0bfeb0f 	ldh	r2,-84(fp)
 100df60:	00c04074 	movhi	r3,257
 100df64:	18d91f04 	addi	r3,r3,25724
 100df68:	100491ba 	slli	r2,r2,6
 100df6c:	10c5883a 	add	r2,r2,r3
 100df70:	10800a04 	addi	r2,r2,40
 100df74:	11000017 	ldw	r4,0(r2)
 100df78:	e0bfea17 	ldw	r2,-88(fp)
 100df7c:	00c04074 	movhi	r3,257
 100df80:	18d91f04 	addi	r3,r3,25724
 100df84:	100491ba 	slli	r2,r2,6
 100df88:	10c5883a 	add	r2,r2,r3
 100df8c:	10800a04 	addi	r2,r2,40
 100df90:	10800017 	ldw	r2,0(r2)
 100df94:	2080271e 	bne	r4,r2,100e034 <alt_up_sd_card_fopen+0x2dc>
 100df98:	e0bfeb0f 	ldh	r2,-84(fp)
 100df9c:	00c04074 	movhi	r3,257
 100dfa0:	18d91f04 	addi	r3,r3,25724
 100dfa4:	100491ba 	slli	r2,r2,6
 100dfa8:	10c5883a 	add	r2,r2,r3
 100dfac:	10800b04 	addi	r2,r2,44
 100dfb0:	11000017 	ldw	r4,0(r2)
 100dfb4:	e0bfea17 	ldw	r2,-88(fp)
 100dfb8:	00c04074 	movhi	r3,257
 100dfbc:	18d91f04 	addi	r3,r3,25724
 100dfc0:	100491ba 	slli	r2,r2,6
 100dfc4:	10c5883a 	add	r2,r2,r3
 100dfc8:	10800b04 	addi	r2,r2,44
 100dfcc:	10800017 	ldw	r2,0(r2)
 100dfd0:	2080181e 	bne	r4,r2,100e034 <alt_up_sd_card_fopen+0x2dc>
 100dfd4:	e0bfeb0f 	ldh	r2,-84(fp)
 100dfd8:	00c04074 	movhi	r3,257
 100dfdc:	18d91f04 	addi	r3,r3,25724
 100dfe0:	100491ba 	slli	r2,r2,6
 100dfe4:	10c5883a 	add	r2,r2,r3
 100dfe8:	10800c04 	addi	r2,r2,48
 100dfec:	1100000b 	ldhu	r4,0(r2)
 100dff0:	e0bfea17 	ldw	r2,-88(fp)
 100dff4:	00c04074 	movhi	r3,257
 100dff8:	18d91f04 	addi	r3,r3,25724
 100dffc:	100491ba 	slli	r2,r2,6
 100e000:	10c5883a 	add	r2,r2,r3
 100e004:	10800c04 	addi	r2,r2,48
 100e008:	1080000b 	ldhu	r2,0(r2)
 100e00c:	20ffffcc 	andi	r3,r4,65535
 100e010:	18e0001c 	xori	r3,r3,32768
 100e014:	18e00004 	addi	r3,r3,-32768
 100e018:	10bfffcc 	andi	r2,r2,65535
 100e01c:	10a0001c 	xori	r2,r2,32768
 100e020:	10a00004 	addi	r2,r2,-32768
 100e024:	1880031e 	bne	r3,r2,100e034 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 100e028:	00bfff84 	movi	r2,-2
 100e02c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 100e030:	00002b06 	br	100e0e0 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 100e034:	e0bfea17 	ldw	r2,-88(fp)
 100e038:	10800044 	addi	r2,r2,1
 100e03c:	e0bfea15 	stw	r2,-88(fp)
 100e040:	e0bfea17 	ldw	r2,-88(fp)
 100e044:	10800510 	cmplti	r2,r2,20
 100e048:	103fb81e 	bne	r2,zero,100df2c <alt_up_sd_card_fopen+0x1d4>
 100e04c:	00002406 	br	100e0e0 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 100e050:	e0bffe17 	ldw	r2,-8(fp)
 100e054:	1005003a 	cmpeq	r2,r2,zero
 100e058:	10001f1e 	bne	r2,zero,100e0d8 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 100e05c:	e0bfeb0f 	ldh	r2,-84(fp)
 100e060:	100491ba 	slli	r2,r2,6
 100e064:	1007883a 	mov	r3,r2
 100e068:	00804074 	movhi	r2,257
 100e06c:	10991f04 	addi	r2,r2,25724
 100e070:	188b883a 	add	r5,r3,r2
 100e074:	e1bfed04 	addi	r6,fp,-76
 100e078:	e13ffd17 	ldw	r4,-12(fp)
 100e07c:	100d2a40 	call	100d2a4 <create_file>
 100e080:	1005003a 	cmpeq	r2,r2,zero
 100e084:	1000111e 	bne	r2,zero,100e0cc <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 100e088:	e0bfeb0f 	ldh	r2,-84(fp)
 100e08c:	00c04074 	movhi	r3,257
 100e090:	18d91f04 	addi	r3,r3,25724
 100e094:	100491ba 	slli	r2,r2,6
 100e098:	10c5883a 	add	r2,r2,r3
 100e09c:	10c00f04 	addi	r3,r2,60
 100e0a0:	00800044 	movi	r2,1
 100e0a4:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 100e0a8:	e0bfeb0f 	ldh	r2,-84(fp)
 100e0ac:	00c04074 	movhi	r3,257
 100e0b0:	18d91f04 	addi	r3,r3,25724
 100e0b4:	100491ba 	slli	r2,r2,6
 100e0b8:	10c5883a 	add	r2,r2,r3
 100e0bc:	10c00e04 	addi	r3,r2,56
 100e0c0:	00800044 	movi	r2,1
 100e0c4:	18800015 	stw	r2,0(r3)
 100e0c8:	00000506 	br	100e0e0 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 100e0cc:	00bfffc4 	movi	r2,-1
 100e0d0:	e0bfeb0d 	sth	r2,-84(fp)
 100e0d4:	00000206 	br	100e0e0 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 100e0d8:	00bfffc4 	movi	r2,-1
 100e0dc:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 100e0e0:	e0bfeb0f 	ldh	r2,-84(fp)
 100e0e4:	e0bfff15 	stw	r2,-4(fp)
 100e0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 100e0ec:	e037883a 	mov	sp,fp
 100e0f0:	dfc00117 	ldw	ra,4(sp)
 100e0f4:	df000017 	ldw	fp,0(sp)
 100e0f8:	dec00204 	addi	sp,sp,8
 100e0fc:	f800283a 	ret

0100e100 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 100e100:	defffd04 	addi	sp,sp,-12
 100e104:	df000215 	stw	fp,8(sp)
 100e108:	df000204 	addi	fp,sp,8
 100e10c:	e13ffe0d 	sth	r4,-8(fp)
 100e110:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e114:	e0bffe0f 	ldh	r2,-8(fp)
 100e118:	1004803a 	cmplt	r2,r2,zero
 100e11c:	1000181e 	bne	r2,zero,100e180 <alt_up_sd_card_set_attributes+0x80>
 100e120:	e0bffe0f 	ldh	r2,-8(fp)
 100e124:	10800508 	cmpgei	r2,r2,20
 100e128:	1000151e 	bne	r2,zero,100e180 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 100e12c:	e0bffe0f 	ldh	r2,-8(fp)
 100e130:	00c04074 	movhi	r3,257
 100e134:	18d91f04 	addi	r3,r3,25724
 100e138:	100491ba 	slli	r2,r2,6
 100e13c:	10c5883a 	add	r2,r2,r3
 100e140:	10800f04 	addi	r2,r2,60
 100e144:	10800017 	ldw	r2,0(r2)
 100e148:	1005003a 	cmpeq	r2,r2,zero
 100e14c:	10000c1e 	bne	r2,zero,100e180 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 100e150:	e17ffe0f 	ldh	r5,-8(fp)
 100e154:	e0bfff0b 	ldhu	r2,-4(fp)
 100e158:	1007883a 	mov	r3,r2
 100e15c:	00bfffc4 	movi	r2,-1
 100e160:	1884703a 	and	r2,r3,r2
 100e164:	1009883a 	mov	r4,r2
 100e168:	00c04074 	movhi	r3,257
 100e16c:	18d91f04 	addi	r3,r3,25724
 100e170:	280491ba 	slli	r2,r5,6
 100e174:	10c5883a 	add	r2,r2,r3
 100e178:	10800204 	addi	r2,r2,8
 100e17c:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 100e180:	e037883a 	mov	sp,fp
 100e184:	df000017 	ldw	fp,0(sp)
 100e188:	dec00104 	addi	sp,sp,4
 100e18c:	f800283a 	ret

0100e190 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 100e190:	defffd04 	addi	sp,sp,-12
 100e194:	df000215 	stw	fp,8(sp)
 100e198:	df000204 	addi	fp,sp,8
 100e19c:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 100e1a0:	00bfffc4 	movi	r2,-1
 100e1a4:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e1a8:	e0bfff0f 	ldh	r2,-4(fp)
 100e1ac:	1004803a 	cmplt	r2,r2,zero
 100e1b0:	1000151e 	bne	r2,zero,100e208 <alt_up_sd_card_get_attributes+0x78>
 100e1b4:	e0bfff0f 	ldh	r2,-4(fp)
 100e1b8:	10800508 	cmpgei	r2,r2,20
 100e1bc:	1000121e 	bne	r2,zero,100e208 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 100e1c0:	e0bfff0f 	ldh	r2,-4(fp)
 100e1c4:	00c04074 	movhi	r3,257
 100e1c8:	18d91f04 	addi	r3,r3,25724
 100e1cc:	100491ba 	slli	r2,r2,6
 100e1d0:	10c5883a 	add	r2,r2,r3
 100e1d4:	10800f04 	addi	r2,r2,60
 100e1d8:	10800017 	ldw	r2,0(r2)
 100e1dc:	1005003a 	cmpeq	r2,r2,zero
 100e1e0:	1000091e 	bne	r2,zero,100e208 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 100e1e4:	e0bfff0f 	ldh	r2,-4(fp)
 100e1e8:	00c04074 	movhi	r3,257
 100e1ec:	18d91f04 	addi	r3,r3,25724
 100e1f0:	100491ba 	slli	r2,r2,6
 100e1f4:	10c5883a 	add	r2,r2,r3
 100e1f8:	10800204 	addi	r2,r2,8
 100e1fc:	108000c3 	ldbu	r2,3(r2)
 100e200:	10803fcc 	andi	r2,r2,255
 100e204:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 100e208:	e0bffe0f 	ldh	r2,-8(fp)
}
 100e20c:	e037883a 	mov	sp,fp
 100e210:	df000017 	ldw	fp,0(sp)
 100e214:	dec00104 	addi	sp,sp,4
 100e218:	f800283a 	ret

0100e21c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 100e21c:	defff904 	addi	sp,sp,-28
 100e220:	dfc00615 	stw	ra,24(sp)
 100e224:	df000515 	stw	fp,20(sp)
 100e228:	dc000415 	stw	r16,16(sp)
 100e22c:	df000404 	addi	fp,sp,16
 100e230:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 100e234:	00bfffc4 	movi	r2,-1
 100e238:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e23c:	e0bffe0f 	ldh	r2,-8(fp)
 100e240:	1004803a 	cmplt	r2,r2,zero
 100e244:	1000d31e 	bne	r2,zero,100e594 <alt_up_sd_card_read+0x378>
 100e248:	e0bffe0f 	ldh	r2,-8(fp)
 100e24c:	10800508 	cmpgei	r2,r2,20
 100e250:	1000d01e 	bne	r2,zero,100e594 <alt_up_sd_card_read+0x378>
		if (active_files[file_handle].in_use) {
 100e254:	e0bffe0f 	ldh	r2,-8(fp)
 100e258:	00c04074 	movhi	r3,257
 100e25c:	18d91f04 	addi	r3,r3,25724
 100e260:	100491ba 	slli	r2,r2,6
 100e264:	10c5883a 	add	r2,r2,r3
 100e268:	10800f04 	addi	r2,r2,60
 100e26c:	10800017 	ldw	r2,0(r2)
 100e270:	1005003a 	cmpeq	r2,r2,zero
 100e274:	1000c71e 	bne	r2,zero,100e594 <alt_up_sd_card_read+0x378>
			if (active_files[file_handle].current_byte_position
 100e278:	e0bffe0f 	ldh	r2,-8(fp)
 100e27c:	00c04074 	movhi	r3,257
 100e280:	18d91f04 	addi	r3,r3,25724
 100e284:	100491ba 	slli	r2,r2,6
 100e288:	10c5883a 	add	r2,r2,r3
 100e28c:	10800904 	addi	r2,r2,36
 100e290:	11000017 	ldw	r4,0(r2)
 100e294:	e0bffe0f 	ldh	r2,-8(fp)
 100e298:	00c04074 	movhi	r3,257
 100e29c:	18d91f04 	addi	r3,r3,25724
 100e2a0:	100491ba 	slli	r2,r2,6
 100e2a4:	10c5883a 	add	r2,r2,r3
 100e2a8:	10800604 	addi	r2,r2,24
 100e2ac:	10800017 	ldw	r2,0(r2)
 100e2b0:	2080b82e 	bgeu	r4,r2,100e594 <alt_up_sd_card_read+0x378>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 100e2b4:	00804074 	movhi	r2,257
 100e2b8:	10990a04 	addi	r2,r2,25640
 100e2bc:	14001417 	ldw	r16,80(r2)
 100e2c0:	e0bffe0f 	ldh	r2,-8(fp)
 100e2c4:	00c04074 	movhi	r3,257
 100e2c8:	18d91f04 	addi	r3,r3,25724
 100e2cc:	100491ba 	slli	r2,r2,6
 100e2d0:	10c5883a 	add	r2,r2,r3
 100e2d4:	10800704 	addi	r2,r2,28
 100e2d8:	10800017 	ldw	r2,0(r2)
 100e2dc:	113fff84 	addi	r4,r2,-2
 100e2e0:	00804074 	movhi	r2,257
 100e2e4:	10990a04 	addi	r2,r2,25640
 100e2e8:	10800383 	ldbu	r2,14(r2)
 100e2ec:	11403fcc 	andi	r5,r2,255
 100e2f0:	10096900 	call	1009690 <__mulsi3>
 100e2f4:	8089883a 	add	r4,r16,r2
 100e2f8:	e0bffe0f 	ldh	r2,-8(fp)
 100e2fc:	00c04074 	movhi	r3,257
 100e300:	18d91f04 	addi	r3,r3,25724
 100e304:	100491ba 	slli	r2,r2,6
 100e308:	10c5883a 	add	r2,r2,r3
 100e30c:	10800804 	addi	r2,r2,32
 100e310:	10800017 	ldw	r2,0(r2)
 100e314:	2085883a 	add	r2,r4,r2
 100e318:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 100e31c:	e0bffe0f 	ldh	r2,-8(fp)
 100e320:	00c04074 	movhi	r3,257
 100e324:	18d91f04 	addi	r3,r3,25724
 100e328:	100491ba 	slli	r2,r2,6
 100e32c:	10c5883a 	add	r2,r2,r3
 100e330:	10800904 	addi	r2,r2,36
 100e334:	10800017 	ldw	r2,0(r2)
 100e338:	1005003a 	cmpeq	r2,r2,zero
 100e33c:	10006a1e 	bne	r2,zero,100e4e8 <alt_up_sd_card_read+0x2cc>
 100e340:	e0bffe0f 	ldh	r2,-8(fp)
 100e344:	00c04074 	movhi	r3,257
 100e348:	18d91f04 	addi	r3,r3,25724
 100e34c:	100491ba 	slli	r2,r2,6
 100e350:	10c5883a 	add	r2,r2,r3
 100e354:	10800904 	addi	r2,r2,36
 100e358:	10800017 	ldw	r2,0(r2)
 100e35c:	10807fcc 	andi	r2,r2,511
 100e360:	1004c03a 	cmpne	r2,r2,zero
 100e364:	1000601e 	bne	r2,zero,100e4e8 <alt_up_sd_card_read+0x2cc>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 100e368:	e0bffe0f 	ldh	r2,-8(fp)
 100e36c:	00c04074 	movhi	r3,257
 100e370:	18d91f04 	addi	r3,r3,25724
 100e374:	100491ba 	slli	r2,r2,6
 100e378:	10c5883a 	add	r2,r2,r3
 100e37c:	10800804 	addi	r2,r2,32
 100e380:	10c00017 	ldw	r3,0(r2)
 100e384:	00804074 	movhi	r2,257
 100e388:	10990a04 	addi	r2,r2,25640
 100e38c:	10800383 	ldbu	r2,14(r2)
 100e390:	10803fcc 	andi	r2,r2,255
 100e394:	10bfffc4 	addi	r2,r2,-1
 100e398:	1880411e 	bne	r3,r2,100e4a0 <alt_up_sd_card_read+0x284>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 100e39c:	e0bffe0f 	ldh	r2,-8(fp)
 100e3a0:	00c04074 	movhi	r3,257
 100e3a4:	18d91f04 	addi	r3,r3,25724
 100e3a8:	100491ba 	slli	r2,r2,6
 100e3ac:	10c5883a 	add	r2,r2,r3
 100e3b0:	10800704 	addi	r2,r2,28
 100e3b4:	11000017 	ldw	r4,0(r2)
 100e3b8:	e17ffd84 	addi	r5,fp,-10
 100e3bc:	100ab780 	call	100ab78 <get_cluster_flag>
 100e3c0:	1005003a 	cmpeq	r2,r2,zero
 100e3c4:	1000331e 	bne	r2,zero,100e494 <alt_up_sd_card_read+0x278>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100e3c8:	e0bffd8b 	ldhu	r2,-10(fp)
 100e3cc:	10bfffcc 	andi	r2,r2,65535
 100e3d0:	10fffe0c 	andi	r3,r2,65528
 100e3d4:	00bffe14 	movui	r2,65528
 100e3d8:	1880031e 	bne	r3,r2,100e3e8 <alt_up_sd_card_read+0x1cc>
								/* End of file */
								return -1;
 100e3dc:	00bfffc4 	movi	r2,-1
 100e3e0:	e0bfff15 	stw	r2,-4(fp)
 100e3e4:	00006d06 	br	100e59c <alt_up_sd_card_read+0x380>
							} else {
								active_files[file_handle].current_cluster_index =
 100e3e8:	e13ffe0f 	ldh	r4,-8(fp)
 100e3ec:	e0bffd8b 	ldhu	r2,-10(fp)
 100e3f0:	117fffcc 	andi	r5,r2,65535
 100e3f4:	00c04074 	movhi	r3,257
 100e3f8:	18d91f04 	addi	r3,r3,25724
 100e3fc:	200491ba 	slli	r2,r4,6
 100e400:	10c5883a 	add	r2,r2,r3
 100e404:	10800704 	addi	r2,r2,28
 100e408:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 100e40c:	e0bffe0f 	ldh	r2,-8(fp)
 100e410:	00c04074 	movhi	r3,257
 100e414:	18d91f04 	addi	r3,r3,25724
 100e418:	100491ba 	slli	r2,r2,6
 100e41c:	10c5883a 	add	r2,r2,r3
 100e420:	10800804 	addi	r2,r2,32
 100e424:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 100e428:	00804074 	movhi	r2,257
 100e42c:	10990a04 	addi	r2,r2,25640
 100e430:	14001417 	ldw	r16,80(r2)
 100e434:	e0bffe0f 	ldh	r2,-8(fp)
 100e438:	00c04074 	movhi	r3,257
 100e43c:	18d91f04 	addi	r3,r3,25724
 100e440:	100491ba 	slli	r2,r2,6
 100e444:	10c5883a 	add	r2,r2,r3
 100e448:	10800704 	addi	r2,r2,28
 100e44c:	10800017 	ldw	r2,0(r2)
 100e450:	113fff84 	addi	r4,r2,-2
 100e454:	00804074 	movhi	r2,257
 100e458:	10990a04 	addi	r2,r2,25640
 100e45c:	10800383 	ldbu	r2,14(r2)
 100e460:	11403fcc 	andi	r5,r2,255
 100e464:	10096900 	call	1009690 <__mulsi3>
 100e468:	8089883a 	add	r4,r16,r2
 100e46c:	e0bffe0f 	ldh	r2,-8(fp)
 100e470:	00c04074 	movhi	r3,257
 100e474:	18d91f04 	addi	r3,r3,25724
 100e478:	100491ba 	slli	r2,r2,6
 100e47c:	10c5883a 	add	r2,r2,r3
 100e480:	10800804 	addi	r2,r2,32
 100e484:	10800017 	ldw	r2,0(r2)
 100e488:	2085883a 	add	r2,r4,r2
 100e48c:	e0bffc15 	stw	r2,-16(fp)
 100e490:	00001506 	br	100e4e8 <alt_up_sd_card_read+0x2cc>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 100e494:	00bfff84 	movi	r2,-2
 100e498:	e0bfff15 	stw	r2,-4(fp)
 100e49c:	00003f06 	br	100e59c <alt_up_sd_card_read+0x380>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 100e4a0:	e17ffe0f 	ldh	r5,-8(fp)
 100e4a4:	e0bffe0f 	ldh	r2,-8(fp)
 100e4a8:	00c04074 	movhi	r3,257
 100e4ac:	18d91f04 	addi	r3,r3,25724
 100e4b0:	100491ba 	slli	r2,r2,6
 100e4b4:	10c5883a 	add	r2,r2,r3
 100e4b8:	10800804 	addi	r2,r2,32
 100e4bc:	10800017 	ldw	r2,0(r2)
 100e4c0:	11000044 	addi	r4,r2,1
 100e4c4:	00c04074 	movhi	r3,257
 100e4c8:	18d91f04 	addi	r3,r3,25724
 100e4cc:	280491ba 	slli	r2,r5,6
 100e4d0:	10c5883a 	add	r2,r2,r3
 100e4d4:	10800804 	addi	r2,r2,32
 100e4d8:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 100e4dc:	e0bffc17 	ldw	r2,-16(fp)
 100e4e0:	10800044 	addi	r2,r2,1
 100e4e4:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 100e4e8:	d0e6cf17 	ldw	r3,-25796(gp)
 100e4ec:	e0bffc17 	ldw	r2,-16(fp)
 100e4f0:	1885883a 	add	r2,r3,r2
 100e4f4:	1007883a 	mov	r3,r2
 100e4f8:	d0a6d317 	ldw	r2,-25780(gp)
 100e4fc:	18800826 	beq	r3,r2,100e520 <alt_up_sd_card_read+0x304>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 100e500:	d166cf17 	ldw	r5,-25796(gp)
 100e504:	e13ffc17 	ldw	r4,-16(fp)
 100e508:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100e50c:	1004c03a 	cmpne	r2,r2,zero
 100e510:	1000031e 	bne	r2,zero,100e520 <alt_up_sd_card_read+0x304>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 100e514:	00bfff84 	movi	r2,-2
 100e518:	e0bfff15 	stw	r2,-4(fp)
 100e51c:	00001f06 	br	100e59c <alt_up_sd_card_read+0x380>
					}
				}

				ch =
 100e520:	e0bffe0f 	ldh	r2,-8(fp)
 100e524:	00c04074 	movhi	r3,257
 100e528:	18d91f04 	addi	r3,r3,25724
 100e52c:	100491ba 	slli	r2,r2,6
 100e530:	10c5883a 	add	r2,r2,r3
 100e534:	10800904 	addi	r2,r2,36
 100e538:	10800017 	ldw	r2,0(r2)
 100e53c:	10807fcc 	andi	r2,r2,511
 100e540:	1007883a 	mov	r3,r2
 100e544:	d0a6ce17 	ldw	r2,-25800(gp)
 100e548:	1885883a 	add	r2,r3,r2
 100e54c:	10800023 	ldbuio	r2,0(r2)
 100e550:	10803fcc 	andi	r2,r2,255
 100e554:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 100e558:	e17ffe0f 	ldh	r5,-8(fp)
 100e55c:	e0bffe0f 	ldh	r2,-8(fp)
 100e560:	00c04074 	movhi	r3,257
 100e564:	18d91f04 	addi	r3,r3,25724
 100e568:	100491ba 	slli	r2,r2,6
 100e56c:	10c5883a 	add	r2,r2,r3
 100e570:	10800904 	addi	r2,r2,36
 100e574:	10800017 	ldw	r2,0(r2)
 100e578:	11000044 	addi	r4,r2,1
 100e57c:	00c04074 	movhi	r3,257
 100e580:	18d91f04 	addi	r3,r3,25724
 100e584:	280491ba 	slli	r2,r5,6
 100e588:	10c5883a 	add	r2,r2,r3
 100e58c:	10800904 	addi	r2,r2,36
 100e590:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 100e594:	e0bffd0f 	ldh	r2,-12(fp)
 100e598:	e0bfff15 	stw	r2,-4(fp)
 100e59c:	e0bfff17 	ldw	r2,-4(fp)
}
 100e5a0:	e037883a 	mov	sp,fp
 100e5a4:	dfc00217 	ldw	ra,8(sp)
 100e5a8:	df000117 	ldw	fp,4(sp)
 100e5ac:	dc000017 	ldw	r16,0(sp)
 100e5b0:	dec00304 	addi	sp,sp,12
 100e5b4:	f800283a 	ret

0100e5b8 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 100e5b8:	defff504 	addi	sp,sp,-44
 100e5bc:	dfc00a15 	stw	ra,40(sp)
 100e5c0:	df000915 	stw	fp,36(sp)
 100e5c4:	dc000815 	stw	r16,32(sp)
 100e5c8:	df000804 	addi	fp,sp,32
 100e5cc:	e13ffd0d 	sth	r4,-12(fp)
 100e5d0:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 100e5d4:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e5d8:	e0bffd0f 	ldh	r2,-12(fp)
 100e5dc:	1004803a 	cmplt	r2,r2,zero
 100e5e0:	10017b1e 	bne	r2,zero,100ebd0 <alt_up_sd_card_write+0x618>
 100e5e4:	e0bffd0f 	ldh	r2,-12(fp)
 100e5e8:	10800508 	cmpgei	r2,r2,20
 100e5ec:	1001781e 	bne	r2,zero,100ebd0 <alt_up_sd_card_write+0x618>
		if (active_files[file_handle].in_use) {
 100e5f0:	e0bffd0f 	ldh	r2,-12(fp)
 100e5f4:	00c04074 	movhi	r3,257
 100e5f8:	18d91f04 	addi	r3,r3,25724
 100e5fc:	100491ba 	slli	r2,r2,6
 100e600:	10c5883a 	add	r2,r2,r3
 100e604:	10800f04 	addi	r2,r2,60
 100e608:	10800017 	ldw	r2,0(r2)
 100e60c:	1005003a 	cmpeq	r2,r2,zero
 100e610:	10016f1e 	bne	r2,zero,100ebd0 <alt_up_sd_card_write+0x618>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 100e614:	00804074 	movhi	r2,257
 100e618:	10990a04 	addi	r2,r2,25640
 100e61c:	14001417 	ldw	r16,80(r2)
 100e620:	e0bffd0f 	ldh	r2,-12(fp)
 100e624:	00c04074 	movhi	r3,257
 100e628:	18d91f04 	addi	r3,r3,25724
 100e62c:	100491ba 	slli	r2,r2,6
 100e630:	10c5883a 	add	r2,r2,r3
 100e634:	10800704 	addi	r2,r2,28
 100e638:	10800017 	ldw	r2,0(r2)
 100e63c:	113fff84 	addi	r4,r2,-2
 100e640:	00804074 	movhi	r2,257
 100e644:	10990a04 	addi	r2,r2,25640
 100e648:	10800383 	ldbu	r2,14(r2)
 100e64c:	11403fcc 	andi	r5,r2,255
 100e650:	10096900 	call	1009690 <__mulsi3>
 100e654:	8089883a 	add	r4,r16,r2
 100e658:	e0bffd0f 	ldh	r2,-12(fp)
 100e65c:	00c04074 	movhi	r3,257
 100e660:	18d91f04 	addi	r3,r3,25724
 100e664:	100491ba 	slli	r2,r2,6
 100e668:	10c5883a 	add	r2,r2,r3
 100e66c:	10800804 	addi	r2,r2,32
 100e670:	10800017 	ldw	r2,0(r2)
 100e674:	2085883a 	add	r2,r4,r2
 100e678:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 100e67c:	e0bffd0f 	ldh	r2,-12(fp)
 100e680:	00c04074 	movhi	r3,257
 100e684:	18d91f04 	addi	r3,r3,25724
 100e688:	100491ba 	slli	r2,r2,6
 100e68c:	10c5883a 	add	r2,r2,r3
 100e690:	10800904 	addi	r2,r2,36
 100e694:	11000017 	ldw	r4,0(r2)
 100e698:	00804074 	movhi	r2,257
 100e69c:	10990a04 	addi	r2,r2,25640
 100e6a0:	1080030b 	ldhu	r2,12(r2)
 100e6a4:	117fffcc 	andi	r5,r2,65535
 100e6a8:	10096880 	call	1009688 <__umodsi3>
 100e6ac:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 100e6b0:	e0bffd0f 	ldh	r2,-12(fp)
 100e6b4:	00c04074 	movhi	r3,257
 100e6b8:	18d91f04 	addi	r3,r3,25724
 100e6bc:	100491ba 	slli	r2,r2,6
 100e6c0:	10c5883a 	add	r2,r2,r3
 100e6c4:	10800904 	addi	r2,r2,36
 100e6c8:	11000017 	ldw	r4,0(r2)
 100e6cc:	e0bffd0f 	ldh	r2,-12(fp)
 100e6d0:	00c04074 	movhi	r3,257
 100e6d4:	18d91f04 	addi	r3,r3,25724
 100e6d8:	100491ba 	slli	r2,r2,6
 100e6dc:	10c5883a 	add	r2,r2,r3
 100e6e0:	10800604 	addi	r2,r2,24
 100e6e4:	10800017 	ldw	r2,0(r2)
 100e6e8:	2080682e 	bgeu	r4,r2,100e88c <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 100e6ec:	e0bffd0f 	ldh	r2,-12(fp)
 100e6f0:	00c04074 	movhi	r3,257
 100e6f4:	18d91f04 	addi	r3,r3,25724
 100e6f8:	100491ba 	slli	r2,r2,6
 100e6fc:	10c5883a 	add	r2,r2,r3
 100e700:	10800904 	addi	r2,r2,36
 100e704:	10800017 	ldw	r2,0(r2)
 100e708:	1005003a 	cmpeq	r2,r2,zero
 100e70c:	1000e41e 	bne	r2,zero,100eaa0 <alt_up_sd_card_write+0x4e8>
 100e710:	e0bff80f 	ldh	r2,-32(fp)
 100e714:	1004c03a 	cmpne	r2,r2,zero
 100e718:	1000e11e 	bne	r2,zero,100eaa0 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 100e71c:	e0bffd0f 	ldh	r2,-12(fp)
 100e720:	00c04074 	movhi	r3,257
 100e724:	18d91f04 	addi	r3,r3,25724
 100e728:	100491ba 	slli	r2,r2,6
 100e72c:	10c5883a 	add	r2,r2,r3
 100e730:	10800804 	addi	r2,r2,32
 100e734:	10c00017 	ldw	r3,0(r2)
 100e738:	00804074 	movhi	r2,257
 100e73c:	10990a04 	addi	r2,r2,25640
 100e740:	10800383 	ldbu	r2,14(r2)
 100e744:	10803fcc 	andi	r2,r2,255
 100e748:	10bfffc4 	addi	r2,r2,-1
 100e74c:	18803c1e 	bne	r3,r2,100e840 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 100e750:	e0bffd0f 	ldh	r2,-12(fp)
 100e754:	00c04074 	movhi	r3,257
 100e758:	18d91f04 	addi	r3,r3,25724
 100e75c:	100491ba 	slli	r2,r2,6
 100e760:	10c5883a 	add	r2,r2,r3
 100e764:	10800704 	addi	r2,r2,28
 100e768:	11000017 	ldw	r4,0(r2)
 100e76c:	e17ffb04 	addi	r5,fp,-20
 100e770:	100ab780 	call	100ab78 <get_cluster_flag>
 100e774:	1005003a 	cmpeq	r2,r2,zero
 100e778:	10002f1e 	bne	r2,zero,100e838 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 100e77c:	e0bffb0b 	ldhu	r2,-20(fp)
 100e780:	10ffffcc 	andi	r3,r2,65535
 100e784:	00bffdd4 	movui	r2,65527
 100e788:	10c0c536 	bltu	r2,r3,100eaa0 <alt_up_sd_card_write+0x4e8>
								active_files[file_handle].current_cluster_index =
 100e78c:	e13ffd0f 	ldh	r4,-12(fp)
 100e790:	e0bffb0b 	ldhu	r2,-20(fp)
 100e794:	117fffcc 	andi	r5,r2,65535
 100e798:	00c04074 	movhi	r3,257
 100e79c:	18d91f04 	addi	r3,r3,25724
 100e7a0:	200491ba 	slli	r2,r4,6
 100e7a4:	10c5883a 	add	r2,r2,r3
 100e7a8:	10800704 	addi	r2,r2,28
 100e7ac:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 100e7b0:	e0bffd0f 	ldh	r2,-12(fp)
 100e7b4:	00c04074 	movhi	r3,257
 100e7b8:	18d91f04 	addi	r3,r3,25724
 100e7bc:	100491ba 	slli	r2,r2,6
 100e7c0:	10c5883a 	add	r2,r2,r3
 100e7c4:	10800804 	addi	r2,r2,32
 100e7c8:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 100e7cc:	00804074 	movhi	r2,257
 100e7d0:	10990a04 	addi	r2,r2,25640
 100e7d4:	14001417 	ldw	r16,80(r2)
 100e7d8:	e0bffd0f 	ldh	r2,-12(fp)
 100e7dc:	00c04074 	movhi	r3,257
 100e7e0:	18d91f04 	addi	r3,r3,25724
 100e7e4:	100491ba 	slli	r2,r2,6
 100e7e8:	10c5883a 	add	r2,r2,r3
 100e7ec:	10800704 	addi	r2,r2,28
 100e7f0:	10800017 	ldw	r2,0(r2)
 100e7f4:	113fff84 	addi	r4,r2,-2
 100e7f8:	00804074 	movhi	r2,257
 100e7fc:	10990a04 	addi	r2,r2,25640
 100e800:	10800383 	ldbu	r2,14(r2)
 100e804:	11403fcc 	andi	r5,r2,255
 100e808:	10096900 	call	1009690 <__mulsi3>
 100e80c:	8089883a 	add	r4,r16,r2
 100e810:	e0bffd0f 	ldh	r2,-12(fp)
 100e814:	00c04074 	movhi	r3,257
 100e818:	18d91f04 	addi	r3,r3,25724
 100e81c:	100491ba 	slli	r2,r2,6
 100e820:	10c5883a 	add	r2,r2,r3
 100e824:	10800804 	addi	r2,r2,32
 100e828:	10800017 	ldw	r2,0(r2)
 100e82c:	2085883a 	add	r2,r4,r2
 100e830:	e0bff915 	stw	r2,-28(fp)
 100e834:	00009a06 	br	100eaa0 <alt_up_sd_card_write+0x4e8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 100e838:	e03fff15 	stw	zero,-4(fp)
 100e83c:	0000e606 	br	100ebd8 <alt_up_sd_card_write+0x620>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 100e840:	e17ffd0f 	ldh	r5,-12(fp)
 100e844:	e0bffd0f 	ldh	r2,-12(fp)
 100e848:	00c04074 	movhi	r3,257
 100e84c:	18d91f04 	addi	r3,r3,25724
 100e850:	100491ba 	slli	r2,r2,6
 100e854:	10c5883a 	add	r2,r2,r3
 100e858:	10800804 	addi	r2,r2,32
 100e85c:	10800017 	ldw	r2,0(r2)
 100e860:	11000044 	addi	r4,r2,1
 100e864:	00c04074 	movhi	r3,257
 100e868:	18d91f04 	addi	r3,r3,25724
 100e86c:	280491ba 	slli	r2,r5,6
 100e870:	10c5883a 	add	r2,r2,r3
 100e874:	10800804 	addi	r2,r2,32
 100e878:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 100e87c:	e0bff917 	ldw	r2,-28(fp)
 100e880:	10800044 	addi	r2,r2,1
 100e884:	e0bff915 	stw	r2,-28(fp)
 100e888:	00008506 	br	100eaa0 <alt_up_sd_card_write+0x4e8>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 100e88c:	e0bffd0f 	ldh	r2,-12(fp)
 100e890:	00c04074 	movhi	r3,257
 100e894:	18d91f04 	addi	r3,r3,25724
 100e898:	100491ba 	slli	r2,r2,6
 100e89c:	10c5883a 	add	r2,r2,r3
 100e8a0:	10800904 	addi	r2,r2,36
 100e8a4:	10800017 	ldw	r2,0(r2)
 100e8a8:	1005003a 	cmpeq	r2,r2,zero
 100e8ac:	10007c1e 	bne	r2,zero,100eaa0 <alt_up_sd_card_write+0x4e8>
 100e8b0:	e0bff80f 	ldh	r2,-32(fp)
 100e8b4:	1004c03a 	cmpne	r2,r2,zero
 100e8b8:	1000791e 	bne	r2,zero,100eaa0 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 100e8bc:	e0bffd0f 	ldh	r2,-12(fp)
 100e8c0:	00c04074 	movhi	r3,257
 100e8c4:	18d91f04 	addi	r3,r3,25724
 100e8c8:	100491ba 	slli	r2,r2,6
 100e8cc:	10c5883a 	add	r2,r2,r3
 100e8d0:	10800804 	addi	r2,r2,32
 100e8d4:	10c00017 	ldw	r3,0(r2)
 100e8d8:	00804074 	movhi	r2,257
 100e8dc:	10990a04 	addi	r2,r2,25640
 100e8e0:	10800383 	ldbu	r2,14(r2)
 100e8e4:	10803fcc 	andi	r2,r2,255
 100e8e8:	10bfffc4 	addi	r2,r2,-1
 100e8ec:	1880381e 	bne	r3,r2,100e9d0 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 100e8f0:	e13ffc04 	addi	r4,fp,-16
 100e8f4:	100cbd00 	call	100cbd0 <find_first_empty_cluster>
 100e8f8:	1005003a 	cmpeq	r2,r2,zero
 100e8fc:	1000321e 	bne	r2,zero,100e9c8 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 100e900:	e0bffd0f 	ldh	r2,-12(fp)
 100e904:	00c04074 	movhi	r3,257
 100e908:	18d91f04 	addi	r3,r3,25724
 100e90c:	100491ba 	slli	r2,r2,6
 100e910:	10c5883a 	add	r2,r2,r3
 100e914:	10800704 	addi	r2,r2,28
 100e918:	11000017 	ldw	r4,0(r2)
 100e91c:	e0bffc17 	ldw	r2,-16(fp)
 100e920:	117fffcc 	andi	r5,r2,65535
 100e924:	2960001c 	xori	r5,r5,32768
 100e928:	29600004 	addi	r5,r5,-32768
 100e92c:	01800044 	movi	r6,1
 100e930:	100ac300 	call	100ac30 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 100e934:	e13ffc17 	ldw	r4,-16(fp)
 100e938:	017fffc4 	movi	r5,-1
 100e93c:	01800044 	movi	r6,1
 100e940:	100ac300 	call	100ac30 <mark_cluster>
							mark_cluster(
 100e944:	e0bffd0f 	ldh	r2,-12(fp)
 100e948:	00c04074 	movhi	r3,257
 100e94c:	18d91f04 	addi	r3,r3,25724
 100e950:	100491ba 	slli	r2,r2,6
 100e954:	10c5883a 	add	r2,r2,r3
 100e958:	10800704 	addi	r2,r2,28
 100e95c:	11000017 	ldw	r4,0(r2)
 100e960:	e0bffc17 	ldw	r2,-16(fp)
 100e964:	117fffcc 	andi	r5,r2,65535
 100e968:	2960001c 	xori	r5,r5,32768
 100e96c:	29600004 	addi	r5,r5,-32768
 100e970:	000d883a 	mov	r6,zero
 100e974:	100ac300 	call	100ac30 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 100e978:	e13ffc17 	ldw	r4,-16(fp)
 100e97c:	017fffc4 	movi	r5,-1
 100e980:	000d883a 	mov	r6,zero
 100e984:	100ac300 	call	100ac30 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 100e988:	e0bffd0f 	ldh	r2,-12(fp)
 100e98c:	e13ffc17 	ldw	r4,-16(fp)
 100e990:	00c04074 	movhi	r3,257
 100e994:	18d91f04 	addi	r3,r3,25724
 100e998:	100491ba 	slli	r2,r2,6
 100e99c:	10c5883a 	add	r2,r2,r3
 100e9a0:	10800704 	addi	r2,r2,28
 100e9a4:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 100e9a8:	e0bffd0f 	ldh	r2,-12(fp)
 100e9ac:	00c04074 	movhi	r3,257
 100e9b0:	18d91f04 	addi	r3,r3,25724
 100e9b4:	100491ba 	slli	r2,r2,6
 100e9b8:	10c5883a 	add	r2,r2,r3
 100e9bc:	10800804 	addi	r2,r2,32
 100e9c0:	10000015 	stw	zero,0(r2)
 100e9c4:	00001c06 	br	100ea38 <alt_up_sd_card_write+0x480>
									0;
						} else {
							return false;
 100e9c8:	e03fff15 	stw	zero,-4(fp)
 100e9cc:	00008206 	br	100ebd8 <alt_up_sd_card_write+0x620>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 100e9d0:	e43ffd0f 	ldh	r16,-12(fp)
 100e9d4:	e0bffd0f 	ldh	r2,-12(fp)
 100e9d8:	00c04074 	movhi	r3,257
 100e9dc:	18d91f04 	addi	r3,r3,25724
 100e9e0:	100491ba 	slli	r2,r2,6
 100e9e4:	10c5883a 	add	r2,r2,r3
 100e9e8:	10800904 	addi	r2,r2,36
 100e9ec:	11000017 	ldw	r4,0(r2)
 100e9f0:	00804074 	movhi	r2,257
 100e9f4:	10990a04 	addi	r2,r2,25640
 100e9f8:	1080030b 	ldhu	r2,12(r2)
 100e9fc:	117fffcc 	andi	r5,r2,65535
 100ea00:	10096800 	call	1009680 <__udivsi3>
 100ea04:	1009883a 	mov	r4,r2
 100ea08:	00804074 	movhi	r2,257
 100ea0c:	10990a04 	addi	r2,r2,25640
 100ea10:	10800383 	ldbu	r2,14(r2)
 100ea14:	11403fcc 	andi	r5,r2,255
 100ea18:	10096880 	call	1009688 <__umodsi3>
 100ea1c:	1009883a 	mov	r4,r2
 100ea20:	00c04074 	movhi	r3,257
 100ea24:	18d91f04 	addi	r3,r3,25724
 100ea28:	800491ba 	slli	r2,r16,6
 100ea2c:	10c5883a 	add	r2,r2,r3
 100ea30:	10800804 	addi	r2,r2,32
 100ea34:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 100ea38:	00804074 	movhi	r2,257
 100ea3c:	10990a04 	addi	r2,r2,25640
 100ea40:	14001417 	ldw	r16,80(r2)
 100ea44:	e0bffd0f 	ldh	r2,-12(fp)
 100ea48:	00c04074 	movhi	r3,257
 100ea4c:	18d91f04 	addi	r3,r3,25724
 100ea50:	100491ba 	slli	r2,r2,6
 100ea54:	10c5883a 	add	r2,r2,r3
 100ea58:	10800704 	addi	r2,r2,28
 100ea5c:	10800017 	ldw	r2,0(r2)
 100ea60:	113fff84 	addi	r4,r2,-2
 100ea64:	00804074 	movhi	r2,257
 100ea68:	10990a04 	addi	r2,r2,25640
 100ea6c:	10800383 	ldbu	r2,14(r2)
 100ea70:	11403fcc 	andi	r5,r2,255
 100ea74:	10096900 	call	1009690 <__mulsi3>
 100ea78:	8089883a 	add	r4,r16,r2
 100ea7c:	e0bffd0f 	ldh	r2,-12(fp)
 100ea80:	00c04074 	movhi	r3,257
 100ea84:	18d91f04 	addi	r3,r3,25724
 100ea88:	100491ba 	slli	r2,r2,6
 100ea8c:	10c5883a 	add	r2,r2,r3
 100ea90:	10800804 	addi	r2,r2,32
 100ea94:	10800017 	ldw	r2,0(r2)
 100ea98:	2085883a 	add	r2,r4,r2
 100ea9c:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 100eaa0:	d0e6cf17 	ldw	r3,-25796(gp)
 100eaa4:	e0bff917 	ldw	r2,-28(fp)
 100eaa8:	1885883a 	add	r2,r3,r2
 100eaac:	1007883a 	mov	r3,r2
 100eab0:	d0a6d317 	ldw	r2,-25780(gp)
 100eab4:	18800726 	beq	r3,r2,100ead4 <alt_up_sd_card_write+0x51c>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 100eab8:	d166cf17 	ldw	r5,-25796(gp)
 100eabc:	e13ff917 	ldw	r4,-28(fp)
 100eac0:	100eef00 	call	100eef0 <Read_Sector_Data_Attempt_CRC>
 100eac4:	1004c03a 	cmpne	r2,r2,zero
 100eac8:	1000021e 	bne	r2,zero,100ead4 <alt_up_sd_card_write+0x51c>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 100eacc:	e03fff15 	stw	zero,-4(fp)
 100ead0:	00004106 	br	100ebd8 <alt_up_sd_card_write+0x620>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 100ead4:	e0bff80f 	ldh	r2,-32(fp)
 100ead8:	1007883a 	mov	r3,r2
 100eadc:	d0a6ce17 	ldw	r2,-25800(gp)
 100eae0:	1885883a 	add	r2,r3,r2
 100eae4:	e0fffe07 	ldb	r3,-8(fp)
 100eae8:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 100eaec:	e17ffd0f 	ldh	r5,-12(fp)
 100eaf0:	e0bffd0f 	ldh	r2,-12(fp)
 100eaf4:	00c04074 	movhi	r3,257
 100eaf8:	18d91f04 	addi	r3,r3,25724
 100eafc:	100491ba 	slli	r2,r2,6
 100eb00:	10c5883a 	add	r2,r2,r3
 100eb04:	10800904 	addi	r2,r2,36
 100eb08:	10800017 	ldw	r2,0(r2)
 100eb0c:	11000044 	addi	r4,r2,1
 100eb10:	00c04074 	movhi	r3,257
 100eb14:	18d91f04 	addi	r3,r3,25724
 100eb18:	280491ba 	slli	r2,r5,6
 100eb1c:	10c5883a 	add	r2,r2,r3
 100eb20:	10800904 	addi	r2,r2,36
 100eb24:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 100eb28:	e0bffd0f 	ldh	r2,-12(fp)
 100eb2c:	00c04074 	movhi	r3,257
 100eb30:	18d91f04 	addi	r3,r3,25724
 100eb34:	100491ba 	slli	r2,r2,6
 100eb38:	10c5883a 	add	r2,r2,r3
 100eb3c:	10800904 	addi	r2,r2,36
 100eb40:	11000017 	ldw	r4,0(r2)
 100eb44:	e0bffd0f 	ldh	r2,-12(fp)
 100eb48:	00c04074 	movhi	r3,257
 100eb4c:	18d91f04 	addi	r3,r3,25724
 100eb50:	100491ba 	slli	r2,r2,6
 100eb54:	10c5883a 	add	r2,r2,r3
 100eb58:	10800604 	addi	r2,r2,24
 100eb5c:	10800017 	ldw	r2,0(r2)
 100eb60:	11000f2e 	bgeu	r2,r4,100eba0 <alt_up_sd_card_write+0x5e8>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 100eb64:	e17ffd0f 	ldh	r5,-12(fp)
 100eb68:	e0bffd0f 	ldh	r2,-12(fp)
 100eb6c:	00c04074 	movhi	r3,257
 100eb70:	18d91f04 	addi	r3,r3,25724
 100eb74:	100491ba 	slli	r2,r2,6
 100eb78:	10c5883a 	add	r2,r2,r3
 100eb7c:	10800604 	addi	r2,r2,24
 100eb80:	10800017 	ldw	r2,0(r2)
 100eb84:	11000044 	addi	r4,r2,1
 100eb88:	00c04074 	movhi	r3,257
 100eb8c:	18d91f04 	addi	r3,r3,25724
 100eb90:	280491ba 	slli	r2,r5,6
 100eb94:	10c5883a 	add	r2,r2,r3
 100eb98:	10800604 	addi	r2,r2,24
 100eb9c:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				
			}
            active_files[file_handle].modified = true;
 100eba0:	e0bffd0f 	ldh	r2,-12(fp)
 100eba4:	00c04074 	movhi	r3,257
 100eba8:	18d91f04 	addi	r3,r3,25724
 100ebac:	100491ba 	slli	r2,r2,6
 100ebb0:	10c5883a 	add	r2,r2,r3
 100ebb4:	10c00e04 	addi	r3,r2,56
 100ebb8:	00800044 	movi	r2,1
 100ebbc:	18800015 	stw	r2,0(r3)
            
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 100ebc0:	00800044 	movi	r2,1
 100ebc4:	d0a6d215 	stw	r2,-25784(gp)
			result = true;
 100ebc8:	00800044 	movi	r2,1
 100ebcc:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 100ebd0:	e0bffa17 	ldw	r2,-24(fp)
 100ebd4:	e0bfff15 	stw	r2,-4(fp)
 100ebd8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ebdc:	e037883a 	mov	sp,fp
 100ebe0:	dfc00217 	ldw	ra,8(sp)
 100ebe4:	df000117 	ldw	fp,4(sp)
 100ebe8:	dc000017 	ldw	r16,0(sp)
 100ebec:	dec00304 	addi	sp,sp,12
 100ebf0:	f800283a 	ret

0100ebf4 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 100ebf4:	defffa04 	addi	sp,sp,-24
 100ebf8:	dfc00515 	stw	ra,20(sp)
 100ebfc:	df000415 	stw	fp,16(sp)
 100ec00:	dc000315 	stw	r16,12(sp)
 100ec04:	df000304 	addi	fp,sp,12
 100ec08:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 100ec0c:	e0bfff0f 	ldh	r2,-4(fp)
 100ec10:	1004403a 	cmpge	r2,r2,zero
 100ec14:	1000081e 	bne	r2,zero,100ec38 <alt_up_sd_card_fclose+0x44>
 100ec18:	01004074 	movhi	r4,257
 100ec1c:	210b5d04 	addi	r4,r4,11636
 100ec20:	0141be84 	movi	r5,1786
 100ec24:	01804074 	movhi	r6,257
 100ec28:	318b5704 	addi	r6,r6,11612
 100ec2c:	01c04074 	movhi	r7,257
 100ec30:	39cb6a04 	addi	r7,r7,11688
 100ec34:	1010e0c0 	call	1010e0c <__assert_func>

	bool result = false;
 100ec38:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100ec3c:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100ec40:	1005003a 	cmpeq	r2,r2,zero
 100ec44:	1000641e 	bne	r2,zero,100edd8 <alt_up_sd_card_fclose+0x1e4>
 100ec48:	d0a6c817 	ldw	r2,-25824(gp)
 100ec4c:	1005003a 	cmpeq	r2,r2,zero
 100ec50:	1000611e 	bne	r2,zero,100edd8 <alt_up_sd_card_fclose+0x1e4>
		if (active_files[file_handle].in_use) {
 100ec54:	e0bfff0f 	ldh	r2,-4(fp)
 100ec58:	00c04074 	movhi	r3,257
 100ec5c:	18d91f04 	addi	r3,r3,25724
 100ec60:	100491ba 	slli	r2,r2,6
 100ec64:	10c5883a 	add	r2,r2,r3
 100ec68:	10800f04 	addi	r2,r2,60
 100ec6c:	10800017 	ldw	r2,0(r2)
 100ec70:	1005003a 	cmpeq	r2,r2,zero
 100ec74:	1000581e 	bne	r2,zero,100edd8 <alt_up_sd_card_fclose+0x1e4>
			if (active_files[file_handle].modified) {
 100ec78:	e0bfff0f 	ldh	r2,-4(fp)
 100ec7c:	00c04074 	movhi	r3,257
 100ec80:	18d91f04 	addi	r3,r3,25724
 100ec84:	100491ba 	slli	r2,r2,6
 100ec88:	10c5883a 	add	r2,r2,r3
 100ec8c:	10800e04 	addi	r2,r2,56
 100ec90:	10800017 	ldw	r2,0(r2)
 100ec94:	1005003a 	cmpeq	r2,r2,zero
 100ec98:	1000461e 	bne	r2,zero,100edb4 <alt_up_sd_card_fclose+0x1c0>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 100ec9c:	e0bfff0f 	ldh	r2,-4(fp)
 100eca0:	00c04074 	movhi	r3,257
 100eca4:	18d91f04 	addi	r3,r3,25724
 100eca8:	100491ba 	slli	r2,r2,6
 100ecac:	10c5883a 	add	r2,r2,r3
 100ecb0:	10800b04 	addi	r2,r2,44
 100ecb4:	10800017 	ldw	r2,0(r2)
 100ecb8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 100ecbc:	e0bfff0f 	ldh	r2,-4(fp)
 100ecc0:	00c04074 	movhi	r3,257
 100ecc4:	18d91f04 	addi	r3,r3,25724
 100ecc8:	100491ba 	slli	r2,r2,6
 100eccc:	10c5883a 	add	r2,r2,r3
 100ecd0:	10800a04 	addi	r2,r2,40
 100ecd4:	10800017 	ldw	r2,0(r2)
 100ecd8:	1004c03a 	cmpne	r2,r2,zero
 100ecdc:	1000071e 	bne	r2,zero,100ecfc <alt_up_sd_card_fclose+0x108>
					record_sector = record_sector
 100ece0:	00804074 	movhi	r2,257
 100ece4:	10990a04 	addi	r2,r2,25640
 100ece8:	10c01317 	ldw	r3,76(r2)
 100ecec:	e0bffd17 	ldw	r2,-12(fp)
 100ecf0:	10c5883a 	add	r2,r2,r3
 100ecf4:	e0bffd15 	stw	r2,-12(fp)
 100ecf8:	00001406 	br	100ed4c <alt_up_sd_card_fclose+0x158>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 100ecfc:	00804074 	movhi	r2,257
 100ed00:	10990a04 	addi	r2,r2,25640
 100ed04:	10c01417 	ldw	r3,80(r2)
 100ed08:	e0bffd17 	ldw	r2,-12(fp)
 100ed0c:	18a1883a 	add	r16,r3,r2
 100ed10:	e0bfff0f 	ldh	r2,-4(fp)
 100ed14:	00c04074 	movhi	r3,257
 100ed18:	18d91f04 	addi	r3,r3,25724
 100ed1c:	100491ba 	slli	r2,r2,6
 100ed20:	10c5883a 	add	r2,r2,r3
 100ed24:	10800a04 	addi	r2,r2,40
 100ed28:	10800017 	ldw	r2,0(r2)
 100ed2c:	113fff84 	addi	r4,r2,-2
 100ed30:	00804074 	movhi	r2,257
 100ed34:	10990a04 	addi	r2,r2,25640
 100ed38:	10800383 	ldbu	r2,14(r2)
 100ed3c:	11403fcc 	andi	r5,r2,255
 100ed40:	10096900 	call	1009690 <__mulsi3>
 100ed44:	8085883a 	add	r2,r16,r2
 100ed48:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 100ed4c:	e13ffd17 	ldw	r4,-12(fp)
 100ed50:	d166cf17 	ldw	r5,-25796(gp)
 100ed54:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100ed58:	1005003a 	cmpeq	r2,r2,zero
 100ed5c:	1000151e 	bne	r2,zero,100edb4 <alt_up_sd_card_fclose+0x1c0>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 100ed60:	e0bfff0f 	ldh	r2,-4(fp)
 100ed64:	00c04074 	movhi	r3,257
 100ed68:	18d91f04 	addi	r3,r3,25724
 100ed6c:	100491ba 	slli	r2,r2,6
 100ed70:	10c5883a 	add	r2,r2,r3
 100ed74:	10800c04 	addi	r2,r2,48
 100ed78:	1080000b 	ldhu	r2,0(r2)
 100ed7c:	113fffcc 	andi	r4,r2,65535
 100ed80:	2120001c 	xori	r4,r4,32768
 100ed84:	21200004 	addi	r4,r4,-32768
 100ed88:	e0bfff0f 	ldh	r2,-4(fp)
 100ed8c:	100491ba 	slli	r2,r2,6
 100ed90:	1007883a 	mov	r3,r2
 100ed94:	00804074 	movhi	r2,257
 100ed98:	10991f04 	addi	r2,r2,25724
 100ed9c:	188b883a 	add	r5,r3,r2
 100eda0:	100b1480 	call	100b148 <Write_File_Record_At_Offset>
 100eda4:	1005003a 	cmpeq	r2,r2,zero
 100eda8:	1000021e 	bne	r2,zero,100edb4 <alt_up_sd_card_fclose+0x1c0>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 100edac:	100aa2c0 	call	100aa2c <Save_Modified_Sector>
 100edb0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 100edb4:	e0bfff0f 	ldh	r2,-4(fp)
 100edb8:	00c04074 	movhi	r3,257
 100edbc:	18d91f04 	addi	r3,r3,25724
 100edc0:	100491ba 	slli	r2,r2,6
 100edc4:	10c5883a 	add	r2,r2,r3
 100edc8:	10800f04 	addi	r2,r2,60
 100edcc:	10000015 	stw	zero,0(r2)
			result = true;
 100edd0:	00800044 	movi	r2,1
 100edd4:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 100edd8:	e0bffe17 	ldw	r2,-8(fp)
}
 100eddc:	e037883a 	mov	sp,fp
 100ede0:	dfc00217 	ldw	ra,8(sp)
 100ede4:	df000117 	ldw	fp,4(sp)
 100ede8:	dc000017 	ldw	r16,0(sp)
 100edec:	dec00304 	addi	sp,sp,12
 100edf0:	f800283a 	ret

0100edf4 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100edf4:	defff904 	addi	sp,sp,-28
 100edf8:	dfc00615 	stw	ra,24(sp)
 100edfc:	df000515 	stw	fp,20(sp)
 100ee00:	df000504 	addi	fp,sp,20
 100ee04:	e13ffd15 	stw	r4,-12(fp)
 100ee08:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100ee0c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100ee10:	100d7980 	call	100d798 <alt_up_sd_card_is_Present>
 100ee14:	1005003a 	cmpeq	r2,r2,zero
 100ee18:	10002d1e 	bne	r2,zero,100eed0 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 100ee1c:	00803fc4 	movi	r2,255
 100ee20:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100ee24:	d0a6d217 	ldw	r2,-25784(gp)
 100ee28:	1005003a 	cmpeq	r2,r2,zero
 100ee2c:	1000081e 	bne	r2,zero,100ee50 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100ee30:	d0a6d317 	ldw	r2,-25780(gp)
 100ee34:	1009883a 	mov	r4,r2
 100ee38:	000b883a 	mov	r5,zero
 100ee3c:	100a9640 	call	100a964 <Write_Sector_Data>
 100ee40:	1004c03a 	cmpne	r2,r2,zero
 100ee44:	1000021e 	bne	r2,zero,100ee50 <Read_Sector_Data_CRC+0x5c>
				return false;
 100ee48:	e03fff15 	stw	zero,-4(fp)
 100ee4c:	00002206 	br	100eed8 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100ee50:	d0a6cd17 	ldw	r2,-25804(gp)
 100ee54:	1009883a 	mov	r4,r2
 100ee58:	e0fffd17 	ldw	r3,-12(fp)
 100ee5c:	e0bffe17 	ldw	r2,-8(fp)
 100ee60:	1885883a 	add	r2,r3,r2
 100ee64:	1006927a 	slli	r3,r2,9
 100ee68:	2005883a 	mov	r2,r4
 100ee6c:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100ee70:	d0a6cc17 	ldw	r2,-25808(gp)
 100ee74:	1007883a 	mov	r3,r2
 100ee78:	00800444 	movi	r2,17
 100ee7c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100ee80:	d0a6c917 	ldw	r2,-25820(gp)
 100ee84:	1080002b 	ldhuio	r2,0(r2)
 100ee88:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100ee8c:	e0bffb0b 	ldhu	r2,-20(fp)
 100ee90:	10bfffcc 	andi	r2,r2,65535
 100ee94:	1080010c 	andi	r2,r2,4
 100ee98:	1004c03a 	cmpne	r2,r2,zero
 100ee9c:	103ff81e 	bne	r2,zero,100ee80 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 100eea0:	e0bffb0b 	ldhu	r2,-20(fp)
 100eea4:	10bfffcc 	andi	r2,r2,65535
 100eea8:	10800c0c 	andi	r2,r2,48
 100eeac:	1004c03a 	cmpne	r2,r2,zero
 100eeb0:	1000071e 	bne	r2,zero,100eed0 <Read_Sector_Data_CRC+0xdc>
			result = true;
 100eeb4:	00800044 	movi	r2,1
 100eeb8:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100eebc:	d026d215 	stw	zero,-25784(gp)
			current_sector_index = sector_index + partition_offset;
 100eec0:	e0fffd17 	ldw	r3,-12(fp)
 100eec4:	e0bffe17 	ldw	r2,-8(fp)
 100eec8:	1885883a 	add	r2,r3,r2
 100eecc:	d0a6d315 	stw	r2,-25780(gp)
		}
	}
	return result;
 100eed0:	e0bffc17 	ldw	r2,-16(fp)
 100eed4:	e0bfff15 	stw	r2,-4(fp)
 100eed8:	e0bfff17 	ldw	r2,-4(fp)
}
 100eedc:	e037883a 	mov	sp,fp
 100eee0:	dfc00117 	ldw	ra,4(sp)
 100eee4:	df000017 	ldw	fp,0(sp)
 100eee8:	dec00204 	addi	sp,sp,8
 100eeec:	f800283a 	ret

0100eef0 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 100eef0:	defff804 	addi	sp,sp,-32
 100eef4:	dfc00715 	stw	ra,28(sp)
 100eef8:	df000615 	stw	fp,24(sp)
 100eefc:	df000604 	addi	fp,sp,24
 100ef00:	e13ffd15 	stw	r4,-12(fp)
 100ef04:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 100ef08:	00801904 	movi	r2,100
 100ef0c:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 100ef10:	e03ffc15 	stw	zero,-16(fp)
 100ef14:	00000d06 	br	100ef4c <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 100ef18:	e13ffd17 	ldw	r4,-12(fp)
 100ef1c:	e17ffe17 	ldw	r5,-8(fp)
 100ef20:	100edf40 	call	100edf4 <Read_Sector_Data_CRC>
 100ef24:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 100ef28:	e0bffb17 	ldw	r2,-20(fp)
 100ef2c:	1005003a 	cmpeq	r2,r2,zero
 100ef30:	1000031e 	bne	r2,zero,100ef40 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 100ef34:	00800044 	movi	r2,1
 100ef38:	e0bfff15 	stw	r2,-4(fp)
 100ef3c:	00000a06 	br	100ef68 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 100ef40:	e0bffc17 	ldw	r2,-16(fp)
 100ef44:	10800044 	addi	r2,r2,1
 100ef48:	e0bffc15 	stw	r2,-16(fp)
 100ef4c:	e0fffc17 	ldw	r3,-16(fp)
 100ef50:	e0bffa17 	ldw	r2,-24(fp)
 100ef54:	18bff016 	blt	r3,r2,100ef18 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 100ef58:	e13ffd17 	ldw	r4,-12(fp)
 100ef5c:	e17ffe17 	ldw	r5,-8(fp)
 100ef60:	100aa7c0 	call	100aa7c <Read_Sector_Data>
 100ef64:	e0bfff15 	stw	r2,-4(fp)
 100ef68:	e0bfff17 	ldw	r2,-4(fp)
}
 100ef6c:	e037883a 	mov	sp,fp
 100ef70:	dfc00117 	ldw	ra,4(sp)
 100ef74:	df000017 	ldw	fp,0(sp)
 100ef78:	dec00204 	addi	sp,sp,8
 100ef7c:	f800283a 	ret

0100ef80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100ef80:	defffa04 	addi	sp,sp,-24
 100ef84:	dfc00515 	stw	ra,20(sp)
 100ef88:	df000415 	stw	fp,16(sp)
 100ef8c:	df000404 	addi	fp,sp,16
 100ef90:	e13ffd15 	stw	r4,-12(fp)
 100ef94:	e17ffe15 	stw	r5,-8(fp)
 100ef98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ef9c:	e0bffd17 	ldw	r2,-12(fp)
 100efa0:	10800017 	ldw	r2,0(r2)
 100efa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100efa8:	e0bffc17 	ldw	r2,-16(fp)
 100efac:	11000a04 	addi	r4,r2,40
 100efb0:	e0bffd17 	ldw	r2,-12(fp)
 100efb4:	11c00217 	ldw	r7,8(r2)
 100efb8:	e17ffe17 	ldw	r5,-8(fp)
 100efbc:	e1bfff17 	ldw	r6,-4(fp)
 100efc0:	100f5c80 	call	100f5c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100efc4:	e037883a 	mov	sp,fp
 100efc8:	dfc00117 	ldw	ra,4(sp)
 100efcc:	df000017 	ldw	fp,0(sp)
 100efd0:	dec00204 	addi	sp,sp,8
 100efd4:	f800283a 	ret

0100efd8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100efd8:	defffa04 	addi	sp,sp,-24
 100efdc:	dfc00515 	stw	ra,20(sp)
 100efe0:	df000415 	stw	fp,16(sp)
 100efe4:	df000404 	addi	fp,sp,16
 100efe8:	e13ffd15 	stw	r4,-12(fp)
 100efec:	e17ffe15 	stw	r5,-8(fp)
 100eff0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100eff4:	e0bffd17 	ldw	r2,-12(fp)
 100eff8:	10800017 	ldw	r2,0(r2)
 100effc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100f000:	e0bffc17 	ldw	r2,-16(fp)
 100f004:	11000a04 	addi	r4,r2,40
 100f008:	e0bffd17 	ldw	r2,-12(fp)
 100f00c:	11c00217 	ldw	r7,8(r2)
 100f010:	e17ffe17 	ldw	r5,-8(fp)
 100f014:	e1bfff17 	ldw	r6,-4(fp)
 100f018:	100f7ec0 	call	100f7ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100f01c:	e037883a 	mov	sp,fp
 100f020:	dfc00117 	ldw	ra,4(sp)
 100f024:	df000017 	ldw	fp,0(sp)
 100f028:	dec00204 	addi	sp,sp,8
 100f02c:	f800283a 	ret

0100f030 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100f030:	defffc04 	addi	sp,sp,-16
 100f034:	dfc00315 	stw	ra,12(sp)
 100f038:	df000215 	stw	fp,8(sp)
 100f03c:	df000204 	addi	fp,sp,8
 100f040:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f044:	e0bfff17 	ldw	r2,-4(fp)
 100f048:	10800017 	ldw	r2,0(r2)
 100f04c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100f050:	e0bffe17 	ldw	r2,-8(fp)
 100f054:	11000a04 	addi	r4,r2,40
 100f058:	e0bfff17 	ldw	r2,-4(fp)
 100f05c:	11400217 	ldw	r5,8(r2)
 100f060:	100f4600 	call	100f460 <altera_avalon_jtag_uart_close>
}
 100f064:	e037883a 	mov	sp,fp
 100f068:	dfc00117 	ldw	ra,4(sp)
 100f06c:	df000017 	ldw	fp,0(sp)
 100f070:	dec00204 	addi	sp,sp,8
 100f074:	f800283a 	ret

0100f078 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100f078:	defffa04 	addi	sp,sp,-24
 100f07c:	dfc00515 	stw	ra,20(sp)
 100f080:	df000415 	stw	fp,16(sp)
 100f084:	df000404 	addi	fp,sp,16
 100f088:	e13ffd15 	stw	r4,-12(fp)
 100f08c:	e17ffe15 	stw	r5,-8(fp)
 100f090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100f094:	e0bffd17 	ldw	r2,-12(fp)
 100f098:	10800017 	ldw	r2,0(r2)
 100f09c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100f0a0:	e0bffc17 	ldw	r2,-16(fp)
 100f0a4:	11000a04 	addi	r4,r2,40
 100f0a8:	e17ffe17 	ldw	r5,-8(fp)
 100f0ac:	e1bfff17 	ldw	r6,-4(fp)
 100f0b0:	100f4d40 	call	100f4d4 <altera_avalon_jtag_uart_ioctl>
}
 100f0b4:	e037883a 	mov	sp,fp
 100f0b8:	dfc00117 	ldw	ra,4(sp)
 100f0bc:	df000017 	ldw	fp,0(sp)
 100f0c0:	dec00204 	addi	sp,sp,8
 100f0c4:	f800283a 	ret

0100f0c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100f0c8:	defffa04 	addi	sp,sp,-24
 100f0cc:	dfc00515 	stw	ra,20(sp)
 100f0d0:	df000415 	stw	fp,16(sp)
 100f0d4:	df000404 	addi	fp,sp,16
 100f0d8:	e13ffd15 	stw	r4,-12(fp)
 100f0dc:	e17ffe15 	stw	r5,-8(fp)
 100f0e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f0e4:	e0fffd17 	ldw	r3,-12(fp)
 100f0e8:	00800044 	movi	r2,1
 100f0ec:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100f0f0:	e0bffd17 	ldw	r2,-12(fp)
 100f0f4:	10800017 	ldw	r2,0(r2)
 100f0f8:	11000104 	addi	r4,r2,4
 100f0fc:	e0bffd17 	ldw	r2,-12(fp)
 100f100:	10800817 	ldw	r2,32(r2)
 100f104:	1007883a 	mov	r3,r2
 100f108:	2005883a 	mov	r2,r4
 100f10c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100f110:	e13ffe17 	ldw	r4,-8(fp)
 100f114:	e17fff17 	ldw	r5,-4(fp)
 100f118:	d8000015 	stw	zero,0(sp)
 100f11c:	01804074 	movhi	r6,257
 100f120:	31bc6204 	addi	r6,r6,-3704
 100f124:	e1fffd17 	ldw	r7,-12(fp)
 100f128:	10103580 	call	1010358 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100f12c:	e0bffd17 	ldw	r2,-12(fp)
 100f130:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100f134:	e0bffd17 	ldw	r2,-12(fp)
 100f138:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100f13c:	00804074 	movhi	r2,257
 100f140:	1098f904 	addi	r2,r2,25572
 100f144:	10800017 	ldw	r2,0(r2)
 100f148:	100b883a 	mov	r5,r2
 100f14c:	01804074 	movhi	r6,257
 100f150:	31bcec04 	addi	r6,r6,-3152
 100f154:	e1fffd17 	ldw	r7,-12(fp)
 100f158:	100ff5c0 	call	100ff5c <alt_alarm_start>
 100f15c:	1004403a 	cmpge	r2,r2,zero
 100f160:	1000041e 	bne	r2,zero,100f174 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100f164:	e0fffd17 	ldw	r3,-12(fp)
 100f168:	00a00034 	movhi	r2,32768
 100f16c:	10bfffc4 	addi	r2,r2,-1
 100f170:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100f174:	e037883a 	mov	sp,fp
 100f178:	dfc00117 	ldw	ra,4(sp)
 100f17c:	df000017 	ldw	fp,0(sp)
 100f180:	dec00204 	addi	sp,sp,8
 100f184:	f800283a 	ret

0100f188 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100f188:	defff804 	addi	sp,sp,-32
 100f18c:	df000715 	stw	fp,28(sp)
 100f190:	df000704 	addi	fp,sp,28
 100f194:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100f198:	e0bfff17 	ldw	r2,-4(fp)
 100f19c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100f1a0:	e0bffe17 	ldw	r2,-8(fp)
 100f1a4:	10800017 	ldw	r2,0(r2)
 100f1a8:	e0bffd15 	stw	r2,-12(fp)
 100f1ac:	00000006 	br	100f1b0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f1b0:	e0bffd17 	ldw	r2,-12(fp)
 100f1b4:	10800104 	addi	r2,r2,4
 100f1b8:	10800037 	ldwio	r2,0(r2)
 100f1bc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100f1c0:	e0bffc17 	ldw	r2,-16(fp)
 100f1c4:	1080c00c 	andi	r2,r2,768
 100f1c8:	1005003a 	cmpeq	r2,r2,zero
 100f1cc:	1000741e 	bne	r2,zero,100f3a0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100f1d0:	e0bffc17 	ldw	r2,-16(fp)
 100f1d4:	1080400c 	andi	r2,r2,256
 100f1d8:	1005003a 	cmpeq	r2,r2,zero
 100f1dc:	1000351e 	bne	r2,zero,100f2b4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100f1e0:	00800074 	movhi	r2,1
 100f1e4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f1e8:	e0bffe17 	ldw	r2,-8(fp)
 100f1ec:	10800a17 	ldw	r2,40(r2)
 100f1f0:	10800044 	addi	r2,r2,1
 100f1f4:	1081ffcc 	andi	r2,r2,2047
 100f1f8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100f1fc:	e0bffe17 	ldw	r2,-8(fp)
 100f200:	10c00b17 	ldw	r3,44(r2)
 100f204:	e0bffa17 	ldw	r2,-24(fp)
 100f208:	18801626 	beq	r3,r2,100f264 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100f20c:	e0bffd17 	ldw	r2,-12(fp)
 100f210:	10800037 	ldwio	r2,0(r2)
 100f214:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100f218:	e0bffb17 	ldw	r2,-20(fp)
 100f21c:	10a0000c 	andi	r2,r2,32768
 100f220:	1005003a 	cmpeq	r2,r2,zero
 100f224:	10000f1e 	bne	r2,zero,100f264 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100f228:	e0bffe17 	ldw	r2,-8(fp)
 100f22c:	10c00a17 	ldw	r3,40(r2)
 100f230:	e0bffb17 	ldw	r2,-20(fp)
 100f234:	1009883a 	mov	r4,r2
 100f238:	e0bffe17 	ldw	r2,-8(fp)
 100f23c:	1885883a 	add	r2,r3,r2
 100f240:	10800e04 	addi	r2,r2,56
 100f244:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f248:	e0bffe17 	ldw	r2,-8(fp)
 100f24c:	10800a17 	ldw	r2,40(r2)
 100f250:	10800044 	addi	r2,r2,1
 100f254:	10c1ffcc 	andi	r3,r2,2047
 100f258:	e0bffe17 	ldw	r2,-8(fp)
 100f25c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100f260:	003fe106 	br	100f1e8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100f264:	e0bffb17 	ldw	r2,-20(fp)
 100f268:	10bfffec 	andhi	r2,r2,65535
 100f26c:	1005003a 	cmpeq	r2,r2,zero
 100f270:	1000101e 	bne	r2,zero,100f2b4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f274:	e0bffe17 	ldw	r2,-8(fp)
 100f278:	10c00817 	ldw	r3,32(r2)
 100f27c:	00bfff84 	movi	r2,-2
 100f280:	1886703a 	and	r3,r3,r2
 100f284:	e0bffe17 	ldw	r2,-8(fp)
 100f288:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100f28c:	e0bffd17 	ldw	r2,-12(fp)
 100f290:	11000104 	addi	r4,r2,4
 100f294:	e0bffe17 	ldw	r2,-8(fp)
 100f298:	10800817 	ldw	r2,32(r2)
 100f29c:	1007883a 	mov	r3,r2
 100f2a0:	2005883a 	mov	r2,r4
 100f2a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f2a8:	e0bffd17 	ldw	r2,-12(fp)
 100f2ac:	10800104 	addi	r2,r2,4
 100f2b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100f2b4:	e0bffc17 	ldw	r2,-16(fp)
 100f2b8:	1080800c 	andi	r2,r2,512
 100f2bc:	1005003a 	cmpeq	r2,r2,zero
 100f2c0:	103fbb1e 	bne	r2,zero,100f1b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100f2c4:	e0bffc17 	ldw	r2,-16(fp)
 100f2c8:	10bfffec 	andhi	r2,r2,65535
 100f2cc:	1004d43a 	srli	r2,r2,16
 100f2d0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f2d4:	00001506 	br	100f32c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100f2d8:	e13ffd17 	ldw	r4,-12(fp)
 100f2dc:	e0bffe17 	ldw	r2,-8(fp)
 100f2e0:	10c00d17 	ldw	r3,52(r2)
 100f2e4:	e0bffe17 	ldw	r2,-8(fp)
 100f2e8:	1885883a 	add	r2,r3,r2
 100f2ec:	10820e04 	addi	r2,r2,2104
 100f2f0:	10800003 	ldbu	r2,0(r2)
 100f2f4:	10c03fcc 	andi	r3,r2,255
 100f2f8:	18c0201c 	xori	r3,r3,128
 100f2fc:	18ffe004 	addi	r3,r3,-128
 100f300:	2005883a 	mov	r2,r4
 100f304:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f308:	e0bffe17 	ldw	r2,-8(fp)
 100f30c:	10800d17 	ldw	r2,52(r2)
 100f310:	10800044 	addi	r2,r2,1
 100f314:	10c1ffcc 	andi	r3,r2,2047
 100f318:	e0bffe17 	ldw	r2,-8(fp)
 100f31c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100f320:	e0bff917 	ldw	r2,-28(fp)
 100f324:	10bfffc4 	addi	r2,r2,-1
 100f328:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f32c:	e0bff917 	ldw	r2,-28(fp)
 100f330:	1005003a 	cmpeq	r2,r2,zero
 100f334:	1000051e 	bne	r2,zero,100f34c <altera_avalon_jtag_uart_irq+0x1c4>
 100f338:	e0bffe17 	ldw	r2,-8(fp)
 100f33c:	10c00d17 	ldw	r3,52(r2)
 100f340:	e0bffe17 	ldw	r2,-8(fp)
 100f344:	10800c17 	ldw	r2,48(r2)
 100f348:	18bfe31e 	bne	r3,r2,100f2d8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100f34c:	e0bff917 	ldw	r2,-28(fp)
 100f350:	1005003a 	cmpeq	r2,r2,zero
 100f354:	103f961e 	bne	r2,zero,100f1b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100f358:	e0bffe17 	ldw	r2,-8(fp)
 100f35c:	10c00817 	ldw	r3,32(r2)
 100f360:	00bfff44 	movi	r2,-3
 100f364:	1886703a 	and	r3,r3,r2
 100f368:	e0bffe17 	ldw	r2,-8(fp)
 100f36c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f370:	e0bffe17 	ldw	r2,-8(fp)
 100f374:	10800017 	ldw	r2,0(r2)
 100f378:	11000104 	addi	r4,r2,4
 100f37c:	e0bffe17 	ldw	r2,-8(fp)
 100f380:	10800817 	ldw	r2,32(r2)
 100f384:	1007883a 	mov	r3,r2
 100f388:	2005883a 	mov	r2,r4
 100f38c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f390:	e0bffd17 	ldw	r2,-12(fp)
 100f394:	10800104 	addi	r2,r2,4
 100f398:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100f39c:	003f8406 	br	100f1b0 <altera_avalon_jtag_uart_irq+0x28>
}
 100f3a0:	e037883a 	mov	sp,fp
 100f3a4:	df000017 	ldw	fp,0(sp)
 100f3a8:	dec00104 	addi	sp,sp,4
 100f3ac:	f800283a 	ret

0100f3b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100f3b0:	defffc04 	addi	sp,sp,-16
 100f3b4:	df000315 	stw	fp,12(sp)
 100f3b8:	df000304 	addi	fp,sp,12
 100f3bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100f3c0:	e0bfff17 	ldw	r2,-4(fp)
 100f3c4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100f3c8:	e0bffe17 	ldw	r2,-8(fp)
 100f3cc:	10800017 	ldw	r2,0(r2)
 100f3d0:	10800104 	addi	r2,r2,4
 100f3d4:	10800037 	ldwio	r2,0(r2)
 100f3d8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100f3dc:	e0bffd17 	ldw	r2,-12(fp)
 100f3e0:	1081000c 	andi	r2,r2,1024
 100f3e4:	1005003a 	cmpeq	r2,r2,zero
 100f3e8:	10000c1e 	bne	r2,zero,100f41c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100f3ec:	e0bffe17 	ldw	r2,-8(fp)
 100f3f0:	10800017 	ldw	r2,0(r2)
 100f3f4:	11000104 	addi	r4,r2,4
 100f3f8:	e0bffe17 	ldw	r2,-8(fp)
 100f3fc:	10800817 	ldw	r2,32(r2)
 100f400:	10810014 	ori	r2,r2,1024
 100f404:	1007883a 	mov	r3,r2
 100f408:	2005883a 	mov	r2,r4
 100f40c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100f410:	e0bffe17 	ldw	r2,-8(fp)
 100f414:	10000915 	stw	zero,36(r2)
 100f418:	00000a06 	br	100f444 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100f41c:	e0bffe17 	ldw	r2,-8(fp)
 100f420:	10c00917 	ldw	r3,36(r2)
 100f424:	00a00034 	movhi	r2,32768
 100f428:	10bfff04 	addi	r2,r2,-4
 100f42c:	10c00536 	bltu	r2,r3,100f444 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100f430:	e0bffe17 	ldw	r2,-8(fp)
 100f434:	10800917 	ldw	r2,36(r2)
 100f438:	10c00044 	addi	r3,r2,1
 100f43c:	e0bffe17 	ldw	r2,-8(fp)
 100f440:	10c00915 	stw	r3,36(r2)
 100f444:	00804074 	movhi	r2,257
 100f448:	1098f904 	addi	r2,r2,25572
 100f44c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100f450:	e037883a 	mov	sp,fp
 100f454:	df000017 	ldw	fp,0(sp)
 100f458:	dec00104 	addi	sp,sp,4
 100f45c:	f800283a 	ret

0100f460 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100f460:	defffc04 	addi	sp,sp,-16
 100f464:	df000315 	stw	fp,12(sp)
 100f468:	df000304 	addi	fp,sp,12
 100f46c:	e13ffd15 	stw	r4,-12(fp)
 100f470:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f474:	00000706 	br	100f494 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100f478:	e0bffe17 	ldw	r2,-8(fp)
 100f47c:	1090000c 	andi	r2,r2,16384
 100f480:	1005003a 	cmpeq	r2,r2,zero
 100f484:	1000031e 	bne	r2,zero,100f494 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100f488:	00bffd44 	movi	r2,-11
 100f48c:	e0bfff15 	stw	r2,-4(fp)
 100f490:	00000b06 	br	100f4c0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f494:	e0bffd17 	ldw	r2,-12(fp)
 100f498:	10c00d17 	ldw	r3,52(r2)
 100f49c:	e0bffd17 	ldw	r2,-12(fp)
 100f4a0:	10800c17 	ldw	r2,48(r2)
 100f4a4:	18800526 	beq	r3,r2,100f4bc <altera_avalon_jtag_uart_close+0x5c>
 100f4a8:	e0bffd17 	ldw	r2,-12(fp)
 100f4ac:	10c00917 	ldw	r3,36(r2)
 100f4b0:	e0bffd17 	ldw	r2,-12(fp)
 100f4b4:	10800117 	ldw	r2,4(r2)
 100f4b8:	18bfef36 	bltu	r3,r2,100f478 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100f4bc:	e03fff15 	stw	zero,-4(fp)
 100f4c0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f4c4:	e037883a 	mov	sp,fp
 100f4c8:	df000017 	ldw	fp,0(sp)
 100f4cc:	dec00104 	addi	sp,sp,4
 100f4d0:	f800283a 	ret

0100f4d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100f4d4:	defff804 	addi	sp,sp,-32
 100f4d8:	df000715 	stw	fp,28(sp)
 100f4dc:	df000704 	addi	fp,sp,28
 100f4e0:	e13ffb15 	stw	r4,-20(fp)
 100f4e4:	e17ffc15 	stw	r5,-16(fp)
 100f4e8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100f4ec:	00bff9c4 	movi	r2,-25
 100f4f0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100f4f4:	e0bffc17 	ldw	r2,-16(fp)
 100f4f8:	e0bfff15 	stw	r2,-4(fp)
 100f4fc:	e0ffff17 	ldw	r3,-4(fp)
 100f500:	189a8060 	cmpeqi	r2,r3,27137
 100f504:	1000041e 	bne	r2,zero,100f518 <altera_avalon_jtag_uart_ioctl+0x44>
 100f508:	e0ffff17 	ldw	r3,-4(fp)
 100f50c:	189a80a0 	cmpeqi	r2,r3,27138
 100f510:	10001b1e 	bne	r2,zero,100f580 <altera_avalon_jtag_uart_ioctl+0xac>
 100f514:	00002706 	br	100f5b4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100f518:	e0bffb17 	ldw	r2,-20(fp)
 100f51c:	10c00117 	ldw	r3,4(r2)
 100f520:	00a00034 	movhi	r2,32768
 100f524:	10bfffc4 	addi	r2,r2,-1
 100f528:	18802226 	beq	r3,r2,100f5b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100f52c:	e0bffd17 	ldw	r2,-12(fp)
 100f530:	10800017 	ldw	r2,0(r2)
 100f534:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100f538:	e0bff917 	ldw	r2,-28(fp)
 100f53c:	10800090 	cmplti	r2,r2,2
 100f540:	1000071e 	bne	r2,zero,100f560 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f544:	e0fff917 	ldw	r3,-28(fp)
 100f548:	00a00034 	movhi	r2,32768
 100f54c:	10bfffc4 	addi	r2,r2,-1
 100f550:	18800326 	beq	r3,r2,100f560 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f554:	e0bff917 	ldw	r2,-28(fp)
 100f558:	e0bffe15 	stw	r2,-8(fp)
 100f55c:	00000306 	br	100f56c <altera_avalon_jtag_uart_ioctl+0x98>
 100f560:	00e00034 	movhi	r3,32768
 100f564:	18ffff84 	addi	r3,r3,-2
 100f568:	e0fffe15 	stw	r3,-8(fp)
 100f56c:	e0bffb17 	ldw	r2,-20(fp)
 100f570:	e0fffe17 	ldw	r3,-8(fp)
 100f574:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100f578:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100f57c:	00000d06 	br	100f5b4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100f580:	e0bffb17 	ldw	r2,-20(fp)
 100f584:	10c00117 	ldw	r3,4(r2)
 100f588:	00a00034 	movhi	r2,32768
 100f58c:	10bfffc4 	addi	r2,r2,-1
 100f590:	18800826 	beq	r3,r2,100f5b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100f594:	e13ffd17 	ldw	r4,-12(fp)
 100f598:	e0bffb17 	ldw	r2,-20(fp)
 100f59c:	10c00917 	ldw	r3,36(r2)
 100f5a0:	e0bffb17 	ldw	r2,-20(fp)
 100f5a4:	10800117 	ldw	r2,4(r2)
 100f5a8:	1885803a 	cmpltu	r2,r3,r2
 100f5ac:	20800015 	stw	r2,0(r4)
      rc = 0;
 100f5b0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100f5b4:	e0bffa17 	ldw	r2,-24(fp)
}
 100f5b8:	e037883a 	mov	sp,fp
 100f5bc:	df000017 	ldw	fp,0(sp)
 100f5c0:	dec00104 	addi	sp,sp,4
 100f5c4:	f800283a 	ret

0100f5c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100f5c8:	defff204 	addi	sp,sp,-56
 100f5cc:	dfc00d15 	stw	ra,52(sp)
 100f5d0:	df000c15 	stw	fp,48(sp)
 100f5d4:	df000c04 	addi	fp,sp,48
 100f5d8:	e13ffb15 	stw	r4,-20(fp)
 100f5dc:	e17ffc15 	stw	r5,-16(fp)
 100f5e0:	e1bffd15 	stw	r6,-12(fp)
 100f5e4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100f5e8:	e0bffc17 	ldw	r2,-16(fp)
 100f5ec:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f5f0:	00004806 	br	100f714 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100f5f4:	e0bffb17 	ldw	r2,-20(fp)
 100f5f8:	10800a17 	ldw	r2,40(r2)
 100f5fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100f600:	e0bffb17 	ldw	r2,-20(fp)
 100f604:	10800b17 	ldw	r2,44(r2)
 100f608:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100f60c:	e0fff717 	ldw	r3,-36(fp)
 100f610:	e0bff617 	ldw	r2,-40(fp)
 100f614:	18800536 	bltu	r3,r2,100f62c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100f618:	e0bff717 	ldw	r2,-36(fp)
 100f61c:	e0fff617 	ldw	r3,-40(fp)
 100f620:	10c5c83a 	sub	r2,r2,r3
 100f624:	e0bff815 	stw	r2,-32(fp)
 100f628:	00000406 	br	100f63c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100f62c:	00820004 	movi	r2,2048
 100f630:	e0fff617 	ldw	r3,-40(fp)
 100f634:	10c5c83a 	sub	r2,r2,r3
 100f638:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100f63c:	e0bff817 	ldw	r2,-32(fp)
 100f640:	1005003a 	cmpeq	r2,r2,zero
 100f644:	10001f1e 	bne	r2,zero,100f6c4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100f648:	e0fffd17 	ldw	r3,-12(fp)
 100f64c:	e0bff817 	ldw	r2,-32(fp)
 100f650:	1880022e 	bgeu	r3,r2,100f65c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100f654:	e0bffd17 	ldw	r2,-12(fp)
 100f658:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100f65c:	e0bffb17 	ldw	r2,-20(fp)
 100f660:	10c00e04 	addi	r3,r2,56
 100f664:	e0bff617 	ldw	r2,-40(fp)
 100f668:	1887883a 	add	r3,r3,r2
 100f66c:	e0bffa17 	ldw	r2,-24(fp)
 100f670:	1009883a 	mov	r4,r2
 100f674:	180b883a 	mov	r5,r3
 100f678:	e1bff817 	ldw	r6,-32(fp)
 100f67c:	10057240 	call	1005724 <memcpy>
      ptr   += n;
 100f680:	e0fff817 	ldw	r3,-32(fp)
 100f684:	e0bffa17 	ldw	r2,-24(fp)
 100f688:	10c5883a 	add	r2,r2,r3
 100f68c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100f690:	e0fffd17 	ldw	r3,-12(fp)
 100f694:	e0bff817 	ldw	r2,-32(fp)
 100f698:	1885c83a 	sub	r2,r3,r2
 100f69c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f6a0:	e0fff617 	ldw	r3,-40(fp)
 100f6a4:	e0bff817 	ldw	r2,-32(fp)
 100f6a8:	1885883a 	add	r2,r3,r2
 100f6ac:	10c1ffcc 	andi	r3,r2,2047
 100f6b0:	e0bffb17 	ldw	r2,-20(fp)
 100f6b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100f6b8:	e0bffd17 	ldw	r2,-12(fp)
 100f6bc:	10800048 	cmpgei	r2,r2,1
 100f6c0:	103fcc1e 	bne	r2,zero,100f5f4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100f6c4:	e0fffa17 	ldw	r3,-24(fp)
 100f6c8:	e0bffc17 	ldw	r2,-16(fp)
 100f6cc:	1880141e 	bne	r3,r2,100f720 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100f6d0:	e0bffe17 	ldw	r2,-8(fp)
 100f6d4:	1090000c 	andi	r2,r2,16384
 100f6d8:	1004c03a 	cmpne	r2,r2,zero
 100f6dc:	1000101e 	bne	r2,zero,100f720 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100f6e0:	e0bffb17 	ldw	r2,-20(fp)
 100f6e4:	10c00a17 	ldw	r3,40(r2)
 100f6e8:	e0bff717 	ldw	r2,-36(fp)
 100f6ec:	1880051e 	bne	r3,r2,100f704 <altera_avalon_jtag_uart_read+0x13c>
 100f6f0:	e0bffb17 	ldw	r2,-20(fp)
 100f6f4:	10c00917 	ldw	r3,36(r2)
 100f6f8:	e0bffb17 	ldw	r2,-20(fp)
 100f6fc:	10800117 	ldw	r2,4(r2)
 100f700:	18bff736 	bltu	r3,r2,100f6e0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100f704:	e0bffb17 	ldw	r2,-20(fp)
 100f708:	10c00a17 	ldw	r3,40(r2)
 100f70c:	e0bff717 	ldw	r2,-36(fp)
 100f710:	18800326 	beq	r3,r2,100f720 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f714:	e0bffd17 	ldw	r2,-12(fp)
 100f718:	10800048 	cmpgei	r2,r2,1
 100f71c:	103fb51e 	bne	r2,zero,100f5f4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100f720:	e0fffa17 	ldw	r3,-24(fp)
 100f724:	e0bffc17 	ldw	r2,-16(fp)
 100f728:	18801926 	beq	r3,r2,100f790 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f72c:	0005303a 	rdctl	r2,status
 100f730:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f734:	e0fff517 	ldw	r3,-44(fp)
 100f738:	00bfff84 	movi	r2,-2
 100f73c:	1884703a 	and	r2,r3,r2
 100f740:	1001703a 	wrctl	status,r2
  
  return context;
 100f744:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100f748:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f74c:	e0bffb17 	ldw	r2,-20(fp)
 100f750:	10800817 	ldw	r2,32(r2)
 100f754:	10c00054 	ori	r3,r2,1
 100f758:	e0bffb17 	ldw	r2,-20(fp)
 100f75c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f760:	e0bffb17 	ldw	r2,-20(fp)
 100f764:	10800017 	ldw	r2,0(r2)
 100f768:	11000104 	addi	r4,r2,4
 100f76c:	e0bffb17 	ldw	r2,-20(fp)
 100f770:	10800817 	ldw	r2,32(r2)
 100f774:	1007883a 	mov	r3,r2
 100f778:	2005883a 	mov	r2,r4
 100f77c:	10c00035 	stwio	r3,0(r2)
 100f780:	e0bff917 	ldw	r2,-28(fp)
 100f784:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f788:	e0bff417 	ldw	r2,-48(fp)
 100f78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100f790:	e0fffa17 	ldw	r3,-24(fp)
 100f794:	e0bffc17 	ldw	r2,-16(fp)
 100f798:	18800526 	beq	r3,r2,100f7b0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100f79c:	e0fffa17 	ldw	r3,-24(fp)
 100f7a0:	e0bffc17 	ldw	r2,-16(fp)
 100f7a4:	1887c83a 	sub	r3,r3,r2
 100f7a8:	e0ffff15 	stw	r3,-4(fp)
 100f7ac:	00000906 	br	100f7d4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100f7b0:	e0bffe17 	ldw	r2,-8(fp)
 100f7b4:	1090000c 	andi	r2,r2,16384
 100f7b8:	1005003a 	cmpeq	r2,r2,zero
 100f7bc:	1000031e 	bne	r2,zero,100f7cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100f7c0:	00bffd44 	movi	r2,-11
 100f7c4:	e0bfff15 	stw	r2,-4(fp)
 100f7c8:	00000206 	br	100f7d4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100f7cc:	00bffec4 	movi	r2,-5
 100f7d0:	e0bfff15 	stw	r2,-4(fp)
 100f7d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100f7d8:	e037883a 	mov	sp,fp
 100f7dc:	dfc00117 	ldw	ra,4(sp)
 100f7e0:	df000017 	ldw	fp,0(sp)
 100f7e4:	dec00204 	addi	sp,sp,8
 100f7e8:	f800283a 	ret

0100f7ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100f7ec:	defff204 	addi	sp,sp,-56
 100f7f0:	dfc00d15 	stw	ra,52(sp)
 100f7f4:	df000c15 	stw	fp,48(sp)
 100f7f8:	df000c04 	addi	fp,sp,48
 100f7fc:	e13ffb15 	stw	r4,-20(fp)
 100f800:	e17ffc15 	stw	r5,-16(fp)
 100f804:	e1bffd15 	stw	r6,-12(fp)
 100f808:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100f80c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100f810:	e0bffc17 	ldw	r2,-16(fp)
 100f814:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100f818:	00003a06 	br	100f904 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100f81c:	e0bffb17 	ldw	r2,-20(fp)
 100f820:	10800c17 	ldw	r2,48(r2)
 100f824:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100f828:	e0bffb17 	ldw	r2,-20(fp)
 100f82c:	10800d17 	ldw	r2,52(r2)
 100f830:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100f834:	e0fffa17 	ldw	r3,-24(fp)
 100f838:	e0bff917 	ldw	r2,-28(fp)
 100f83c:	1880062e 	bgeu	r3,r2,100f858 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100f840:	e0fff917 	ldw	r3,-28(fp)
 100f844:	e0bffa17 	ldw	r2,-24(fp)
 100f848:	1885c83a 	sub	r2,r3,r2
 100f84c:	10bfffc4 	addi	r2,r2,-1
 100f850:	e0bff815 	stw	r2,-32(fp)
 100f854:	00000c06 	br	100f888 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100f858:	e0bff917 	ldw	r2,-28(fp)
 100f85c:	1005003a 	cmpeq	r2,r2,zero
 100f860:	1000051e 	bne	r2,zero,100f878 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100f864:	00820004 	movi	r2,2048
 100f868:	e0fffa17 	ldw	r3,-24(fp)
 100f86c:	10c5c83a 	sub	r2,r2,r3
 100f870:	e0bff815 	stw	r2,-32(fp)
 100f874:	00000406 	br	100f888 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100f878:	0081ffc4 	movi	r2,2047
 100f87c:	e0fffa17 	ldw	r3,-24(fp)
 100f880:	10c5c83a 	sub	r2,r2,r3
 100f884:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100f888:	e0bff817 	ldw	r2,-32(fp)
 100f88c:	1005003a 	cmpeq	r2,r2,zero
 100f890:	10001f1e 	bne	r2,zero,100f910 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100f894:	e0fffd17 	ldw	r3,-12(fp)
 100f898:	e0bff817 	ldw	r2,-32(fp)
 100f89c:	1880022e 	bgeu	r3,r2,100f8a8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100f8a0:	e0bffd17 	ldw	r2,-12(fp)
 100f8a4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100f8a8:	e0bffb17 	ldw	r2,-20(fp)
 100f8ac:	10c20e04 	addi	r3,r2,2104
 100f8b0:	e0bffa17 	ldw	r2,-24(fp)
 100f8b4:	1885883a 	add	r2,r3,r2
 100f8b8:	e0fffc17 	ldw	r3,-16(fp)
 100f8bc:	1009883a 	mov	r4,r2
 100f8c0:	180b883a 	mov	r5,r3
 100f8c4:	e1bff817 	ldw	r6,-32(fp)
 100f8c8:	10057240 	call	1005724 <memcpy>
      ptr   += n;
 100f8cc:	e0fff817 	ldw	r3,-32(fp)
 100f8d0:	e0bffc17 	ldw	r2,-16(fp)
 100f8d4:	10c5883a 	add	r2,r2,r3
 100f8d8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100f8dc:	e0fffd17 	ldw	r3,-12(fp)
 100f8e0:	e0bff817 	ldw	r2,-32(fp)
 100f8e4:	1885c83a 	sub	r2,r3,r2
 100f8e8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f8ec:	e0fffa17 	ldw	r3,-24(fp)
 100f8f0:	e0bff817 	ldw	r2,-32(fp)
 100f8f4:	1885883a 	add	r2,r3,r2
 100f8f8:	10c1ffcc 	andi	r3,r2,2047
 100f8fc:	e0bffb17 	ldw	r2,-20(fp)
 100f900:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100f904:	e0bffd17 	ldw	r2,-12(fp)
 100f908:	10800048 	cmpgei	r2,r2,1
 100f90c:	103fc31e 	bne	r2,zero,100f81c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f910:	0005303a 	rdctl	r2,status
 100f914:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f918:	e0fff517 	ldw	r3,-44(fp)
 100f91c:	00bfff84 	movi	r2,-2
 100f920:	1884703a 	and	r2,r3,r2
 100f924:	1001703a 	wrctl	status,r2
  
  return context;
 100f928:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100f92c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100f930:	e0bffb17 	ldw	r2,-20(fp)
 100f934:	10800817 	ldw	r2,32(r2)
 100f938:	10c00094 	ori	r3,r2,2
 100f93c:	e0bffb17 	ldw	r2,-20(fp)
 100f940:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f944:	e0bffb17 	ldw	r2,-20(fp)
 100f948:	10800017 	ldw	r2,0(r2)
 100f94c:	11000104 	addi	r4,r2,4
 100f950:	e0bffb17 	ldw	r2,-20(fp)
 100f954:	10800817 	ldw	r2,32(r2)
 100f958:	1007883a 	mov	r3,r2
 100f95c:	2005883a 	mov	r2,r4
 100f960:	10c00035 	stwio	r3,0(r2)
 100f964:	e0bff717 	ldw	r2,-36(fp)
 100f968:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f96c:	e0bff417 	ldw	r2,-48(fp)
 100f970:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100f974:	e0bffd17 	ldw	r2,-12(fp)
 100f978:	10800050 	cmplti	r2,r2,1
 100f97c:	1000111e 	bne	r2,zero,100f9c4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100f980:	e0bffe17 	ldw	r2,-8(fp)
 100f984:	1090000c 	andi	r2,r2,16384
 100f988:	1004c03a 	cmpne	r2,r2,zero
 100f98c:	1000101e 	bne	r2,zero,100f9d0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100f990:	e0bffb17 	ldw	r2,-20(fp)
 100f994:	10c00d17 	ldw	r3,52(r2)
 100f998:	e0bff917 	ldw	r2,-28(fp)
 100f99c:	1880051e 	bne	r3,r2,100f9b4 <altera_avalon_jtag_uart_write+0x1c8>
 100f9a0:	e0bffb17 	ldw	r2,-20(fp)
 100f9a4:	10c00917 	ldw	r3,36(r2)
 100f9a8:	e0bffb17 	ldw	r2,-20(fp)
 100f9ac:	10800117 	ldw	r2,4(r2)
 100f9b0:	18bff736 	bltu	r3,r2,100f990 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100f9b4:	e0bffb17 	ldw	r2,-20(fp)
 100f9b8:	10c00d17 	ldw	r3,52(r2)
 100f9bc:	e0bff917 	ldw	r2,-28(fp)
 100f9c0:	18800326 	beq	r3,r2,100f9d0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100f9c4:	e0bffd17 	ldw	r2,-12(fp)
 100f9c8:	10800048 	cmpgei	r2,r2,1
 100f9cc:	103fcd1e 	bne	r2,zero,100f904 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100f9d0:	e0fffc17 	ldw	r3,-16(fp)
 100f9d4:	e0bff617 	ldw	r2,-40(fp)
 100f9d8:	18800526 	beq	r3,r2,100f9f0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100f9dc:	e0fffc17 	ldw	r3,-16(fp)
 100f9e0:	e0bff617 	ldw	r2,-40(fp)
 100f9e4:	1887c83a 	sub	r3,r3,r2
 100f9e8:	e0ffff15 	stw	r3,-4(fp)
 100f9ec:	00000906 	br	100fa14 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100f9f0:	e0bffe17 	ldw	r2,-8(fp)
 100f9f4:	1090000c 	andi	r2,r2,16384
 100f9f8:	1005003a 	cmpeq	r2,r2,zero
 100f9fc:	1000031e 	bne	r2,zero,100fa0c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100fa00:	00bffd44 	movi	r2,-11
 100fa04:	e0bfff15 	stw	r2,-4(fp)
 100fa08:	00000206 	br	100fa14 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100fa0c:	00bffec4 	movi	r2,-5
 100fa10:	e0bfff15 	stw	r2,-4(fp)
 100fa14:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa18:	e037883a 	mov	sp,fp
 100fa1c:	dfc00117 	ldw	ra,4(sp)
 100fa20:	df000017 	ldw	fp,0(sp)
 100fa24:	dec00204 	addi	sp,sp,8
 100fa28:	f800283a 	ret

0100fa2c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100fa2c:	defffc04 	addi	sp,sp,-16
 100fa30:	df000315 	stw	fp,12(sp)
 100fa34:	df000304 	addi	fp,sp,12
 100fa38:	e13ffe15 	stw	r4,-8(fp)
 100fa3c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100fa40:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100fa44:	e0bfff17 	ldw	r2,-4(fp)
 100fa48:	1004c03a 	cmpne	r2,r2,zero
 100fa4c:	1000061e 	bne	r2,zero,100fa68 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100fa50:	e0bffe17 	ldw	r2,-8(fp)
 100fa54:	1007883a 	mov	r3,r2
 100fa58:	e0bffd03 	ldbu	r2,-12(fp)
 100fa5c:	10c4b03a 	or	r2,r2,r3
 100fa60:	e0bffd05 	stb	r2,-12(fp)
 100fa64:	00000806 	br	100fa88 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100fa68:	e0bffe17 	ldw	r2,-8(fp)
 100fa6c:	1007883a 	mov	r3,r2
 100fa70:	e0bffd03 	ldbu	r2,-12(fp)
 100fa74:	10c4b03a 	or	r2,r2,r3
 100fa78:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100fa7c:	e0bffd03 	ldbu	r2,-12(fp)
 100fa80:	10801014 	ori	r2,r2,64
 100fa84:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100fa88:	e0fffd03 	ldbu	r3,-12(fp)
 100fa8c:	00bfe004 	movi	r2,-128
 100fa90:	1884b03a 	or	r2,r3,r2
 100fa94:	10803fcc 	andi	r2,r2,255
}
 100fa98:	e037883a 	mov	sp,fp
 100fa9c:	df000017 	ldw	fp,0(sp)
 100faa0:	dec00104 	addi	sp,sp,4
 100faa4:	f800283a 	ret

0100faa8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100faa8:	defffd04 	addi	sp,sp,-12
 100faac:	df000215 	stw	fp,8(sp)
 100fab0:	df000204 	addi	fp,sp,8
 100fab4:	e13ffe15 	stw	r4,-8(fp)
 100fab8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100fabc:	e0bffe17 	ldw	r2,-8(fp)
 100fac0:	10800a17 	ldw	r2,40(r2)
 100fac4:	e0ffff03 	ldbu	r3,-4(fp)
 100fac8:	10c00025 	stbio	r3,0(r2)
}
 100facc:	e037883a 	mov	sp,fp
 100fad0:	df000017 	ldw	fp,0(sp)
 100fad4:	dec00104 	addi	sp,sp,4
 100fad8:	f800283a 	ret

0100fadc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100fadc:	defffe04 	addi	sp,sp,-8
 100fae0:	df000115 	stw	fp,4(sp)
 100fae4:	df000104 	addi	fp,sp,4
 100fae8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100faec:	e0bfff17 	ldw	r2,-4(fp)
 100faf0:	10800a17 	ldw	r2,40(r2)
 100faf4:	1007883a 	mov	r3,r2
 100faf8:	00800044 	movi	r2,1
 100fafc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100fb00:	e037883a 	mov	sp,fp
 100fb04:	df000017 	ldw	fp,0(sp)
 100fb08:	dec00104 	addi	sp,sp,4
 100fb0c:	f800283a 	ret

0100fb10 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100fb10:	defffc04 	addi	sp,sp,-16
 100fb14:	dfc00315 	stw	ra,12(sp)
 100fb18:	df000215 	stw	fp,8(sp)
 100fb1c:	df000204 	addi	fp,sp,8
 100fb20:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100fb24:	e13fff17 	ldw	r4,-4(fp)
 100fb28:	01404074 	movhi	r5,257
 100fb2c:	29522c04 	addi	r5,r5,18608
 100fb30:	10102a80 	call	10102a8 <alt_find_dev>
 100fb34:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100fb38:	e0bffe17 	ldw	r2,-8(fp)
}
 100fb3c:	e037883a 	mov	sp,fp
 100fb40:	dfc00117 	ldw	ra,4(sp)
 100fb44:	df000017 	ldw	fp,0(sp)
 100fb48:	dec00204 	addi	sp,sp,8
 100fb4c:	f800283a 	ret

0100fb50 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100fb50:	defffb04 	addi	sp,sp,-20
 100fb54:	df000415 	stw	fp,16(sp)
 100fb58:	df000404 	addi	fp,sp,16
 100fb5c:	e13ffd15 	stw	r4,-12(fp)
 100fb60:	e17ffe15 	stw	r5,-8(fp)
 100fb64:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100fb68:	e03ffc15 	stw	zero,-16(fp)
 100fb6c:	00000f06 	br	100fbac <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100fb70:	e0bffd17 	ldw	r2,-12(fp)
 100fb74:	10800a17 	ldw	r2,40(r2)
 100fb78:	11000044 	addi	r4,r2,1
 100fb7c:	e0fffc17 	ldw	r3,-16(fp)
 100fb80:	e0bffe17 	ldw	r2,-8(fp)
 100fb84:	1885883a 	add	r2,r3,r2
 100fb88:	10800003 	ldbu	r2,0(r2)
 100fb8c:	10c03fcc 	andi	r3,r2,255
 100fb90:	18c0201c 	xori	r3,r3,128
 100fb94:	18ffe004 	addi	r3,r3,-128
 100fb98:	2005883a 	mov	r2,r4
 100fb9c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100fba0:	e0bffc17 	ldw	r2,-16(fp)
 100fba4:	10800044 	addi	r2,r2,1
 100fba8:	e0bffc15 	stw	r2,-16(fp)
 100fbac:	e0fffc17 	ldw	r3,-16(fp)
 100fbb0:	e0bfff17 	ldw	r2,-4(fp)
 100fbb4:	18bfee36 	bltu	r3,r2,100fb70 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100fbb8:	e037883a 	mov	sp,fp
 100fbbc:	df000017 	ldw	fp,0(sp)
 100fbc0:	dec00104 	addi	sp,sp,4
 100fbc4:	f800283a 	ret

0100fbc8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100fbc8:	defffd04 	addi	sp,sp,-12
 100fbcc:	df000215 	stw	fp,8(sp)
 100fbd0:	df000204 	addi	fp,sp,8
 100fbd4:	e13ffe15 	stw	r4,-8(fp)
 100fbd8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100fbdc:	00000d06 	br	100fc14 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100fbe0:	e0bffe17 	ldw	r2,-8(fp)
 100fbe4:	10800a17 	ldw	r2,40(r2)
 100fbe8:	11000044 	addi	r4,r2,1
 100fbec:	e0bfff17 	ldw	r2,-4(fp)
 100fbf0:	10800003 	ldbu	r2,0(r2)
 100fbf4:	10c03fcc 	andi	r3,r2,255
 100fbf8:	18c0201c 	xori	r3,r3,128
 100fbfc:	18ffe004 	addi	r3,r3,-128
 100fc00:	2005883a 	mov	r2,r4
 100fc04:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100fc08:	e0bfff17 	ldw	r2,-4(fp)
 100fc0c:	10800044 	addi	r2,r2,1
 100fc10:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100fc14:	e0bfff17 	ldw	r2,-4(fp)
 100fc18:	10800003 	ldbu	r2,0(r2)
 100fc1c:	10803fcc 	andi	r2,r2,255
 100fc20:	1080201c 	xori	r2,r2,128
 100fc24:	10bfe004 	addi	r2,r2,-128
 100fc28:	1004c03a 	cmpne	r2,r2,zero
 100fc2c:	103fec1e 	bne	r2,zero,100fbe0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100fc30:	e037883a 	mov	sp,fp
 100fc34:	df000017 	ldw	fp,0(sp)
 100fc38:	dec00104 	addi	sp,sp,4
 100fc3c:	f800283a 	ret

0100fc40 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100fc40:	defffb04 	addi	sp,sp,-20
 100fc44:	dfc00415 	stw	ra,16(sp)
 100fc48:	df000315 	stw	fp,12(sp)
 100fc4c:	df000304 	addi	fp,sp,12
 100fc50:	e13ffd15 	stw	r4,-12(fp)
 100fc54:	e17ffe15 	stw	r5,-8(fp)
 100fc58:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100fc5c:	e0bffd17 	ldw	r2,-12(fp)
 100fc60:	10800017 	ldw	r2,0(r2)
 100fc64:	1009883a 	mov	r4,r2
 100fc68:	e1bfff17 	ldw	r6,-4(fp)
 100fc6c:	e17ffe17 	ldw	r5,-8(fp)
 100fc70:	100fb500 	call	100fb50 <alt_up_character_lcd_write>
	return 0;
 100fc74:	0005883a 	mov	r2,zero
}
 100fc78:	e037883a 	mov	sp,fp
 100fc7c:	dfc00117 	ldw	ra,4(sp)
 100fc80:	df000017 	ldw	fp,0(sp)
 100fc84:	dec00204 	addi	sp,sp,8
 100fc88:	f800283a 	ret

0100fc8c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100fc8c:	defff904 	addi	sp,sp,-28
 100fc90:	dfc00615 	stw	ra,24(sp)
 100fc94:	df000515 	stw	fp,20(sp)
 100fc98:	df000504 	addi	fp,sp,20
 100fc9c:	e13ffc15 	stw	r4,-16(fp)
 100fca0:	e17ffd15 	stw	r5,-12(fp)
 100fca4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100fca8:	e0bffd17 	ldw	r2,-12(fp)
 100fcac:	10800a28 	cmpgeui	r2,r2,40
 100fcb0:	1000031e 	bne	r2,zero,100fcc0 <alt_up_character_lcd_set_cursor_pos+0x34>
 100fcb4:	e0bffe17 	ldw	r2,-8(fp)
 100fcb8:	108000b0 	cmpltui	r2,r2,2
 100fcbc:	1000031e 	bne	r2,zero,100fccc <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100fcc0:	00bfffc4 	movi	r2,-1
 100fcc4:	e0bfff15 	stw	r2,-4(fp)
 100fcc8:	00000806 	br	100fcec <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100fccc:	e13ffd17 	ldw	r4,-12(fp)
 100fcd0:	e17ffe17 	ldw	r5,-8(fp)
 100fcd4:	100fa2c0 	call	100fa2c <get_DDRAM_addr>
 100fcd8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100fcdc:	e17ffb03 	ldbu	r5,-20(fp)
 100fce0:	e13ffc17 	ldw	r4,-16(fp)
 100fce4:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
	return 0;
 100fce8:	e03fff15 	stw	zero,-4(fp)
 100fcec:	e0bfff17 	ldw	r2,-4(fp)
}
 100fcf0:	e037883a 	mov	sp,fp
 100fcf4:	dfc00117 	ldw	ra,4(sp)
 100fcf8:	df000017 	ldw	fp,0(sp)
 100fcfc:	dec00204 	addi	sp,sp,8
 100fd00:	f800283a 	ret

0100fd04 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100fd04:	defff904 	addi	sp,sp,-28
 100fd08:	dfc00615 	stw	ra,24(sp)
 100fd0c:	df000515 	stw	fp,20(sp)
 100fd10:	df000504 	addi	fp,sp,20
 100fd14:	e13ffc15 	stw	r4,-16(fp)
 100fd18:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100fd1c:	e0bffd17 	ldw	r2,-12(fp)
 100fd20:	1005003a 	cmpeq	r2,r2,zero
 100fd24:	10001e1e 	bne	r2,zero,100fda0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100fd28:	e0bffd17 	ldw	r2,-12(fp)
 100fd2c:	10800050 	cmplti	r2,r2,1
 100fd30:	1000031e 	bne	r2,zero,100fd40 <alt_up_character_lcd_shift_cursor+0x3c>
 100fd34:	00800504 	movi	r2,20
 100fd38:	e0bfff05 	stb	r2,-4(fp)
 100fd3c:	00000206 	br	100fd48 <alt_up_character_lcd_shift_cursor+0x44>
 100fd40:	00c00404 	movi	r3,16
 100fd44:	e0ffff05 	stb	r3,-4(fp)
 100fd48:	e0bfff03 	ldbu	r2,-4(fp)
 100fd4c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100fd50:	e0fffd17 	ldw	r3,-12(fp)
 100fd54:	e0fffe15 	stw	r3,-8(fp)
 100fd58:	e0fffe17 	ldw	r3,-8(fp)
 100fd5c:	1804403a 	cmpge	r2,r3,zero
 100fd60:	1000031e 	bne	r2,zero,100fd70 <alt_up_character_lcd_shift_cursor+0x6c>
 100fd64:	e0bffe17 	ldw	r2,-8(fp)
 100fd68:	0085c83a 	sub	r2,zero,r2
 100fd6c:	e0bffe15 	stw	r2,-8(fp)
 100fd70:	e0fffe17 	ldw	r3,-8(fp)
 100fd74:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100fd78:	00000306 	br	100fd88 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100fd7c:	e17ffb43 	ldbu	r5,-19(fp)
 100fd80:	e13ffc17 	ldw	r4,-16(fp)
 100fd84:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100fd88:	e0bffb03 	ldbu	r2,-20(fp)
 100fd8c:	10bfffc4 	addi	r2,r2,-1
 100fd90:	e0bffb05 	stb	r2,-20(fp)
 100fd94:	e0bffb03 	ldbu	r2,-20(fp)
 100fd98:	10803fd8 	cmpnei	r2,r2,255
 100fd9c:	103ff71e 	bne	r2,zero,100fd7c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100fda0:	e037883a 	mov	sp,fp
 100fda4:	dfc00117 	ldw	ra,4(sp)
 100fda8:	df000017 	ldw	fp,0(sp)
 100fdac:	dec00204 	addi	sp,sp,8
 100fdb0:	f800283a 	ret

0100fdb4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100fdb4:	defff904 	addi	sp,sp,-28
 100fdb8:	dfc00615 	stw	ra,24(sp)
 100fdbc:	df000515 	stw	fp,20(sp)
 100fdc0:	df000504 	addi	fp,sp,20
 100fdc4:	e13ffc15 	stw	r4,-16(fp)
 100fdc8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100fdcc:	e0bffd17 	ldw	r2,-12(fp)
 100fdd0:	1005003a 	cmpeq	r2,r2,zero
 100fdd4:	10001e1e 	bne	r2,zero,100fe50 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100fdd8:	e0bffd17 	ldw	r2,-12(fp)
 100fddc:	10800050 	cmplti	r2,r2,1
 100fde0:	1000031e 	bne	r2,zero,100fdf0 <alt_up_character_lcd_shift_display+0x3c>
 100fde4:	00800704 	movi	r2,28
 100fde8:	e0bfff05 	stb	r2,-4(fp)
 100fdec:	00000206 	br	100fdf8 <alt_up_character_lcd_shift_display+0x44>
 100fdf0:	00c00604 	movi	r3,24
 100fdf4:	e0ffff05 	stb	r3,-4(fp)
 100fdf8:	e0bfff03 	ldbu	r2,-4(fp)
 100fdfc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100fe00:	e0fffd17 	ldw	r3,-12(fp)
 100fe04:	e0fffe15 	stw	r3,-8(fp)
 100fe08:	e0fffe17 	ldw	r3,-8(fp)
 100fe0c:	1804403a 	cmpge	r2,r3,zero
 100fe10:	1000031e 	bne	r2,zero,100fe20 <alt_up_character_lcd_shift_display+0x6c>
 100fe14:	e0bffe17 	ldw	r2,-8(fp)
 100fe18:	0085c83a 	sub	r2,zero,r2
 100fe1c:	e0bffe15 	stw	r2,-8(fp)
 100fe20:	e0fffe17 	ldw	r3,-8(fp)
 100fe24:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100fe28:	00000306 	br	100fe38 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100fe2c:	e17ffb43 	ldbu	r5,-19(fp)
 100fe30:	e13ffc17 	ldw	r4,-16(fp)
 100fe34:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100fe38:	e0bffb03 	ldbu	r2,-20(fp)
 100fe3c:	10bfffc4 	addi	r2,r2,-1
 100fe40:	e0bffb05 	stb	r2,-20(fp)
 100fe44:	e0bffb03 	ldbu	r2,-20(fp)
 100fe48:	10803fd8 	cmpnei	r2,r2,255
 100fe4c:	103ff71e 	bne	r2,zero,100fe2c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100fe50:	e037883a 	mov	sp,fp
 100fe54:	dfc00117 	ldw	ra,4(sp)
 100fe58:	df000017 	ldw	fp,0(sp)
 100fe5c:	dec00204 	addi	sp,sp,8
 100fe60:	f800283a 	ret

0100fe64 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100fe64:	defff904 	addi	sp,sp,-28
 100fe68:	dfc00615 	stw	ra,24(sp)
 100fe6c:	df000515 	stw	fp,20(sp)
 100fe70:	df000504 	addi	fp,sp,20
 100fe74:	e13ffc15 	stw	r4,-16(fp)
 100fe78:	e17ffd15 	stw	r5,-12(fp)
 100fe7c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100fe80:	e0bffd17 	ldw	r2,-12(fp)
 100fe84:	10800a28 	cmpgeui	r2,r2,40
 100fe88:	1000031e 	bne	r2,zero,100fe98 <alt_up_character_lcd_erase_pos+0x34>
 100fe8c:	e0bffe17 	ldw	r2,-8(fp)
 100fe90:	108000b0 	cmpltui	r2,r2,2
 100fe94:	1000031e 	bne	r2,zero,100fea4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100fe98:	00bfffc4 	movi	r2,-1
 100fe9c:	e0bfff15 	stw	r2,-4(fp)
 100fea0:	00000e06 	br	100fedc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100fea4:	e13ffd17 	ldw	r4,-12(fp)
 100fea8:	e17ffe17 	ldw	r5,-8(fp)
 100feac:	100fa2c0 	call	100fa2c <get_DDRAM_addr>
 100feb0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100feb4:	e17ffb03 	ldbu	r5,-20(fp)
 100feb8:	e13ffc17 	ldw	r4,-16(fp)
 100febc:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100fec0:	e0bffc17 	ldw	r2,-16(fp)
 100fec4:	10800a17 	ldw	r2,40(r2)
 100fec8:	10800044 	addi	r2,r2,1
 100fecc:	1007883a 	mov	r3,r2
 100fed0:	00800084 	movi	r2,2
 100fed4:	18800025 	stbio	r2,0(r3)
	return 0;
 100fed8:	e03fff15 	stw	zero,-4(fp)
 100fedc:	e0bfff17 	ldw	r2,-4(fp)
}
 100fee0:	e037883a 	mov	sp,fp
 100fee4:	dfc00117 	ldw	ra,4(sp)
 100fee8:	df000017 	ldw	fp,0(sp)
 100feec:	dec00204 	addi	sp,sp,8
 100fef0:	f800283a 	ret

0100fef4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100fef4:	defffd04 	addi	sp,sp,-12
 100fef8:	dfc00215 	stw	ra,8(sp)
 100fefc:	df000115 	stw	fp,4(sp)
 100ff00:	df000104 	addi	fp,sp,4
 100ff04:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100ff08:	e13fff17 	ldw	r4,-4(fp)
 100ff0c:	01400304 	movi	r5,12
 100ff10:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
}
 100ff14:	e037883a 	mov	sp,fp
 100ff18:	dfc00117 	ldw	ra,4(sp)
 100ff1c:	df000017 	ldw	fp,0(sp)
 100ff20:	dec00204 	addi	sp,sp,8
 100ff24:	f800283a 	ret

0100ff28 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100ff28:	defffd04 	addi	sp,sp,-12
 100ff2c:	dfc00215 	stw	ra,8(sp)
 100ff30:	df000115 	stw	fp,4(sp)
 100ff34:	df000104 	addi	fp,sp,4
 100ff38:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100ff3c:	e13fff17 	ldw	r4,-4(fp)
 100ff40:	014003c4 	movi	r5,15
 100ff44:	100faa80 	call	100faa8 <alt_up_character_lcd_send_cmd>
}
 100ff48:	e037883a 	mov	sp,fp
 100ff4c:	dfc00117 	ldw	ra,4(sp)
 100ff50:	df000017 	ldw	fp,0(sp)
 100ff54:	dec00204 	addi	sp,sp,8
 100ff58:	f800283a 	ret

0100ff5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100ff5c:	defff404 	addi	sp,sp,-48
 100ff60:	df000b15 	stw	fp,44(sp)
 100ff64:	df000b04 	addi	fp,sp,44
 100ff68:	e13ffb15 	stw	r4,-20(fp)
 100ff6c:	e17ffc15 	stw	r5,-16(fp)
 100ff70:	e1bffd15 	stw	r6,-12(fp)
 100ff74:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100ff78:	e03ff915 	stw	zero,-28(fp)
 100ff7c:	00804074 	movhi	r2,257
 100ff80:	1098f904 	addi	r2,r2,25572
 100ff84:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100ff88:	1005003a 	cmpeq	r2,r2,zero
 100ff8c:	1000411e 	bne	r2,zero,1010094 <alt_alarm_start+0x138>
  {
    if (alarm)
 100ff90:	e0bffb17 	ldw	r2,-20(fp)
 100ff94:	1005003a 	cmpeq	r2,r2,zero
 100ff98:	10003b1e 	bne	r2,zero,1010088 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100ff9c:	e0fffb17 	ldw	r3,-20(fp)
 100ffa0:	e0bffd17 	ldw	r2,-12(fp)
 100ffa4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100ffa8:	e0fffb17 	ldw	r3,-20(fp)
 100ffac:	e0bffe17 	ldw	r2,-8(fp)
 100ffb0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ffb4:	0005303a 	rdctl	r2,status
 100ffb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ffbc:	e0fff817 	ldw	r3,-32(fp)
 100ffc0:	00bfff84 	movi	r2,-2
 100ffc4:	1884703a 	and	r2,r3,r2
 100ffc8:	1001703a 	wrctl	status,r2
  
  return context;
 100ffcc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100ffd0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100ffd4:	00804074 	movhi	r2,257
 100ffd8:	1098fa04 	addi	r2,r2,25576
 100ffdc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100ffe0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100ffe4:	e0fffc17 	ldw	r3,-16(fp)
 100ffe8:	e0bff917 	ldw	r2,-28(fp)
 100ffec:	1885883a 	add	r2,r3,r2
 100fff0:	10c00044 	addi	r3,r2,1
 100fff4:	e0bffb17 	ldw	r2,-20(fp)
 100fff8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100fffc:	e0bffb17 	ldw	r2,-20(fp)
 1010000:	10c00217 	ldw	r3,8(r2)
 1010004:	e0bff917 	ldw	r2,-28(fp)
 1010008:	1880042e 	bgeu	r3,r2,101001c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 101000c:	e0fffb17 	ldw	r3,-20(fp)
 1010010:	00800044 	movi	r2,1
 1010014:	18800405 	stb	r2,16(r3)
 1010018:	00000206 	br	1010024 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 101001c:	e0bffb17 	ldw	r2,-20(fp)
 1010020:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010024:	e0fffb17 	ldw	r3,-20(fp)
 1010028:	00804074 	movhi	r2,257
 101002c:	10923204 	addi	r2,r2,18632
 1010030:	e0bff615 	stw	r2,-40(fp)
 1010034:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010038:	e0fff717 	ldw	r3,-36(fp)
 101003c:	e0bff617 	ldw	r2,-40(fp)
 1010040:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010044:	e0bff617 	ldw	r2,-40(fp)
 1010048:	10c00017 	ldw	r3,0(r2)
 101004c:	e0bff717 	ldw	r2,-36(fp)
 1010050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010054:	e0bff617 	ldw	r2,-40(fp)
 1010058:	10c00017 	ldw	r3,0(r2)
 101005c:	e0bff717 	ldw	r2,-36(fp)
 1010060:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010064:	e0fff617 	ldw	r3,-40(fp)
 1010068:	e0bff717 	ldw	r2,-36(fp)
 101006c:	18800015 	stw	r2,0(r3)
 1010070:	e0bffa17 	ldw	r2,-24(fp)
 1010074:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010078:	e0bff517 	ldw	r2,-44(fp)
 101007c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1010080:	e03fff15 	stw	zero,-4(fp)
 1010084:	00000506 	br	101009c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1010088:	00bffa84 	movi	r2,-22
 101008c:	e0bfff15 	stw	r2,-4(fp)
 1010090:	00000206 	br	101009c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1010094:	00bfde84 	movi	r2,-134
 1010098:	e0bfff15 	stw	r2,-4(fp)
 101009c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10100a0:	e037883a 	mov	sp,fp
 10100a4:	df000017 	ldw	fp,0(sp)
 10100a8:	dec00104 	addi	sp,sp,4
 10100ac:	f800283a 	ret

010100b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10100b0:	deffff04 	addi	sp,sp,-4
 10100b4:	df000015 	stw	fp,0(sp)
 10100b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10100bc:	e037883a 	mov	sp,fp
 10100c0:	df000017 	ldw	fp,0(sp)
 10100c4:	dec00104 	addi	sp,sp,4
 10100c8:	f800283a 	ret

010100cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10100cc:	defff904 	addi	sp,sp,-28
 10100d0:	dfc00615 	stw	ra,24(sp)
 10100d4:	df000515 	stw	fp,20(sp)
 10100d8:	df000504 	addi	fp,sp,20
 10100dc:	e13ffd15 	stw	r4,-12(fp)
 10100e0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10100e4:	e0bffd17 	ldw	r2,-12(fp)
 10100e8:	1005003a 	cmpeq	r2,r2,zero
 10100ec:	1000041e 	bne	r2,zero,1010100 <alt_dev_llist_insert+0x34>
 10100f0:	e0bffd17 	ldw	r2,-12(fp)
 10100f4:	10800217 	ldw	r2,8(r2)
 10100f8:	1004c03a 	cmpne	r2,r2,zero
 10100fc:	1000071e 	bne	r2,zero,101011c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1010100:	10101800 	call	1010180 <alt_get_errno>
 1010104:	1007883a 	mov	r3,r2
 1010108:	00800584 	movi	r2,22
 101010c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1010110:	00bffa84 	movi	r2,-22
 1010114:	e0bfff15 	stw	r2,-4(fp)
 1010118:	00001306 	br	1010168 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101011c:	e0fffd17 	ldw	r3,-12(fp)
 1010120:	e0bffe17 	ldw	r2,-8(fp)
 1010124:	e0bffb15 	stw	r2,-20(fp)
 1010128:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101012c:	e0fffc17 	ldw	r3,-16(fp)
 1010130:	e0bffb17 	ldw	r2,-20(fp)
 1010134:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010138:	e0bffb17 	ldw	r2,-20(fp)
 101013c:	10c00017 	ldw	r3,0(r2)
 1010140:	e0bffc17 	ldw	r2,-16(fp)
 1010144:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010148:	e0bffb17 	ldw	r2,-20(fp)
 101014c:	10c00017 	ldw	r3,0(r2)
 1010150:	e0bffc17 	ldw	r2,-16(fp)
 1010154:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010158:	e0fffb17 	ldw	r3,-20(fp)
 101015c:	e0bffc17 	ldw	r2,-16(fp)
 1010160:	18800015 	stw	r2,0(r3)

  return 0;  
 1010164:	e03fff15 	stw	zero,-4(fp)
 1010168:	e0bfff17 	ldw	r2,-4(fp)
}
 101016c:	e037883a 	mov	sp,fp
 1010170:	dfc00117 	ldw	ra,4(sp)
 1010174:	df000017 	ldw	fp,0(sp)
 1010178:	dec00204 	addi	sp,sp,8
 101017c:	f800283a 	ret

01010180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010180:	defffd04 	addi	sp,sp,-12
 1010184:	dfc00215 	stw	ra,8(sp)
 1010188:	df000115 	stw	fp,4(sp)
 101018c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010190:	00804074 	movhi	r2,257
 1010194:	10922f04 	addi	r2,r2,18620
 1010198:	10800017 	ldw	r2,0(r2)
 101019c:	1005003a 	cmpeq	r2,r2,zero
 10101a0:	1000061e 	bne	r2,zero,10101bc <alt_get_errno+0x3c>
 10101a4:	00804074 	movhi	r2,257
 10101a8:	10922f04 	addi	r2,r2,18620
 10101ac:	10800017 	ldw	r2,0(r2)
 10101b0:	103ee83a 	callr	r2
 10101b4:	e0bfff15 	stw	r2,-4(fp)
 10101b8:	00000306 	br	10101c8 <alt_get_errno+0x48>
 10101bc:	00804074 	movhi	r2,257
 10101c0:	1098e704 	addi	r2,r2,25500
 10101c4:	e0bfff15 	stw	r2,-4(fp)
 10101c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10101cc:	e037883a 	mov	sp,fp
 10101d0:	dfc00117 	ldw	ra,4(sp)
 10101d4:	df000017 	ldw	fp,0(sp)
 10101d8:	dec00204 	addi	sp,sp,8
 10101dc:	f800283a 	ret

010101e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10101e0:	defffd04 	addi	sp,sp,-12
 10101e4:	dfc00215 	stw	ra,8(sp)
 10101e8:	df000115 	stw	fp,4(sp)
 10101ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10101f0:	00bfff04 	movi	r2,-4
 10101f4:	00c04074 	movhi	r3,257
 10101f8:	18ca5f04 	addi	r3,r3,10620
 10101fc:	1885883a 	add	r2,r3,r2
 1010200:	e0bfff15 	stw	r2,-4(fp)
 1010204:	00000606 	br	1010220 <_do_ctors+0x40>
        (*ctor) (); 
 1010208:	e0bfff17 	ldw	r2,-4(fp)
 101020c:	10800017 	ldw	r2,0(r2)
 1010210:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010214:	e0bfff17 	ldw	r2,-4(fp)
 1010218:	10bfff04 	addi	r2,r2,-4
 101021c:	e0bfff15 	stw	r2,-4(fp)
 1010220:	e0ffff17 	ldw	r3,-4(fp)
 1010224:	00804074 	movhi	r2,257
 1010228:	108a5e04 	addi	r2,r2,10616
 101022c:	18bff62e 	bgeu	r3,r2,1010208 <_do_ctors+0x28>
        (*ctor) (); 
}
 1010230:	e037883a 	mov	sp,fp
 1010234:	dfc00117 	ldw	ra,4(sp)
 1010238:	df000017 	ldw	fp,0(sp)
 101023c:	dec00204 	addi	sp,sp,8
 1010240:	f800283a 	ret

01010244 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010244:	defffd04 	addi	sp,sp,-12
 1010248:	dfc00215 	stw	ra,8(sp)
 101024c:	df000115 	stw	fp,4(sp)
 1010250:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010254:	00bfff04 	movi	r2,-4
 1010258:	00c04074 	movhi	r3,257
 101025c:	18ca5f04 	addi	r3,r3,10620
 1010260:	1885883a 	add	r2,r3,r2
 1010264:	e0bfff15 	stw	r2,-4(fp)
 1010268:	00000606 	br	1010284 <_do_dtors+0x40>
        (*dtor) (); 
 101026c:	e0bfff17 	ldw	r2,-4(fp)
 1010270:	10800017 	ldw	r2,0(r2)
 1010274:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010278:	e0bfff17 	ldw	r2,-4(fp)
 101027c:	10bfff04 	addi	r2,r2,-4
 1010280:	e0bfff15 	stw	r2,-4(fp)
 1010284:	e0ffff17 	ldw	r3,-4(fp)
 1010288:	00804074 	movhi	r2,257
 101028c:	108a5f04 	addi	r2,r2,10620
 1010290:	18bff62e 	bgeu	r3,r2,101026c <_do_dtors+0x28>
        (*dtor) (); 
}
 1010294:	e037883a 	mov	sp,fp
 1010298:	dfc00117 	ldw	ra,4(sp)
 101029c:	df000017 	ldw	fp,0(sp)
 10102a0:	dec00204 	addi	sp,sp,8
 10102a4:	f800283a 	ret

010102a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10102a8:	defff904 	addi	sp,sp,-28
 10102ac:	dfc00615 	stw	ra,24(sp)
 10102b0:	df000515 	stw	fp,20(sp)
 10102b4:	df000504 	addi	fp,sp,20
 10102b8:	e13ffd15 	stw	r4,-12(fp)
 10102bc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10102c0:	e0bffe17 	ldw	r2,-8(fp)
 10102c4:	10800017 	ldw	r2,0(r2)
 10102c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10102cc:	e13ffd17 	ldw	r4,-12(fp)
 10102d0:	10004400 	call	1000440 <strlen>
 10102d4:	10800044 	addi	r2,r2,1
 10102d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10102dc:	00000d06 	br	1010314 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10102e0:	e0bffc17 	ldw	r2,-16(fp)
 10102e4:	11000217 	ldw	r4,8(r2)
 10102e8:	e1bffb17 	ldw	r6,-20(fp)
 10102ec:	e17ffd17 	ldw	r5,-12(fp)
 10102f0:	1010f3c0 	call	1010f3c <memcmp>
 10102f4:	1004c03a 	cmpne	r2,r2,zero
 10102f8:	1000031e 	bne	r2,zero,1010308 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10102fc:	e0bffc17 	ldw	r2,-16(fp)
 1010300:	e0bfff15 	stw	r2,-4(fp)
 1010304:	00000706 	br	1010324 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1010308:	e0bffc17 	ldw	r2,-16(fp)
 101030c:	10800017 	ldw	r2,0(r2)
 1010310:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010314:	e0fffe17 	ldw	r3,-8(fp)
 1010318:	e0bffc17 	ldw	r2,-16(fp)
 101031c:	10fff01e 	bne	r2,r3,10102e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1010320:	e03fff15 	stw	zero,-4(fp)
 1010324:	e0bfff17 	ldw	r2,-4(fp)
}
 1010328:	e037883a 	mov	sp,fp
 101032c:	dfc00117 	ldw	ra,4(sp)
 1010330:	df000017 	ldw	fp,0(sp)
 1010334:	dec00204 	addi	sp,sp,8
 1010338:	f800283a 	ret

0101033c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101033c:	deffff04 	addi	sp,sp,-4
 1010340:	df000015 	stw	fp,0(sp)
 1010344:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1010348:	e037883a 	mov	sp,fp
 101034c:	df000017 	ldw	fp,0(sp)
 1010350:	dec00104 	addi	sp,sp,4
 1010354:	f800283a 	ret

01010358 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010358:	defff904 	addi	sp,sp,-28
 101035c:	dfc00615 	stw	ra,24(sp)
 1010360:	df000515 	stw	fp,20(sp)
 1010364:	df000504 	addi	fp,sp,20
 1010368:	e13ffc15 	stw	r4,-16(fp)
 101036c:	e17ffd15 	stw	r5,-12(fp)
 1010370:	e1bffe15 	stw	r6,-8(fp)
 1010374:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010378:	e0800217 	ldw	r2,8(fp)
 101037c:	d8800015 	stw	r2,0(sp)
 1010380:	e13ffc17 	ldw	r4,-16(fp)
 1010384:	e17ffd17 	ldw	r5,-12(fp)
 1010388:	e1bffe17 	ldw	r6,-8(fp)
 101038c:	e1ffff17 	ldw	r7,-4(fp)
 1010390:	101052c0 	call	101052c <alt_iic_isr_register>
}  
 1010394:	e037883a 	mov	sp,fp
 1010398:	dfc00117 	ldw	ra,4(sp)
 101039c:	df000017 	ldw	fp,0(sp)
 10103a0:	dec00204 	addi	sp,sp,8
 10103a4:	f800283a 	ret

010103a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10103a8:	defff904 	addi	sp,sp,-28
 10103ac:	df000615 	stw	fp,24(sp)
 10103b0:	df000604 	addi	fp,sp,24
 10103b4:	e13ffe15 	stw	r4,-8(fp)
 10103b8:	e17fff15 	stw	r5,-4(fp)
 10103bc:	e0bfff17 	ldw	r2,-4(fp)
 10103c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10103c4:	0005303a 	rdctl	r2,status
 10103c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10103cc:	e0fffb17 	ldw	r3,-20(fp)
 10103d0:	00bfff84 	movi	r2,-2
 10103d4:	1884703a 	and	r2,r3,r2
 10103d8:	1001703a 	wrctl	status,r2
  
  return context;
 10103dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10103e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 10103e4:	e0fffc17 	ldw	r3,-16(fp)
 10103e8:	00800044 	movi	r2,1
 10103ec:	10c4983a 	sll	r2,r2,r3
 10103f0:	1007883a 	mov	r3,r2
 10103f4:	00804074 	movhi	r2,257
 10103f8:	1098f804 	addi	r2,r2,25568
 10103fc:	10800017 	ldw	r2,0(r2)
 1010400:	1886b03a 	or	r3,r3,r2
 1010404:	00804074 	movhi	r2,257
 1010408:	1098f804 	addi	r2,r2,25568
 101040c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010410:	00804074 	movhi	r2,257
 1010414:	1098f804 	addi	r2,r2,25568
 1010418:	10800017 	ldw	r2,0(r2)
 101041c:	100170fa 	wrctl	ienable,r2
 1010420:	e0bffd17 	ldw	r2,-12(fp)
 1010424:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010428:	e0bffa17 	ldw	r2,-24(fp)
 101042c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010430:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1010434:	e037883a 	mov	sp,fp
 1010438:	df000017 	ldw	fp,0(sp)
 101043c:	dec00104 	addi	sp,sp,4
 1010440:	f800283a 	ret

01010444 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010444:	defff904 	addi	sp,sp,-28
 1010448:	df000615 	stw	fp,24(sp)
 101044c:	df000604 	addi	fp,sp,24
 1010450:	e13ffe15 	stw	r4,-8(fp)
 1010454:	e17fff15 	stw	r5,-4(fp)
 1010458:	e0bfff17 	ldw	r2,-4(fp)
 101045c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010460:	0005303a 	rdctl	r2,status
 1010464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010468:	e0fffb17 	ldw	r3,-20(fp)
 101046c:	00bfff84 	movi	r2,-2
 1010470:	1884703a 	and	r2,r3,r2
 1010474:	1001703a 	wrctl	status,r2
  
  return context;
 1010478:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101047c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1010480:	e0fffc17 	ldw	r3,-16(fp)
 1010484:	00800044 	movi	r2,1
 1010488:	10c4983a 	sll	r2,r2,r3
 101048c:	0084303a 	nor	r2,zero,r2
 1010490:	1007883a 	mov	r3,r2
 1010494:	00804074 	movhi	r2,257
 1010498:	1098f804 	addi	r2,r2,25568
 101049c:	10800017 	ldw	r2,0(r2)
 10104a0:	1886703a 	and	r3,r3,r2
 10104a4:	00804074 	movhi	r2,257
 10104a8:	1098f804 	addi	r2,r2,25568
 10104ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10104b0:	00804074 	movhi	r2,257
 10104b4:	1098f804 	addi	r2,r2,25568
 10104b8:	10800017 	ldw	r2,0(r2)
 10104bc:	100170fa 	wrctl	ienable,r2
 10104c0:	e0bffd17 	ldw	r2,-12(fp)
 10104c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10104c8:	e0bffa17 	ldw	r2,-24(fp)
 10104cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10104d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 10104d4:	e037883a 	mov	sp,fp
 10104d8:	df000017 	ldw	fp,0(sp)
 10104dc:	dec00104 	addi	sp,sp,4
 10104e0:	f800283a 	ret

010104e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10104e4:	defffc04 	addi	sp,sp,-16
 10104e8:	df000315 	stw	fp,12(sp)
 10104ec:	df000304 	addi	fp,sp,12
 10104f0:	e13ffe15 	stw	r4,-8(fp)
 10104f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10104f8:	000530fa 	rdctl	r2,ienable
 10104fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010500:	e0ffff17 	ldw	r3,-4(fp)
 1010504:	00800044 	movi	r2,1
 1010508:	10c4983a 	sll	r2,r2,r3
 101050c:	1007883a 	mov	r3,r2
 1010510:	e0bffd17 	ldw	r2,-12(fp)
 1010514:	1884703a 	and	r2,r3,r2
 1010518:	1004c03a 	cmpne	r2,r2,zero
}
 101051c:	e037883a 	mov	sp,fp
 1010520:	df000017 	ldw	fp,0(sp)
 1010524:	dec00104 	addi	sp,sp,4
 1010528:	f800283a 	ret

0101052c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101052c:	defff404 	addi	sp,sp,-48
 1010530:	dfc00b15 	stw	ra,44(sp)
 1010534:	df000a15 	stw	fp,40(sp)
 1010538:	df000a04 	addi	fp,sp,40
 101053c:	e13ffb15 	stw	r4,-20(fp)
 1010540:	e17ffc15 	stw	r5,-16(fp)
 1010544:	e1bffd15 	stw	r6,-12(fp)
 1010548:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 101054c:	00bffa84 	movi	r2,-22
 1010550:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010554:	e0bffc17 	ldw	r2,-16(fp)
 1010558:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101055c:	e0bff917 	ldw	r2,-28(fp)
 1010560:	10800808 	cmpgei	r2,r2,32
 1010564:	1000291e 	bne	r2,zero,101060c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010568:	0005303a 	rdctl	r2,status
 101056c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010570:	e0fff717 	ldw	r3,-36(fp)
 1010574:	00bfff84 	movi	r2,-2
 1010578:	1884703a 	and	r2,r3,r2
 101057c:	1001703a 	wrctl	status,r2
  
  return context;
 1010580:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010584:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1010588:	e0bff917 	ldw	r2,-28(fp)
 101058c:	00c04074 	movhi	r3,257
 1010590:	18da5f04 	addi	r3,r3,27004
 1010594:	100490fa 	slli	r2,r2,3
 1010598:	10c7883a 	add	r3,r2,r3
 101059c:	e0bffd17 	ldw	r2,-12(fp)
 10105a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10105a4:	e0bff917 	ldw	r2,-28(fp)
 10105a8:	00c04074 	movhi	r3,257
 10105ac:	18da5f04 	addi	r3,r3,27004
 10105b0:	100490fa 	slli	r2,r2,3
 10105b4:	10c5883a 	add	r2,r2,r3
 10105b8:	10c00104 	addi	r3,r2,4
 10105bc:	e0bffe17 	ldw	r2,-8(fp)
 10105c0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10105c4:	e0bffd17 	ldw	r2,-12(fp)
 10105c8:	1005003a 	cmpeq	r2,r2,zero
 10105cc:	1000051e 	bne	r2,zero,10105e4 <alt_iic_isr_register+0xb8>
 10105d0:	e17ff917 	ldw	r5,-28(fp)
 10105d4:	e13ffb17 	ldw	r4,-20(fp)
 10105d8:	10103a80 	call	10103a8 <alt_ic_irq_enable>
 10105dc:	e0bfff15 	stw	r2,-4(fp)
 10105e0:	00000406 	br	10105f4 <alt_iic_isr_register+0xc8>
 10105e4:	e17ff917 	ldw	r5,-28(fp)
 10105e8:	e13ffb17 	ldw	r4,-20(fp)
 10105ec:	10104440 	call	1010444 <alt_ic_irq_disable>
 10105f0:	e0bfff15 	stw	r2,-4(fp)
 10105f4:	e0bfff17 	ldw	r2,-4(fp)
 10105f8:	e0bffa15 	stw	r2,-24(fp)
 10105fc:	e0bff817 	ldw	r2,-32(fp)
 1010600:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010604:	e0bff617 	ldw	r2,-40(fp)
 1010608:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 101060c:	e0bffa17 	ldw	r2,-24(fp)
}
 1010610:	e037883a 	mov	sp,fp
 1010614:	dfc00117 	ldw	ra,4(sp)
 1010618:	df000017 	ldw	fp,0(sp)
 101061c:	dec00204 	addi	sp,sp,8
 1010620:	f800283a 	ret

01010624 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010624:	defff804 	addi	sp,sp,-32
 1010628:	dfc00715 	stw	ra,28(sp)
 101062c:	df000615 	stw	fp,24(sp)
 1010630:	dc000515 	stw	r16,20(sp)
 1010634:	df000504 	addi	fp,sp,20
 1010638:	e13ffc15 	stw	r4,-16(fp)
 101063c:	e17ffd15 	stw	r5,-12(fp)
 1010640:	e1bffe15 	stw	r6,-8(fp)
 1010644:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1010648:	e13ffd17 	ldw	r4,-12(fp)
 101064c:	e17ffe17 	ldw	r5,-8(fp)
 1010650:	e1bfff17 	ldw	r6,-4(fp)
 1010654:	101086c0 	call	101086c <open>
 1010658:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101065c:	e0bffb17 	ldw	r2,-20(fp)
 1010660:	1004803a 	cmplt	r2,r2,zero
 1010664:	10001f1e 	bne	r2,zero,10106e4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1010668:	e13ffb17 	ldw	r4,-20(fp)
 101066c:	04004074 	movhi	r16,257
 1010670:	840d9604 	addi	r16,r16,13912
 1010674:	01400304 	movi	r5,12
 1010678:	10096900 	call	1009690 <__mulsi3>
 101067c:	1405883a 	add	r2,r2,r16
 1010680:	10c00017 	ldw	r3,0(r2)
 1010684:	e0bffc17 	ldw	r2,-16(fp)
 1010688:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101068c:	e13ffb17 	ldw	r4,-20(fp)
 1010690:	04004074 	movhi	r16,257
 1010694:	840d9604 	addi	r16,r16,13912
 1010698:	01400304 	movi	r5,12
 101069c:	10096900 	call	1009690 <__mulsi3>
 10106a0:	1405883a 	add	r2,r2,r16
 10106a4:	10800104 	addi	r2,r2,4
 10106a8:	10c00017 	ldw	r3,0(r2)
 10106ac:	e0bffc17 	ldw	r2,-16(fp)
 10106b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10106b4:	e13ffb17 	ldw	r4,-20(fp)
 10106b8:	04004074 	movhi	r16,257
 10106bc:	840d9604 	addi	r16,r16,13912
 10106c0:	01400304 	movi	r5,12
 10106c4:	10096900 	call	1009690 <__mulsi3>
 10106c8:	1405883a 	add	r2,r2,r16
 10106cc:	10800204 	addi	r2,r2,8
 10106d0:	10c00017 	ldw	r3,0(r2)
 10106d4:	e0bffc17 	ldw	r2,-16(fp)
 10106d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10106dc:	e13ffb17 	ldw	r4,-20(fp)
 10106e0:	100a5d80 	call	100a5d8 <alt_release_fd>
  }
} 
 10106e4:	e037883a 	mov	sp,fp
 10106e8:	dfc00217 	ldw	ra,8(sp)
 10106ec:	df000117 	ldw	fp,4(sp)
 10106f0:	dc000017 	ldw	r16,0(sp)
 10106f4:	dec00304 	addi	sp,sp,12
 10106f8:	f800283a 	ret

010106fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10106fc:	defffb04 	addi	sp,sp,-20
 1010700:	dfc00415 	stw	ra,16(sp)
 1010704:	df000315 	stw	fp,12(sp)
 1010708:	df000304 	addi	fp,sp,12
 101070c:	e13ffd15 	stw	r4,-12(fp)
 1010710:	e17ffe15 	stw	r5,-8(fp)
 1010714:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1010718:	01004074 	movhi	r4,257
 101071c:	210d9904 	addi	r4,r4,13924
 1010720:	e17ffd17 	ldw	r5,-12(fp)
 1010724:	01800044 	movi	r6,1
 1010728:	01c07fc4 	movi	r7,511
 101072c:	10106240 	call	1010624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1010730:	01004074 	movhi	r4,257
 1010734:	210d9604 	addi	r4,r4,13912
 1010738:	e17ffe17 	ldw	r5,-8(fp)
 101073c:	000d883a 	mov	r6,zero
 1010740:	01c07fc4 	movi	r7,511
 1010744:	10106240 	call	1010624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1010748:	01004074 	movhi	r4,257
 101074c:	210d9c04 	addi	r4,r4,13936
 1010750:	e17fff17 	ldw	r5,-4(fp)
 1010754:	01800044 	movi	r6,1
 1010758:	01c07fc4 	movi	r7,511
 101075c:	10106240 	call	1010624 <alt_open_fd>
}  
 1010760:	e037883a 	mov	sp,fp
 1010764:	dfc00117 	ldw	ra,4(sp)
 1010768:	df000017 	ldw	fp,0(sp)
 101076c:	dec00204 	addi	sp,sp,8
 1010770:	f800283a 	ret

01010774 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1010774:	defffa04 	addi	sp,sp,-24
 1010778:	dfc00515 	stw	ra,20(sp)
 101077c:	df000415 	stw	fp,16(sp)
 1010780:	dc000315 	stw	r16,12(sp)
 1010784:	df000304 	addi	fp,sp,12
 1010788:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101078c:	e0bffe17 	ldw	r2,-8(fp)
 1010790:	10800217 	ldw	r2,8(r2)
 1010794:	10d00034 	orhi	r3,r2,16384
 1010798:	e0bffe17 	ldw	r2,-8(fp)
 101079c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10107a0:	e03ffd15 	stw	zero,-12(fp)
 10107a4:	00002306 	br	1010834 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10107a8:	e13ffd17 	ldw	r4,-12(fp)
 10107ac:	04004074 	movhi	r16,257
 10107b0:	840d9604 	addi	r16,r16,13912
 10107b4:	01400304 	movi	r5,12
 10107b8:	10096900 	call	1009690 <__mulsi3>
 10107bc:	1405883a 	add	r2,r2,r16
 10107c0:	10c00017 	ldw	r3,0(r2)
 10107c4:	e0bffe17 	ldw	r2,-8(fp)
 10107c8:	10800017 	ldw	r2,0(r2)
 10107cc:	1880161e 	bne	r3,r2,1010828 <alt_file_locked+0xb4>
 10107d0:	e13ffd17 	ldw	r4,-12(fp)
 10107d4:	04004074 	movhi	r16,257
 10107d8:	840d9604 	addi	r16,r16,13912
 10107dc:	01400304 	movi	r5,12
 10107e0:	10096900 	call	1009690 <__mulsi3>
 10107e4:	1405883a 	add	r2,r2,r16
 10107e8:	10800204 	addi	r2,r2,8
 10107ec:	10800017 	ldw	r2,0(r2)
 10107f0:	1004403a 	cmpge	r2,r2,zero
 10107f4:	10000c1e 	bne	r2,zero,1010828 <alt_file_locked+0xb4>
 10107f8:	e13ffd17 	ldw	r4,-12(fp)
 10107fc:	01400304 	movi	r5,12
 1010800:	10096900 	call	1009690 <__mulsi3>
 1010804:	1007883a 	mov	r3,r2
 1010808:	00804074 	movhi	r2,257
 101080c:	108d9604 	addi	r2,r2,13912
 1010810:	1887883a 	add	r3,r3,r2
 1010814:	e0bffe17 	ldw	r2,-8(fp)
 1010818:	18800326 	beq	r3,r2,1010828 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101081c:	00bffcc4 	movi	r2,-13
 1010820:	e0bfff15 	stw	r2,-4(fp)
 1010824:	00000a06 	br	1010850 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010828:	e0bffd17 	ldw	r2,-12(fp)
 101082c:	10800044 	addi	r2,r2,1
 1010830:	e0bffd15 	stw	r2,-12(fp)
 1010834:	00804074 	movhi	r2,257
 1010838:	10922e04 	addi	r2,r2,18616
 101083c:	10800017 	ldw	r2,0(r2)
 1010840:	1007883a 	mov	r3,r2
 1010844:	e0bffd17 	ldw	r2,-12(fp)
 1010848:	18bfd72e 	bgeu	r3,r2,10107a8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101084c:	e03fff15 	stw	zero,-4(fp)
 1010850:	e0bfff17 	ldw	r2,-4(fp)
}
 1010854:	e037883a 	mov	sp,fp
 1010858:	dfc00217 	ldw	ra,8(sp)
 101085c:	df000117 	ldw	fp,4(sp)
 1010860:	dc000017 	ldw	r16,0(sp)
 1010864:	dec00304 	addi	sp,sp,12
 1010868:	f800283a 	ret

0101086c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101086c:	defff404 	addi	sp,sp,-48
 1010870:	dfc00b15 	stw	ra,44(sp)
 1010874:	df000a15 	stw	fp,40(sp)
 1010878:	df000a04 	addi	fp,sp,40
 101087c:	e13ffb15 	stw	r4,-20(fp)
 1010880:	e17ffc15 	stw	r5,-16(fp)
 1010884:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1010888:	00bfffc4 	movi	r2,-1
 101088c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1010890:	00bffb44 	movi	r2,-19
 1010894:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1010898:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101089c:	e13ffb17 	ldw	r4,-20(fp)
 10108a0:	01404074 	movhi	r5,257
 10108a4:	29522c04 	addi	r5,r5,18608
 10108a8:	10102a80 	call	10102a8 <alt_find_dev>
 10108ac:	e0bffa15 	stw	r2,-24(fp)
 10108b0:	e0bffa17 	ldw	r2,-24(fp)
 10108b4:	1004c03a 	cmpne	r2,r2,zero
 10108b8:	1000051e 	bne	r2,zero,10108d0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10108bc:	e13ffb17 	ldw	r4,-20(fp)
 10108c0:	1010c1c0 	call	1010c1c <alt_find_file>
 10108c4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10108c8:	00800044 	movi	r2,1
 10108cc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10108d0:	e0bffa17 	ldw	r2,-24(fp)
 10108d4:	1005003a 	cmpeq	r2,r2,zero
 10108d8:	1000311e 	bne	r2,zero,10109a0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10108dc:	e13ffa17 	ldw	r4,-24(fp)
 10108e0:	1010d3c0 	call	1010d3c <alt_get_fd>
 10108e4:	e0bff815 	stw	r2,-32(fp)
 10108e8:	e0bff817 	ldw	r2,-32(fp)
 10108ec:	1004403a 	cmpge	r2,r2,zero
 10108f0:	1000031e 	bne	r2,zero,1010900 <open+0x94>
    {
      status = index;
 10108f4:	e0bff817 	ldw	r2,-32(fp)
 10108f8:	e0bff715 	stw	r2,-36(fp)
 10108fc:	00002a06 	br	10109a8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1010900:	e13ff817 	ldw	r4,-32(fp)
 1010904:	01400304 	movi	r5,12
 1010908:	10096900 	call	1009690 <__mulsi3>
 101090c:	1007883a 	mov	r3,r2
 1010910:	00804074 	movhi	r2,257
 1010914:	108d9604 	addi	r2,r2,13912
 1010918:	1885883a 	add	r2,r3,r2
 101091c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1010920:	e0fffc17 	ldw	r3,-16(fp)
 1010924:	00900034 	movhi	r2,16384
 1010928:	10bfffc4 	addi	r2,r2,-1
 101092c:	1886703a 	and	r3,r3,r2
 1010930:	e0bff917 	ldw	r2,-28(fp)
 1010934:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1010938:	e0bff617 	ldw	r2,-40(fp)
 101093c:	1004c03a 	cmpne	r2,r2,zero
 1010940:	1000061e 	bne	r2,zero,101095c <open+0xf0>
 1010944:	e13ff917 	ldw	r4,-28(fp)
 1010948:	10107740 	call	1010774 <alt_file_locked>
 101094c:	e0bff715 	stw	r2,-36(fp)
 1010950:	e0bff717 	ldw	r2,-36(fp)
 1010954:	1004803a 	cmplt	r2,r2,zero
 1010958:	1000131e 	bne	r2,zero,10109a8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101095c:	e0bffa17 	ldw	r2,-24(fp)
 1010960:	10800317 	ldw	r2,12(r2)
 1010964:	1005003a 	cmpeq	r2,r2,zero
 1010968:	1000091e 	bne	r2,zero,1010990 <open+0x124>
 101096c:	e0bffa17 	ldw	r2,-24(fp)
 1010970:	10800317 	ldw	r2,12(r2)
 1010974:	e13ff917 	ldw	r4,-28(fp)
 1010978:	e17ffb17 	ldw	r5,-20(fp)
 101097c:	e1bffc17 	ldw	r6,-16(fp)
 1010980:	e1fffd17 	ldw	r7,-12(fp)
 1010984:	103ee83a 	callr	r2
 1010988:	e0bfff15 	stw	r2,-4(fp)
 101098c:	00000106 	br	1010994 <open+0x128>
 1010990:	e03fff15 	stw	zero,-4(fp)
 1010994:	e0bfff17 	ldw	r2,-4(fp)
 1010998:	e0bff715 	stw	r2,-36(fp)
 101099c:	00000206 	br	10109a8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10109a0:	00bffb44 	movi	r2,-19
 10109a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10109a8:	e0bff717 	ldw	r2,-36(fp)
 10109ac:	1004403a 	cmpge	r2,r2,zero
 10109b0:	1000091e 	bne	r2,zero,10109d8 <open+0x16c>
  {
    alt_release_fd (index);  
 10109b4:	e13ff817 	ldw	r4,-32(fp)
 10109b8:	100a5d80 	call	100a5d8 <alt_release_fd>
    ALT_ERRNO = -status;
 10109bc:	10109f80 	call	10109f8 <alt_get_errno>
 10109c0:	e0fff717 	ldw	r3,-36(fp)
 10109c4:	00c7c83a 	sub	r3,zero,r3
 10109c8:	10c00015 	stw	r3,0(r2)
    return -1;
 10109cc:	00bfffc4 	movi	r2,-1
 10109d0:	e0bffe15 	stw	r2,-8(fp)
 10109d4:	00000206 	br	10109e0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 10109d8:	e0bff817 	ldw	r2,-32(fp)
 10109dc:	e0bffe15 	stw	r2,-8(fp)
 10109e0:	e0bffe17 	ldw	r2,-8(fp)
}
 10109e4:	e037883a 	mov	sp,fp
 10109e8:	dfc00117 	ldw	ra,4(sp)
 10109ec:	df000017 	ldw	fp,0(sp)
 10109f0:	dec00204 	addi	sp,sp,8
 10109f4:	f800283a 	ret

010109f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10109f8:	defffd04 	addi	sp,sp,-12
 10109fc:	dfc00215 	stw	ra,8(sp)
 1010a00:	df000115 	stw	fp,4(sp)
 1010a04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010a08:	00804074 	movhi	r2,257
 1010a0c:	10922f04 	addi	r2,r2,18620
 1010a10:	10800017 	ldw	r2,0(r2)
 1010a14:	1005003a 	cmpeq	r2,r2,zero
 1010a18:	1000061e 	bne	r2,zero,1010a34 <alt_get_errno+0x3c>
 1010a1c:	00804074 	movhi	r2,257
 1010a20:	10922f04 	addi	r2,r2,18620
 1010a24:	10800017 	ldw	r2,0(r2)
 1010a28:	103ee83a 	callr	r2
 1010a2c:	e0bfff15 	stw	r2,-4(fp)
 1010a30:	00000306 	br	1010a40 <alt_get_errno+0x48>
 1010a34:	00804074 	movhi	r2,257
 1010a38:	1098e704 	addi	r2,r2,25500
 1010a3c:	e0bfff15 	stw	r2,-4(fp)
 1010a40:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a44:	e037883a 	mov	sp,fp
 1010a48:	dfc00117 	ldw	ra,4(sp)
 1010a4c:	df000017 	ldw	fp,0(sp)
 1010a50:	dec00204 	addi	sp,sp,8
 1010a54:	f800283a 	ret

01010a58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1010a58:	defffa04 	addi	sp,sp,-24
 1010a5c:	df000515 	stw	fp,20(sp)
 1010a60:	df000504 	addi	fp,sp,20
 1010a64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010a68:	0005303a 	rdctl	r2,status
 1010a6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010a70:	e0fffd17 	ldw	r3,-12(fp)
 1010a74:	00bfff84 	movi	r2,-2
 1010a78:	1884703a 	and	r2,r3,r2
 1010a7c:	1001703a 	wrctl	status,r2
  
  return context;
 1010a80:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1010a84:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1010a88:	e0bfff17 	ldw	r2,-4(fp)
 1010a8c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1010a90:	e0bffc17 	ldw	r2,-16(fp)
 1010a94:	10c00017 	ldw	r3,0(r2)
 1010a98:	e0bffc17 	ldw	r2,-16(fp)
 1010a9c:	10800117 	ldw	r2,4(r2)
 1010aa0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1010aa4:	e0bffc17 	ldw	r2,-16(fp)
 1010aa8:	10c00117 	ldw	r3,4(r2)
 1010aac:	e0bffc17 	ldw	r2,-16(fp)
 1010ab0:	10800017 	ldw	r2,0(r2)
 1010ab4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1010ab8:	e0fffc17 	ldw	r3,-16(fp)
 1010abc:	e0bffc17 	ldw	r2,-16(fp)
 1010ac0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1010ac4:	e0fffc17 	ldw	r3,-16(fp)
 1010ac8:	e0bffc17 	ldw	r2,-16(fp)
 1010acc:	18800015 	stw	r2,0(r3)
 1010ad0:	e0bffe17 	ldw	r2,-8(fp)
 1010ad4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010ad8:	e0bffb17 	ldw	r2,-20(fp)
 1010adc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1010ae0:	e037883a 	mov	sp,fp
 1010ae4:	df000017 	ldw	fp,0(sp)
 1010ae8:	dec00104 	addi	sp,sp,4
 1010aec:	f800283a 	ret

01010af0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1010af0:	defffb04 	addi	sp,sp,-20
 1010af4:	dfc00415 	stw	ra,16(sp)
 1010af8:	df000315 	stw	fp,12(sp)
 1010afc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1010b00:	d0a00e17 	ldw	r2,-32712(gp)
 1010b04:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1010b08:	d0a6d617 	ldw	r2,-25768(gp)
 1010b0c:	10800044 	addi	r2,r2,1
 1010b10:	d0a6d615 	stw	r2,-25768(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1010b14:	00003106 	br	1010bdc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1010b18:	e0bffe17 	ldw	r2,-8(fp)
 1010b1c:	10800017 	ldw	r2,0(r2)
 1010b20:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1010b24:	e0bffe17 	ldw	r2,-8(fp)
 1010b28:	10800403 	ldbu	r2,16(r2)
 1010b2c:	10803fcc 	andi	r2,r2,255
 1010b30:	1005003a 	cmpeq	r2,r2,zero
 1010b34:	1000051e 	bne	r2,zero,1010b4c <alt_tick+0x5c>
 1010b38:	d0a6d617 	ldw	r2,-25768(gp)
 1010b3c:	1004c03a 	cmpne	r2,r2,zero
 1010b40:	1000021e 	bne	r2,zero,1010b4c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1010b44:	e0bffe17 	ldw	r2,-8(fp)
 1010b48:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1010b4c:	e0bffe17 	ldw	r2,-8(fp)
 1010b50:	10c00217 	ldw	r3,8(r2)
 1010b54:	d0a6d617 	ldw	r2,-25768(gp)
 1010b58:	10c01e36 	bltu	r2,r3,1010bd4 <alt_tick+0xe4>
 1010b5c:	e0bffe17 	ldw	r2,-8(fp)
 1010b60:	10800403 	ldbu	r2,16(r2)
 1010b64:	10803fcc 	andi	r2,r2,255
 1010b68:	1004c03a 	cmpne	r2,r2,zero
 1010b6c:	1000191e 	bne	r2,zero,1010bd4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1010b70:	e0bffe17 	ldw	r2,-8(fp)
 1010b74:	10c00317 	ldw	r3,12(r2)
 1010b78:	e0bffe17 	ldw	r2,-8(fp)
 1010b7c:	11000517 	ldw	r4,20(r2)
 1010b80:	183ee83a 	callr	r3
 1010b84:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1010b88:	e0bffd17 	ldw	r2,-12(fp)
 1010b8c:	1004c03a 	cmpne	r2,r2,zero
 1010b90:	1000031e 	bne	r2,zero,1010ba0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1010b94:	e13ffe17 	ldw	r4,-8(fp)
 1010b98:	1010a580 	call	1010a58 <alt_alarm_stop>
 1010b9c:	00000d06 	br	1010bd4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1010ba0:	e0bffe17 	ldw	r2,-8(fp)
 1010ba4:	10c00217 	ldw	r3,8(r2)
 1010ba8:	e0bffd17 	ldw	r2,-12(fp)
 1010bac:	1887883a 	add	r3,r3,r2
 1010bb0:	e0bffe17 	ldw	r2,-8(fp)
 1010bb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1010bb8:	e0bffe17 	ldw	r2,-8(fp)
 1010bbc:	10c00217 	ldw	r3,8(r2)
 1010bc0:	d0a6d617 	ldw	r2,-25768(gp)
 1010bc4:	1880032e 	bgeu	r3,r2,1010bd4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1010bc8:	e0fffe17 	ldw	r3,-8(fp)
 1010bcc:	00800044 	movi	r2,1
 1010bd0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1010bd4:	e0bfff17 	ldw	r2,-4(fp)
 1010bd8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1010bdc:	d0e00e04 	addi	r3,gp,-32712
 1010be0:	e0bffe17 	ldw	r2,-8(fp)
 1010be4:	10ffcc1e 	bne	r2,r3,1010b18 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1010be8:	e037883a 	mov	sp,fp
 1010bec:	dfc00117 	ldw	ra,4(sp)
 1010bf0:	df000017 	ldw	fp,0(sp)
 1010bf4:	dec00204 	addi	sp,sp,8
 1010bf8:	f800283a 	ret

01010bfc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1010bfc:	deffff04 	addi	sp,sp,-4
 1010c00:	df000015 	stw	fp,0(sp)
 1010c04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1010c08:	000170fa 	wrctl	ienable,zero
}
 1010c0c:	e037883a 	mov	sp,fp
 1010c10:	df000017 	ldw	fp,0(sp)
 1010c14:	dec00104 	addi	sp,sp,4
 1010c18:	f800283a 	ret

01010c1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1010c1c:	defffa04 	addi	sp,sp,-24
 1010c20:	dfc00515 	stw	ra,20(sp)
 1010c24:	df000415 	stw	fp,16(sp)
 1010c28:	df000404 	addi	fp,sp,16
 1010c2c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1010c30:	00804074 	movhi	r2,257
 1010c34:	10922a04 	addi	r2,r2,18600
 1010c38:	10800017 	ldw	r2,0(r2)
 1010c3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010c40:	00003306 	br	1010d10 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1010c44:	e0bffd17 	ldw	r2,-12(fp)
 1010c48:	11000217 	ldw	r4,8(r2)
 1010c4c:	10004400 	call	1000440 <strlen>
 1010c50:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1010c54:	e0bffd17 	ldw	r2,-12(fp)
 1010c58:	10c00217 	ldw	r3,8(r2)
 1010c5c:	e0bffc17 	ldw	r2,-16(fp)
 1010c60:	1885883a 	add	r2,r3,r2
 1010c64:	10bfffc4 	addi	r2,r2,-1
 1010c68:	10800003 	ldbu	r2,0(r2)
 1010c6c:	10803fcc 	andi	r2,r2,255
 1010c70:	1080201c 	xori	r2,r2,128
 1010c74:	10bfe004 	addi	r2,r2,-128
 1010c78:	10800bd8 	cmpnei	r2,r2,47
 1010c7c:	1000031e 	bne	r2,zero,1010c8c <alt_find_file+0x70>
    {
      len -= 1;
 1010c80:	e0bffc17 	ldw	r2,-16(fp)
 1010c84:	10bfffc4 	addi	r2,r2,-1
 1010c88:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1010c8c:	e0bffc17 	ldw	r2,-16(fp)
 1010c90:	1007883a 	mov	r3,r2
 1010c94:	e0bffe17 	ldw	r2,-8(fp)
 1010c98:	1885883a 	add	r2,r3,r2
 1010c9c:	10800003 	ldbu	r2,0(r2)
 1010ca0:	10803fcc 	andi	r2,r2,255
 1010ca4:	1080201c 	xori	r2,r2,128
 1010ca8:	10bfe004 	addi	r2,r2,-128
 1010cac:	10800be0 	cmpeqi	r2,r2,47
 1010cb0:	10000a1e 	bne	r2,zero,1010cdc <alt_find_file+0xc0>
 1010cb4:	e0bffc17 	ldw	r2,-16(fp)
 1010cb8:	1007883a 	mov	r3,r2
 1010cbc:	e0bffe17 	ldw	r2,-8(fp)
 1010cc0:	1885883a 	add	r2,r3,r2
 1010cc4:	10800003 	ldbu	r2,0(r2)
 1010cc8:	10803fcc 	andi	r2,r2,255
 1010ccc:	1080201c 	xori	r2,r2,128
 1010cd0:	10bfe004 	addi	r2,r2,-128
 1010cd4:	1004c03a 	cmpne	r2,r2,zero
 1010cd8:	10000a1e 	bne	r2,zero,1010d04 <alt_find_file+0xe8>
 1010cdc:	e0bffd17 	ldw	r2,-12(fp)
 1010ce0:	11000217 	ldw	r4,8(r2)
 1010ce4:	e1bffc17 	ldw	r6,-16(fp)
 1010ce8:	e17ffe17 	ldw	r5,-8(fp)
 1010cec:	1010f3c0 	call	1010f3c <memcmp>
 1010cf0:	1004c03a 	cmpne	r2,r2,zero
 1010cf4:	1000031e 	bne	r2,zero,1010d04 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1010cf8:	e0bffd17 	ldw	r2,-12(fp)
 1010cfc:	e0bfff15 	stw	r2,-4(fp)
 1010d00:	00000806 	br	1010d24 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1010d04:	e0bffd17 	ldw	r2,-12(fp)
 1010d08:	10800017 	ldw	r2,0(r2)
 1010d0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010d10:	00c04074 	movhi	r3,257
 1010d14:	18d22a04 	addi	r3,r3,18600
 1010d18:	e0bffd17 	ldw	r2,-12(fp)
 1010d1c:	10ffc91e 	bne	r2,r3,1010c44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1010d20:	e03fff15 	stw	zero,-4(fp)
 1010d24:	e0bfff17 	ldw	r2,-4(fp)
}
 1010d28:	e037883a 	mov	sp,fp
 1010d2c:	dfc00117 	ldw	ra,4(sp)
 1010d30:	df000017 	ldw	fp,0(sp)
 1010d34:	dec00204 	addi	sp,sp,8
 1010d38:	f800283a 	ret

01010d3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1010d3c:	defffa04 	addi	sp,sp,-24
 1010d40:	dfc00515 	stw	ra,20(sp)
 1010d44:	df000415 	stw	fp,16(sp)
 1010d48:	dc000315 	stw	r16,12(sp)
 1010d4c:	df000304 	addi	fp,sp,12
 1010d50:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1010d54:	00bffa04 	movi	r2,-24
 1010d58:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010d5c:	e03ffe15 	stw	zero,-8(fp)
 1010d60:	00002006 	br	1010de4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1010d64:	e13ffe17 	ldw	r4,-8(fp)
 1010d68:	04004074 	movhi	r16,257
 1010d6c:	840d9604 	addi	r16,r16,13912
 1010d70:	01400304 	movi	r5,12
 1010d74:	10096900 	call	1009690 <__mulsi3>
 1010d78:	1405883a 	add	r2,r2,r16
 1010d7c:	10800017 	ldw	r2,0(r2)
 1010d80:	1004c03a 	cmpne	r2,r2,zero
 1010d84:	1000141e 	bne	r2,zero,1010dd8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1010d88:	e13ffe17 	ldw	r4,-8(fp)
 1010d8c:	04004074 	movhi	r16,257
 1010d90:	840d9604 	addi	r16,r16,13912
 1010d94:	01400304 	movi	r5,12
 1010d98:	10096900 	call	1009690 <__mulsi3>
 1010d9c:	1407883a 	add	r3,r2,r16
 1010da0:	e0bfff17 	ldw	r2,-4(fp)
 1010da4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1010da8:	00804074 	movhi	r2,257
 1010dac:	10922e04 	addi	r2,r2,18616
 1010db0:	10c00017 	ldw	r3,0(r2)
 1010db4:	e0bffe17 	ldw	r2,-8(fp)
 1010db8:	1880040e 	bge	r3,r2,1010dcc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1010dbc:	00c04074 	movhi	r3,257
 1010dc0:	18d22e04 	addi	r3,r3,18616
 1010dc4:	e0bffe17 	ldw	r2,-8(fp)
 1010dc8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1010dcc:	e0bffe17 	ldw	r2,-8(fp)
 1010dd0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1010dd4:	00000606 	br	1010df0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010dd8:	e0bffe17 	ldw	r2,-8(fp)
 1010ddc:	10800044 	addi	r2,r2,1
 1010de0:	e0bffe15 	stw	r2,-8(fp)
 1010de4:	e0bffe17 	ldw	r2,-8(fp)
 1010de8:	10800810 	cmplti	r2,r2,32
 1010dec:	103fdd1e 	bne	r2,zero,1010d64 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1010df0:	e0bffd17 	ldw	r2,-12(fp)
}
 1010df4:	e037883a 	mov	sp,fp
 1010df8:	dfc00217 	ldw	ra,8(sp)
 1010dfc:	df000117 	ldw	fp,4(sp)
 1010e00:	dc000017 	ldw	r16,0(sp)
 1010e04:	dec00304 	addi	sp,sp,12
 1010e08:	f800283a 	ret

01010e0c <__assert_func>:
 1010e0c:	00804074 	movhi	r2,257
 1010e10:	10922404 	addi	r2,r2,18576
 1010e14:	10c00017 	ldw	r3,0(r2)
 1010e18:	defffc04 	addi	sp,sp,-16
 1010e1c:	2011883a 	mov	r8,r4
 1010e20:	dfc00315 	stw	ra,12(sp)
 1010e24:	3005883a 	mov	r2,r6
 1010e28:	2813883a 	mov	r9,r5
 1010e2c:	19000317 	ldw	r4,12(r3)
 1010e30:	30000b26 	beq	r6,zero,1010e60 <__assert_func+0x54>
 1010e34:	00c04074 	movhi	r3,257
 1010e38:	18cb7b04 	addi	r3,r3,11756
 1010e3c:	380d883a 	mov	r6,r7
 1010e40:	01404074 	movhi	r5,257
 1010e44:	294b6f04 	addi	r5,r5,11708
 1010e48:	400f883a 	mov	r7,r8
 1010e4c:	da400015 	stw	r9,0(sp)
 1010e50:	d8c00115 	stw	r3,4(sp)
 1010e54:	d8800215 	stw	r2,8(sp)
 1010e58:	1010ed00 	call	1010ed0 <fiprintf>
 1010e5c:	10112b40 	call	10112b4 <abort>
 1010e60:	00804074 	movhi	r2,257
 1010e64:	108b7e04 	addi	r2,r2,11768
 1010e68:	1007883a 	mov	r3,r2
 1010e6c:	003ff306 	br	1010e3c <__assert_func+0x30>

01010e70 <__assert>:
 1010e70:	deffff04 	addi	sp,sp,-4
 1010e74:	300f883a 	mov	r7,r6
 1010e78:	000d883a 	mov	r6,zero
 1010e7c:	dfc00015 	stw	ra,0(sp)
 1010e80:	1010e0c0 	call	1010e0c <__assert_func>

01010e84 <atexit>:
 1010e84:	200b883a 	mov	r5,r4
 1010e88:	000d883a 	mov	r6,zero
 1010e8c:	0009883a 	mov	r4,zero
 1010e90:	000f883a 	mov	r7,zero
 1010e94:	1010fcc1 	jmpi	1010fcc <__register_exitproc>

01010e98 <exit>:
 1010e98:	defffe04 	addi	sp,sp,-8
 1010e9c:	000b883a 	mov	r5,zero
 1010ea0:	dc000015 	stw	r16,0(sp)
 1010ea4:	dfc00115 	stw	ra,4(sp)
 1010ea8:	2021883a 	mov	r16,r4
 1010eac:	10111040 	call	1011104 <__call_exitprocs>
 1010eb0:	00804074 	movhi	r2,257
 1010eb4:	10922504 	addi	r2,r2,18580
 1010eb8:	11000017 	ldw	r4,0(r2)
 1010ebc:	20800f17 	ldw	r2,60(r4)
 1010ec0:	10000126 	beq	r2,zero,1010ec8 <exit+0x30>
 1010ec4:	103ee83a 	callr	r2
 1010ec8:	8009883a 	mov	r4,r16
 1010ecc:	10127980 	call	1012798 <_exit>

01010ed0 <fiprintf>:
 1010ed0:	defffc04 	addi	sp,sp,-16
 1010ed4:	2007883a 	mov	r3,r4
 1010ed8:	dfc00115 	stw	ra,4(sp)
 1010edc:	d9800215 	stw	r6,8(sp)
 1010ee0:	d9c00315 	stw	r7,12(sp)
 1010ee4:	01804074 	movhi	r6,257
 1010ee8:	31922404 	addi	r6,r6,18576
 1010eec:	31000017 	ldw	r4,0(r6)
 1010ef0:	d8800204 	addi	r2,sp,8
 1010ef4:	280d883a 	mov	r6,r5
 1010ef8:	100f883a 	mov	r7,r2
 1010efc:	180b883a 	mov	r5,r3
 1010f00:	d8800015 	stw	r2,0(sp)
 1010f04:	1010fb00 	call	1010fb0 <_vfiprintf_r>
 1010f08:	dfc00117 	ldw	ra,4(sp)
 1010f0c:	dec00404 	addi	sp,sp,16
 1010f10:	f800283a 	ret

01010f14 <_fiprintf_r>:
 1010f14:	defffd04 	addi	sp,sp,-12
 1010f18:	dfc00115 	stw	ra,4(sp)
 1010f1c:	d9c00215 	stw	r7,8(sp)
 1010f20:	d8800204 	addi	r2,sp,8
 1010f24:	100f883a 	mov	r7,r2
 1010f28:	d8800015 	stw	r2,0(sp)
 1010f2c:	1010fb00 	call	1010fb0 <_vfiprintf_r>
 1010f30:	dfc00117 	ldw	ra,4(sp)
 1010f34:	dec00304 	addi	sp,sp,12
 1010f38:	f800283a 	ret

01010f3c <memcmp>:
 1010f3c:	00c000c4 	movi	r3,3
 1010f40:	1980032e 	bgeu	r3,r6,1010f50 <memcmp+0x14>
 1010f44:	2144b03a 	or	r2,r4,r5
 1010f48:	10c4703a 	and	r2,r2,r3
 1010f4c:	10000f26 	beq	r2,zero,1010f8c <memcmp+0x50>
 1010f50:	31ffffc4 	addi	r7,r6,-1
 1010f54:	3000061e 	bne	r6,zero,1010f70 <memcmp+0x34>
 1010f58:	00000a06 	br	1010f84 <memcmp+0x48>
 1010f5c:	39ffffc4 	addi	r7,r7,-1
 1010f60:	00bfffc4 	movi	r2,-1
 1010f64:	21000044 	addi	r4,r4,1
 1010f68:	29400044 	addi	r5,r5,1
 1010f6c:	38800526 	beq	r7,r2,1010f84 <memcmp+0x48>
 1010f70:	20c00003 	ldbu	r3,0(r4)
 1010f74:	28800003 	ldbu	r2,0(r5)
 1010f78:	18bff826 	beq	r3,r2,1010f5c <memcmp+0x20>
 1010f7c:	1885c83a 	sub	r2,r3,r2
 1010f80:	f800283a 	ret
 1010f84:	0005883a 	mov	r2,zero
 1010f88:	f800283a 	ret
 1010f8c:	180f883a 	mov	r7,r3
 1010f90:	20c00017 	ldw	r3,0(r4)
 1010f94:	28800017 	ldw	r2,0(r5)
 1010f98:	18bfed1e 	bne	r3,r2,1010f50 <memcmp+0x14>
 1010f9c:	31bfff04 	addi	r6,r6,-4
 1010fa0:	21000104 	addi	r4,r4,4
 1010fa4:	29400104 	addi	r5,r5,4
 1010fa8:	39bff936 	bltu	r7,r6,1010f90 <memcmp+0x54>
 1010fac:	003fe806 	br	1010f50 <memcmp+0x14>

01010fb0 <_vfiprintf_r>:
 1010fb0:	defffe04 	addi	sp,sp,-8
 1010fb4:	dfc00115 	stw	ra,4(sp)
 1010fb8:	d9c00015 	stw	r7,0(sp)
 1010fbc:	10116740 	call	1011674 <___vfiprintf_internal_r>
 1010fc0:	dfc00117 	ldw	ra,4(sp)
 1010fc4:	dec00204 	addi	sp,sp,8
 1010fc8:	f800283a 	ret

01010fcc <__register_exitproc>:
 1010fcc:	defffa04 	addi	sp,sp,-24
 1010fd0:	00804074 	movhi	r2,257
 1010fd4:	10922504 	addi	r2,r2,18580
 1010fd8:	dc000015 	stw	r16,0(sp)
 1010fdc:	14000017 	ldw	r16,0(r2)
 1010fe0:	dd000415 	stw	r20,16(sp)
 1010fe4:	2829883a 	mov	r20,r5
 1010fe8:	81405217 	ldw	r5,328(r16)
 1010fec:	dcc00315 	stw	r19,12(sp)
 1010ff0:	dc800215 	stw	r18,8(sp)
 1010ff4:	dc400115 	stw	r17,4(sp)
 1010ff8:	dfc00515 	stw	ra,20(sp)
 1010ffc:	2023883a 	mov	r17,r4
 1011000:	3027883a 	mov	r19,r6
 1011004:	3825883a 	mov	r18,r7
 1011008:	28002526 	beq	r5,zero,10110a0 <__register_exitproc+0xd4>
 101100c:	29000117 	ldw	r4,4(r5)
 1011010:	008007c4 	movi	r2,31
 1011014:	11002716 	blt	r2,r4,10110b4 <__register_exitproc+0xe8>
 1011018:	8800101e 	bne	r17,zero,101105c <__register_exitproc+0x90>
 101101c:	2105883a 	add	r2,r4,r4
 1011020:	1085883a 	add	r2,r2,r2
 1011024:	20c00044 	addi	r3,r4,1
 1011028:	1145883a 	add	r2,r2,r5
 101102c:	0009883a 	mov	r4,zero
 1011030:	15000215 	stw	r20,8(r2)
 1011034:	28c00115 	stw	r3,4(r5)
 1011038:	2005883a 	mov	r2,r4
 101103c:	dfc00517 	ldw	ra,20(sp)
 1011040:	dd000417 	ldw	r20,16(sp)
 1011044:	dcc00317 	ldw	r19,12(sp)
 1011048:	dc800217 	ldw	r18,8(sp)
 101104c:	dc400117 	ldw	r17,4(sp)
 1011050:	dc000017 	ldw	r16,0(sp)
 1011054:	dec00604 	addi	sp,sp,24
 1011058:	f800283a 	ret
 101105c:	29802204 	addi	r6,r5,136
 1011060:	00800044 	movi	r2,1
 1011064:	110e983a 	sll	r7,r2,r4
 1011068:	30c04017 	ldw	r3,256(r6)
 101106c:	2105883a 	add	r2,r4,r4
 1011070:	1085883a 	add	r2,r2,r2
 1011074:	1185883a 	add	r2,r2,r6
 1011078:	19c6b03a 	or	r3,r3,r7
 101107c:	14802015 	stw	r18,128(r2)
 1011080:	14c00015 	stw	r19,0(r2)
 1011084:	00800084 	movi	r2,2
 1011088:	30c04015 	stw	r3,256(r6)
 101108c:	88bfe31e 	bne	r17,r2,101101c <__register_exitproc+0x50>
 1011090:	30804117 	ldw	r2,260(r6)
 1011094:	11c4b03a 	or	r2,r2,r7
 1011098:	30804115 	stw	r2,260(r6)
 101109c:	003fdf06 	br	101101c <__register_exitproc+0x50>
 10110a0:	00804074 	movhi	r2,257
 10110a4:	109a9f04 	addi	r2,r2,27260
 10110a8:	100b883a 	mov	r5,r2
 10110ac:	80805215 	stw	r2,328(r16)
 10110b0:	003fd606 	br	101100c <__register_exitproc+0x40>
 10110b4:	00800034 	movhi	r2,0
 10110b8:	10800004 	addi	r2,r2,0
 10110bc:	1000021e 	bne	r2,zero,10110c8 <__register_exitproc+0xfc>
 10110c0:	013fffc4 	movi	r4,-1
 10110c4:	003fdc06 	br	1011038 <__register_exitproc+0x6c>
 10110c8:	01006404 	movi	r4,400
 10110cc:	103ee83a 	callr	r2
 10110d0:	1007883a 	mov	r3,r2
 10110d4:	103ffa26 	beq	r2,zero,10110c0 <__register_exitproc+0xf4>
 10110d8:	80805217 	ldw	r2,328(r16)
 10110dc:	180b883a 	mov	r5,r3
 10110e0:	18000115 	stw	zero,4(r3)
 10110e4:	18800015 	stw	r2,0(r3)
 10110e8:	80c05215 	stw	r3,328(r16)
 10110ec:	18006215 	stw	zero,392(r3)
 10110f0:	18006315 	stw	zero,396(r3)
 10110f4:	0009883a 	mov	r4,zero
 10110f8:	883fc826 	beq	r17,zero,101101c <__register_exitproc+0x50>
 10110fc:	003fd706 	br	101105c <__register_exitproc+0x90>

01011100 <register_fini>:
 1011100:	f800283a 	ret

01011104 <__call_exitprocs>:
 1011104:	00804074 	movhi	r2,257
 1011108:	10922504 	addi	r2,r2,18580
 101110c:	10800017 	ldw	r2,0(r2)
 1011110:	defff304 	addi	sp,sp,-52
 1011114:	df000b15 	stw	fp,44(sp)
 1011118:	d8800115 	stw	r2,4(sp)
 101111c:	00800034 	movhi	r2,0
 1011120:	10800004 	addi	r2,r2,0
 1011124:	1005003a 	cmpeq	r2,r2,zero
 1011128:	d8800215 	stw	r2,8(sp)
 101112c:	d8800117 	ldw	r2,4(sp)
 1011130:	dd400815 	stw	r21,32(sp)
 1011134:	dd000715 	stw	r20,28(sp)
 1011138:	10805204 	addi	r2,r2,328
 101113c:	dfc00c15 	stw	ra,48(sp)
 1011140:	ddc00a15 	stw	r23,40(sp)
 1011144:	dd800915 	stw	r22,36(sp)
 1011148:	dcc00615 	stw	r19,24(sp)
 101114c:	dc800515 	stw	r18,20(sp)
 1011150:	dc400415 	stw	r17,16(sp)
 1011154:	dc000315 	stw	r16,12(sp)
 1011158:	282b883a 	mov	r21,r5
 101115c:	2039883a 	mov	fp,r4
 1011160:	d8800015 	stw	r2,0(sp)
 1011164:	2829003a 	cmpeq	r20,r5,zero
 1011168:	d8800117 	ldw	r2,4(sp)
 101116c:	14405217 	ldw	r17,328(r2)
 1011170:	88001026 	beq	r17,zero,10111b4 <__call_exitprocs+0xb0>
 1011174:	ddc00017 	ldw	r23,0(sp)
 1011178:	88800117 	ldw	r2,4(r17)
 101117c:	8c802204 	addi	r18,r17,136
 1011180:	143fffc4 	addi	r16,r2,-1
 1011184:	80000916 	blt	r16,zero,10111ac <__call_exitprocs+0xa8>
 1011188:	05bfffc4 	movi	r22,-1
 101118c:	a000151e 	bne	r20,zero,10111e4 <__call_exitprocs+0xe0>
 1011190:	8409883a 	add	r4,r16,r16
 1011194:	2105883a 	add	r2,r4,r4
 1011198:	1485883a 	add	r2,r2,r18
 101119c:	10c02017 	ldw	r3,128(r2)
 10111a0:	a8c01126 	beq	r21,r3,10111e8 <__call_exitprocs+0xe4>
 10111a4:	843fffc4 	addi	r16,r16,-1
 10111a8:	85bff81e 	bne	r16,r22,101118c <__call_exitprocs+0x88>
 10111ac:	d8800217 	ldw	r2,8(sp)
 10111b0:	10003126 	beq	r2,zero,1011278 <__call_exitprocs+0x174>
 10111b4:	dfc00c17 	ldw	ra,48(sp)
 10111b8:	df000b17 	ldw	fp,44(sp)
 10111bc:	ddc00a17 	ldw	r23,40(sp)
 10111c0:	dd800917 	ldw	r22,36(sp)
 10111c4:	dd400817 	ldw	r21,32(sp)
 10111c8:	dd000717 	ldw	r20,28(sp)
 10111cc:	dcc00617 	ldw	r19,24(sp)
 10111d0:	dc800517 	ldw	r18,20(sp)
 10111d4:	dc400417 	ldw	r17,16(sp)
 10111d8:	dc000317 	ldw	r16,12(sp)
 10111dc:	dec00d04 	addi	sp,sp,52
 10111e0:	f800283a 	ret
 10111e4:	8409883a 	add	r4,r16,r16
 10111e8:	88c00117 	ldw	r3,4(r17)
 10111ec:	2105883a 	add	r2,r4,r4
 10111f0:	1445883a 	add	r2,r2,r17
 10111f4:	18ffffc4 	addi	r3,r3,-1
 10111f8:	11800217 	ldw	r6,8(r2)
 10111fc:	1c001526 	beq	r3,r16,1011254 <__call_exitprocs+0x150>
 1011200:	10000215 	stw	zero,8(r2)
 1011204:	303fe726 	beq	r6,zero,10111a4 <__call_exitprocs+0xa0>
 1011208:	00c00044 	movi	r3,1
 101120c:	1c06983a 	sll	r3,r3,r16
 1011210:	90804017 	ldw	r2,256(r18)
 1011214:	8cc00117 	ldw	r19,4(r17)
 1011218:	1884703a 	and	r2,r3,r2
 101121c:	10001426 	beq	r2,zero,1011270 <__call_exitprocs+0x16c>
 1011220:	90804117 	ldw	r2,260(r18)
 1011224:	1884703a 	and	r2,r3,r2
 1011228:	10000c1e 	bne	r2,zero,101125c <__call_exitprocs+0x158>
 101122c:	2105883a 	add	r2,r4,r4
 1011230:	1485883a 	add	r2,r2,r18
 1011234:	11400017 	ldw	r5,0(r2)
 1011238:	e009883a 	mov	r4,fp
 101123c:	303ee83a 	callr	r6
 1011240:	88800117 	ldw	r2,4(r17)
 1011244:	98bfc81e 	bne	r19,r2,1011168 <__call_exitprocs+0x64>
 1011248:	b8800017 	ldw	r2,0(r23)
 101124c:	147fd526 	beq	r2,r17,10111a4 <__call_exitprocs+0xa0>
 1011250:	003fc506 	br	1011168 <__call_exitprocs+0x64>
 1011254:	8c000115 	stw	r16,4(r17)
 1011258:	003fea06 	br	1011204 <__call_exitprocs+0x100>
 101125c:	2105883a 	add	r2,r4,r4
 1011260:	1485883a 	add	r2,r2,r18
 1011264:	11000017 	ldw	r4,0(r2)
 1011268:	303ee83a 	callr	r6
 101126c:	003ff406 	br	1011240 <__call_exitprocs+0x13c>
 1011270:	303ee83a 	callr	r6
 1011274:	003ff206 	br	1011240 <__call_exitprocs+0x13c>
 1011278:	88800117 	ldw	r2,4(r17)
 101127c:	1000081e 	bne	r2,zero,10112a0 <__call_exitprocs+0x19c>
 1011280:	89000017 	ldw	r4,0(r17)
 1011284:	20000726 	beq	r4,zero,10112a4 <__call_exitprocs+0x1a0>
 1011288:	b9000015 	stw	r4,0(r23)
 101128c:	8809883a 	mov	r4,r17
 1011290:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011294:	bc400017 	ldw	r17,0(r23)
 1011298:	883fb71e 	bne	r17,zero,1011178 <__call_exitprocs+0x74>
 101129c:	003fc506 	br	10111b4 <__call_exitprocs+0xb0>
 10112a0:	89000017 	ldw	r4,0(r17)
 10112a4:	882f883a 	mov	r23,r17
 10112a8:	2023883a 	mov	r17,r4
 10112ac:	883fb21e 	bne	r17,zero,1011178 <__call_exitprocs+0x74>
 10112b0:	003fc006 	br	10111b4 <__call_exitprocs+0xb0>

010112b4 <abort>:
 10112b4:	deffff04 	addi	sp,sp,-4
 10112b8:	01000184 	movi	r4,6
 10112bc:	dfc00015 	stw	ra,0(sp)
 10112c0:	10113980 	call	1011398 <raise>
 10112c4:	01000044 	movi	r4,1
 10112c8:	10127980 	call	1012798 <_exit>

010112cc <_raise_r>:
 10112cc:	defffd04 	addi	sp,sp,-12
 10112d0:	008007c4 	movi	r2,31
 10112d4:	dc400115 	stw	r17,4(sp)
 10112d8:	dc000015 	stw	r16,0(sp)
 10112dc:	dfc00215 	stw	ra,8(sp)
 10112e0:	2821883a 	mov	r16,r5
 10112e4:	2023883a 	mov	r17,r4
 10112e8:	11402736 	bltu	r2,r5,1011388 <_raise_r+0xbc>
 10112ec:	20c0b717 	ldw	r3,732(r4)
 10112f0:	18001326 	beq	r3,zero,1011340 <_raise_r+0x74>
 10112f4:	2945883a 	add	r2,r5,r5
 10112f8:	1085883a 	add	r2,r2,r2
 10112fc:	188b883a 	add	r5,r3,r2
 1011300:	28c00017 	ldw	r3,0(r5)
 1011304:	18000e26 	beq	r3,zero,1011340 <_raise_r+0x74>
 1011308:	01000044 	movi	r4,1
 101130c:	19000526 	beq	r3,r4,1011324 <_raise_r+0x58>
 1011310:	00bfffc4 	movi	r2,-1
 1011314:	18801326 	beq	r3,r2,1011364 <_raise_r+0x98>
 1011318:	28000015 	stw	zero,0(r5)
 101131c:	8009883a 	mov	r4,r16
 1011320:	183ee83a 	callr	r3
 1011324:	0007883a 	mov	r3,zero
 1011328:	1805883a 	mov	r2,r3
 101132c:	dfc00217 	ldw	ra,8(sp)
 1011330:	dc400117 	ldw	r17,4(sp)
 1011334:	dc000017 	ldw	r16,0(sp)
 1011338:	dec00304 	addi	sp,sp,12
 101133c:	f800283a 	ret
 1011340:	10115a40 	call	10115a4 <_getpid_r>
 1011344:	100b883a 	mov	r5,r2
 1011348:	8809883a 	mov	r4,r17
 101134c:	800d883a 	mov	r6,r16
 1011350:	dfc00217 	ldw	ra,8(sp)
 1011354:	dc400117 	ldw	r17,4(sp)
 1011358:	dc000017 	ldw	r16,0(sp)
 101135c:	dec00304 	addi	sp,sp,12
 1011360:	10115a81 	jmpi	10115a8 <_kill_r>
 1011364:	2007883a 	mov	r3,r4
 1011368:	00800584 	movi	r2,22
 101136c:	88800015 	stw	r2,0(r17)
 1011370:	1805883a 	mov	r2,r3
 1011374:	dfc00217 	ldw	ra,8(sp)
 1011378:	dc400117 	ldw	r17,4(sp)
 101137c:	dc000017 	ldw	r16,0(sp)
 1011380:	dec00304 	addi	sp,sp,12
 1011384:	f800283a 	ret
 1011388:	00800584 	movi	r2,22
 101138c:	00ffffc4 	movi	r3,-1
 1011390:	20800015 	stw	r2,0(r4)
 1011394:	003fe406 	br	1011328 <_raise_r+0x5c>

01011398 <raise>:
 1011398:	00804074 	movhi	r2,257
 101139c:	10922404 	addi	r2,r2,18576
 10113a0:	200b883a 	mov	r5,r4
 10113a4:	11000017 	ldw	r4,0(r2)
 10113a8:	10112cc1 	jmpi	10112cc <_raise_r>

010113ac <_init_signal_r>:
 10113ac:	2080b717 	ldw	r2,732(r4)
 10113b0:	defffe04 	addi	sp,sp,-8
 10113b4:	dc000015 	stw	r16,0(sp)
 10113b8:	dfc00115 	stw	ra,4(sp)
 10113bc:	2021883a 	mov	r16,r4
 10113c0:	10000526 	beq	r2,zero,10113d8 <_init_signal_r+0x2c>
 10113c4:	0005883a 	mov	r2,zero
 10113c8:	dfc00117 	ldw	ra,4(sp)
 10113cc:	dc000017 	ldw	r16,0(sp)
 10113d0:	dec00204 	addi	sp,sp,8
 10113d4:	f800283a 	ret
 10113d8:	01402004 	movi	r5,128
 10113dc:	1004f000 	call	1004f00 <_malloc_r>
 10113e0:	1009883a 	mov	r4,r2
 10113e4:	8080b715 	stw	r2,732(r16)
 10113e8:	10000726 	beq	r2,zero,1011408 <_init_signal_r+0x5c>
 10113ec:	0007883a 	mov	r3,zero
 10113f0:	01402004 	movi	r5,128
 10113f4:	20c5883a 	add	r2,r4,r3
 10113f8:	18c00104 	addi	r3,r3,4
 10113fc:	10000015 	stw	zero,0(r2)
 1011400:	197ffc1e 	bne	r3,r5,10113f4 <_init_signal_r+0x48>
 1011404:	003fef06 	br	10113c4 <_init_signal_r+0x18>
 1011408:	00bfffc4 	movi	r2,-1
 101140c:	003fee06 	br	10113c8 <_init_signal_r+0x1c>

01011410 <_init_signal>:
 1011410:	00804074 	movhi	r2,257
 1011414:	10922404 	addi	r2,r2,18576
 1011418:	11000017 	ldw	r4,0(r2)
 101141c:	10113ac1 	jmpi	10113ac <_init_signal_r>

01011420 <__sigtramp_r>:
 1011420:	defffd04 	addi	sp,sp,-12
 1011424:	008007c4 	movi	r2,31
 1011428:	dc000115 	stw	r16,4(sp)
 101142c:	dfc00215 	stw	ra,8(sp)
 1011430:	2021883a 	mov	r16,r4
 1011434:	11401336 	bltu	r2,r5,1011484 <__sigtramp_r+0x64>
 1011438:	20c0b717 	ldw	r3,732(r4)
 101143c:	18001f26 	beq	r3,zero,10114bc <__sigtramp_r+0x9c>
 1011440:	2945883a 	add	r2,r5,r5
 1011444:	1085883a 	add	r2,r2,r2
 1011448:	10c9883a 	add	r4,r2,r3
 101144c:	20c00017 	ldw	r3,0(r4)
 1011450:	18001626 	beq	r3,zero,10114ac <__sigtramp_r+0x8c>
 1011454:	00bfffc4 	movi	r2,-1
 1011458:	18801626 	beq	r3,r2,10114b4 <__sigtramp_r+0x94>
 101145c:	00800044 	movi	r2,1
 1011460:	18800d26 	beq	r3,r2,1011498 <__sigtramp_r+0x78>
 1011464:	20000015 	stw	zero,0(r4)
 1011468:	2809883a 	mov	r4,r5
 101146c:	183ee83a 	callr	r3
 1011470:	0005883a 	mov	r2,zero
 1011474:	dfc00217 	ldw	ra,8(sp)
 1011478:	dc000117 	ldw	r16,4(sp)
 101147c:	dec00304 	addi	sp,sp,12
 1011480:	f800283a 	ret
 1011484:	00bfffc4 	movi	r2,-1
 1011488:	dfc00217 	ldw	ra,8(sp)
 101148c:	dc000117 	ldw	r16,4(sp)
 1011490:	dec00304 	addi	sp,sp,12
 1011494:	f800283a 	ret
 1011498:	008000c4 	movi	r2,3
 101149c:	dfc00217 	ldw	ra,8(sp)
 10114a0:	dc000117 	ldw	r16,4(sp)
 10114a4:	dec00304 	addi	sp,sp,12
 10114a8:	f800283a 	ret
 10114ac:	00800044 	movi	r2,1
 10114b0:	003ff006 	br	1011474 <__sigtramp_r+0x54>
 10114b4:	00800084 	movi	r2,2
 10114b8:	003fee06 	br	1011474 <__sigtramp_r+0x54>
 10114bc:	d9400015 	stw	r5,0(sp)
 10114c0:	10113ac0 	call	10113ac <_init_signal_r>
 10114c4:	d9400017 	ldw	r5,0(sp)
 10114c8:	103fee1e 	bne	r2,zero,1011484 <__sigtramp_r+0x64>
 10114cc:	80c0b717 	ldw	r3,732(r16)
 10114d0:	003fdb06 	br	1011440 <__sigtramp_r+0x20>

010114d4 <__sigtramp>:
 10114d4:	00804074 	movhi	r2,257
 10114d8:	10922404 	addi	r2,r2,18576
 10114dc:	200b883a 	mov	r5,r4
 10114e0:	11000017 	ldw	r4,0(r2)
 10114e4:	10114201 	jmpi	1011420 <__sigtramp_r>

010114e8 <_signal_r>:
 10114e8:	defffc04 	addi	sp,sp,-16
 10114ec:	008007c4 	movi	r2,31
 10114f0:	dc800215 	stw	r18,8(sp)
 10114f4:	dc400115 	stw	r17,4(sp)
 10114f8:	dc000015 	stw	r16,0(sp)
 10114fc:	dfc00315 	stw	ra,12(sp)
 1011500:	2823883a 	mov	r17,r5
 1011504:	00ffffc4 	movi	r3,-1
 1011508:	3025883a 	mov	r18,r6
 101150c:	2021883a 	mov	r16,r4
 1011510:	1140092e 	bgeu	r2,r5,1011538 <_signal_r+0x50>
 1011514:	00800584 	movi	r2,22
 1011518:	20800015 	stw	r2,0(r4)
 101151c:	1805883a 	mov	r2,r3
 1011520:	dfc00317 	ldw	ra,12(sp)
 1011524:	dc800217 	ldw	r18,8(sp)
 1011528:	dc400117 	ldw	r17,4(sp)
 101152c:	dc000017 	ldw	r16,0(sp)
 1011530:	dec00404 	addi	sp,sp,16
 1011534:	f800283a 	ret
 1011538:	2140b717 	ldw	r5,732(r4)
 101153c:	28000c26 	beq	r5,zero,1011570 <_signal_r+0x88>
 1011540:	8c45883a 	add	r2,r17,r17
 1011544:	1085883a 	add	r2,r2,r2
 1011548:	1145883a 	add	r2,r2,r5
 101154c:	10c00017 	ldw	r3,0(r2)
 1011550:	14800015 	stw	r18,0(r2)
 1011554:	1805883a 	mov	r2,r3
 1011558:	dfc00317 	ldw	ra,12(sp)
 101155c:	dc800217 	ldw	r18,8(sp)
 1011560:	dc400117 	ldw	r17,4(sp)
 1011564:	dc000017 	ldw	r16,0(sp)
 1011568:	dec00404 	addi	sp,sp,16
 101156c:	f800283a 	ret
 1011570:	10113ac0 	call	10113ac <_init_signal_r>
 1011574:	1000021e 	bne	r2,zero,1011580 <_signal_r+0x98>
 1011578:	8140b717 	ldw	r5,732(r16)
 101157c:	003ff006 	br	1011540 <_signal_r+0x58>
 1011580:	00ffffc4 	movi	r3,-1
 1011584:	003fe506 	br	101151c <_signal_r+0x34>

01011588 <signal>:
 1011588:	01804074 	movhi	r6,257
 101158c:	31922404 	addi	r6,r6,18576
 1011590:	2007883a 	mov	r3,r4
 1011594:	31000017 	ldw	r4,0(r6)
 1011598:	280d883a 	mov	r6,r5
 101159c:	180b883a 	mov	r5,r3
 10115a0:	10114e81 	jmpi	10114e8 <_signal_r>

010115a4 <_getpid_r>:
 10115a4:	10127b81 	jmpi	10127b8 <getpid>

010115a8 <_kill_r>:
 10115a8:	defffd04 	addi	sp,sp,-12
 10115ac:	dc000015 	stw	r16,0(sp)
 10115b0:	04004074 	movhi	r16,257
 10115b4:	8418e704 	addi	r16,r16,25500
 10115b8:	dc400115 	stw	r17,4(sp)
 10115bc:	80000015 	stw	zero,0(r16)
 10115c0:	2023883a 	mov	r17,r4
 10115c4:	2809883a 	mov	r4,r5
 10115c8:	300b883a 	mov	r5,r6
 10115cc:	dfc00215 	stw	ra,8(sp)
 10115d0:	10127d80 	call	10127d8 <kill>
 10115d4:	1007883a 	mov	r3,r2
 10115d8:	00bfffc4 	movi	r2,-1
 10115dc:	18800626 	beq	r3,r2,10115f8 <_kill_r+0x50>
 10115e0:	1805883a 	mov	r2,r3
 10115e4:	dfc00217 	ldw	ra,8(sp)
 10115e8:	dc400117 	ldw	r17,4(sp)
 10115ec:	dc000017 	ldw	r16,0(sp)
 10115f0:	dec00304 	addi	sp,sp,12
 10115f4:	f800283a 	ret
 10115f8:	80800017 	ldw	r2,0(r16)
 10115fc:	103ff826 	beq	r2,zero,10115e0 <_kill_r+0x38>
 1011600:	88800015 	stw	r2,0(r17)
 1011604:	1805883a 	mov	r2,r3
 1011608:	dfc00217 	ldw	ra,8(sp)
 101160c:	dc400117 	ldw	r17,4(sp)
 1011610:	dc000017 	ldw	r16,0(sp)
 1011614:	dec00304 	addi	sp,sp,12
 1011618:	f800283a 	ret

0101161c <__sprint_r>:
 101161c:	30800217 	ldw	r2,8(r6)
 1011620:	defffe04 	addi	sp,sp,-8
 1011624:	dc000015 	stw	r16,0(sp)
 1011628:	dfc00115 	stw	ra,4(sp)
 101162c:	3021883a 	mov	r16,r6
 1011630:	0007883a 	mov	r3,zero
 1011634:	1000061e 	bne	r2,zero,1011650 <__sprint_r+0x34>
 1011638:	1805883a 	mov	r2,r3
 101163c:	30000115 	stw	zero,4(r6)
 1011640:	dfc00117 	ldw	ra,4(sp)
 1011644:	dc000017 	ldw	r16,0(sp)
 1011648:	dec00204 	addi	sp,sp,8
 101164c:	f800283a 	ret
 1011650:	100468c0 	call	100468c <__sfvwrite_r>
 1011654:	1007883a 	mov	r3,r2
 1011658:	1805883a 	mov	r2,r3
 101165c:	80000115 	stw	zero,4(r16)
 1011660:	80000215 	stw	zero,8(r16)
 1011664:	dfc00117 	ldw	ra,4(sp)
 1011668:	dc000017 	ldw	r16,0(sp)
 101166c:	dec00204 	addi	sp,sp,8
 1011670:	f800283a 	ret

01011674 <___vfiprintf_internal_r>:
 1011674:	defeb604 	addi	sp,sp,-1320
 1011678:	dd814615 	stw	r22,1304(sp)
 101167c:	dd414515 	stw	r21,1300(sp)
 1011680:	dc014015 	stw	r16,1280(sp)
 1011684:	dfc14915 	stw	ra,1316(sp)
 1011688:	df014815 	stw	fp,1312(sp)
 101168c:	ddc14715 	stw	r23,1308(sp)
 1011690:	dd014415 	stw	r20,1296(sp)
 1011694:	dcc14315 	stw	r19,1292(sp)
 1011698:	dc814215 	stw	r18,1288(sp)
 101169c:	dc414115 	stw	r17,1284(sp)
 10116a0:	202d883a 	mov	r22,r4
 10116a4:	282b883a 	mov	r21,r5
 10116a8:	3021883a 	mov	r16,r6
 10116ac:	20000226 	beq	r4,zero,10116b8 <___vfiprintf_internal_r+0x44>
 10116b0:	20800e17 	ldw	r2,56(r4)
 10116b4:	1001bc26 	beq	r2,zero,1011da8 <___vfiprintf_internal_r+0x734>
 10116b8:	a880030b 	ldhu	r2,12(r21)
 10116bc:	1080020c 	andi	r2,r2,8
 10116c0:	1001cb26 	beq	r2,zero,1011df0 <___vfiprintf_internal_r+0x77c>
 10116c4:	a8800417 	ldw	r2,16(r21)
 10116c8:	1001c926 	beq	r2,zero,1011df0 <___vfiprintf_internal_r+0x77c>
 10116cc:	aa00030b 	ldhu	r8,12(r21)
 10116d0:	00800284 	movi	r2,10
 10116d4:	40c0068c 	andi	r3,r8,26
 10116d8:	18802f1e 	bne	r3,r2,1011798 <___vfiprintf_internal_r+0x124>
 10116dc:	a880038f 	ldh	r2,14(r21)
 10116e0:	10002d16 	blt	r2,zero,1011798 <___vfiprintf_internal_r+0x124>
 10116e4:	aa40038b 	ldhu	r9,14(r21)
 10116e8:	aa800717 	ldw	r10,28(r21)
 10116ec:	aac00917 	ldw	r11,36(r21)
 10116f0:	dc401e04 	addi	r17,sp,120
 10116f4:	d8803504 	addi	r2,sp,212
 10116f8:	00c10004 	movi	r3,1024
 10116fc:	423fff4c 	andi	r8,r8,65533
 1011700:	800d883a 	mov	r6,r16
 1011704:	b009883a 	mov	r4,r22
 1011708:	880b883a 	mov	r5,r17
 101170c:	da00210d 	sth	r8,132(sp)
 1011710:	da40218d 	sth	r9,134(sp)
 1011714:	da802515 	stw	r10,148(sp)
 1011718:	dac02715 	stw	r11,156(sp)
 101171c:	d8802215 	stw	r2,136(sp)
 1011720:	d8c02315 	stw	r3,140(sp)
 1011724:	d8801e15 	stw	r2,120(sp)
 1011728:	d8c02015 	stw	r3,128(sp)
 101172c:	d8002415 	stw	zero,144(sp)
 1011730:	10116740 	call	1011674 <___vfiprintf_internal_r>
 1011734:	d8813a15 	stw	r2,1256(sp)
 1011738:	10000416 	blt	r2,zero,101174c <___vfiprintf_internal_r+0xd8>
 101173c:	b009883a 	mov	r4,r22
 1011740:	880b883a 	mov	r5,r17
 1011744:	1003d280 	call	1003d28 <_fflush_r>
 1011748:	1001b01e 	bne	r2,zero,1011e0c <___vfiprintf_internal_r+0x798>
 101174c:	d880210b 	ldhu	r2,132(sp)
 1011750:	1080100c 	andi	r2,r2,64
 1011754:	10000326 	beq	r2,zero,1011764 <___vfiprintf_internal_r+0xf0>
 1011758:	a880030b 	ldhu	r2,12(r21)
 101175c:	10801014 	ori	r2,r2,64
 1011760:	a880030d 	sth	r2,12(r21)
 1011764:	d8813a17 	ldw	r2,1256(sp)
 1011768:	dfc14917 	ldw	ra,1316(sp)
 101176c:	df014817 	ldw	fp,1312(sp)
 1011770:	ddc14717 	ldw	r23,1308(sp)
 1011774:	dd814617 	ldw	r22,1304(sp)
 1011778:	dd414517 	ldw	r21,1300(sp)
 101177c:	dd014417 	ldw	r20,1296(sp)
 1011780:	dcc14317 	ldw	r19,1292(sp)
 1011784:	dc814217 	ldw	r18,1288(sp)
 1011788:	dc414117 	ldw	r17,1284(sp)
 101178c:	dc014017 	ldw	r16,1280(sp)
 1011790:	dec14a04 	addi	sp,sp,1320
 1011794:	f800283a 	ret
 1011798:	d8c00e04 	addi	r3,sp,56
 101179c:	8029883a 	mov	r20,r16
 10117a0:	d8c00115 	stw	r3,4(sp)
 10117a4:	d8000315 	stw	zero,12(sp)
 10117a8:	d8000215 	stw	zero,8(sp)
 10117ac:	1825883a 	mov	r18,r3
 10117b0:	d8013a15 	stw	zero,1256(sp)
 10117b4:	d8013615 	stw	zero,1240(sp)
 10117b8:	a0800007 	ldb	r2,0(r20)
 10117bc:	10001926 	beq	r2,zero,1011824 <___vfiprintf_internal_r+0x1b0>
 10117c0:	00c00944 	movi	r3,37
 10117c4:	10c01726 	beq	r2,r3,1011824 <___vfiprintf_internal_r+0x1b0>
 10117c8:	a021883a 	mov	r16,r20
 10117cc:	00000106 	br	10117d4 <___vfiprintf_internal_r+0x160>
 10117d0:	10c00326 	beq	r2,r3,10117e0 <___vfiprintf_internal_r+0x16c>
 10117d4:	84000044 	addi	r16,r16,1
 10117d8:	80800007 	ldb	r2,0(r16)
 10117dc:	103ffc1e 	bne	r2,zero,10117d0 <___vfiprintf_internal_r+0x15c>
 10117e0:	8523c83a 	sub	r17,r16,r20
 10117e4:	88000e26 	beq	r17,zero,1011820 <___vfiprintf_internal_r+0x1ac>
 10117e8:	d9400317 	ldw	r5,12(sp)
 10117ec:	d9000217 	ldw	r4,8(sp)
 10117f0:	008001c4 	movi	r2,7
 10117f4:	2c4b883a 	add	r5,r5,r17
 10117f8:	21000044 	addi	r4,r4,1
 10117fc:	95000015 	stw	r20,0(r18)
 1011800:	d9400315 	stw	r5,12(sp)
 1011804:	94400115 	stw	r17,4(r18)
 1011808:	d9000215 	stw	r4,8(sp)
 101180c:	1101e816 	blt	r2,r4,1011fb0 <___vfiprintf_internal_r+0x93c>
 1011810:	94800204 	addi	r18,r18,8
 1011814:	d9013a17 	ldw	r4,1256(sp)
 1011818:	2449883a 	add	r4,r4,r17
 101181c:	d9013a15 	stw	r4,1256(sp)
 1011820:	8029883a 	mov	r20,r16
 1011824:	a0800007 	ldb	r2,0(r20)
 1011828:	10012e26 	beq	r2,zero,1011ce4 <___vfiprintf_internal_r+0x670>
 101182c:	a5000044 	addi	r20,r20,1
 1011830:	d8000005 	stb	zero,0(sp)
 1011834:	a0c00007 	ldb	r3,0(r20)
 1011838:	05ffffc4 	movi	r23,-1
 101183c:	d8013915 	stw	zero,1252(sp)
 1011840:	d8013b15 	stw	zero,1260(sp)
 1011844:	1827883a 	mov	r19,r3
 1011848:	a5000044 	addi	r20,r20,1
 101184c:	98fff804 	addi	r3,r19,-32
 1011850:	00801604 	movi	r2,88
 1011854:	10c06036 	bltu	r2,r3,10119d8 <___vfiprintf_internal_r+0x364>
 1011858:	18c5883a 	add	r2,r3,r3
 101185c:	1085883a 	add	r2,r2,r2
 1011860:	00c04074 	movhi	r3,257
 1011864:	18c61d04 	addi	r3,r3,6260
 1011868:	10c5883a 	add	r2,r2,r3
 101186c:	11000017 	ldw	r4,0(r2)
 1011870:	2000683a 	jmp	r4
 1011874:	010120dc 	xori	r4,zero,1155
 1011878:	010119d8 	cmpnei	r4,zero,1127
 101187c:	010119d8 	cmpnei	r4,zero,1127
 1011880:	010121a0 	cmpeqi	r4,zero,1158
 1011884:	010119d8 	cmpnei	r4,zero,1127
 1011888:	010119d8 	cmpnei	r4,zero,1127
 101188c:	010119d8 	cmpnei	r4,zero,1127
 1011890:	010119d8 	cmpnei	r4,zero,1127
 1011894:	010119d8 	cmpnei	r4,zero,1127
 1011898:	010119d8 	cmpnei	r4,zero,1127
 101189c:	01012064 	muli	r4,zero,1153
 10118a0:	010121b4 	movhi	r4,1158
 10118a4:	010119d8 	cmpnei	r4,zero,1127
 10118a8:	0101207c 	xorhi	r4,zero,1153
 10118ac:	01012140 	call	101214 <__alt_mem_onchip_memory2_0+0x101214>
 10118b0:	010119d8 	cmpnei	r4,zero,1127
 10118b4:	0101212c 	andhi	r4,zero,1156
 10118b8:	010120f4 	movhi	r4,1155
 10118bc:	010120f4 	movhi	r4,1155
 10118c0:	010120f4 	movhi	r4,1155
 10118c4:	010120f4 	movhi	r4,1155
 10118c8:	010120f4 	movhi	r4,1155
 10118cc:	010120f4 	movhi	r4,1155
 10118d0:	010120f4 	movhi	r4,1155
 10118d4:	010120f4 	movhi	r4,1155
 10118d8:	010120f4 	movhi	r4,1155
 10118dc:	010119d8 	cmpnei	r4,zero,1127
 10118e0:	010119d8 	cmpnei	r4,zero,1127
 10118e4:	010119d8 	cmpnei	r4,zero,1127
 10118e8:	010119d8 	cmpnei	r4,zero,1127
 10118ec:	010119d8 	cmpnei	r4,zero,1127
 10118f0:	010119d8 	cmpnei	r4,zero,1127
 10118f4:	010119d8 	cmpnei	r4,zero,1127
 10118f8:	010119d8 	cmpnei	r4,zero,1127
 10118fc:	010119d8 	cmpnei	r4,zero,1127
 1011900:	010119d8 	cmpnei	r4,zero,1127
 1011904:	01011e40 	call	1011e4 <__alt_mem_onchip_memory2_0+0x1011e4>
 1011908:	010119d8 	cmpnei	r4,zero,1127
 101190c:	010119d8 	cmpnei	r4,zero,1127
 1011910:	010119d8 	cmpnei	r4,zero,1127
 1011914:	010119d8 	cmpnei	r4,zero,1127
 1011918:	010119d8 	cmpnei	r4,zero,1127
 101191c:	010119d8 	cmpnei	r4,zero,1127
 1011920:	010119d8 	cmpnei	r4,zero,1127
 1011924:	010119d8 	cmpnei	r4,zero,1127
 1011928:	010119d8 	cmpnei	r4,zero,1127
 101192c:	010119d8 	cmpnei	r4,zero,1127
 1011930:	01011ef4 	movhi	r4,1147
 1011934:	010119d8 	cmpnei	r4,zero,1127
 1011938:	010119d8 	cmpnei	r4,zero,1127
 101193c:	010119d8 	cmpnei	r4,zero,1127
 1011940:	010119d8 	cmpnei	r4,zero,1127
 1011944:	010119d8 	cmpnei	r4,zero,1127
 1011948:	01011f40 	call	1011f4 <__alt_mem_onchip_memory2_0+0x1011f4>
 101194c:	010119d8 	cmpnei	r4,zero,1127
 1011950:	010119d8 	cmpnei	r4,zero,1127
 1011954:	0101224c 	andi	r4,zero,1161
 1011958:	010119d8 	cmpnei	r4,zero,1127
 101195c:	010119d8 	cmpnei	r4,zero,1127
 1011960:	010119d8 	cmpnei	r4,zero,1127
 1011964:	010119d8 	cmpnei	r4,zero,1127
 1011968:	010119d8 	cmpnei	r4,zero,1127
 101196c:	010119d8 	cmpnei	r4,zero,1127
 1011970:	010119d8 	cmpnei	r4,zero,1127
 1011974:	010119d8 	cmpnei	r4,zero,1127
 1011978:	010119d8 	cmpnei	r4,zero,1127
 101197c:	010119d8 	cmpnei	r4,zero,1127
 1011980:	01012224 	muli	r4,zero,1160
 1011984:	01011e4c 	andi	r4,zero,1145
 1011988:	010119d8 	cmpnei	r4,zero,1127
 101198c:	010119d8 	cmpnei	r4,zero,1127
 1011990:	010119d8 	cmpnei	r4,zero,1127
 1011994:	01012330 	cmpltui	r4,zero,1164
 1011998:	01011e4c 	andi	r4,zero,1145
 101199c:	010119d8 	cmpnei	r4,zero,1127
 10119a0:	010119d8 	cmpnei	r4,zero,1127
 10119a4:	01012284 	movi	r4,1162
 10119a8:	010119d8 	cmpnei	r4,zero,1127
 10119ac:	0101225c 	xori	r4,zero,1161
 10119b0:	01011f00 	call	1011f0 <__alt_mem_onchip_memory2_0+0x1011f0>
 10119b4:	010122ec 	andhi	r4,zero,1163
 10119b8:	01012344 	movi	r4,1165
 10119bc:	010119d8 	cmpnei	r4,zero,1127
 10119c0:	010122a0 	cmpeqi	r4,zero,1162
 10119c4:	010119d8 	cmpnei	r4,zero,1127
 10119c8:	01011f4c 	andi	r4,zero,1149
 10119cc:	010119d8 	cmpnei	r4,zero,1127
 10119d0:	010119d8 	cmpnei	r4,zero,1127
 10119d4:	010121c4 	movi	r4,1159
 10119d8:	9800c226 	beq	r19,zero,1011ce4 <___vfiprintf_internal_r+0x670>
 10119dc:	07000044 	movi	fp,1
 10119e0:	d9000404 	addi	r4,sp,16
 10119e4:	d9c13515 	stw	r7,1236(sp)
 10119e8:	d9013c15 	stw	r4,1264(sp)
 10119ec:	df013715 	stw	fp,1244(sp)
 10119f0:	dcc00405 	stb	r19,16(sp)
 10119f4:	d8000005 	stb	zero,0(sp)
 10119f8:	d8013815 	stw	zero,1248(sp)
 10119fc:	d9813b17 	ldw	r6,1260(sp)
 1011a00:	3080008c 	andi	r2,r6,2
 1011a04:	1005003a 	cmpeq	r2,r2,zero
 1011a08:	d8813e15 	stw	r2,1272(sp)
 1011a0c:	1000011e 	bne	r2,zero,1011a14 <___vfiprintf_internal_r+0x3a0>
 1011a10:	e7000084 	addi	fp,fp,2
 1011a14:	d8813b17 	ldw	r2,1260(sp)
 1011a18:	1080210c 	andi	r2,r2,132
 1011a1c:	d8813d15 	stw	r2,1268(sp)
 1011a20:	10002a1e 	bne	r2,zero,1011acc <___vfiprintf_internal_r+0x458>
 1011a24:	d8c13917 	ldw	r3,1252(sp)
 1011a28:	1f21c83a 	sub	r16,r3,fp
 1011a2c:	0400270e 	bge	zero,r16,1011acc <___vfiprintf_internal_r+0x458>
 1011a30:	00800404 	movi	r2,16
 1011a34:	1402cf0e 	bge	r2,r16,1012574 <___vfiprintf_internal_r+0xf00>
 1011a38:	d9400317 	ldw	r5,12(sp)
 1011a3c:	d9000217 	ldw	r4,8(sp)
 1011a40:	1023883a 	mov	r17,r2
 1011a44:	05c04074 	movhi	r23,257
 1011a48:	bdcb8304 	addi	r23,r23,11788
 1011a4c:	04c001c4 	movi	r19,7
 1011a50:	00000306 	br	1011a60 <___vfiprintf_internal_r+0x3ec>
 1011a54:	843ffc04 	addi	r16,r16,-16
 1011a58:	94800204 	addi	r18,r18,8
 1011a5c:	8c00110e 	bge	r17,r16,1011aa4 <___vfiprintf_internal_r+0x430>
 1011a60:	29400404 	addi	r5,r5,16
 1011a64:	21000044 	addi	r4,r4,1
 1011a68:	95c00015 	stw	r23,0(r18)
 1011a6c:	94400115 	stw	r17,4(r18)
 1011a70:	d9400315 	stw	r5,12(sp)
 1011a74:	d9000215 	stw	r4,8(sp)
 1011a78:	993ff60e 	bge	r19,r4,1011a54 <___vfiprintf_internal_r+0x3e0>
 1011a7c:	b009883a 	mov	r4,r22
 1011a80:	a80b883a 	mov	r5,r21
 1011a84:	d9800104 	addi	r6,sp,4
 1011a88:	101161c0 	call	101161c <__sprint_r>
 1011a8c:	1000981e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011a90:	843ffc04 	addi	r16,r16,-16
 1011a94:	d9400317 	ldw	r5,12(sp)
 1011a98:	d9000217 	ldw	r4,8(sp)
 1011a9c:	dc800e04 	addi	r18,sp,56
 1011aa0:	8c3fef16 	blt	r17,r16,1011a60 <___vfiprintf_internal_r+0x3ec>
 1011aa4:	2c0b883a 	add	r5,r5,r16
 1011aa8:	21000044 	addi	r4,r4,1
 1011aac:	008001c4 	movi	r2,7
 1011ab0:	95c00015 	stw	r23,0(r18)
 1011ab4:	94000115 	stw	r16,4(r18)
 1011ab8:	d9400315 	stw	r5,12(sp)
 1011abc:	d9000215 	stw	r4,8(sp)
 1011ac0:	11015616 	blt	r2,r4,101201c <___vfiprintf_internal_r+0x9a8>
 1011ac4:	94800204 	addi	r18,r18,8
 1011ac8:	00000206 	br	1011ad4 <___vfiprintf_internal_r+0x460>
 1011acc:	d9400317 	ldw	r5,12(sp)
 1011ad0:	d9000217 	ldw	r4,8(sp)
 1011ad4:	d8800007 	ldb	r2,0(sp)
 1011ad8:	10000a26 	beq	r2,zero,1011b04 <___vfiprintf_internal_r+0x490>
 1011adc:	00800044 	movi	r2,1
 1011ae0:	29400044 	addi	r5,r5,1
 1011ae4:	21000044 	addi	r4,r4,1
 1011ae8:	90800115 	stw	r2,4(r18)
 1011aec:	008001c4 	movi	r2,7
 1011af0:	96c00015 	stw	sp,0(r18)
 1011af4:	d9400315 	stw	r5,12(sp)
 1011af8:	d9000215 	stw	r4,8(sp)
 1011afc:	11013516 	blt	r2,r4,1011fd4 <___vfiprintf_internal_r+0x960>
 1011b00:	94800204 	addi	r18,r18,8
 1011b04:	d9813e17 	ldw	r6,1272(sp)
 1011b08:	30000b1e 	bne	r6,zero,1011b38 <___vfiprintf_internal_r+0x4c4>
 1011b0c:	d8800044 	addi	r2,sp,1
 1011b10:	29400084 	addi	r5,r5,2
 1011b14:	21000044 	addi	r4,r4,1
 1011b18:	90800015 	stw	r2,0(r18)
 1011b1c:	00c00084 	movi	r3,2
 1011b20:	008001c4 	movi	r2,7
 1011b24:	90c00115 	stw	r3,4(r18)
 1011b28:	d9400315 	stw	r5,12(sp)
 1011b2c:	d9000215 	stw	r4,8(sp)
 1011b30:	11013116 	blt	r2,r4,1011ff8 <___vfiprintf_internal_r+0x984>
 1011b34:	94800204 	addi	r18,r18,8
 1011b38:	d8c13d17 	ldw	r3,1268(sp)
 1011b3c:	00802004 	movi	r2,128
 1011b40:	18807126 	beq	r3,r2,1011d08 <___vfiprintf_internal_r+0x694>
 1011b44:	d8813817 	ldw	r2,1248(sp)
 1011b48:	d8c13717 	ldw	r3,1244(sp)
 1011b4c:	10e1c83a 	sub	r16,r2,r3
 1011b50:	0400240e 	bge	zero,r16,1011be4 <___vfiprintf_internal_r+0x570>
 1011b54:	00800404 	movi	r2,16
 1011b58:	1402580e 	bge	r2,r16,10124bc <___vfiprintf_internal_r+0xe48>
 1011b5c:	1023883a 	mov	r17,r2
 1011b60:	05c04074 	movhi	r23,257
 1011b64:	bdcb7f04 	addi	r23,r23,11772
 1011b68:	04c001c4 	movi	r19,7
 1011b6c:	00000306 	br	1011b7c <___vfiprintf_internal_r+0x508>
 1011b70:	843ffc04 	addi	r16,r16,-16
 1011b74:	94800204 	addi	r18,r18,8
 1011b78:	8c00110e 	bge	r17,r16,1011bc0 <___vfiprintf_internal_r+0x54c>
 1011b7c:	29400404 	addi	r5,r5,16
 1011b80:	21000044 	addi	r4,r4,1
 1011b84:	95c00015 	stw	r23,0(r18)
 1011b88:	94400115 	stw	r17,4(r18)
 1011b8c:	d9400315 	stw	r5,12(sp)
 1011b90:	d9000215 	stw	r4,8(sp)
 1011b94:	993ff60e 	bge	r19,r4,1011b70 <___vfiprintf_internal_r+0x4fc>
 1011b98:	b009883a 	mov	r4,r22
 1011b9c:	a80b883a 	mov	r5,r21
 1011ba0:	d9800104 	addi	r6,sp,4
 1011ba4:	101161c0 	call	101161c <__sprint_r>
 1011ba8:	1000511e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011bac:	843ffc04 	addi	r16,r16,-16
 1011bb0:	d9400317 	ldw	r5,12(sp)
 1011bb4:	d9000217 	ldw	r4,8(sp)
 1011bb8:	dc800e04 	addi	r18,sp,56
 1011bbc:	8c3fef16 	blt	r17,r16,1011b7c <___vfiprintf_internal_r+0x508>
 1011bc0:	2c0b883a 	add	r5,r5,r16
 1011bc4:	21000044 	addi	r4,r4,1
 1011bc8:	008001c4 	movi	r2,7
 1011bcc:	95c00015 	stw	r23,0(r18)
 1011bd0:	94000115 	stw	r16,4(r18)
 1011bd4:	d9400315 	stw	r5,12(sp)
 1011bd8:	d9000215 	stw	r4,8(sp)
 1011bdc:	1100eb16 	blt	r2,r4,1011f8c <___vfiprintf_internal_r+0x918>
 1011be0:	94800204 	addi	r18,r18,8
 1011be4:	d9813717 	ldw	r6,1244(sp)
 1011be8:	d8813c17 	ldw	r2,1264(sp)
 1011bec:	21000044 	addi	r4,r4,1
 1011bf0:	298b883a 	add	r5,r5,r6
 1011bf4:	90800015 	stw	r2,0(r18)
 1011bf8:	008001c4 	movi	r2,7
 1011bfc:	91800115 	stw	r6,4(r18)
 1011c00:	d9400315 	stw	r5,12(sp)
 1011c04:	d9000215 	stw	r4,8(sp)
 1011c08:	11006b16 	blt	r2,r4,1011db8 <___vfiprintf_internal_r+0x744>
 1011c0c:	90c00204 	addi	r3,r18,8
 1011c10:	d9013b17 	ldw	r4,1260(sp)
 1011c14:	2080010c 	andi	r2,r4,4
 1011c18:	10002726 	beq	r2,zero,1011cb8 <___vfiprintf_internal_r+0x644>
 1011c1c:	d9813917 	ldw	r6,1252(sp)
 1011c20:	3721c83a 	sub	r16,r6,fp
 1011c24:	0400240e 	bge	zero,r16,1011cb8 <___vfiprintf_internal_r+0x644>
 1011c28:	00800404 	movi	r2,16
 1011c2c:	1402790e 	bge	r2,r16,1012614 <___vfiprintf_internal_r+0xfa0>
 1011c30:	d9000217 	ldw	r4,8(sp)
 1011c34:	1023883a 	mov	r17,r2
 1011c38:	05c04074 	movhi	r23,257
 1011c3c:	bdcb8304 	addi	r23,r23,11788
 1011c40:	048001c4 	movi	r18,7
 1011c44:	00000306 	br	1011c54 <___vfiprintf_internal_r+0x5e0>
 1011c48:	843ffc04 	addi	r16,r16,-16
 1011c4c:	18c00204 	addi	r3,r3,8
 1011c50:	8c00110e 	bge	r17,r16,1011c98 <___vfiprintf_internal_r+0x624>
 1011c54:	29400404 	addi	r5,r5,16
 1011c58:	21000044 	addi	r4,r4,1
 1011c5c:	1dc00015 	stw	r23,0(r3)
 1011c60:	1c400115 	stw	r17,4(r3)
 1011c64:	d9400315 	stw	r5,12(sp)
 1011c68:	d9000215 	stw	r4,8(sp)
 1011c6c:	913ff60e 	bge	r18,r4,1011c48 <___vfiprintf_internal_r+0x5d4>
 1011c70:	b009883a 	mov	r4,r22
 1011c74:	a80b883a 	mov	r5,r21
 1011c78:	d9800104 	addi	r6,sp,4
 1011c7c:	101161c0 	call	101161c <__sprint_r>
 1011c80:	10001b1e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011c84:	843ffc04 	addi	r16,r16,-16
 1011c88:	d9400317 	ldw	r5,12(sp)
 1011c8c:	d9000217 	ldw	r4,8(sp)
 1011c90:	d8c00e04 	addi	r3,sp,56
 1011c94:	8c3fef16 	blt	r17,r16,1011c54 <___vfiprintf_internal_r+0x5e0>
 1011c98:	2c0b883a 	add	r5,r5,r16
 1011c9c:	21000044 	addi	r4,r4,1
 1011ca0:	008001c4 	movi	r2,7
 1011ca4:	1dc00015 	stw	r23,0(r3)
 1011ca8:	1c000115 	stw	r16,4(r3)
 1011cac:	d9400315 	stw	r5,12(sp)
 1011cb0:	d9000215 	stw	r4,8(sp)
 1011cb4:	11005b16 	blt	r2,r4,1011e24 <___vfiprintf_internal_r+0x7b0>
 1011cb8:	d9013917 	ldw	r4,1252(sp)
 1011cbc:	2700010e 	bge	r4,fp,1011cc4 <___vfiprintf_internal_r+0x650>
 1011cc0:	e009883a 	mov	r4,fp
 1011cc4:	d8813a17 	ldw	r2,1256(sp)
 1011cc8:	1105883a 	add	r2,r2,r4
 1011ccc:	d8813a15 	stw	r2,1256(sp)
 1011cd0:	2800411e 	bne	r5,zero,1011dd8 <___vfiprintf_internal_r+0x764>
 1011cd4:	d9c13517 	ldw	r7,1236(sp)
 1011cd8:	dc800e04 	addi	r18,sp,56
 1011cdc:	d8000215 	stw	zero,8(sp)
 1011ce0:	003eb506 	br	10117b8 <___vfiprintf_internal_r+0x144>
 1011ce4:	d8800317 	ldw	r2,12(sp)
 1011ce8:	1002591e 	bne	r2,zero,1012650 <___vfiprintf_internal_r+0xfdc>
 1011cec:	d8000215 	stw	zero,8(sp)
 1011cf0:	a880030b 	ldhu	r2,12(r21)
 1011cf4:	1080100c 	andi	r2,r2,64
 1011cf8:	103e9a26 	beq	r2,zero,1011764 <___vfiprintf_internal_r+0xf0>
 1011cfc:	00ffffc4 	movi	r3,-1
 1011d00:	d8c13a15 	stw	r3,1256(sp)
 1011d04:	003e9706 	br	1011764 <___vfiprintf_internal_r+0xf0>
 1011d08:	d9813917 	ldw	r6,1252(sp)
 1011d0c:	3721c83a 	sub	r16,r6,fp
 1011d10:	043f8c0e 	bge	zero,r16,1011b44 <___vfiprintf_internal_r+0x4d0>
 1011d14:	00800404 	movi	r2,16
 1011d18:	1402530e 	bge	r2,r16,1012668 <___vfiprintf_internal_r+0xff4>
 1011d1c:	1023883a 	mov	r17,r2
 1011d20:	05c04074 	movhi	r23,257
 1011d24:	bdcb7f04 	addi	r23,r23,11772
 1011d28:	04c001c4 	movi	r19,7
 1011d2c:	00000306 	br	1011d3c <___vfiprintf_internal_r+0x6c8>
 1011d30:	843ffc04 	addi	r16,r16,-16
 1011d34:	94800204 	addi	r18,r18,8
 1011d38:	8c00110e 	bge	r17,r16,1011d80 <___vfiprintf_internal_r+0x70c>
 1011d3c:	29400404 	addi	r5,r5,16
 1011d40:	21000044 	addi	r4,r4,1
 1011d44:	95c00015 	stw	r23,0(r18)
 1011d48:	94400115 	stw	r17,4(r18)
 1011d4c:	d9400315 	stw	r5,12(sp)
 1011d50:	d9000215 	stw	r4,8(sp)
 1011d54:	993ff60e 	bge	r19,r4,1011d30 <___vfiprintf_internal_r+0x6bc>
 1011d58:	b009883a 	mov	r4,r22
 1011d5c:	a80b883a 	mov	r5,r21
 1011d60:	d9800104 	addi	r6,sp,4
 1011d64:	101161c0 	call	101161c <__sprint_r>
 1011d68:	103fe11e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011d6c:	843ffc04 	addi	r16,r16,-16
 1011d70:	d9400317 	ldw	r5,12(sp)
 1011d74:	d9000217 	ldw	r4,8(sp)
 1011d78:	dc800e04 	addi	r18,sp,56
 1011d7c:	8c3fef16 	blt	r17,r16,1011d3c <___vfiprintf_internal_r+0x6c8>
 1011d80:	2c0b883a 	add	r5,r5,r16
 1011d84:	21000044 	addi	r4,r4,1
 1011d88:	008001c4 	movi	r2,7
 1011d8c:	95c00015 	stw	r23,0(r18)
 1011d90:	94000115 	stw	r16,4(r18)
 1011d94:	d9400315 	stw	r5,12(sp)
 1011d98:	d9000215 	stw	r4,8(sp)
 1011d9c:	1100a816 	blt	r2,r4,1012040 <___vfiprintf_internal_r+0x9cc>
 1011da0:	94800204 	addi	r18,r18,8
 1011da4:	003f6706 	br	1011b44 <___vfiprintf_internal_r+0x4d0>
 1011da8:	d9c13f15 	stw	r7,1276(sp)
 1011dac:	1003fc00 	call	1003fc0 <__sinit>
 1011db0:	d9c13f17 	ldw	r7,1276(sp)
 1011db4:	003e4006 	br	10116b8 <___vfiprintf_internal_r+0x44>
 1011db8:	b009883a 	mov	r4,r22
 1011dbc:	a80b883a 	mov	r5,r21
 1011dc0:	d9800104 	addi	r6,sp,4
 1011dc4:	101161c0 	call	101161c <__sprint_r>
 1011dc8:	103fc91e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011dcc:	d9400317 	ldw	r5,12(sp)
 1011dd0:	d8c00e04 	addi	r3,sp,56
 1011dd4:	003f8e06 	br	1011c10 <___vfiprintf_internal_r+0x59c>
 1011dd8:	b009883a 	mov	r4,r22
 1011ddc:	a80b883a 	mov	r5,r21
 1011de0:	d9800104 	addi	r6,sp,4
 1011de4:	101161c0 	call	101161c <__sprint_r>
 1011de8:	103fba26 	beq	r2,zero,1011cd4 <___vfiprintf_internal_r+0x660>
 1011dec:	003fc006 	br	1011cf0 <___vfiprintf_internal_r+0x67c>
 1011df0:	b009883a 	mov	r4,r22
 1011df4:	a80b883a 	mov	r5,r21
 1011df8:	d9c13f15 	stw	r7,1276(sp)
 1011dfc:	10023f40 	call	10023f4 <__swsetup_r>
 1011e00:	d9c13f17 	ldw	r7,1276(sp)
 1011e04:	103e3126 	beq	r2,zero,10116cc <___vfiprintf_internal_r+0x58>
 1011e08:	003fbc06 	br	1011cfc <___vfiprintf_internal_r+0x688>
 1011e0c:	00bfffc4 	movi	r2,-1
 1011e10:	d8813a15 	stw	r2,1256(sp)
 1011e14:	d880210b 	ldhu	r2,132(sp)
 1011e18:	1080100c 	andi	r2,r2,64
 1011e1c:	103e4e1e 	bne	r2,zero,1011758 <___vfiprintf_internal_r+0xe4>
 1011e20:	003e5006 	br	1011764 <___vfiprintf_internal_r+0xf0>
 1011e24:	b009883a 	mov	r4,r22
 1011e28:	a80b883a 	mov	r5,r21
 1011e2c:	d9800104 	addi	r6,sp,4
 1011e30:	101161c0 	call	101161c <__sprint_r>
 1011e34:	103fae1e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011e38:	d9400317 	ldw	r5,12(sp)
 1011e3c:	003f9e06 	br	1011cb8 <___vfiprintf_internal_r+0x644>
 1011e40:	d8813b17 	ldw	r2,1260(sp)
 1011e44:	10800414 	ori	r2,r2,16
 1011e48:	d8813b15 	stw	r2,1260(sp)
 1011e4c:	d8c13b17 	ldw	r3,1260(sp)
 1011e50:	1880080c 	andi	r2,r3,32
 1011e54:	10009c1e 	bne	r2,zero,10120c8 <___vfiprintf_internal_r+0xa54>
 1011e58:	d9413b17 	ldw	r5,1260(sp)
 1011e5c:	2880040c 	andi	r2,r5,16
 1011e60:	1001b91e 	bne	r2,zero,1012548 <___vfiprintf_internal_r+0xed4>
 1011e64:	d9813b17 	ldw	r6,1260(sp)
 1011e68:	3080100c 	andi	r2,r6,64
 1011e6c:	1001b626 	beq	r2,zero,1012548 <___vfiprintf_internal_r+0xed4>
 1011e70:	3880000f 	ldh	r2,0(r7)
 1011e74:	39c00104 	addi	r7,r7,4
 1011e78:	d9c13515 	stw	r7,1236(sp)
 1011e7c:	1023d7fa 	srai	r17,r2,31
 1011e80:	1021883a 	mov	r16,r2
 1011e84:	8801e716 	blt	r17,zero,1012624 <___vfiprintf_internal_r+0xfb0>
 1011e88:	01000044 	movi	r4,1
 1011e8c:	b8000416 	blt	r23,zero,1011ea0 <___vfiprintf_internal_r+0x82c>
 1011e90:	d9413b17 	ldw	r5,1260(sp)
 1011e94:	00bfdfc4 	movi	r2,-129
 1011e98:	288a703a 	and	r5,r5,r2
 1011e9c:	d9413b15 	stw	r5,1260(sp)
 1011ea0:	8444b03a 	or	r2,r16,r17
 1011ea4:	10012e1e 	bne	r2,zero,1012360 <___vfiprintf_internal_r+0xcec>
 1011ea8:	b8012d1e 	bne	r23,zero,1012360 <___vfiprintf_internal_r+0xcec>
 1011eac:	20803fcc 	andi	r2,r4,255
 1011eb0:	10018526 	beq	r2,zero,10124c8 <___vfiprintf_internal_r+0xe54>
 1011eb4:	d8c00e04 	addi	r3,sp,56
 1011eb8:	df000404 	addi	fp,sp,16
 1011ebc:	d8c13c15 	stw	r3,1264(sp)
 1011ec0:	d8c13c17 	ldw	r3,1264(sp)
 1011ec4:	ddc13815 	stw	r23,1248(sp)
 1011ec8:	e0c5c83a 	sub	r2,fp,r3
 1011ecc:	10800a04 	addi	r2,r2,40
 1011ed0:	d8813715 	stw	r2,1244(sp)
 1011ed4:	df013817 	ldw	fp,1248(sp)
 1011ed8:	d9413717 	ldw	r5,1244(sp)
 1011edc:	e140010e 	bge	fp,r5,1011ee4 <___vfiprintf_internal_r+0x870>
 1011ee0:	2839883a 	mov	fp,r5
 1011ee4:	d8800007 	ldb	r2,0(sp)
 1011ee8:	103ec426 	beq	r2,zero,10119fc <___vfiprintf_internal_r+0x388>
 1011eec:	e7000044 	addi	fp,fp,1
 1011ef0:	003ec206 	br	10119fc <___vfiprintf_internal_r+0x388>
 1011ef4:	d9813b17 	ldw	r6,1260(sp)
 1011ef8:	31800414 	ori	r6,r6,16
 1011efc:	d9813b15 	stw	r6,1260(sp)
 1011f00:	d8c13b17 	ldw	r3,1260(sp)
 1011f04:	1880080c 	andi	r2,r3,32
 1011f08:	1000681e 	bne	r2,zero,10120ac <___vfiprintf_internal_r+0xa38>
 1011f0c:	d9413b17 	ldw	r5,1260(sp)
 1011f10:	2880040c 	andi	r2,r5,16
 1011f14:	10017e1e 	bne	r2,zero,1012510 <___vfiprintf_internal_r+0xe9c>
 1011f18:	d9813b17 	ldw	r6,1260(sp)
 1011f1c:	3080100c 	andi	r2,r6,64
 1011f20:	10017b26 	beq	r2,zero,1012510 <___vfiprintf_internal_r+0xe9c>
 1011f24:	3c00000b 	ldhu	r16,0(r7)
 1011f28:	0009883a 	mov	r4,zero
 1011f2c:	39c00104 	addi	r7,r7,4
 1011f30:	0023883a 	mov	r17,zero
 1011f34:	d9c13515 	stw	r7,1236(sp)
 1011f38:	d8000005 	stb	zero,0(sp)
 1011f3c:	003fd306 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1011f40:	d8813b17 	ldw	r2,1260(sp)
 1011f44:	10800414 	ori	r2,r2,16
 1011f48:	d8813b15 	stw	r2,1260(sp)
 1011f4c:	d8c13b17 	ldw	r3,1260(sp)
 1011f50:	1880080c 	andi	r2,r3,32
 1011f54:	10004e1e 	bne	r2,zero,1012090 <___vfiprintf_internal_r+0xa1c>
 1011f58:	d9413b17 	ldw	r5,1260(sp)
 1011f5c:	2880040c 	andi	r2,r5,16
 1011f60:	1001721e 	bne	r2,zero,101252c <___vfiprintf_internal_r+0xeb8>
 1011f64:	d9813b17 	ldw	r6,1260(sp)
 1011f68:	3080100c 	andi	r2,r6,64
 1011f6c:	10016f26 	beq	r2,zero,101252c <___vfiprintf_internal_r+0xeb8>
 1011f70:	3c00000b 	ldhu	r16,0(r7)
 1011f74:	01000044 	movi	r4,1
 1011f78:	39c00104 	addi	r7,r7,4
 1011f7c:	0023883a 	mov	r17,zero
 1011f80:	d9c13515 	stw	r7,1236(sp)
 1011f84:	d8000005 	stb	zero,0(sp)
 1011f88:	003fc006 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1011f8c:	b009883a 	mov	r4,r22
 1011f90:	a80b883a 	mov	r5,r21
 1011f94:	d9800104 	addi	r6,sp,4
 1011f98:	101161c0 	call	101161c <__sprint_r>
 1011f9c:	103f541e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011fa0:	d9400317 	ldw	r5,12(sp)
 1011fa4:	d9000217 	ldw	r4,8(sp)
 1011fa8:	dc800e04 	addi	r18,sp,56
 1011fac:	003f0d06 	br	1011be4 <___vfiprintf_internal_r+0x570>
 1011fb0:	b009883a 	mov	r4,r22
 1011fb4:	a80b883a 	mov	r5,r21
 1011fb8:	d9800104 	addi	r6,sp,4
 1011fbc:	d9c13f15 	stw	r7,1276(sp)
 1011fc0:	101161c0 	call	101161c <__sprint_r>
 1011fc4:	d9c13f17 	ldw	r7,1276(sp)
 1011fc8:	103f491e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011fcc:	dc800e04 	addi	r18,sp,56
 1011fd0:	003e1006 	br	1011814 <___vfiprintf_internal_r+0x1a0>
 1011fd4:	b009883a 	mov	r4,r22
 1011fd8:	a80b883a 	mov	r5,r21
 1011fdc:	d9800104 	addi	r6,sp,4
 1011fe0:	101161c0 	call	101161c <__sprint_r>
 1011fe4:	103f421e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1011fe8:	d9400317 	ldw	r5,12(sp)
 1011fec:	d9000217 	ldw	r4,8(sp)
 1011ff0:	dc800e04 	addi	r18,sp,56
 1011ff4:	003ec306 	br	1011b04 <___vfiprintf_internal_r+0x490>
 1011ff8:	b009883a 	mov	r4,r22
 1011ffc:	a80b883a 	mov	r5,r21
 1012000:	d9800104 	addi	r6,sp,4
 1012004:	101161c0 	call	101161c <__sprint_r>
 1012008:	103f391e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 101200c:	d9400317 	ldw	r5,12(sp)
 1012010:	d9000217 	ldw	r4,8(sp)
 1012014:	dc800e04 	addi	r18,sp,56
 1012018:	003ec706 	br	1011b38 <___vfiprintf_internal_r+0x4c4>
 101201c:	b009883a 	mov	r4,r22
 1012020:	a80b883a 	mov	r5,r21
 1012024:	d9800104 	addi	r6,sp,4
 1012028:	101161c0 	call	101161c <__sprint_r>
 101202c:	103f301e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1012030:	d9400317 	ldw	r5,12(sp)
 1012034:	d9000217 	ldw	r4,8(sp)
 1012038:	dc800e04 	addi	r18,sp,56
 101203c:	003ea506 	br	1011ad4 <___vfiprintf_internal_r+0x460>
 1012040:	b009883a 	mov	r4,r22
 1012044:	a80b883a 	mov	r5,r21
 1012048:	d9800104 	addi	r6,sp,4
 101204c:	101161c0 	call	101161c <__sprint_r>
 1012050:	103f271e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1012054:	d9400317 	ldw	r5,12(sp)
 1012058:	d9000217 	ldw	r4,8(sp)
 101205c:	dc800e04 	addi	r18,sp,56
 1012060:	003eb806 	br	1011b44 <___vfiprintf_internal_r+0x4d0>
 1012064:	38800017 	ldw	r2,0(r7)
 1012068:	39c00104 	addi	r7,r7,4
 101206c:	d8813915 	stw	r2,1252(sp)
 1012070:	1000b90e 	bge	r2,zero,1012358 <___vfiprintf_internal_r+0xce4>
 1012074:	0085c83a 	sub	r2,zero,r2
 1012078:	d8813915 	stw	r2,1252(sp)
 101207c:	d9013b17 	ldw	r4,1260(sp)
 1012080:	a0c00007 	ldb	r3,0(r20)
 1012084:	21000114 	ori	r4,r4,4
 1012088:	d9013b15 	stw	r4,1260(sp)
 101208c:	003ded06 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 1012090:	3c000017 	ldw	r16,0(r7)
 1012094:	3c400117 	ldw	r17,4(r7)
 1012098:	39000204 	addi	r4,r7,8
 101209c:	d9013515 	stw	r4,1236(sp)
 10120a0:	01000044 	movi	r4,1
 10120a4:	d8000005 	stb	zero,0(sp)
 10120a8:	003f7806 	br	1011e8c <___vfiprintf_internal_r+0x818>
 10120ac:	3c000017 	ldw	r16,0(r7)
 10120b0:	3c400117 	ldw	r17,4(r7)
 10120b4:	39000204 	addi	r4,r7,8
 10120b8:	d9013515 	stw	r4,1236(sp)
 10120bc:	0009883a 	mov	r4,zero
 10120c0:	d8000005 	stb	zero,0(sp)
 10120c4:	003f7106 	br	1011e8c <___vfiprintf_internal_r+0x818>
 10120c8:	3c000017 	ldw	r16,0(r7)
 10120cc:	3c400117 	ldw	r17,4(r7)
 10120d0:	39000204 	addi	r4,r7,8
 10120d4:	d9013515 	stw	r4,1236(sp)
 10120d8:	003f6a06 	br	1011e84 <___vfiprintf_internal_r+0x810>
 10120dc:	d8800007 	ldb	r2,0(sp)
 10120e0:	10009d1e 	bne	r2,zero,1012358 <___vfiprintf_internal_r+0xce4>
 10120e4:	00800804 	movi	r2,32
 10120e8:	d8800005 	stb	r2,0(sp)
 10120ec:	a0c00007 	ldb	r3,0(r20)
 10120f0:	003dd406 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 10120f4:	0009883a 	mov	r4,zero
 10120f8:	04000244 	movi	r16,9
 10120fc:	01400284 	movi	r5,10
 1012100:	d9c13f15 	stw	r7,1276(sp)
 1012104:	10096900 	call	1009690 <__mulsi3>
 1012108:	9885883a 	add	r2,r19,r2
 101210c:	a4c00007 	ldb	r19,0(r20)
 1012110:	113ff404 	addi	r4,r2,-48
 1012114:	a5000044 	addi	r20,r20,1
 1012118:	98bff404 	addi	r2,r19,-48
 101211c:	d9c13f17 	ldw	r7,1276(sp)
 1012120:	80bff62e 	bgeu	r16,r2,10120fc <___vfiprintf_internal_r+0xa88>
 1012124:	d9013915 	stw	r4,1252(sp)
 1012128:	003dc806 	br	101184c <___vfiprintf_internal_r+0x1d8>
 101212c:	d9413b17 	ldw	r5,1260(sp)
 1012130:	a0c00007 	ldb	r3,0(r20)
 1012134:	29402014 	ori	r5,r5,128
 1012138:	d9413b15 	stw	r5,1260(sp)
 101213c:	003dc106 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 1012140:	a0c00007 	ldb	r3,0(r20)
 1012144:	00800a84 	movi	r2,42
 1012148:	a5000044 	addi	r20,r20,1
 101214c:	18817326 	beq	r3,r2,101271c <___vfiprintf_internal_r+0x10a8>
 1012150:	1827883a 	mov	r19,r3
 1012154:	18bff404 	addi	r2,r3,-48
 1012158:	00c00244 	movi	r3,9
 101215c:	18816d36 	bltu	r3,r2,1012714 <___vfiprintf_internal_r+0x10a0>
 1012160:	1821883a 	mov	r16,r3
 1012164:	0009883a 	mov	r4,zero
 1012168:	01400284 	movi	r5,10
 101216c:	d9c13f15 	stw	r7,1276(sp)
 1012170:	10096900 	call	1009690 <__mulsi3>
 1012174:	14c5883a 	add	r2,r2,r19
 1012178:	a4c00007 	ldb	r19,0(r20)
 101217c:	113ff404 	addi	r4,r2,-48
 1012180:	a5000044 	addi	r20,r20,1
 1012184:	98bff404 	addi	r2,r19,-48
 1012188:	d9c13f17 	ldw	r7,1276(sp)
 101218c:	80bff62e 	bgeu	r16,r2,1012168 <___vfiprintf_internal_r+0xaf4>
 1012190:	202f883a 	mov	r23,r4
 1012194:	203dad0e 	bge	r4,zero,101184c <___vfiprintf_internal_r+0x1d8>
 1012198:	05ffffc4 	movi	r23,-1
 101219c:	003dab06 	br	101184c <___vfiprintf_internal_r+0x1d8>
 10121a0:	d9813b17 	ldw	r6,1260(sp)
 10121a4:	a0c00007 	ldb	r3,0(r20)
 10121a8:	31800054 	ori	r6,r6,1
 10121ac:	d9813b15 	stw	r6,1260(sp)
 10121b0:	003da406 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 10121b4:	00800ac4 	movi	r2,43
 10121b8:	d8800005 	stb	r2,0(sp)
 10121bc:	a0c00007 	ldb	r3,0(r20)
 10121c0:	003da006 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 10121c4:	01404074 	movhi	r5,257
 10121c8:	294a7d04 	addi	r5,r5,10740
 10121cc:	d9413615 	stw	r5,1240(sp)
 10121d0:	d8c13b17 	ldw	r3,1260(sp)
 10121d4:	1880080c 	andi	r2,r3,32
 10121d8:	1000c226 	beq	r2,zero,10124e4 <___vfiprintf_internal_r+0xe70>
 10121dc:	3c000017 	ldw	r16,0(r7)
 10121e0:	3c400117 	ldw	r17,4(r7)
 10121e4:	39000204 	addi	r4,r7,8
 10121e8:	d9013515 	stw	r4,1236(sp)
 10121ec:	d8c13b17 	ldw	r3,1260(sp)
 10121f0:	1880004c 	andi	r2,r3,1
 10121f4:	1005003a 	cmpeq	r2,r2,zero
 10121f8:	1000931e 	bne	r2,zero,1012448 <___vfiprintf_internal_r+0xdd4>
 10121fc:	8444b03a 	or	r2,r16,r17
 1012200:	10009126 	beq	r2,zero,1012448 <___vfiprintf_internal_r+0xdd4>
 1012204:	18c00094 	ori	r3,r3,2
 1012208:	00800c04 	movi	r2,48
 101220c:	01000084 	movi	r4,2
 1012210:	d8c13b15 	stw	r3,1260(sp)
 1012214:	d8800045 	stb	r2,1(sp)
 1012218:	dcc00085 	stb	r19,2(sp)
 101221c:	d8000005 	stb	zero,0(sp)
 1012220:	003f1a06 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1012224:	38800017 	ldw	r2,0(r7)
 1012228:	07000044 	movi	fp,1
 101222c:	39c00104 	addi	r7,r7,4
 1012230:	d9800404 	addi	r6,sp,16
 1012234:	d9c13515 	stw	r7,1236(sp)
 1012238:	d9813c15 	stw	r6,1264(sp)
 101223c:	df013715 	stw	fp,1244(sp)
 1012240:	d8800405 	stb	r2,16(sp)
 1012244:	d8000005 	stb	zero,0(sp)
 1012248:	003deb06 	br	10119f8 <___vfiprintf_internal_r+0x384>
 101224c:	00804074 	movhi	r2,257
 1012250:	108a8804 	addi	r2,r2,10784
 1012254:	d8813615 	stw	r2,1240(sp)
 1012258:	003fdd06 	br	10121d0 <___vfiprintf_internal_r+0xb5c>
 101225c:	d8c13b17 	ldw	r3,1260(sp)
 1012260:	1880080c 	andi	r2,r3,32
 1012264:	1000e326 	beq	r2,zero,10125f4 <___vfiprintf_internal_r+0xf80>
 1012268:	d9013a17 	ldw	r4,1256(sp)
 101226c:	38800017 	ldw	r2,0(r7)
 1012270:	39c00104 	addi	r7,r7,4
 1012274:	2007d7fa 	srai	r3,r4,31
 1012278:	11000015 	stw	r4,0(r2)
 101227c:	10c00115 	stw	r3,4(r2)
 1012280:	003d4d06 	br	10117b8 <___vfiprintf_internal_r+0x144>
 1012284:	a0c00007 	ldb	r3,0(r20)
 1012288:	00801b04 	movi	r2,108
 101228c:	1880f926 	beq	r3,r2,1012674 <___vfiprintf_internal_r+0x1000>
 1012290:	d9013b17 	ldw	r4,1260(sp)
 1012294:	21000414 	ori	r4,r4,16
 1012298:	d9013b15 	stw	r4,1260(sp)
 101229c:	003d6906 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 10122a0:	d8000005 	stb	zero,0(sp)
 10122a4:	39000017 	ldw	r4,0(r7)
 10122a8:	39c00104 	addi	r7,r7,4
 10122ac:	d9c13515 	stw	r7,1236(sp)
 10122b0:	d9013c15 	stw	r4,1264(sp)
 10122b4:	20010226 	beq	r4,zero,10126c0 <___vfiprintf_internal_r+0x104c>
 10122b8:	b800fc16 	blt	r23,zero,10126ac <___vfiprintf_internal_r+0x1038>
 10122bc:	d9013c17 	ldw	r4,1264(sp)
 10122c0:	000b883a 	mov	r5,zero
 10122c4:	b80d883a 	mov	r6,r23
 10122c8:	10056400 	call	1005640 <memchr>
 10122cc:	10000426 	beq	r2,zero,10122e0 <___vfiprintf_internal_r+0xc6c>
 10122d0:	d9813c17 	ldw	r6,1264(sp)
 10122d4:	1185c83a 	sub	r2,r2,r6
 10122d8:	d8813715 	stw	r2,1244(sp)
 10122dc:	b880010e 	bge	r23,r2,10122e4 <___vfiprintf_internal_r+0xc70>
 10122e0:	ddc13715 	stw	r23,1244(sp)
 10122e4:	d8013815 	stw	zero,1248(sp)
 10122e8:	003efa06 	br	1011ed4 <___vfiprintf_internal_r+0x860>
 10122ec:	d8813b17 	ldw	r2,1260(sp)
 10122f0:	3c000017 	ldw	r16,0(r7)
 10122f4:	00c04074 	movhi	r3,257
 10122f8:	18ca7d04 	addi	r3,r3,10740
 10122fc:	10800094 	ori	r2,r2,2
 1012300:	d8813b15 	stw	r2,1260(sp)
 1012304:	39c00104 	addi	r7,r7,4
 1012308:	d8c13615 	stw	r3,1240(sp)
 101230c:	00800c04 	movi	r2,48
 1012310:	00c01e04 	movi	r3,120
 1012314:	0023883a 	mov	r17,zero
 1012318:	01000084 	movi	r4,2
 101231c:	d9c13515 	stw	r7,1236(sp)
 1012320:	d8800045 	stb	r2,1(sp)
 1012324:	d8c00085 	stb	r3,2(sp)
 1012328:	d8000005 	stb	zero,0(sp)
 101232c:	003ed706 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1012330:	d9813b17 	ldw	r6,1260(sp)
 1012334:	a0c00007 	ldb	r3,0(r20)
 1012338:	31801014 	ori	r6,r6,64
 101233c:	d9813b15 	stw	r6,1260(sp)
 1012340:	003d4006 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 1012344:	d9413b17 	ldw	r5,1260(sp)
 1012348:	a0c00007 	ldb	r3,0(r20)
 101234c:	29400814 	ori	r5,r5,32
 1012350:	d9413b15 	stw	r5,1260(sp)
 1012354:	003d3b06 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 1012358:	a0c00007 	ldb	r3,0(r20)
 101235c:	003d3906 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 1012360:	20c03fcc 	andi	r3,r4,255
 1012364:	00800044 	movi	r2,1
 1012368:	18802b26 	beq	r3,r2,1012418 <___vfiprintf_internal_r+0xda4>
 101236c:	18800b36 	bltu	r3,r2,101239c <___vfiprintf_internal_r+0xd28>
 1012370:	00800084 	movi	r2,2
 1012374:	18808426 	beq	r3,r2,1012588 <___vfiprintf_internal_r+0xf14>
 1012378:	01004074 	movhi	r4,257
 101237c:	210a8d04 	addi	r4,r4,10804
 1012380:	ddc13815 	stw	r23,1248(sp)
 1012384:	10004400 	call	1000440 <strlen>
 1012388:	d8813715 	stw	r2,1244(sp)
 101238c:	00804074 	movhi	r2,257
 1012390:	108a8d04 	addi	r2,r2,10804
 1012394:	d8813c15 	stw	r2,1264(sp)
 1012398:	003ece06 	br	1011ed4 <___vfiprintf_internal_r+0x860>
 101239c:	d8800e04 	addi	r2,sp,56
 10123a0:	df000404 	addi	fp,sp,16
 10123a4:	d8813c15 	stw	r2,1264(sp)
 10123a8:	880a977a 	slli	r5,r17,29
 10123ac:	8004d0fa 	srli	r2,r16,3
 10123b0:	8806d0fa 	srli	r3,r17,3
 10123b4:	810001cc 	andi	r4,r16,7
 10123b8:	2884b03a 	or	r2,r5,r2
 10123bc:	d9413c17 	ldw	r5,1264(sp)
 10123c0:	21000c04 	addi	r4,r4,48
 10123c4:	1021883a 	mov	r16,r2
 10123c8:	297fffc4 	addi	r5,r5,-1
 10123cc:	d9413c15 	stw	r5,1264(sp)
 10123d0:	29000005 	stb	r4,0(r5)
 10123d4:	10cab03a 	or	r5,r2,r3
 10123d8:	1823883a 	mov	r17,r3
 10123dc:	283ff21e 	bne	r5,zero,10123a8 <___vfiprintf_internal_r+0xd34>
 10123e0:	d9813b17 	ldw	r6,1260(sp)
 10123e4:	3080004c 	andi	r2,r6,1
 10123e8:	1005003a 	cmpeq	r2,r2,zero
 10123ec:	103eb41e 	bne	r2,zero,1011ec0 <___vfiprintf_internal_r+0x84c>
 10123f0:	20803fcc 	andi	r2,r4,255
 10123f4:	1080201c 	xori	r2,r2,128
 10123f8:	10bfe004 	addi	r2,r2,-128
 10123fc:	00c00c04 	movi	r3,48
 1012400:	10feaf26 	beq	r2,r3,1011ec0 <___vfiprintf_internal_r+0x84c>
 1012404:	d8813c17 	ldw	r2,1264(sp)
 1012408:	10bfffc4 	addi	r2,r2,-1
 101240c:	d8813c15 	stw	r2,1264(sp)
 1012410:	10c00005 	stb	r3,0(r2)
 1012414:	003eaa06 	br	1011ec0 <___vfiprintf_internal_r+0x84c>
 1012418:	88800068 	cmpgeui	r2,r17,1
 101241c:	10000d1e 	bne	r2,zero,1012454 <___vfiprintf_internal_r+0xde0>
 1012420:	8800021e 	bne	r17,zero,101242c <___vfiprintf_internal_r+0xdb8>
 1012424:	00800244 	movi	r2,9
 1012428:	14000a36 	bltu	r2,r16,1012454 <___vfiprintf_internal_r+0xde0>
 101242c:	d9800dc4 	addi	r6,sp,55
 1012430:	df000404 	addi	fp,sp,16
 1012434:	d9813c15 	stw	r6,1264(sp)
 1012438:	d8c13c17 	ldw	r3,1264(sp)
 101243c:	80800c04 	addi	r2,r16,48
 1012440:	18800005 	stb	r2,0(r3)
 1012444:	003e9e06 	br	1011ec0 <___vfiprintf_internal_r+0x84c>
 1012448:	01000084 	movi	r4,2
 101244c:	d8000005 	stb	zero,0(sp)
 1012450:	003e8e06 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1012454:	df000404 	addi	fp,sp,16
 1012458:	dcc00e04 	addi	r19,sp,56
 101245c:	8009883a 	mov	r4,r16
 1012460:	880b883a 	mov	r5,r17
 1012464:	01800284 	movi	r6,10
 1012468:	000f883a 	mov	r7,zero
 101246c:	1007db80 	call	1007db8 <__umoddi3>
 1012470:	12000c04 	addi	r8,r2,48
 1012474:	9cffffc4 	addi	r19,r19,-1
 1012478:	8009883a 	mov	r4,r16
 101247c:	880b883a 	mov	r5,r17
 1012480:	01800284 	movi	r6,10
 1012484:	000f883a 	mov	r7,zero
 1012488:	9a000005 	stb	r8,0(r19)
 101248c:	100774c0 	call	100774c <__udivdi3>
 1012490:	1009883a 	mov	r4,r2
 1012494:	1021883a 	mov	r16,r2
 1012498:	18800068 	cmpgeui	r2,r3,1
 101249c:	1823883a 	mov	r17,r3
 10124a0:	103fee1e 	bne	r2,zero,101245c <___vfiprintf_internal_r+0xde8>
 10124a4:	1800021e 	bne	r3,zero,10124b0 <___vfiprintf_internal_r+0xe3c>
 10124a8:	00800244 	movi	r2,9
 10124ac:	113feb36 	bltu	r2,r4,101245c <___vfiprintf_internal_r+0xde8>
 10124b0:	9cffffc4 	addi	r19,r19,-1
 10124b4:	dcc13c15 	stw	r19,1264(sp)
 10124b8:	003fdf06 	br	1012438 <___vfiprintf_internal_r+0xdc4>
 10124bc:	05c04074 	movhi	r23,257
 10124c0:	bdcb7f04 	addi	r23,r23,11772
 10124c4:	003dbe06 	br	1011bc0 <___vfiprintf_internal_r+0x54c>
 10124c8:	d9013b17 	ldw	r4,1260(sp)
 10124cc:	2080004c 	andi	r2,r4,1
 10124d0:	1000421e 	bne	r2,zero,10125dc <___vfiprintf_internal_r+0xf68>
 10124d4:	d9400e04 	addi	r5,sp,56
 10124d8:	df000404 	addi	fp,sp,16
 10124dc:	d9413c15 	stw	r5,1264(sp)
 10124e0:	003e7706 	br	1011ec0 <___vfiprintf_internal_r+0x84c>
 10124e4:	d9413b17 	ldw	r5,1260(sp)
 10124e8:	2880040c 	andi	r2,r5,16
 10124ec:	10001c1e 	bne	r2,zero,1012560 <___vfiprintf_internal_r+0xeec>
 10124f0:	d9813b17 	ldw	r6,1260(sp)
 10124f4:	3080100c 	andi	r2,r6,64
 10124f8:	10001926 	beq	r2,zero,1012560 <___vfiprintf_internal_r+0xeec>
 10124fc:	3c00000b 	ldhu	r16,0(r7)
 1012500:	0023883a 	mov	r17,zero
 1012504:	39c00104 	addi	r7,r7,4
 1012508:	d9c13515 	stw	r7,1236(sp)
 101250c:	003f3706 	br	10121ec <___vfiprintf_internal_r+0xb78>
 1012510:	3c000017 	ldw	r16,0(r7)
 1012514:	0009883a 	mov	r4,zero
 1012518:	39c00104 	addi	r7,r7,4
 101251c:	0023883a 	mov	r17,zero
 1012520:	d9c13515 	stw	r7,1236(sp)
 1012524:	d8000005 	stb	zero,0(sp)
 1012528:	003e5806 	br	1011e8c <___vfiprintf_internal_r+0x818>
 101252c:	3c000017 	ldw	r16,0(r7)
 1012530:	01000044 	movi	r4,1
 1012534:	39c00104 	addi	r7,r7,4
 1012538:	0023883a 	mov	r17,zero
 101253c:	d9c13515 	stw	r7,1236(sp)
 1012540:	d8000005 	stb	zero,0(sp)
 1012544:	003e5106 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1012548:	38800017 	ldw	r2,0(r7)
 101254c:	39c00104 	addi	r7,r7,4
 1012550:	d9c13515 	stw	r7,1236(sp)
 1012554:	1023d7fa 	srai	r17,r2,31
 1012558:	1021883a 	mov	r16,r2
 101255c:	003e4906 	br	1011e84 <___vfiprintf_internal_r+0x810>
 1012560:	3c000017 	ldw	r16,0(r7)
 1012564:	0023883a 	mov	r17,zero
 1012568:	39c00104 	addi	r7,r7,4
 101256c:	d9c13515 	stw	r7,1236(sp)
 1012570:	003f1e06 	br	10121ec <___vfiprintf_internal_r+0xb78>
 1012574:	d9400317 	ldw	r5,12(sp)
 1012578:	d9000217 	ldw	r4,8(sp)
 101257c:	05c04074 	movhi	r23,257
 1012580:	bdcb8304 	addi	r23,r23,11788
 1012584:	003d4706 	br	1011aa4 <___vfiprintf_internal_r+0x430>
 1012588:	d9000e04 	addi	r4,sp,56
 101258c:	df000404 	addi	fp,sp,16
 1012590:	d9013c15 	stw	r4,1264(sp)
 1012594:	d9813617 	ldw	r6,1240(sp)
 1012598:	880a973a 	slli	r5,r17,28
 101259c:	8004d13a 	srli	r2,r16,4
 10125a0:	810003cc 	andi	r4,r16,15
 10125a4:	3109883a 	add	r4,r6,r4
 10125a8:	2884b03a 	or	r2,r5,r2
 10125ac:	21400003 	ldbu	r5,0(r4)
 10125b0:	d9013c17 	ldw	r4,1264(sp)
 10125b4:	8806d13a 	srli	r3,r17,4
 10125b8:	1021883a 	mov	r16,r2
 10125bc:	213fffc4 	addi	r4,r4,-1
 10125c0:	d9013c15 	stw	r4,1264(sp)
 10125c4:	d9813c17 	ldw	r6,1264(sp)
 10125c8:	10c8b03a 	or	r4,r2,r3
 10125cc:	1823883a 	mov	r17,r3
 10125d0:	31400005 	stb	r5,0(r6)
 10125d4:	203fef1e 	bne	r4,zero,1012594 <___vfiprintf_internal_r+0xf20>
 10125d8:	003e3906 	br	1011ec0 <___vfiprintf_internal_r+0x84c>
 10125dc:	00800c04 	movi	r2,48
 10125e0:	d9800dc4 	addi	r6,sp,55
 10125e4:	df000404 	addi	fp,sp,16
 10125e8:	d8800dc5 	stb	r2,55(sp)
 10125ec:	d9813c15 	stw	r6,1264(sp)
 10125f0:	003e3306 	br	1011ec0 <___vfiprintf_internal_r+0x84c>
 10125f4:	d9413b17 	ldw	r5,1260(sp)
 10125f8:	2880040c 	andi	r2,r5,16
 10125fc:	10002326 	beq	r2,zero,101268c <___vfiprintf_internal_r+0x1018>
 1012600:	38800017 	ldw	r2,0(r7)
 1012604:	d9813a17 	ldw	r6,1256(sp)
 1012608:	39c00104 	addi	r7,r7,4
 101260c:	11800015 	stw	r6,0(r2)
 1012610:	003c6906 	br	10117b8 <___vfiprintf_internal_r+0x144>
 1012614:	d9000217 	ldw	r4,8(sp)
 1012618:	05c04074 	movhi	r23,257
 101261c:	bdcb8304 	addi	r23,r23,11788
 1012620:	003d9d06 	br	1011c98 <___vfiprintf_internal_r+0x624>
 1012624:	0005883a 	mov	r2,zero
 1012628:	1409c83a 	sub	r4,r2,r16
 101262c:	1105803a 	cmpltu	r2,r2,r4
 1012630:	044bc83a 	sub	r5,zero,r17
 1012634:	2885c83a 	sub	r2,r5,r2
 1012638:	2021883a 	mov	r16,r4
 101263c:	1023883a 	mov	r17,r2
 1012640:	01000044 	movi	r4,1
 1012644:	00800b44 	movi	r2,45
 1012648:	d8800005 	stb	r2,0(sp)
 101264c:	003e0f06 	br	1011e8c <___vfiprintf_internal_r+0x818>
 1012650:	b009883a 	mov	r4,r22
 1012654:	a80b883a 	mov	r5,r21
 1012658:	d9800104 	addi	r6,sp,4
 101265c:	101161c0 	call	101161c <__sprint_r>
 1012660:	103da31e 	bne	r2,zero,1011cf0 <___vfiprintf_internal_r+0x67c>
 1012664:	003da106 	br	1011cec <___vfiprintf_internal_r+0x678>
 1012668:	05c04074 	movhi	r23,257
 101266c:	bdcb7f04 	addi	r23,r23,11772
 1012670:	003dc306 	br	1011d80 <___vfiprintf_internal_r+0x70c>
 1012674:	d8813b17 	ldw	r2,1260(sp)
 1012678:	a5000044 	addi	r20,r20,1
 101267c:	a0c00007 	ldb	r3,0(r20)
 1012680:	10800814 	ori	r2,r2,32
 1012684:	d8813b15 	stw	r2,1260(sp)
 1012688:	003c6e06 	br	1011844 <___vfiprintf_internal_r+0x1d0>
 101268c:	d8c13b17 	ldw	r3,1260(sp)
 1012690:	1880100c 	andi	r2,r3,64
 1012694:	10001a26 	beq	r2,zero,1012700 <___vfiprintf_internal_r+0x108c>
 1012698:	38800017 	ldw	r2,0(r7)
 101269c:	d9013a17 	ldw	r4,1256(sp)
 10126a0:	39c00104 	addi	r7,r7,4
 10126a4:	1100000d 	sth	r4,0(r2)
 10126a8:	003c4306 	br	10117b8 <___vfiprintf_internal_r+0x144>
 10126ac:	d9013c17 	ldw	r4,1264(sp)
 10126b0:	10004400 	call	1000440 <strlen>
 10126b4:	d8813715 	stw	r2,1244(sp)
 10126b8:	d8013815 	stw	zero,1248(sp)
 10126bc:	003e0506 	br	1011ed4 <___vfiprintf_internal_r+0x860>
 10126c0:	00800184 	movi	r2,6
 10126c4:	15c00836 	bltu	r2,r23,10126e8 <___vfiprintf_internal_r+0x1074>
 10126c8:	b839883a 	mov	fp,r23
 10126cc:	b800010e 	bge	r23,zero,10126d4 <___vfiprintf_internal_r+0x1060>
 10126d0:	0039883a 	mov	fp,zero
 10126d4:	01404074 	movhi	r5,257
 10126d8:	294a8604 	addi	r5,r5,10776
 10126dc:	ddc13715 	stw	r23,1244(sp)
 10126e0:	d9413c15 	stw	r5,1264(sp)
 10126e4:	003cc406 	br	10119f8 <___vfiprintf_internal_r+0x384>
 10126e8:	01004074 	movhi	r4,257
 10126ec:	210a8604 	addi	r4,r4,10776
 10126f0:	1039883a 	mov	fp,r2
 10126f4:	d9013c15 	stw	r4,1264(sp)
 10126f8:	d8813715 	stw	r2,1244(sp)
 10126fc:	003cbe06 	br	10119f8 <___vfiprintf_internal_r+0x384>
 1012700:	38800017 	ldw	r2,0(r7)
 1012704:	d9413a17 	ldw	r5,1256(sp)
 1012708:	39c00104 	addi	r7,r7,4
 101270c:	11400015 	stw	r5,0(r2)
 1012710:	003c2906 	br	10117b8 <___vfiprintf_internal_r+0x144>
 1012714:	002f883a 	mov	r23,zero
 1012718:	003c4c06 	br	101184c <___vfiprintf_internal_r+0x1d8>
 101271c:	3dc00017 	ldw	r23,0(r7)
 1012720:	39c00104 	addi	r7,r7,4
 1012724:	b83f0c0e 	bge	r23,zero,1012358 <___vfiprintf_internal_r+0xce4>
 1012728:	a0c00007 	ldb	r3,0(r20)
 101272c:	05ffffc4 	movi	r23,-1
 1012730:	003c4406 	br	1011844 <___vfiprintf_internal_r+0x1d0>

01012734 <__vfiprintf_internal>:
 1012734:	00804074 	movhi	r2,257
 1012738:	10922404 	addi	r2,r2,18576
 101273c:	2013883a 	mov	r9,r4
 1012740:	11000017 	ldw	r4,0(r2)
 1012744:	2805883a 	mov	r2,r5
 1012748:	300f883a 	mov	r7,r6
 101274c:	480b883a 	mov	r5,r9
 1012750:	100d883a 	mov	r6,r2
 1012754:	10116741 	jmpi	1011674 <___vfiprintf_internal_r>

01012758 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1012758:	defffd04 	addi	sp,sp,-12
 101275c:	df000215 	stw	fp,8(sp)
 1012760:	df000204 	addi	fp,sp,8
 1012764:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1012768:	e0bfff17 	ldw	r2,-4(fp)
 101276c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1012770:	e0bffe17 	ldw	r2,-8(fp)
 1012774:	1005003a 	cmpeq	r2,r2,zero
 1012778:	1000021e 	bne	r2,zero,1012784 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 101277c:	002af070 	cmpltui	zero,zero,43969
 1012780:	00000106 	br	1012788 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1012784:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1012788:	e037883a 	mov	sp,fp
 101278c:	df000017 	ldw	fp,0(sp)
 1012790:	dec00104 	addi	sp,sp,4
 1012794:	f800283a 	ret

01012798 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1012798:	defffd04 	addi	sp,sp,-12
 101279c:	dfc00215 	stw	ra,8(sp)
 10127a0:	df000115 	stw	fp,4(sp)
 10127a4:	df000104 	addi	fp,sp,4
 10127a8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10127ac:	e13fff17 	ldw	r4,-4(fp)
 10127b0:	10127580 	call	1012758 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10127b4:	003fff06 	br	10127b4 <_exit+0x1c>

010127b8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 10127b8:	deffff04 	addi	sp,sp,-4
 10127bc:	df000015 	stw	fp,0(sp)
 10127c0:	d839883a 	mov	fp,sp
  return 0;
 10127c4:	0005883a 	mov	r2,zero
}
 10127c8:	e037883a 	mov	sp,fp
 10127cc:	df000017 	ldw	fp,0(sp)
 10127d0:	dec00104 	addi	sp,sp,4
 10127d4:	f800283a 	ret

010127d8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 10127d8:	defffa04 	addi	sp,sp,-24
 10127dc:	dfc00515 	stw	ra,20(sp)
 10127e0:	df000415 	stw	fp,16(sp)
 10127e4:	df000404 	addi	fp,sp,16
 10127e8:	e13ffd15 	stw	r4,-12(fp)
 10127ec:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 10127f0:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 10127f4:	e0bffd17 	ldw	r2,-12(fp)
 10127f8:	10800048 	cmpgei	r2,r2,1
 10127fc:	1000301e 	bne	r2,zero,10128c0 <kill+0xe8>
  {
    switch (sig)
 1012800:	e0bffe17 	ldw	r2,-8(fp)
 1012804:	10800828 	cmpgeui	r2,r2,32
 1012808:	10002a1e 	bne	r2,zero,10128b4 <kill+0xdc>
 101280c:	e0bffe17 	ldw	r2,-8(fp)
 1012810:	1085883a 	add	r2,r2,r2
 1012814:	1087883a 	add	r3,r2,r2
 1012818:	00804074 	movhi	r2,257
 101281c:	108a0b04 	addi	r2,r2,10284
 1012820:	1885883a 	add	r2,r3,r2
 1012824:	10800017 	ldw	r2,0(r2)
 1012828:	1000683a 	jmp	r2
 101282c:	010128d4 	movui	r4,1187
 1012830:	010128b4 	movhi	r4,1186
 1012834:	010128b4 	movhi	r4,1186
 1012838:	010128ac 	andhi	r4,zero,1186
 101283c:	010128ac 	andhi	r4,zero,1186
 1012840:	010128ac 	andhi	r4,zero,1186
 1012844:	010128ac 	andhi	r4,zero,1186
 1012848:	010128b4 	movhi	r4,1186
 101284c:	010128ac 	andhi	r4,zero,1186
 1012850:	010128ac 	andhi	r4,zero,1186
 1012854:	010128ac 	andhi	r4,zero,1186
 1012858:	010128ac 	andhi	r4,zero,1186
 101285c:	010128ac 	andhi	r4,zero,1186
 1012860:	010128ac 	andhi	r4,zero,1186
 1012864:	010128ac 	andhi	r4,zero,1186
 1012868:	010128ac 	andhi	r4,zero,1186
 101286c:	010128d4 	movui	r4,1187
 1012870:	010128b4 	movhi	r4,1186
 1012874:	010128b4 	movhi	r4,1186
 1012878:	010128b4 	movhi	r4,1186
 101287c:	010128d4 	movui	r4,1187
 1012880:	010128b4 	movhi	r4,1186
 1012884:	010128b4 	movhi	r4,1186
 1012888:	010128ac 	andhi	r4,zero,1186
 101288c:	010128ac 	andhi	r4,zero,1186
 1012890:	010128ac 	andhi	r4,zero,1186
 1012894:	010128ac 	andhi	r4,zero,1186
 1012898:	010128ac 	andhi	r4,zero,1186
 101289c:	010128b4 	movhi	r4,1186
 10128a0:	010128b4 	movhi	r4,1186
 10128a4:	010128ac 	andhi	r4,zero,1186
 10128a8:	010128ac 	andhi	r4,zero,1186
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 10128ac:	0009883a 	mov	r4,zero
 10128b0:	10127980 	call	1012798 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 10128b4:	00800584 	movi	r2,22
 10128b8:	e0bffc15 	stw	r2,-16(fp)
 10128bc:	00000506 	br	10128d4 <kill+0xfc>
    }
  }

  else if (pid > 0)
 10128c0:	e0bffd17 	ldw	r2,-12(fp)
 10128c4:	10800050 	cmplti	r2,r2,1
 10128c8:	1000021e 	bne	r2,zero,10128d4 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 10128cc:	008000c4 	movi	r2,3
 10128d0:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 10128d4:	e0bffc17 	ldw	r2,-16(fp)
 10128d8:	1005003a 	cmpeq	r2,r2,zero
 10128dc:	1000071e 	bne	r2,zero,10128fc <kill+0x124>
  {
    ALT_ERRNO = status;
 10128e0:	10129180 	call	1012918 <alt_get_errno>
 10128e4:	1007883a 	mov	r3,r2
 10128e8:	e0bffc17 	ldw	r2,-16(fp)
 10128ec:	18800015 	stw	r2,0(r3)
    return -1;
 10128f0:	00bfffc4 	movi	r2,-1
 10128f4:	e0bfff15 	stw	r2,-4(fp)
 10128f8:	00000106 	br	1012900 <kill+0x128>
  }

  return 0;
 10128fc:	e03fff15 	stw	zero,-4(fp)
 1012900:	e0bfff17 	ldw	r2,-4(fp)
}
 1012904:	e037883a 	mov	sp,fp
 1012908:	dfc00117 	ldw	ra,4(sp)
 101290c:	df000017 	ldw	fp,0(sp)
 1012910:	dec00204 	addi	sp,sp,8
 1012914:	f800283a 	ret

01012918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1012918:	defffd04 	addi	sp,sp,-12
 101291c:	dfc00215 	stw	ra,8(sp)
 1012920:	df000115 	stw	fp,4(sp)
 1012924:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1012928:	00804074 	movhi	r2,257
 101292c:	10922f04 	addi	r2,r2,18620
 1012930:	10800017 	ldw	r2,0(r2)
 1012934:	1005003a 	cmpeq	r2,r2,zero
 1012938:	1000061e 	bne	r2,zero,1012954 <alt_get_errno+0x3c>
 101293c:	00804074 	movhi	r2,257
 1012940:	10922f04 	addi	r2,r2,18620
 1012944:	10800017 	ldw	r2,0(r2)
 1012948:	103ee83a 	callr	r2
 101294c:	e0bfff15 	stw	r2,-4(fp)
 1012950:	00000306 	br	1012960 <alt_get_errno+0x48>
 1012954:	00804074 	movhi	r2,257
 1012958:	1098e704 	addi	r2,r2,25500
 101295c:	e0bfff15 	stw	r2,-4(fp)
 1012960:	e0bfff17 	ldw	r2,-4(fp)
}
 1012964:	e037883a 	mov	sp,fp
 1012968:	dfc00117 	ldw	ra,4(sp)
 101296c:	df000017 	ldw	fp,0(sp)
 1012970:	dec00204 	addi	sp,sp,8
 1012974:	f800283a 	ret
 1012978:	01011100 	call	101110 <__alt_mem_onchip_memory2_0+0x101110>
